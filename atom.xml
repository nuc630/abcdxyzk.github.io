<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-02T12:22:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[crash kmem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem/"/>
    <updated>2015-07-02T10:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem</id>
    <content type="html"><![CDATA[<h4>一、kmem -s 查看slab</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crash&gt; kmem -s
</span><span class='line'>CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
</span><span class='line'>...
</span><span class='line'>ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
</span><span class='line'>ffff8808135e1400 sock_inode_cache         704        298       470     94     4k
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h4>二、kmem -S 查看slab中详细内容</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crash&gt; kmem -S request_sock_TCP
</span><span class='line'>CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
</span><span class='line'>ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
</span><span class='line'>SLAB              MEMORY            TOTAL  ALLOCATED  FREE
</span><span class='line'>ffff88078b9c6000  ffff88078b9c60c0     30          2    28
</span><span class='line'>FREE / [ALLOCATED]
</span><span class='line'>   ffff88078b9c60c0
</span><span class='line'>   ffff88078b9c6140
</span><span class='line'>   ffff88078b9c61c0
</span><span class='line'>   ffff88078b9c6240
</span><span class='line'>   ffff88078b9c62c0
</span><span class='line'>   ffff88078b9c6340
</span><span class='line'>   ffff88078b9c63c0
</span><span class='line'>   ffff88078b9c6440
</span><span class='line'>   ffff88078b9c64c0
</span><span class='line'>   ffff88078b9c6540
</span><span class='line'>   ffff88078b9c65c0
</span><span class='line'>   ffff88078b9c6640
</span><span class='line'>   ffff88078b9c66c0
</span><span class='line'>  [ffff88078b9c6740]
</span><span class='line'>  [ffff88078b9c67c0]
</span><span class='line'>   ffff88078b9c6840
</span><span class='line'>   ffff88078b9c68c0
</span><span class='line'>   ffff88078b9c6940
</span><span class='line'>   ffff88078b9c69c0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>request_sock_TCP 是 struct request_sock 类型，所以对于已分配的地址可以直接查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>crash&gt; struct request_sock 0xffff88078b9c6740
</span><span class='line'>struct request_sock {
</span><span class='line'>  dl_next = 0x0, 
</span><span class='line'>  mss = 1460, 
</span><span class='line'>  retrans = 0 '\000', 
</span><span class='line'>  cookie_ts = 0 '\000', 
</span><span class='line'>  window_clamp = 8388480, 
</span><span class='line'>  rcv_wnd = 14600, 
</span><span class='line'>  ts_recent = 0, 
</span><span class='line'>  expires = 4302901768, 
</span><span class='line'>  rsk_ops = 0xffffffff81c0e840 &lt;tcp_request_sock_ops&gt;, 
</span><span class='line'>  sk = 0xffff880771dad800, 
</span><span class='line'>  secid = 3039208612, 
</span><span class='line'>  peer_secid = 3672081930
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.csdn.net/u011279649/article/details/17529315">http://blog.csdn.net/u011279649/article/details/17529315</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看所有tcp连接]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info/"/>
    <updated>2015-07-02T10:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info</id>
    <content type="html"><![CDATA[<p><a href="http://roclinux.cn/?p=2418">http://roclinux.cn/?p=2418</a></p>

<p><a href="http://blog.csdn.net/justlinux2010/article/details/21028797">http://blog.csdn.net/justlinux2010/article/details/21028797</a></p>

<h4>一、查看连接</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>netstat -an</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ss</span></code></pre></td></tr></table></div></figure>


<h4>二、查看连接详细信息</h4>

<p>上面的命令也是从<code>/proc/net/tcp</code>和<code>/proc/net/tcp6</code>中读取的</p>

<p>/proc/net/tcp中的内容由tcp4_seq_show()函数打印，该函数中有三种打印形式，我们这里这只列出状态是TCP_SEQ_STATE_LISTENING或TCP_SEQ_STATE_ESTABLISHED的情况，如下所示：</p>

<p><img src="http://abcdxyzk.github.io/images/kernel/2015-07-02.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统典型bootloader分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader/"/>
    <updated>2015-06-18T11:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader</id>
    <content type="html"><![CDATA[<p><a href="http://security.tencent.com/index.php/blog/msg/38">http://security.tencent.com/index.php/blog/msg/38</a></p>

<h4>1、bootloader是什么？</h4>

<p>  简单地说，bootloader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核准备好正确的环境。</p>

<p>  Android系统基于Linux，所以bootloader部分也是与传统的嵌入式设备上运行的Linux没有什么区别。由于除Google外的大部分Android厂商都没有提供bootloader的源代码，所以分析手机设备的bootloader需要使用逆向工程的手段，当然由于有了Google官方的开源bootloader代码做参考，能让分析工作轻松不少。本文中使用的分析工具为IDA 6.5，针对的手机设备为N9006，固件版本为N9006ZCUDMK2。</p>

<h4>2、bootloader典型结构</h4>

<p>  这部分会以高通MSM8960为例子介绍下Bootloader的典型结构。</p>

<p>  高通MSM8960中包含多个运算单元，分别负责引导过程中的不同功能，sbl1的代码负责加载sbl2，sbl2加载tz和sbl3，sbl3加载apppsbl，appsbl加载HLOS。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-1.png" alt="" /><br/>
图1 SecureBoot 3.0 的Code Flow</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-2.png" alt="" /><br/>
图2 MSM8960引导过程简化流程图</p>

<h4>3、Note3的bootloader结构分析</h4>

<p>  国行版Note3（N9006）使用的CPU是MSM8974，它的bootloader结构与典型的MSM8960差不多，最大的区别就是把sbl1,sbl2,sbl3整合进了一个文件sbl1中，TrustZone和APPSBL都由sbl1进行验证和加载，以下为几个主要功能的加载代码分析。</p>

<p>  sbl1的功能是对硬件进行初始化并加载其他模块，需要加载的模块信息按顺序保存在sbl1中，对应每个模块的数据是一段大小为0x64字节的模块信息数据内，sbl1中有一个循环负责验证和加载所有需要的其他模块（tz，rpm，wdt，appsbl），加载代码会根据模块信息内的数据调用不同的加载器加载和验证的代码，具体代码如下图。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-3.jpg" alt="" /><br/>
图3 sbl1中循环加载全部模块的代码</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-4.jpg" alt="" /><br/>
图4 sbl1中对待加载模块进行验证</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-5.jpg" alt="" /><br/>
图5 TZ模块信息数据</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-6.jpg" alt="" /><br/>
图6 APPSBL模块信息数据</p>

<p>  固件包里的tz.mbn是加载在TrustZone中的模块，模块格式为elf，这个模块中的代码和系统其他模块代码运行在互相隔离的区域内，权限也比其他模块更高，三星KNOX的很多底层安全特性也是在这部分中实现，关于TrustZone的更多资料可以参考arm官方的说明。</p>

<p>  固件包里的aboot.mbn就是APPSBL模块，模块格式为bin，文件最前面的0x28字节的头部描述了bin的加载地址等信息，后面的数据就是实际加载到内存中的映像，整个bootloader中这个模块的代码量最大（很大一部分是openssl的代码），linux内核的验证和加载（正常启动和Recovery模式），ODIN模式等等代码都包含在这个模块内。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-7.jpg" alt="" /><br/>
图7 aboot.mbn文件头</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-8.jpg" alt="" /><br/>
图8 根据按键和共享内存中的数据确定引导模式</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-9.jpg" alt="" /><br/>
图9 三星特有的ODIN刷机模式代码</p>

<h4>4、Note3的bootloader中KNOX系统的底层代码初步分析</h4>

<p>  Note3提供了一个企业安全套装KNOX，这个系统包含了底层的Customizable Secure Boot和TrustZone-based Integrity Measurement Architecture(TIMA，目前为2.0版本)，系统层的SecurityEnhancements for Android（SE-Android）和应用层的Samsung KNOX Container，Encrypted File System（EFS），Virtual Private Network（VPN），其中Customizable Secure Boot和TIMA的代码包含在Bootloader的aboot.mbn，tz.mbn，NON-HLOS.bin中，功能为保障加载的内核在加载时和运行期的完整性。</p>

<p>  通过前面的分析，我们已经知道了tz.mbn和aboot.mbn在加载时已经由sbl1验证过完整性，tz.mbn加载后会在CPU的安全环境下运行，从高权限的隔离区域内对系统的完整性进行监控，而负责加载android内核的aboot.mbn中包含对内核的完整性检测，三星在bootloader每一部分的结尾都会加上自己的签名，加载前会对签名进行验证，以保障系统未被修改过。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-10.jpg" alt="" /><br/>
图10  tz.mbn中初始化TIMA系统的的代码</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-11.jpg" alt="" /><br/>
图11 aboot.mbn中对内核是否使用SEANDROID进行验证</p>

<p>  当任何一部分检测代码发现系统异常状况后，就会调用SMC指令通知TrustZone中运行的TIMA系统设置fuse为系统完整性被破坏，此fuse数据一旦被设置后没有办法被重置，系统也无法再次进入KNOX系统。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-12.jpg" alt="" /><br/>
图12 加载内核前对内核签名和TIMA的测点进行验证</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-13.jpg" alt="" /><br/>
图13 系统完整性检测失败后设置fuse值</p>

<p>  当以上所有检测都通过后，bootloader会把内核复制到指定的内存地址并跳到内核的入口继续执行，到此，就进入了系统内核代码的范畴，bootloader的使命也就完成了，跳到linux内核入口的代码见图14。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-14.jpg" alt="" /><br/>
图14 内核加载和校验完成后跳到内核的入口点继续执行</p>

<p>  另外，除了这两个模块外Modem固件相关的NON-HLOS.bin中也有大量TIMA系统相关的文件，由于TIMA系统包含大量硬件相关代码（使用三星猎户座CPU的N900中TIMA系统的实现与高通CPU的N9006差别很大），如果需要进行进一步的分析TIMA在modem中的行为，需要对TrustZone，modem工作方式等有更多了解。</p>

<p><img src="http://abcdxyzk.github.io/images/android/2015-06-18-15.jpg" alt="" /><br/>
图15 NON-HLOS.bin中包含的大量TIMA相关文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPV6 实现]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/18/kernel-net-ipv6-code/"/>
    <updated>2015-06-18T10:44:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/18/kernel-net-ipv6-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/super-king/p/ipv6_implement.html">http://www.cnblogs.com/super-king/p/ipv6_implement.html</a></p>

<p>code extract from 2.6.24.
在文件 net/ipv6/af_inet6.c 中包含了ipv6协议初始化的主函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int __init inet6_init(void)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *dummy_skb;
</span><span class='line'>    struct list_head *r;
</span><span class='line'>    int err;
</span><span class='line'>    //inet6_skb_parm必须小于等于skb中的cb
</span><span class='line'>    BUILD_BUG_ON(sizeof(struct inet6_skb_parm) &gt; sizeof(dummy_skb-&gt;cb));
</span><span class='line'>
</span><span class='line'>    //初始化tcpv6_prot结构中的一些与slab相关的字段，然后添加到 proto_list 全局连表
</span><span class='line'>    err = proto_register(&tcpv6_prot, 1);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out;
</span><span class='line'>    //udp协议同上
</span><span class='line'>    err = proto_register(&udpv6_prot, 1);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_unregister_tcp_proto;
</span><span class='line'>    //udp-lite传输协议，主要用于多媒体传输，参考kernel中的 Documentation/networking/udplite.txt
</span><span class='line'>    err = proto_register(&udplitev6_prot, 1);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_unregister_udp_proto;
</span><span class='line'>    //原始套接字同上
</span><span class='line'>    err = proto_register(&rawv6_prot, 1);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_unregister_udplite_proto;
</span><span class='line'>
</span><span class='line'>    /* Register the socket-side information for inet6_create.  */
</span><span class='line'>    for(r = &inetsw6[0]; r &lt; &inetsw6[SOCK_MAX]; ++r) //初始化一个协议连表数组
</span><span class='line'>        INIT_LIST_HEAD(r);
</span><span class='line'>    /* We MUST register RAW sockets before we create the ICMP6, IGMP6, or NDISC control sockets. */
</span><span class='line'>    //根据参数数据结构中标识的协议类型，把这数据结构添加到上面的协议连表数组中
</span><span class='line'>    inet6_register_protosw(&rawv6_protosw);
</span><span class='line'>
</span><span class='line'>    /* Register the family here so that the init calls below will be able to create sockets. (?? is this dangerous ??) */
</span><span class='line'>    //注册ipv6协议族，主要是注册socket创建函数
</span><span class='line'>    err = sock_register(&inet6_family_ops);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_unregister_raw_proto;
</span><span class='line'>
</span><span class='line'>    /* Initialise ipv6 mibs */
</span><span class='line'>    err = init_ipv6_mibs(); //所有ipv6相关的统计信息
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_unregister_sock;
</span><span class='line'>    /* ipngwg API draft makes clear that the correct semantics for TCP and UDP is to consider one TCP and UDP instance 
</span><span class='line'>     * in a host availiable by both INET and INET6 APIs and able to communicate via both network protocols.
</span><span class='line'>     */
</span><span class='line'>#ifdef CONFIG_SYSCTL
</span><span class='line'>    ipv6_sysctl_register(); // ipv6协议proc条件项初始化
</span><span class='line'>#endif
</span><span class='line'>    //icmp协议注册
</span><span class='line'>    err = icmpv6_init(&inet6_family_ops);
</span><span class='line'>    if (err)
</span><span class='line'>        goto icmp_fail;
</span><span class='line'>    //邻居协议（arp）初始化       
</span><span class='line'>    err = ndisc_init(&inet6_family_ops);
</span><span class='line'>    if (err)
</span><span class='line'>        goto ndisc_fail;
</span><span class='line'>    //igmp协议初始化       
</span><span class='line'>    err = igmp6_init(&inet6_family_ops);
</span><span class='line'>    if (err)
</span><span class='line'>        goto igmp_fail;
</span><span class='line'>    //ipv6协议相关的 netfilter 初始化     
</span><span class='line'>    err = ipv6_netfilter_init();
</span><span class='line'>    if (err)
</span><span class='line'>        goto netfilter_fail;
</span><span class='line'>
</span><span class='line'>    /* Create /proc/foo6 entries. */
</span><span class='line'>#ifdef CONFIG_PROC_FS //注册/proc/中协议统计输出项
</span><span class='line'>    err = -ENOMEM;
</span><span class='line'>    if (raw6_proc_init())
</span><span class='line'>        goto proc_raw6_fail;
</span><span class='line'>    if (tcp6_proc_init())
</span><span class='line'>        goto proc_tcp6_fail;
</span><span class='line'>    if (udp6_proc_init())
</span><span class='line'>        goto proc_udp6_fail;
</span><span class='line'>    if (udplite6_proc_init())
</span><span class='line'>        goto proc_udplite6_fail;
</span><span class='line'>    if (ipv6_misc_proc_init())
</span><span class='line'>        goto proc_misc6_fail;
</span><span class='line'>    if (ac6_proc_init())
</span><span class='line'>        goto proc_anycast6_fail;
</span><span class='line'>    if (if6_proc_init())
</span><span class='line'>        goto proc_if6_fail;
</span><span class='line'>#endif
</span><span class='line'>    ip6_route_init(); //ipv6 路由初始化
</span><span class='line'>    ip6_flowlabel_init();//ipv6 中流标记，注册了输出流标记的 proc
</span><span class='line'>
</span><span class='line'>    //rtnetlink相关部分和路由模板中一些字段和其他一些功能的初始化
</span><span class='line'>    err = addrconf_init();
</span><span class='line'>    if (err)
</span><span class='line'>        goto addrconf_fail;
</span><span class='line'>    /* Init v6 extension headers. */
</span><span class='line'>    //ipv6 新添加的扩展头初始化，参考ipv6介绍
</span><span class='line'>    ipv6_rthdr_init();
</span><span class='line'>    ipv6_frag_init();
</span><span class='line'>    ipv6_nodata_init();
</span><span class='line'>    ipv6_destopt_init();
</span><span class='line'>
</span><span class='line'>    /* Init v6 transport protocols. */
</span><span class='line'>    //最主要的传输层协议初始化
</span><span class='line'>    udpv6_init();
</span><span class='line'>    udplitev6_init();
</span><span class='line'>    tcpv6_init();
</span><span class='line'>
</span><span class='line'>    //最后注册ipv6协议，注册协议处理函数
</span><span class='line'>    ipv6_packet_init();
</span><span class='line'>    err = 0;
</span><span class='line'>out:
</span><span class='line'>    return err;
</span><span class='line'>    ...... //下面就是错误处理的过程
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>下面我们主要看ipv6协议部分流程，其他部分在各自相关文章中介绍。</p>

<p>ipv6扩展头，路由包头注册</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void __init ipv6_rthdr_init(void)
</span><span class='line'>{
</span><span class='line'>    if (inet6_add_protocol(&rthdr_protocol, IPPROTO_ROUTING) &lt; 0)
</span><span class='line'>        printk(KERN_ERR "ipv6_rthdr_init: Could not register protocol\n");
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>ipv6扩展头，分片包头注册</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void __init ipv6_frag_init(void)
</span><span class='line'>{
</span><span class='line'>    if (inet6_add_protocol(&frag_protocol, IPPROTO_FRAGMENT) &lt; 0)
</span><span class='line'>        printk(KERN_ERR "ipv6_frag_init: Could not register protocol\n");
</span><span class='line'>
</span><span class='line'>    ip6_frags.ctl = &ip6_frags_ctl;
</span><span class='line'>    ip6_frags.hashfn = ip6_hashfn;
</span><span class='line'>    ip6_frags.constructor = ip6_frag_init;
</span><span class='line'>    ip6_frags.destructor = NULL;
</span><span class='line'>    ip6_frags.skb_free = NULL;
</span><span class='line'>    ip6_frags.qsize = sizeof(struct frag_queue);
</span><span class='line'>    ip6_frags.match = ip6_frag_match;
</span><span class='line'>    ip6_frags.frag_expire = ip6_frag_expire;
</span><span class='line'>    inet_frags_init(&ip6_frags);
</span><span class='line'>}
</span><span class='line'>void __init ipv6_nodata_init(void)
</span><span class='line'>{
</span><span class='line'>    if (inet6_add_protocol(&nodata_protocol, IPPROTO_NONE) &lt; 0)
</span><span class='line'>        printk(KERN_ERR "ipv6_nodata_init: Could not register protocol\n");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ipv6扩展头，目的选项包头注册</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void __init ipv6_destopt_init(void)
</span><span class='line'>{
</span><span class='line'>    if (inet6_add_protocol(&destopt_protocol, IPPROTO_DSTOPTS) &lt; 0)
</span><span class='line'>        printk(KERN_ERR "ipv6_destopt_init: Could not register protocol\n");
</span><span class='line'>}
</span><span class='line'>    注册ipv6协议处理函数
</span><span class='line'>void __init ipv6_packet_init(void)
</span><span class='line'>{
</span><span class='line'>    dev_add_pack(&ipv6_packet_type);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当netif_receive_skb函数向上层递交skb时会根据协议类型调用相关的协议处理函数，那么就会调用到 ipv6_rcv函数了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct packet_type ipv6_packet_type = {
</span><span class='line'>    .type = __constant_htons(ETH_P_IPV6),
</span><span class='line'>    .func = ipv6_rcv,
</span><span class='line'>    .gso_send_check = ipv6_gso_send_check,
</span><span class='line'>    .gso_segment = ipv6_gso_segment,
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>ipv6协议处理函数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)
</span><span class='line'>{
</span><span class='line'>    struct ipv6hdr *hdr;
</span><span class='line'>    u32             pkt_len;
</span><span class='line'>    struct inet6_dev *idev;
</span><span class='line'>
</span><span class='line'>    if (dev-&gt;nd_net != &init_net) {
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>    //mac地址是其他主机的包
</span><span class='line'>    if (skb-&gt;pkt_type == PACKET_OTHERHOST) {
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>    rcu_read_lock();
</span><span class='line'>    //获取ipv6相关的配置结构
</span><span class='line'>    idev = __in6_dev_get(skb-&gt;dev);
</span><span class='line'>
</span><span class='line'>    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INRECEIVES);
</span><span class='line'>    //是否共享，如果是，新clone一个
</span><span class='line'>    if ((skb = skb_share_check(skb, GFP_ATOMIC)) == NULL) {
</span><span class='line'>        IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDISCARDS);
</span><span class='line'>        rcu_read_unlock();
</span><span class='line'>        goto out;
</span><span class='line'>    }
</span><span class='line'>    //清空保存扩展头解析结果的数据结构
</span><span class='line'>    memset(IP6CB(skb), 0, sizeof(struct inet6_skb_parm));
</span><span class='line'>
</span><span class='line'>    //保存接收这个数据包的设备索引
</span><span class='line'>    IP6CB(skb)-&gt;iif = skb-&gt;dst ? ip6_dst_idev(skb-&gt;dst)-&gt;dev-&gt;ifindex : dev-&gt;ifindex;
</span><span class='line'>
</span><span class='line'>    //有足够的头长度，ipv6是40字节
</span><span class='line'>    if (unlikely(!pskb_may_pull(skb, sizeof(*hdr))))
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    hdr = ipv6_hdr(skb); //获取头
</span><span class='line'>
</span><span class='line'>    if (hdr-&gt;version != 6) //验证版本
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    //传输头（扩展头）在网络头后面
</span><span class='line'>    skb-&gt;transport_header = skb-&gt;network_header + sizeof(*hdr);
</span><span class='line'>    //保存下一个扩展头协议在ipv6头结构中的偏移
</span><span class='line'>    IP6CB(skb)-&gt;nhoff = offsetof(struct ipv6hdr, nexthdr);
</span><span class='line'>    pkt_len = ntohs(hdr-&gt;payload_len); //ipv6负载数据长度
</span><span class='line'>
</span><span class='line'>    /* pkt_len may be zero if Jumbo payload option is present */
</span><span class='line'>    if (pkt_len || hdr-&gt;nexthdr != NEXTHDR_HOP) { //没有使用扩展头逐个跳段选项
</span><span class='line'>        if (pkt_len + sizeof(struct ipv6hdr) &gt; skb-&gt;len) { //数据长度不对
</span><span class='line'>            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INTRUNCATEDPKTS);
</span><span class='line'>            goto drop;
</span><span class='line'>        }
</span><span class='line'>        //如果skb-&gt;len &gt; (pkt_len + sizeof(struct ipv6hdr))试着缩小skb-&gt;len的长度
</span><span class='line'>        //相对ipv4来说简单多了，自己看吧
</span><span class='line'>        if (pskb_trim_rcsum(skb, pkt_len + sizeof(struct ipv6hdr))) {
</span><span class='line'>            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>            goto drop;
</span><span class='line'>        }
</span><span class='line'>        hdr = ipv6_hdr(skb); //重新获取ip头
</span><span class='line'>    }
</span><span class='line'>    if (hdr-&gt;nexthdr == NEXTHDR_HOP) { //使用了扩展头逐个跳段选项
</span><span class='line'>        if (ipv6_parse_hopopts(skb) &lt; 0) {//处理这个选项
</span><span class='line'>            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>            rcu_read_unlock();
</span><span class='line'>            return 0;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    //进入ipv6的netfilter然后调用ip6_rcv_finish
</span><span class='line'>    return NF_HOOK(PF_INET6,NF_IP6_PRE_ROUTING, skb, dev, NULL, ip6_rcv_finish);
</span><span class='line'>err:
</span><span class='line'>    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>drop:
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>out:
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>解析扩展头逐个跳段中的巨量负载选项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int ipv6_parse_hopopts(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct inet6_skb_parm *opt = IP6CB(skb); //获取扩展头结果结构
</span><span class='line'>    /* skb_network_header(skb) is equal to skb-&gt;data, and skb_network_header_len(skb) is always equal to
</span><span class='line'>     * sizeof(struct ipv6hdr) by definition of hop-by-hop options.
</span><span class='line'>     */
</span><span class='line'>    //验证数据有足够的长度
</span><span class='line'>    if (!pskb_may_pull(skb, sizeof(struct ipv6hdr) + 8) || !pskb_may_pull(skb, (sizeof(struct ipv6hdr) +
</span><span class='line'>                    //下面的意思是取得扩展首部中的长度
</span><span class='line'>                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    opt-&gt;hop = sizeof(struct ipv6hdr); //40字节
</span><span class='line'>    if (ip6_parse_tlv(tlvprochopopt_lst, skb)) { //实际的解析工作
</span><span class='line'>        //把传输头移动到扩展首部之后
</span><span class='line'>        skb-&gt;transport_header += (skb_transport_header(skb)[1] + 1) &lt;&lt; 3;
</span><span class='line'>        opt = IP6CB(skb);
</span><span class='line'>        opt-&gt;nhoff = sizeof(struct ipv6hdr); //进行了ipv6扩展头解析，保存下一个扩展头协议字段的偏移
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>解析tlv编码的扩展选项头</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ip6_parse_tlv(struct tlvtype_proc *procs, struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct tlvtype_proc *curr;
</span><span class='line'>    const unsigned char *nh = skb_network_header(skb); //获取网络头
</span><span class='line'>    int off = skb_network_header_len(skb); //获取网络头长度
</span><span class='line'>    int len = (skb_transport_header(skb)[1] + 1) &lt;&lt; 3; //首部扩展头长度
</span><span class='line'>
</span><span class='line'>    if (skb_transport_offset(skb) + len &gt; skb_headlen(skb)) //长度错误
</span><span class='line'>        goto bad;
</span><span class='line'>    off += 2; //跳过下一个首部和首部扩展长度这两个字节
</span><span class='line'>    len -= 2;
</span><span class='line'>
</span><span class='line'>    while (len &gt; 0) {
</span><span class='line'>        int optlen = nh[off + 1] + 2; //获取选项数据长度 + 2 (2是选项类型和选项数据长度两字节)
</span><span class='line'>        switch (nh[off]) { //选项类型
</span><span class='line'>            case IPV6_TLV_PAD0: //Pad1选项
</span><span class='line'>                optlen = 1;
</span><span class='line'>                break;
</span><span class='line'>            case IPV6_TLV_PADN://PadN选项
</span><span class='line'>                break;
</span><span class='line'>            default: //其他选项
</span><span class='line'>                if (optlen &gt; len)
</span><span class='line'>                    goto bad;
</span><span class='line'>
</span><span class='line'>                for (curr = procs; curr-&gt;type &gt;= 0; curr++) {
</span><span class='line'>                    if (curr-&gt;type == nh[off]) { //类型匹配，调用参数函数处理，参考下面ipv6选项处理
</span><span class='line'>                        /* type specific length/alignment checks will be performed in the func(). */
</span><span class='line'>                        if (curr-&gt;func(skb, off) == 0)
</span><span class='line'>                            return 0;
</span><span class='line'>                        break;
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>                if (curr-&gt;type &lt; 0) {
</span><span class='line'>                    if (ip6_tlvopt_unknown(skb, off) == 0) //处理未知选项
</span><span class='line'>                        return 0;
</span><span class='line'>                }
</span><span class='line'>                break;
</span><span class='line'>        }
</span><span class='line'>        off += optlen; //偏移增加，这样到下一个选项
</span><span class='line'>        len -= optlen; //长度递减
</span><span class='line'>    }
</span><span class='line'>    if (len == 0)
</span><span class='line'>        return 1; //正确解析完毕
</span><span class='line'>bad:
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>处理未知的选项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ip6_tlvopt_unknown(struct sk_buff *skb, int optoff)
</span><span class='line'>{
</span><span class='line'>    //根据选项类型标识符的要求进行处理
</span><span class='line'>    switch ((skb_network_header(skb)[optoff] & 0xC0) &gt;&gt; 6) {
</span><span class='line'>        case 0: /* ignore */
</span><span class='line'>            return 1;
</span><span class='line'>        case 1: /* drop packet */
</span><span class='line'>            break;
</span><span class='line'>        case 3: /* Send ICMP if not a multicast address and drop packet */
</span><span class='line'>            /* Actually, it is redundant check. icmp_send will recheck in any case. */
</span><span class='line'>            if (ipv6_addr_is_multicast(&ipv6_hdr(skb)-&gt;daddr)) //目的是多播地址
</span><span class='line'>                break;
</span><span class='line'>        case 2: /* send ICMP PARM PROB regardless and drop packet */
</span><span class='line'>            //给包的源地址发送一个 ICMP "参数存在问题", 编码 2 的报文, 指针指向无法识别的选项类型
</span><span class='line'>            icmpv6_param_prob(skb, ICMPV6_UNK_OPTION, optoff);
</span><span class='line'>            return 0;
</span><span class='line'>    }
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>到这需要解释一下，上面解析ipv6选项只是解析了第一层的扩展头，在后面可能还有其他扩展头会在后面解析。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>inline int ip6_rcv_finish( struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    if (skb-&gt;dst == NULL) //没有路由，进行路由查找
</span><span class='line'>        ip6_route_input(skb); //路由部分将在路由实现文章中介绍
</span><span class='line'>
</span><span class='line'>    return dst_input(skb);
</span><span class='line'>}
</span><span class='line'>static inline int dst_input(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    int err;
</span><span class='line'>    for (;;) {
</span><span class='line'>        err = skb-&gt;dst-&gt;input(skb); //调用路由的输入函数
</span><span class='line'>        if (likely(err == 0))
</span><span class='line'>            return err;
</span><span class='line'>
</span><span class='line'>        /* Oh, Jamal... Seems, I will not forgive you this mess. :-) */
</span><span class='line'>        if (unlikely(err != NET_XMIT_BYPASS))
</span><span class='line'>            return err;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>现在我们假设包是到本地的，那么上面的input函数就是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int ip6_input(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    //进入ipv6 netfilter NF_IP6_LOCAL_IN hook 然后调用 ip6_input_finish
</span><span class='line'>    return NF_HOOK(PF_INET6, NF_IP6_LOCAL_IN, skb, skb-&gt;dev, NULL, ip6_input_finish);
</span><span class='line'>}
</span><span class='line'>static int ip6_input_finish(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct inet6_protocol *ipprot;
</span><span class='line'>    struct sock *raw_sk;
</span><span class='line'>    unsigned int nhoff;
</span><span class='line'>    int nexthdr;
</span><span class='line'>    u8 hash;
</span><span class='line'>    struct inet6_dev *idev;
</span><span class='line'>
</span><span class='line'>    /* Parse extension headers */
</span><span class='line'>    rcu_read_lock();
</span><span class='line'>resubmit:
</span><span class='line'>    idev = ip6_dst_idev(skb-&gt;dst);
</span><span class='line'>    //将skb-&gt;data指针移动到传输层头
</span><span class='line'>    if (!pskb_pull(skb, skb_transport_offset(skb)))
</span><span class='line'>        goto discard;
</span><span class='line'>
</span><span class='line'>    nhoff = IP6CB(skb)-&gt;nhoff;
</span><span class='line'>    nexthdr = skb_network_header(skb)[nhoff];//下一个扩展头协议
</span><span class='line'>
</span><span class='line'>    //处理原始sock
</span><span class='line'>    raw_sk = sk_head(&raw_v6_htable[nexthdr & (MAX_INET_PROTOS - 1)]);
</span><span class='line'>    if (raw_sk && !ipv6_raw_deliver(skb, nexthdr))
</span><span class='line'>        raw_sk = NULL;
</span><span class='line'>
</span><span class='line'>    //向上层协议栈递交数据，看初始化时注册的一些协议，主要是tcp，udp等，还包括一些ip扩展头的处理
</span><span class='line'>    hash = nexthdr & (MAX_INET_PROTOS - 1);
</span><span class='line'>    if ((ipprot = rcu_dereference(inet6_protos[hash])) != NULL) {
</span><span class='line'>        int ret;
</span><span class='line'>        if (ipprot-&gt;flags & INET6_PROTO_FINAL) {
</span><span class='line'>            struct ipv6hdr *hdr;
</span><span class='line'>            /* Free reference early: we don't need it any more,                        
</span><span class='line'>               and it may hold ip_conntrack module loaded indefinitely. */
</span><span class='line'>            nf_reset(skb);
</span><span class='line'>
</span><span class='line'>            skb_postpull_rcsum(skb, skb_network_header(skb), skb_network_header_len(skb));
</span><span class='line'>            hdr = ipv6_hdr(skb);
</span><span class='line'>            if (ipv6_addr_is_multicast(&hdr-&gt;daddr) && !ipv6_chk_mcast_addr(skb-&gt;dev, &hdr-&gt;daddr, &hdr-&gt;saddr)
</span><span class='line'>                    && !ipv6_is_mld(skb, nexthdr))
</span><span class='line'>                goto discard;
</span><span class='line'>        }
</span><span class='line'>        //处理 IPSEC v6 的相关部分
</span><span class='line'>        if (!(ipprot-&gt;flags & INET6_PROTO_NOPOLICY) && !xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb))
</span><span class='line'>            goto discard;
</span><span class='line'>
</span><span class='line'>        ret = ipprot-&gt;handler(skb); //上层协议处理，看下面ipv6扩展头处理
</span><span class='line'>        if (ret &gt; 0)
</span><span class='line'>            goto resubmit; //重新处理
</span><span class='line'>        else if (ret == 0)
</span><span class='line'>            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDELIVERS);
</span><span class='line'>    } else { //没有找到上层处理函数
</span><span class='line'>        if (!raw_sk) {
</span><span class='line'>            if (xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb)) {
</span><span class='line'>                IP6_INC_STATS_BH(idev, IPSTATS_MIB_INUNKNOWNPROTOS);
</span><span class='line'>                icmpv6_send(skb, ICMPV6_PARAMPROB, ICMPV6_UNK_NEXTHDR, nhoff, skb-&gt;dev);
</span><span class='line'>            }
</span><span class='line'>        } else
</span><span class='line'>            IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDELIVERS);
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>    }
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    return 0;
</span><span class='line'>discard:
</span><span class='line'>    IP6_INC_STATS_BH(idev, IPSTATS_MIB_INDISCARDS);
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ipv6选项处理</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct tlvtype_proc tlvprochopopt_lst[] = {
</span><span class='line'>    {
</span><span class='line'>        .type   = IPV6_TLV_ROUTERALERT,
</span><span class='line'>        .func   = ipv6_hop_ra,
</span><span class='line'>    },
</span><span class='line'>    {
</span><span class='line'>        .type   = IPV6_TLV_JUMBO,
</span><span class='line'>        .func   = ipv6_hop_jumbo,
</span><span class='line'>    },
</span><span class='line'>    { -1, }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>解析路由警告选项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ipv6_hop_ra(struct sk_buff *skb, int optoff)
</span><span class='line'>{
</span><span class='line'>    const unsigned char *nh = skb_network_header(skb); //获取网络头
</span><span class='line'>
</span><span class='line'>    if (nh[optoff + 1] == 2) { //路由警告选项长度必须是2 ? rfc 要求是 4
</span><span class='line'>        IP6CB(skb)-&gt;ra = optoff; //记录警告类型
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    LIMIT_NETDEBUG(KERN_DEBUG "ipv6_hop_ra: wrong RA length %d\n", nh[optoff + 1]);
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>解析jumbo frame选项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ipv6_hop_jumbo(struct sk_buff *skb, int optoff)
</span><span class='line'>{
</span><span class='line'>    const unsigned char *nh = skb_network_header(skb);
</span><span class='line'>    u32 pkt_len;
</span><span class='line'>    //选项数据长度必须是4，选项类型必须是 0xc2， ＆3 后必须是2
</span><span class='line'>    if (nh[optoff + 1] != 4 || (optoff & 3) != 2) {
</span><span class='line'>        LIMIT_NETDEBUG(KERN_DEBUG "ipv6_hop_jumbo: wrong jumbo opt length/alignment %d\n", nh[optoff+1]);
</span><span class='line'>        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        goto drop;
</span><span class='line'>    }
</span><span class='line'>    pkt_len = ntohl(*(__be32 *)(nh + optoff + 2)); //获取整个负载长度
</span><span class='line'>    if (pkt_len &lt;= IPV6_MAXPLEN) { //小于65535 是不对地
</span><span class='line'>        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff+2);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>    if (ipv6_hdr(skb)-&gt;payload_len) { //原ipv6头中就不应该有负载长度了
</span><span class='line'>        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, optoff);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>    if (pkt_len &gt; skb-&gt;len - sizeof(struct ipv6hdr)) { //长度超出了 skb 的实际长度
</span><span class='line'>        IP6_INC_STATS_BH(ipv6_skb_idev(skb), IPSTATS_MIB_INTRUNCATEDPKTS);
</span><span class='line'>        goto drop;
</span><span class='line'>    }
</span><span class='line'>    //如果必要试图缩减 skb 的长度
</span><span class='line'>    if (pskb_trim_rcsum(skb, pkt_len + sizeof(struct ipv6hdr)))
</span><span class='line'>        goto drop;
</span><span class='line'>
</span><span class='line'>    return 1;
</span><span class='line'>drop:
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>目的选项处理</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct tlvtype_proc tlvprocdestopt_lst[] = {
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>    {
</span><span class='line'>        .type   = IPV6_TLV_HAO,
</span><span class='line'>        .func   = ipv6_dest_hao,
</span><span class='line'>    },
</span><span class='line'>#endif
</span><span class='line'>    {-1,    NULL}
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>解析目的选项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ipv6_dest_hao(struct sk_buff *skb, int optoff)
</span><span class='line'>{
</span><span class='line'>    struct ipv6_destopt_hao *hao;
</span><span class='line'>    struct inet6_skb_parm *opt = IP6CB(skb);
</span><span class='line'>    struct ipv6hdr *ipv6h = ipv6_hdr(skb);
</span><span class='line'>    struct in6_addr tmp_addr;
</span><span class='line'>    int ret;
</span><span class='line'>
</span><span class='line'>    if (opt-&gt;dsthao) { //已经处理
</span><span class='line'>        LIMIT_NETDEBUG(KERN_DEBUG "hao duplicated\n");
</span><span class='line'>        goto discard;
</span><span class='line'>    }
</span><span class='line'>    opt-&gt;dsthao = opt-&gt;dst1;
</span><span class='line'>    opt-&gt;dst1 = 0;
</span><span class='line'>
</span><span class='line'>    //获取网络头后面的选项部分
</span><span class='line'>    hao = (struct ipv6_destopt_hao *)(skb_network_header(skb) + optoff);
</span><span class='line'>
</span><span class='line'>    if (hao-&gt;length != 16) { //长度要求
</span><span class='line'>        LIMIT_NETDEBUG(KERN_DEBUG "hao invalid option length = %d\n", hao-&gt;length);
</span><span class='line'>        goto discard;
</span><span class='line'>    }
</span><span class='line'>    if (!(ipv6_addr_type(&hao-&gt;addr) & IPV6_ADDR_UNICAST)) { //地址不是单播
</span><span class='line'>        LIMIT_NETDEBUG(KERN_DEBUG "hao is not an unicast addr: " NIP6_FMT "\n", NIP6(hao-&gt;addr));
</span><span class='line'>        goto discard;
</span><span class='line'>    }
</span><span class='line'>    //IPSEC相关
</span><span class='line'>    ret = xfrm6_input_addr(skb, (xfrm_address_t *)&ipv6h-&gt;daddr, (xfrm_address_t *)&hao-&gt;addr, IPPROTO_DSTOPTS);
</span><span class='line'>    if (unlikely(ret &lt; 0))
</span><span class='line'>        goto discard;
</span><span class='line'>
</span><span class='line'>    if (skb_cloned(skb)) { //如果包是cloned
</span><span class='line'>        //分配新的内存数据
</span><span class='line'>        if (pskb_expand_head(skb, 0, 0, GFP_ATOMIC))
</span><span class='line'>            goto discard;
</span><span class='line'>
</span><span class='line'>        //重新指向各头
</span><span class='line'>        hao = (struct ipv6_destopt_hao *)(skb_network_header(skb) + optoff);
</span><span class='line'>        ipv6h = ipv6_hdr(skb);
</span><span class='line'>    }
</span><span class='line'>    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE)
</span><span class='line'>        skb-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>
</span><span class='line'>    //把ip头中的源地址与选项中的地址交换
</span><span class='line'>    ipv6_addr_copy(&tmp_addr, &ipv6h-&gt;saddr);
</span><span class='line'>    ipv6_addr_copy(&ipv6h-&gt;saddr, &hao-&gt;addr);
</span><span class='line'>    ipv6_addr_copy(&hao-&gt;addr, &tmp_addr);
</span><span class='line'>
</span><span class='line'>    if (skb-&gt;tstamp.tv64 == 0)
</span><span class='line'>        __net_timestamp(skb); //记录时间截
</span><span class='line'>
</span><span class='line'>    return 1;
</span><span class='line'>discard:
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>ipv6扩展头处理</h4>

<p>我们只介绍根ipv6扩展头相关的实现，像其他的扩展头(tcp, udp)等虽然也是叫扩展头但实际是传输层的内容，将在其他文章中介绍。</p>

<p>路由扩展首部</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct ipv6_rt_hdr {
</span><span class='line'>    __u8            nexthdr;
</span><span class='line'>    __u8            hdrlen;
</span><span class='line'>    __u8            type;
</span><span class='line'>    __u8            segments_left;
</span><span class='line'>
</span><span class='line'>    /* type specific data variable length field */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>路由扩展首部处理结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct inet6_protocol rthdr_protocol = {
</span><span class='line'>    .handler        =       ipv6_rthdr_rcv,
</span><span class='line'>    .flags          =       INET6_PROTO_NOPOLICY | INET6_PROTO_GSO_EXTHDR,
</span><span class='line'>};
</span><span class='line'>static int ipv6_rthdr_rcv(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct inet6_skb_parm *opt = IP6CB(skb);
</span><span class='line'>    struct in6_addr *addr = NULL;
</span><span class='line'>    struct in6_addr daddr;
</span><span class='line'>    struct inet6_dev *idev;
</span><span class='line'>    int n, i;
</span><span class='line'>    struct ipv6_rt_hdr *hdr;
</span><span class='line'>    struct rt0_hdr *rthdr;
</span><span class='line'>    int accept_source_route = ipv6_devconf.accept_source_route;
</span><span class='line'>
</span><span class='line'>    idev = in6_dev_get(skb-&gt;dev); //包进入设备
</span><span class='line'>    if (idev) {
</span><span class='line'>        if (accept_source_route &gt; idev-&gt;cnf.accept_source_route) //默认数量大于了手动调节(proc中）的数量
</span><span class='line'>            accept_source_route = idev-&gt;cnf.accept_source_route;
</span><span class='line'>        in6_dev_put(idev);
</span><span class='line'>    }
</span><span class='line'>    //skb长度和内存空间正确
</span><span class='line'>    if (!pskb_may_pull(skb, skb_transport_offset(skb) + 8) || !pskb_may_pull(skb, (skb_transport_offset(skb) +
</span><span class='line'>                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    hdr = (struct ipv6_rt_hdr *)skb_transport_header(skb); //路由扩展头
</span><span class='line'>    //是到多播地址或硬件地址不是到本机的地址
</span><span class='line'>    if (ipv6_addr_is_multicast(&ipv6_hdr(skb)-&gt;daddr) || skb-&gt;pkt_type != PACKET_HOST) {
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>looped_back:
</span><span class='line'>    if (hdr-&gt;segments_left == 0) { //根据rfc要求 分段剩余为0
</span><span class='line'>        switch (hdr-&gt;type) {
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>            case IPV6_SRCRT_TYPE_2:
</span><span class='line'>                /* Silently discard type 2 header unless it was processed by own */
</span><span class='line'>                if (!addr) {
</span><span class='line'>                    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
</span><span class='line'>                    kfree_skb(skb);
</span><span class='line'>                    return -1;
</span><span class='line'>                }
</span><span class='line'>                break;
</span><span class='line'>#endif
</span><span class='line'>            default:
</span><span class='line'>                break;
</span><span class='line'>
</span><span class='line'>        }
</span><span class='line'>        opt-&gt;lastopt = opt-&gt;srcrt = skb_network_header_len(skb);
</span><span class='line'>        skb-&gt;transport_header += (hdr-&gt;hdrlen + 1) &lt;&lt; 3; //下一个传输头的位置
</span><span class='line'>        opt-&gt;dst0 = opt-&gt;dst1;
</span><span class='line'>        opt-&gt;dst1 = 0;
</span><span class='line'>        opt-&gt;nhoff = (&hdr-&gt;nexthdr) - skb_network_header(skb); //记录下一个头数据相对网络头的偏移量
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    switch (hdr-&gt;type) {
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>        case IPV6_SRCRT_TYPE_2:
</span><span class='line'>            if (accept_source_route &lt; 0)
</span><span class='line'>                goto unknown_rh;
</span><span class='line'>            /* Silently discard invalid RTH type 2 */
</span><span class='line'>            if (hdr-&gt;hdrlen != 2 || hdr-&gt;segments_left != 1) {
</span><span class='line'>                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>                kfree_skb(skb);
</span><span class='line'>                return -1;
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>#endif
</span><span class='line'>        default:
</span><span class='line'>            goto unknown_rh;
</span><span class='line'>    }
</span><span class='line'>    /* This is the routing header forwarding algorithm from RFC 2460, page 16. */
</span><span class='line'>
</span><span class='line'>    n = hdr-&gt;hdrlen &gt;&gt; 1; //计算路由首部中的地址数量
</span><span class='line'>    if (hdr-&gt;segments_left &gt; n) {
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, ((&hdr-&gt;segments_left) - skb_network_header(skb)));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    /* We are about to mangle packet header. Be careful!                                       
</span><span class='line'>       Do not damage packets queued somewhere.  */
</span><span class='line'>    if (skb_cloned(skb)) {
</span><span class='line'>        /* the copy is a forwarded packet */
</span><span class='line'>        if (pskb_expand_head(skb, 0, 0, GFP_ATOMIC)) {
</span><span class='line'>            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_OUTDISCARDS);
</span><span class='line'>            kfree_skb(skb);
</span><span class='line'>            return -1;
</span><span class='line'>        }
</span><span class='line'>        hdr = (struct ipv6_rt_hdr *)skb_transport_header(skb);
</span><span class='line'>    }
</span><span class='line'>    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE)
</span><span class='line'>        skb-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>
</span><span class='line'>    i = n - --hdr-&gt;segments_left; //计算地址向量(地址列表)中要"访问"的下一个地址
</span><span class='line'>
</span><span class='line'>    rthdr = (struct rt0_hdr *) hdr;
</span><span class='line'>    addr = rthdr-&gt;addr; //指向地址列表首部
</span><span class='line'>    addr += i - 1; //移动到下一个地址
</span><span class='line'>
</span><span class='line'>    switch (hdr-&gt;type) {
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>        case IPV6_SRCRT_TYPE_2:
</span><span class='line'>            if (xfrm6_input_addr(skb, (xfrm_address_t *)addr, (xfrm_address_t *)&ipv6_hdr(skb)-&gt;saddr, IPPROTO_ROUTING) &lt; 0) {
</span><span class='line'>                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
</span><span class='line'>                kfree_skb(skb);
</span><span class='line'>                return -1;
</span><span class='line'>            }
</span><span class='line'>            if (!ipv6_chk_home_addr(addr)) {
</span><span class='line'>                IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
</span><span class='line'>                kfree_skb(skb);
</span><span class='line'>                return -1;
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>#endif
</span><span class='line'>        default:
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>    if (ipv6_addr_is_multicast(addr)) { //这个地址是多播地址
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INADDRERRORS);
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    //交换 IPv6 目的地址和这个地址
</span><span class='line'>    ipv6_addr_copy(&daddr, addr);
</span><span class='line'>    ipv6_addr_copy(addr, &ipv6_hdr(skb)-&gt;daddr);
</span><span class='line'>    ipv6_addr_copy(&ipv6_hdr(skb)-&gt;daddr, &daddr);
</span><span class='line'>    dst_release(xchg(&skb-&gt;dst, NULL));
</span><span class='line'>
</span><span class='line'>    ip6_route_input(skb); //路由查找处理，将在其他文章中介绍
</span><span class='line'>
</span><span class='line'>    if (skb-&gt;dst-&gt;error) {
</span><span class='line'>        skb_push(skb, skb-&gt;data - skb_network_header(skb));
</span><span class='line'>        dst_input(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (skb-&gt;dst-&gt;dev-&gt;flags & IFF_LOOPBACK) { //路由查找后要发送到的目的设备是回环
</span><span class='line'>        if (ipv6_hdr(skb)-&gt;hop_limit &lt;= 1) { //跳数限制小于1
</span><span class='line'>            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>            //给源地址发送一个 ICMP "超时 – 传输超过跳数限制" 的报文, 并且抛弃此包
</span><span class='line'>            icmpv6_send(skb, ICMPV6_TIME_EXCEED, ICMPV6_EXC_HOPLIMIT, 0, skb-&gt;dev);
</span><span class='line'>            kfree_skb(skb);
</span><span class='line'>            return -1;
</span><span class='line'>        }
</span><span class='line'>        ipv6_hdr(skb)-&gt;hop_limit--;
</span><span class='line'>        goto looped_back;
</span><span class='line'>    }
</span><span class='line'>    //将data之中移动到网络头
</span><span class='line'>    skb_push(skb, skb-&gt;data - skb_network_header(skb));
</span><span class='line'>    dst_input(skb); //这时包应该被转发了
</span><span class='line'>    return -1;
</span><span class='line'>unknown_rh:
</span><span class='line'>    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>    icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, (&hdr-&gt;type) - skb_network_header(skb));
</span><span class='line'>    return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ipv6分配包扩展首部处理</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct inet6_protocol frag_protocol =
</span><span class='line'>{
</span><span class='line'>    .handler        =       ipv6_frag_rcv,
</span><span class='line'>    .flags          =       INET6_PROTO_NOPOLICY,
</span><span class='line'>};
</span><span class='line'>static int ipv6_frag_rcv(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct frag_hdr *fhdr;
</span><span class='line'>    struct frag_queue *fq;
</span><span class='line'>    struct ipv6hdr *hdr = ipv6_hdr(skb);
</span><span class='line'>
</span><span class='line'>    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMREQDS);
</span><span class='line'>
</span><span class='line'>    /* Jumbo payload inhibits frag. header */
</span><span class='line'>    if (hdr-&gt;payload_len == 0) { //是Jumbo payload，不是分片包
</span><span class='line'>        IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, skb_network_header_len(skb));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    //有碎片头空间
</span><span class='line'>    if (!pskb_may_pull(skb, (skb_transport_offset(skb) + sizeof(struct frag_hdr)))) {
</span><span class='line'>        IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, skb_network_header_len(skb));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    hdr = ipv6_hdr(skb);
</span><span class='line'>    fhdr = (struct frag_hdr *)skb_transport_header(skb); //分片头
</span><span class='line'>
</span><span class='line'>    if (!(fhdr-&gt;frag_off & htons(0xFFF9))) { //没有分片偏移，不是分片包
</span><span class='line'>        /* It is not a fragmented frame */
</span><span class='line'>        skb-&gt;transport_header += sizeof(struct frag_hdr); //传输头向后移动到下一个头
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMOKS);
</span><span class='line'>        IP6CB(skb)-&gt;nhoff = (u8 *)fhdr - skb_network_header(skb);
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    if (atomic_read(&ip6_frags.mem) &gt; ip6_frags_ctl.high_thresh) //内存使用超过限制
</span><span class='line'>        ip6_evictor(ip6_dst_idev(skb-&gt;dst));
</span><span class='line'>
</span><span class='line'>    //查找或创建分片队列头
</span><span class='line'>    if ((fq = fq_find(fhdr-&gt;identification, &hdr-&gt;saddr, &hdr-&gt;daddr, ip6_dst_idev(skb-&gt;dst))) != NULL) {
</span><span class='line'>        int ret;
</span><span class='line'>        spin_lock(&fq-&gt;q.lock);
</span><span class='line'>        ret = ip6_frag_queue(fq, skb, fhdr, IP6CB(skb)-&gt;nhoff); //入队重组
</span><span class='line'>        spin_unlock(&fq-&gt;q.lock);
</span><span class='line'>        fq_put(fq);
</span><span class='line'>        return ret;
</span><span class='line'>    }
</span><span class='line'>    IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMFAILS);
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return -1;
</span><span class='line'>}
</span><span class='line'>static __inline__ struct frag_queue * fq_find(__be32 id, struct in6_addr *src, struct in6_addr *dst, struct inet6_dev *idev)
</span><span class='line'>{
</span><span class='line'>    struct inet_frag_queue *q;
</span><span class='line'>    struct ip6_create_arg arg;
</span><span class='line'>    unsigned int hash;
</span><span class='line'>
</span><span class='line'>    arg.id = id;
</span><span class='line'>    arg.src = src;
</span><span class='line'>    arg.dst = dst;
</span><span class='line'>    hash = ip6qhashfn(id, src, dst); //id，源，目的进行 hash
</span><span class='line'>
</span><span class='line'>    q = inet_frag_find(&ip6_frags, &arg, hash); //查找或创建
</span><span class='line'>    if (q == NULL)
</span><span class='line'>        goto oom;
</span><span class='line'>
</span><span class='line'>    return container_of(q, struct frag_queue, q); //成功返回
</span><span class='line'>oom: //没内存了
</span><span class='line'>    IP6_INC_STATS_BH(idev, IPSTATS_MIB_REASMFAILS);
</span><span class='line'>    return NULL;
</span><span class='line'>}
</span><span class='line'>struct inet_frag_queue *inet_frag_find(struct inet_frags *f, void *key, unsigned int hash)
</span><span class='line'>{
</span><span class='line'>    struct inet_frag_queue *q;
</span><span class='line'>    struct hlist_node *n;
</span><span class='line'>
</span><span class='line'>    read_lock(&f-&gt;lock);
</span><span class='line'>    hlist_for_each_entry(q, n, &f-&gt;hash[hash], list) { //在hash桶中查找
</span><span class='line'>
</span><span class='line'>        if (f-&gt;match(q, key)) { //调用匹配函数进行匹配，具体函数很简单参考初始化时的ipv6_frag_init函数
</span><span class='line'>            atomic_inc(&q-&gt;refcnt);
</span><span class='line'>            read_unlock(&f-&gt;lock);
</span><span class='line'>            return q;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    //没有找到就创建一个
</span><span class='line'>    return inet_frag_create(f, key, hash);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>创建分片队列</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct inet_frag_queue *inet_frag_create(struct inet_frags *f, void *arg, unsigned int hash)
</span><span class='line'>{
</span><span class='line'>    struct inet_frag_queue *q;
</span><span class='line'>
</span><span class='line'>    q = inet_frag_alloc(f, arg); //分配一个
</span><span class='line'>    if (q == NULL)
</span><span class='line'>        return NULL;
</span><span class='line'>    //添加到 hash 表
</span><span class='line'>    return inet_frag_intern(q, f, hash, arg);
</span><span class='line'>}
</span><span class='line'>static struct inet_frag_queue *inet_frag_alloc(struct inet_frags *f, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct inet_frag_queue *q;
</span><span class='line'>
</span><span class='line'>    q = kzalloc(f-&gt;qsize, GFP_ATOMIC); //分配一个队列头，大小是 sizeof(struct frag_queue)
</span><span class='line'>    if (q == NULL)
</span><span class='line'>        return NULL;
</span><span class='line'>
</span><span class='line'>    f-&gt;constructor(q, arg); //拷贝地址和 id 到队列头结构中
</span><span class='line'>    atomic_add(f-&gt;qsize, &f-&gt;mem);
</span><span class='line'>    setup_timer(&q-&gt;timer, f-&gt;frag_expire, (unsigned long)q);
</span><span class='line'>    spin_lock_init(&q-&gt;lock);
</span><span class='line'>    atomic_set(&q-&gt;refcnt, 1);
</span><span class='line'>    return q;
</span><span class='line'>}
</span><span class='line'>static struct inet_frag_queue *inet_frag_intern(struct inet_frag_queue *qp_in, struct inet_frags *f, unsigned int hash, void *arg)
</span><span class='line'>{
</span><span class='line'>    struct inet_frag_queue *qp;
</span><span class='line'>#ifdef CONFIG_SMP
</span><span class='line'>    struct hlist_node *n;
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    write_lock(&f-&gt;lock);
</span><span class='line'>#ifdef CONFIG_SMP
</span><span class='line'>    //其他cpu可能已经创建了一个，所以要再次检查
</span><span class='line'>    hlist_for_each_entry(qp, n, &f-&gt;hash[hash], list) {
</span><span class='line'>        if (f-&gt;match(qp, arg)) { //已经创建
</span><span class='line'>            atomic_inc(&qp-&gt;refcnt);
</span><span class='line'>            write_unlock(&f-&gt;lock);
</span><span class='line'>            qp_in-&gt;last_in |= COMPLETE;
</span><span class='line'>            inet_frag_put(qp_in, f); //释放新分配的
</span><span class='line'>            return qp;
</span><span class='line'>
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>#endif
</span><span class='line'>    qp = qp_in;
</span><span class='line'>    if (!mod_timer(&qp-&gt;timer, jiffies + f-&gt;ctl-&gt;timeout)) //启动定时器
</span><span class='line'>        atomic_inc(&qp-&gt;refcnt);
</span><span class='line'>
</span><span class='line'>    //增加引用计数，然后添加到hash表
</span><span class='line'>    atomic_inc(&qp-&gt;refcnt);
</span><span class='line'>    hlist_add_head(&qp-&gt;list, &f-&gt;hash[hash]);
</span><span class='line'>    list_add_tail(&qp-&gt;lru_list, &f-&gt;lru_list);
</span><span class='line'>    f-&gt;nqueues++;
</span><span class='line'>    write_unlock(&f-&gt;lock);
</span><span class='line'>    return qp;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>入队重组</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ip6_frag_queue(struct frag_queue *fq, struct sk_buff *skb, struct frag_hdr *fhdr, int nhoff)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *prev, *next;
</span><span class='line'>    struct net_device *dev;
</span><span class='line'>    int offset, end;
</span><span class='line'>
</span><span class='line'>    if (fq-&gt;q.last_in & COMPLETE) //重组已经完成
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    //分片开始位置
</span><span class='line'>    offset = ntohs(fhdr-&gt;frag_off) & ~0x7;//偏移必须8字节对齐
</span><span class='line'>    //分片在整个包中的结束位置 包负载长度 - 分片头长度
</span><span class='line'>    end = offset + (ntohs(ipv6_hdr(skb)-&gt;payload_len) -  ((u8 *)(fhdr + 1) - (u8 *)(ipv6_hdr(skb) + 1)));
</span><span class='line'>
</span><span class='line'>    //结束位置 &gt; 65535
</span><span class='line'>    if ((unsigned int)end &gt; IPV6_MAXPLEN) {
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, ((u8 *)&fhdr-&gt;frag_off - skb_network_header(skb)));
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    //校验和已经完成
</span><span class='line'>    if (skb-&gt;ip_summed == CHECKSUM_COMPLETE) {
</span><span class='line'>        const unsigned char *nh = skb_network_header(skb);
</span><span class='line'>        //减去分片包头的校验和
</span><span class='line'>        skb-&gt;csum = csum_sub(skb-&gt;csum, csum_partial(nh, (u8 *)(fhdr + 1) - nh, 0));
</span><span class='line'>    }
</span><span class='line'>    //最后一个碎片包
</span><span class='line'>    if (!(fhdr-&gt;frag_off & htons(IP6_MF))) {
</span><span class='line'>        /* If we already have some bits beyond end or have different end, the segment is corrupted. */
</span><span class='line'>        if (end &lt; fq-&gt;q.len || ((fq-&gt;q.last_in & LAST_IN) && end != fq-&gt;q.len)) //分片出现错误
</span><span class='line'>            goto err;
</span><span class='line'>
</span><span class='line'>        fq-&gt;q.last_in |= LAST_IN; //标识最后一个分片
</span><span class='line'>        fq-&gt;q.len = end; //记录包总长度
</span><span class='line'>    } else {
</span><span class='line'>        /* Check if the fragment is rounded to 8 bytes. Required by the RFC. */
</span><span class='line'>        if (end & 0x7) { //碎片结尾也需要8字节对齐
</span><span class='line'>            /* RFC2460 says always send parameter problem in this case. -DaveM */
</span><span class='line'>            IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), PSTATS_MIB_INHDRERRORS);
</span><span class='line'>            icmpv6_param_prob(skb, ICMPV6_HDR_FIELD, offsetof(struct ipv6hdr, payload_len));
</span><span class='line'>            return -1;
</span><span class='line'>        }
</span><span class='line'>        if (end &gt; fq-&gt;q.len) {
</span><span class='line'>            /* Some bits beyond end -&gt; corruption. */
</span><span class='line'>            if (fq-&gt;q.last_in & LAST_IN)
</span><span class='line'>                goto err;
</span><span class='line'>            fq-&gt;q.len = end; //记录已经得到的碎片的最大长度
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    if (end == offset) //开始 = 结束
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    //skb-&gt;data 指向碎片首部头后数据部分
</span><span class='line'>    if (!pskb_pull(skb, (u8 *) (fhdr + 1) - skb-&gt;data))
</span><span class='line'>        goto err;
</span><span class='line'>    //如果需要缩短skb的内存长度
</span><span class='line'>    if (pskb_trim_rcsum(skb, end - offset))
</span><span class='line'>        goto err;
</span><span class='line'>
</span><span class='line'>    //找出碎片所在位置
</span><span class='line'>    prev = NULL;
</span><span class='line'>    for(next = fq-&gt;q.fragments; next != NULL; next = next-&gt;next) {
</span><span class='line'>        if (FRAG6_CB(next)-&gt;offset &gt;= offset)
</span><span class='line'>            break;  /* bingo! */
</span><span class='line'>        prev = next;
</span><span class='line'>    }
</span><span class='line'>    if (prev) { //有前一个碎片
</span><span class='line'>        //前一个碎片 (开始 + 长度) - 这个碎片的开始. 计算出重叠部分
</span><span class='line'>        int i = (FRAG6_CB(prev)-&gt;offset + prev-&gt;len) - offset;
</span><span class='line'>        if (i &gt; 0) { //有重叠
</span><span class='line'>            offset += i; //调整这个碎片的开始位置
</span><span class='line'>            if (end &lt;= offset) //调整后出错
</span><span class='line'>                goto err;
</span><span class='line'>            if (!pskb_pull(skb, i))//skb-&gt;data += i;
</span><span class='line'>                goto err;
</span><span class='line'>            if (skb-&gt;ip_summed != CHECKSUM_UNNECESSARY)
</span><span class='line'>                skb-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    //有下一个碎片，且开始位置 &lt; 这个碎片的结束位置
</span><span class='line'>    while (next && FRAG6_CB(next)-&gt;offset &lt; end) {
</span><span class='line'>        //这个碎片的结束位置  - 下一个碎片的开始位置，计算重叠
</span><span class='line'>        int i = end - FRAG6_CB(next)-&gt;offset; /* overlap is 'i' bytes */
</span><span class='line'>        if (i &lt; next-&gt;len) { //重叠长度 &lt; 下一个碎片的长度
</span><span class='line'>            if (!pskb_pull(next, i)) //next-&gt;data += i;
</span><span class='line'>                goto err;
</span><span class='line'>
</span><span class='line'>            FRAG6_CB(next)-&gt;offset += i;    //下一个碎片开始位置调整
</span><span class='line'>            fq-&gt;q.meat -= i; //总长度减少
</span><span class='line'>            if (next-&gt;ip_summed != CHECKSUM_UNNECESSARY)
</span><span class='line'>                next-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>            break;
</span><span class='line'>
</span><span class='line'>        } else { //这个碎片完全复盖了下一个碎片
</span><span class='line'>            struct sk_buff *free_it = next; //释放这个碎片
</span><span class='line'>            next = next-&gt;next;//调整下一个碎片指针
</span><span class='line'>            //调整队列指针
</span><span class='line'>            if (prev)
</span><span class='line'>                prev-&gt;next = next;
</span><span class='line'>            else
</span><span class='line'>                fq-&gt;q.fragments = next;
</span><span class='line'>
</span><span class='line'>            fq-&gt;q.meat -= free_it-&gt;len;
</span><span class='line'>            frag_kfree_skb(free_it, NULL); //释放被复盖的包
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    FRAG6_CB(skb)-&gt;offset = offset; //这个碎片包记录自己的开始位置
</span><span class='line'>
</span><span class='line'>    //插入这个碎片到队列
</span><span class='line'>    skb-&gt;next = next;
</span><span class='line'>    if (prev)
</span><span class='line'>        prev-&gt;next = skb;
</span><span class='line'>    else
</span><span class='line'>        fq-&gt;q.fragments = skb;
</span><span class='line'>
</span><span class='line'>    dev = skb-&gt;dev;
</span><span class='line'>    if (dev) {
</span><span class='line'>        fq-&gt;iif = dev-&gt;ifindex;
</span><span class='line'>        skb-&gt;dev = NULL;
</span><span class='line'>    }
</span><span class='line'>    fq-&gt;q.stamp = skb-&gt;tstamp;
</span><span class='line'>    fq-&gt;q.meat += skb-&gt;len; //累加总长度
</span><span class='line'>    atomic_add(skb-&gt;truesize, &ip6_frags.mem);
</span><span class='line'>
</span><span class='line'>    if (offset == 0) { //偏移为0
</span><span class='line'>        fq-&gt;nhoffset = nhoff;
</span><span class='line'>        fq-&gt;q.last_in |= FIRST_IN; //标识开始碎片
</span><span class='line'>    }
</span><span class='line'>    //碎片已经聚齐，记录长度 = 包中标识的长度
</span><span class='line'>    if (fq-&gt;q.last_in == (FIRST_IN | LAST_IN) && fq-&gt;q.meat == fq-&gt;q.len)
</span><span class='line'>        return ip6_frag_reasm(fq, prev, dev); //重组
</span><span class='line'>    //没有聚齐，移动队列连表到lru连表尾部
</span><span class='line'>    write_lock(&ip6_frags.lock);
</span><span class='line'>    list_move_tail(&fq-&gt;q.lru_list, &ip6_frags.lru_list);
</span><span class='line'>    write_unlock(&ip6_frags.lock);
</span><span class='line'>    return -1;
</span><span class='line'>err:
</span><span class='line'>    IP6_INC_STATS(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_REASMFAILS);
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>重组ip头</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int ip6_frag_reasm(struct frag_queue *fq, struct sk_buff *prev, struct net_device *dev)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *fp, *head = fq-&gt;q.fragments;
</span><span class='line'>    int    payload_len;
</span><span class='line'>    unsigned int nhoff;
</span><span class='line'>
</span><span class='line'>    fq_kill(fq); //把这个重组队列出队
</span><span class='line'>
</span><span class='line'>    /* Make the one we just received the head. */
</span><span class='line'>    if (prev) {
</span><span class='line'>        //下面是把head指向的skb复制到fp，然后把fp插入到head指向的位置
</span><span class='line'>        head = prev-&gt;next;
</span><span class='line'>        fp = skb_clone(head, GFP_ATOMIC);
</span><span class='line'>
</span><span class='line'>        if (!fp)
</span><span class='line'>            goto out_oom;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        fp-&gt;next = head-&gt;next;
</span><span class='line'>        prev-&gt;next = fp;
</span><span class='line'>        //把真正的头skb复制到head指针的skb
</span><span class='line'>        skb_morph(head, fq-&gt;q.fragments);
</span><span class='line'>        head-&gt;next = fq-&gt;q.fragments-&gt;next;
</span><span class='line'>
</span><span class='line'>        kfree_skb(fq-&gt;q.fragments);//释放原来的头
</span><span class='line'>        fq-&gt;q.fragments = head;
</span><span class='line'>    }
</span><span class='line'>    /* Unfragmented part is taken from the first segment. */
</span><span class='line'>    //计算负载总长度
</span><span class='line'>    payload_len = ((head-&gt;data - skb_network_header(head)) - sizeof(struct ipv6hdr) + fq-&gt;q.len -  sizeof(struct frag_hdr));
</span><span class='line'>    if (payload_len &gt; IPV6_MAXPLEN) //超过65535
</span><span class='line'>        goto out_oversize;
</span><span class='line'>
</span><span class='line'>    /* Head of list must not be cloned. */
</span><span class='line'>    //如果skb被克隆，从新分配他的data
</span><span class='line'>    if (skb_cloned(head) && pskb_expand_head(head, 0, 0, GFP_ATOMIC))
</span><span class='line'>        goto out_oom;
</span><span class='line'>
</span><span class='line'>    /* If the first fragment is fragmented itself, we split it to two chunks: the first with data and paged part
</span><span class='line'>     * and the second, holding only fragments.
</span><span class='line'>     */
</span><span class='line'>    if (skb_shinfo(head)-&gt;frag_list) {//如果头自己已经被分片
</span><span class='line'>        struct sk_buff *clone;
</span><span class='line'>        int i, plen = 0;
</span><span class='line'>
</span><span class='line'>        if ((clone = alloc_skb(0, GFP_ATOMIC)) == NULL)
</span><span class='line'>            goto out_oom;
</span><span class='line'>
</span><span class='line'>        //把这个clone插入到头后               
</span><span class='line'>        clone-&gt;next = head-&gt;next;
</span><span class='line'>        head-&gt;next = clone;
</span><span class='line'>        //把头的分片给这个clone
</span><span class='line'>        skb_shinfo(clone)-&gt;frag_list = skb_shinfo(head)-&gt;frag_list;
</span><span class='line'>        skb_shinfo(head)-&gt;frag_list = NULL;
</span><span class='line'>        //头使用了页面，计算总长度
</span><span class='line'>        for (i = 0; i &lt; skb_shinfo(head)-&gt;nr_frags; i++)
</span><span class='line'>            plen += skb_shinfo(head)-&gt;frags[i].size;
</span><span class='line'>
</span><span class='line'>        clone-&gt;len = clone-&gt;data_len = head-&gt;data_len - plen;
</span><span class='line'>        head-&gt;data_len -= clone-&gt;len;
</span><span class='line'>        head-&gt;len -= clone-&gt;len;
</span><span class='line'>        clone-&gt;csum = 0;
</span><span class='line'>        clone-&gt;ip_summed = head-&gt;ip_summed;
</span><span class='line'>        atomic_add(clone-&gt;truesize, &ip6_frags.mem);
</span><span class='line'>    }
</span><span class='line'>    /* We have to remove fragment header from datagram and to relocate                         
</span><span class='line'>     * header in order to calculate ICV correctly. */
</span><span class='line'>    nhoff = fq-&gt;nhoffset;
</span><span class='line'>    //把传输头（分片头）中的下一个头字段值赋给网络头中的下一个头字段
</span><span class='line'>    skb_network_header(head)[nhoff] = skb_transport_header(head)[0];
</span><span class='line'>    //把分片首部复盖掉
</span><span class='line'>    memmove(head-&gt;head + sizeof(struct frag_hdr), head-&gt;head, (head-&gt;data - head-&gt;head) - sizeof(struct frag_hdr));
</span><span class='line'>    //调整相应的各个层的头位置
</span><span class='line'>    head-&gt;mac_header += sizeof(struct frag_hdr);
</span><span class='line'>    head-&gt;network_header += sizeof(struct frag_hdr);
</span><span class='line'>
</span><span class='line'>    skb_shinfo(head)-&gt;frag_list = head-&gt;next; //保存碎片连表
</span><span class='line'>    skb_reset_transport_header(head);//重新调整网络头，现在指向分片头后的头
</span><span class='line'>    skb_push(head, head-&gt;data - skb_network_header(head));//使head-&gt;data指向网络头
</span><span class='line'>    atomic_sub(head-&gt;truesize, &ip6_frags.mem);
</span><span class='line'>
</span><span class='line'>    for (fp = head-&gt;next; fp; fp = fp-&gt;next) { //统计分片总长度
</span><span class='line'>        head-&gt;data_len += fp-&gt;len;
</span><span class='line'>        head-&gt;len += fp-&gt;len;
</span><span class='line'>        if (head-&gt;ip_summed != fp-&gt;ip_summed)
</span><span class='line'>            head-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>        else if (head-&gt;ip_summed == CHECKSUM_COMPLETE)
</span><span class='line'>            head-&gt;csum = csum_add(head-&gt;csum, fp-&gt;csum); //添加各分片的累加和
</span><span class='line'>
</span><span class='line'>        head-&gt;truesize += fp-&gt;truesize;
</span><span class='line'>        atomic_sub(fp-&gt;truesize, &ip6_frags.mem);
</span><span class='line'>    }
</span><span class='line'>    head-&gt;next = NULL;
</span><span class='line'>    head-&gt;dev = dev;
</span><span class='line'>    head-&gt;tstamp = fq-&gt;q.stamp;
</span><span class='line'>    ipv6_hdr(head)-&gt;payload_len = htons(payload_len); //总长度
</span><span class='line'>    IP6CB(head)-&gt;nhoff = nhoff;
</span><span class='line'>
</span><span class='line'>    /* Yes, and fold redundant checksum back. 8) */
</span><span class='line'>    if (head-&gt;ip_summed == CHECKSUM_COMPLETE) //添加网络头累加和
</span><span class='line'>        head-&gt;csum = csum_partial(skb_network_header(head), skb_network_header_len(head), head-&gt;csum);
</span><span class='line'>
</span><span class='line'>    rcu_read_lock();
</span><span class='line'>    IP6_INC_STATS_BH(__in6_dev_get(dev), IPSTATS_MIB_REASMOKS);
</span><span class='line'>    rcu_read_unlock();
</span><span class='line'>    fq-&gt;q.fragments = NULL;
</span><span class='line'>    return 1;
</span><span class='line'>    ...... //下面是错误处理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>无数据扩展头</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct inet6_protocol nodata_protocol = {
</span><span class='line'>    .handler        =       ipv6_nodata_rcv,
</span><span class='line'>    .flags          =       INET6_PROTO_NOPOLICY,
</span><span class='line'>};
</span><span class='line'>static int ipv6_nodata_rcv(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    kfree_skb(skb);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>目的选项首部处理</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct inet6_protocol destopt_protocol = {
</span><span class='line'>    .handler        =       ipv6_destopt_rcv,
</span><span class='line'>    .flags          =       INET6_PROTO_NOPOLICY | INET6_PROTO_GSO_EXTHDR,
</span><span class='line'>};
</span><span class='line'>static int ipv6_destopt_rcv(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>    struct inet6_skb_parm *opt = IP6CB(skb);
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>    __u16 dstbuf;
</span><span class='line'>#endif
</span><span class='line'>    struct dst_entry *dst;
</span><span class='line'>    //长度验证
</span><span class='line'>    if (!pskb_may_pull(skb, skb_transport_offset(skb) + 8) || !pskb_may_pull(skb, (skb_transport_offset(skb) +
</span><span class='line'>                    ((skb_transport_header(skb)[1] + 1) &lt;&lt; 3)))) {
</span><span class='line'>        IP6_INC_STATS_BH(ip6_dst_idev(skb-&gt;dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>        kfree_skb(skb);
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    opt-&gt;lastopt = opt-&gt;dst1 = skb_network_header_len(skb); //网络头长度
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>    dstbuf = opt-&gt;dst1;
</span><span class='line'>#endif
</span><span class='line'>    dst = dst_clone(skb-&gt;dst); //增加dst的引用计数
</span><span class='line'>    //解析tlv，上面已经看到过了
</span><span class='line'>    if (ip6_parse_tlv(tlvprocdestopt_lst, skb)) {
</span><span class='line'>        dst_release(dst);
</span><span class='line'>        skb-&gt;transport_header += (skb_transport_header(skb)[1] + 1) &lt;&lt; 3; //调整网络头位置
</span><span class='line'>        opt = IP6CB(skb);
</span><span class='line'>#if defined(CONFIG_IPV6_MIP6) || defined(CONFIG_IPV6_MIP6_MODULE)
</span><span class='line'>        opt-&gt;nhoff = dstbuf;
</span><span class='line'>#else
</span><span class='line'>        opt-&gt;nhoff = opt-&gt;dst1;
</span><span class='line'>#endif
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    IP6_INC_STATS_BH(ip6_dst_idev(dst), IPSTATS_MIB_INHDRERRORS);
</span><span class='line'>    dst_release(dst);
</span><span class='line'>    return -1;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核中tcp连接的断开处理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/12/kernel-net-tcp-close/"/>
    <updated>2015-06-12T17:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/12/kernel-net-tcp-close</id>
    <content type="html"><![CDATA[<p><a href="http://simohayha.iteye.com/blog/503856">http://simohayha.iteye.com/blog/503856</a></p>

<p>我们这次主要来分析相关的两个断开函数close和shotdown以及相关的套接口选项SO_LINGER。这里要注意SO_LINGER对shutdown无任何影响。它只对close起作用。</p>

<p>先来坎SO_LINGER所对应的数据结构：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct linger {
</span><span class='line'>    //linger的开关
</span><span class='line'>    int     l_onoff;    /* Linger active        */
</span><span class='line'>    //所等待的时间。
</span><span class='line'>    int     l_linger;   /* How long to linger for   */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>这里对这个套接口选项就不详细介绍了，在unix网络编程中有详细的介绍，我们这里只会分析内核的处理代码。</p>

<p>首先来看close函数，我们知道缺醒情况下,close是立即返回，但是如果套接口的发送缓冲区还有未发送的数据，系统将会试着把这些数据发送给对端。而这个缺醒情况我们是可以通过SO_LINGER来改变的。还有一个要注意就是close调用并不一定会引发tcp的断开连接。因为close只是将这个socket的引用计数减一(主要是针对多个进程)，而真正要直接引发断开，则需要用shutdown函数。</p>

<p>内核中socket的close的系统调用是sock_close，而在sock_close中，直接调用sock_release来实现功能，因此这里我们直接看sock_release的源码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void sock_release(struct socket *sock)
</span><span class='line'>{
</span><span class='line'>    if (sock-&gt;ops) {
</span><span class='line'>        struct module *owner = sock-&gt;ops-&gt;owner;
</span><span class='line'>
</span><span class='line'>        //调用inet_stream_ops的inet_release函数
</span><span class='line'>        sock-&gt;ops-&gt;release(sock);
</span><span class='line'>        //将ops致空。
</span><span class='line'>        sock-&gt;ops = NULL;
</span><span class='line'>        module_put(owner);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //这个域貌似是26.31新加的，具体做什么的还不知道。
</span><span class='line'>    if (sock-&gt;fasync_list)
</span><span class='line'>        printk(KERN_ERR "sock_release: fasync list not empty!\n");
</span><span class='line'>
</span><span class='line'>    //更新全局的socket数目
</span><span class='line'>    percpu_sub(sockets_in_use, 1);
</span><span class='line'>    if (!sock-&gt;file) {
</span><span class='line'>        //更新inode的引用计数
</span><span class='line'>        iput(SOCK_INODE(sock));
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    sock-&gt;file = NULL;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后来看inet_release的实现，这个函数主要用来通过SO_LINGER套接字来得到超时时间，然后调用tcp_close来关闭sock。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int inet_release(struct socket *sock)
</span><span class='line'>{
</span><span class='line'>    struct sock *sk = sock-&gt;sk;
</span><span class='line'>
</span><span class='line'>    if (sk) {
</span><span class='line'>        long timeout;
</span><span class='line'>
</span><span class='line'>        /* Applications forget to leave groups before exiting */
</span><span class='line'>        ip_mc_drop_socket(sk);
</span><span class='line'>
</span><span class='line'>        timeout = 0;
</span><span class='line'>        //判断是否设置SO_LINGER并且不是处于正在shutdowning，则设置timeout为l_linger(也就是我们设置的值).
</span><span class='line'>        if (sock_flag(sk, SOCK_LINGER) &&
</span><span class='line'>            !(current-&gt;flags & PF_EXITING))
</span><span class='line'>            timeout = sk-&gt;sk_lingertime;
</span><span class='line'>        sock-&gt;sk = NULL;
</span><span class='line'>        //调用tcp_close.
</span><span class='line'>        sk-&gt;sk_prot-&gt;close(sk, timeout);
</span><span class='line'>    }
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>tcp_close函数比较长我们这里分段来分析它,首先来看第一部分。这里要注意几点：</p>

<p>1 当close掉一个服务端的父socket的时候，内核会先处理半连接队列然后是已经accept了的队列，最后才会处理父sock。</p>

<p>2 处理接收缓冲区的数据的时候，直接遍历receive_queue(前面blog有介绍)，然后统计未发送的socket。我们知道close是不管接收buf的，也就是他会把接收buf释放掉，然后发送rst给对端的。</p>

<p>3 当so_linger有设置并且超时时间为0,则发送rst给对端，并且清空发送和接收buf。这个也不会引起最终的四分组终止序列。</p>

<p>4 当接收缓冲区有未读数据，则直接发送rst给对端。这个也不会引起最终的四分组终止序列。</p>

<p>5 当so_linger有设置，并且超时不为0,或者so_linger没有设置，此时都会引起最终的四分组终止序列来终止连接。(通过send_fin来发送fin,并引发四分组终止序列).而在send_fin中会发送掉发送缓冲区中的数据。</p>

<p>来看代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void tcp_close(struct sock *sk, long timeout)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *skb;
</span><span class='line'>    int data_was_unread = 0;
</span><span class='line'>    int state;
</span><span class='line'>
</span><span class='line'>    lock_sock(sk);
</span><span class='line'>    sk-&gt;sk_shutdown = SHUTDOWN_MASK;
</span><span class='line'>
</span><span class='line'>    //如果处于tcp_listen说明将要关闭的这个socket是一个服务端的主socket。
</span><span class='line'>    if (sk-&gt;sk_state == TCP_LISTEN) {
</span><span class='line'>        //设置sock状态.
</span><span class='line'>        tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>
</span><span class='line'>        //这个函数主要用来清理半连接队列(下面会简要分析这个函数)
</span><span class='line'>        /* Special case. */
</span><span class='line'>        inet_csk_listen_stop(sk);
</span><span class='line'>        //处理要关闭的sock
</span><span class='line'>        goto adjudge_to_death;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //遍历sk_receive_queue也就是输入buf队列。然后统计还没有读取的数据。
</span><span class='line'>    while ((skb = __skb_dequeue(&sk-&gt;sk_receive_queue)) != NULL) {
</span><span class='line'>        u32 len = TCP_SKB_CB(skb)-&gt;end_seq - TCP_SKB_CB(skb)-&gt;seq -
</span><span class='line'>              tcp_hdr(skb)-&gt;fin;
</span><span class='line'>        data_was_unread += len;
</span><span class='line'>        //free这个skb
</span><span class='line'>        __kfree_skb(skb);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    sk_mem_reclaim(sk);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    //第一个if主要是实现了rfc2525的2.17,也就是关闭的时候，如果接收buf中有未读数据，则发送一个rst给对端。(下面有摘抄相关内容)
</span><span class='line'>    if (data_was_unread) {
</span><span class='line'>        /* Unread data was tossed, zap the connection. */
</span><span class='line'>        NET_INC_STATS_USER(sock_net(sk), LINUX_MIB_TCPABORTONCLOSE);
</span><span class='line'>        //设置状态
</span><span class='line'>        tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>        //发送rst
</span><span class='line'>        tcp_send_active_reset(sk, GFP_KERNEL);
</span><span class='line'>    }
</span><span class='line'>    //第二个if主要是判断so_linger套接字,并且超时时间为0。此时我们就直接丢掉所有的发送缓冲区中的数据
</span><span class='line'>    else if (sock_flag(sk, SOCK_LINGER) && !sk-&gt;sk_lingertime) {
</span><span class='line'>        /* Check zero linger _after_ checking for unread data. */
</span><span class='line'>        //调用tcp_disconnect，这个函数主要用来断开和对端的连接，这个函数下面会介绍。
</span><span class='line'>        sk-&gt;sk_prot-&gt;disconnect(sk, 0);
</span><span class='line'>        NET_INC_STATS_USER(sock_net(sk), LINUX_MIB_TCPABORTONDATA);
</span><span class='line'>    }
</span><span class='line'>    //这个函数主要用来判断是否需要发送fin，也就是判断状态。下面我会详细介绍这个函数。
</span><span class='line'>    else if (tcp_close_state(sk)) {
</span><span class='line'>
</span><span class='line'>        //发送fin.
</span><span class='line'>        tcp_send_fin(sk);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //等待一段时间。这里的timeout，如果有设置so_linger的话就是l_linger.这里主要是等待发送缓冲区的buf发送(如果超时时间不为0).
</span><span class='line'>    sk_stream_wait_close(sk, timeout);
</span><span class='line'>    ........................
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h5>rfc2525的2.17的介绍：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>When an application closes a connection in such a way that it can no longer read any received data, 
</span><span class='line'>the TCP SHOULD, per section 4.2.2.13 of RFC 1122, send a RST if there is any unread received data, 
</span><span class='line'>or if any new data is received. A TCP that fails to do so exhibits "Failure to RST on close with data pending".</span></code></pre></td></tr></table></div></figure>


<p>ok，现在来看上面遇到的3个函数，一个是inet_csk_listen_stop,一个是tcp_close_state,一个是tcp_disconnect.我们一个个来看他们。</p>

<p>首先是inet_csk_listen_stop函数。我们知道这个函数主要用来清理所有的半连接队列。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void inet_csk_listen_stop(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>    struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>    struct request_sock *acc_req;
</span><span class='line'>    struct request_sock *req;
</span><span class='line'>
</span><span class='line'>    //首先删除keepalive定时器。
</span><span class='line'>    inet_csk_delete_keepalive_timer(sk);
</span><span class='line'>
</span><span class='line'>    /* make all the listen_opt local to us */
</span><span class='line'>    //得到accept 队列。
</span><span class='line'>    acc_req = reqsk_queue_yank_acceptq(&icsk-&gt;icsk_accept_queue);
</span><span class='line'>
</span><span class='line'>    //然后销毁掉所有的半连接队列，也就是listen_sock队列
</span><span class='line'>    reqsk_queue_destroy(&icsk-&gt;icsk_accept_queue);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    //遍历accept队列断开与对端的连接。
</span><span class='line'>    while ((req = acc_req) != NULL) {
</span><span class='line'>    ...............................................
</span><span class='line'>
</span><span class='line'>        //调用tcp_disconnect来断开与对端的连接。这里注意是非阻塞的。
</span><span class='line'>        sk-&gt;sk_prot-&gt;disconnect(child, O_NONBLOCK);
</span><span class='line'>
</span><span class='line'>        sock_orphan(child);
</span><span class='line'>
</span><span class='line'>        percpu_counter_inc(sk-&gt;sk_prot-&gt;orphan_count);
</span><span class='line'>
</span><span class='line'>        //销毁这个sock。
</span><span class='line'>        inet_csk_destroy_sock(child);
</span><span class='line'>
</span><span class='line'>        ........................................
</span><span class='line'>    }
</span><span class='line'>    WARN_ON(sk-&gt;sk_ack_backlog);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>接下来来看tcp_disconnect函数。这个函数主要用来断开和对端的连接.它会释放读写队列，发送rst，清除定时器等等一系列操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int tcp_disconnect(struct sock *sk, int flags)
</span><span class='line'>{
</span><span class='line'>    struct inet_sock *inet = inet_sk(sk);
</span><span class='line'>    struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>    struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>    int err = 0;
</span><span class='line'>    int old_state = sk-&gt;sk_state;
</span><span class='line'>
</span><span class='line'>    if (old_state != TCP_CLOSE)
</span><span class='line'>        tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>    ...................
</span><span class='line'>
</span><span class='line'>    //清除定时器，重传，delack等。
</span><span class='line'>    tcp_clear_xmit_timers(sk);
</span><span class='line'>    //直接free掉接收buf。
</span><span class='line'>    __skb_queue_purge(&sk-&gt;sk_receive_queue);
</span><span class='line'>    //free掉写buf。
</span><span class='line'>    tcp_write_queue_purge(sk);
</span><span class='line'>    __skb_queue_purge(&tp-&gt;out_of_order_queue);
</span><span class='line'>#ifdef CONFIG_NET_DMA
</span><span class='line'>    __skb_queue_purge(&sk-&gt;sk_async_wait_queue);
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>    inet-&gt;dport = 0;
</span><span class='line'>
</span><span class='line'>    if (!(sk-&gt;sk_userlocks & SOCK_BINDADDR_LOCK))
</span><span class='line'>        inet_reset_saddr(sk);
</span><span class='line'>        ..........................................
</span><span class='line'>    //设置状态。
</span><span class='line'>    tcp_set_ca_state(sk, TCP_CA_Open);
</span><span class='line'>    //清理掉重传的一些标记
</span><span class='line'>    tcp_clear_retrans(tp);
</span><span class='line'>    inet_csk_delack_init(sk);
</span><span class='line'>    tcp_init_send_head(sk);
</span><span class='line'>    memset(&tp-&gt;rx_opt, 0, sizeof(tp-&gt;rx_opt));
</span><span class='line'>    __sk_dst_reset(sk);
</span><span class='line'>
</span><span class='line'>    WARN_ON(inet-&gt;num && !icsk-&gt;icsk_bind_hash);
</span><span class='line'>
</span><span class='line'>    sk-&gt;sk_error_report(sk);
</span><span class='line'>    return err;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>紧接着是tcp_close_state函数这个函数就是用来判断是否应该发送fin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//这个数组表示了当close后，tcp的状态变化，可以看到注释很清楚，包含了3部分。这里也就是通过current也就是tcp的状态取得new state也就是close的状态，然后再和TCP_ACTION_FIN按位于，得到action
</span><span class='line'>static const unsigned char new_state[16] = {
</span><span class='line'>  /* current state:        new state:      action:  */
</span><span class='line'>  /* (Invalid)      */ TCP_CLOSE,
</span><span class='line'>  /* TCP_ESTABLISHED    */ TCP_FIN_WAIT1 | TCP_ACTION_FIN,
</span><span class='line'>  /* TCP_SYN_SENT   */ TCP_CLOSE,
</span><span class='line'>  /* TCP_SYN_RECV   */ TCP_FIN_WAIT1 | TCP_ACTION_FIN,
</span><span class='line'>  /* TCP_FIN_WAIT1  */ TCP_FIN_WAIT1,
</span><span class='line'>  /* TCP_FIN_WAIT2  */ TCP_FIN_WAIT2,
</span><span class='line'>  /* TCP_TIME_WAIT  */ TCP_CLOSE,
</span><span class='line'>  /* TCP_CLOSE      */ TCP_CLOSE,
</span><span class='line'>  /* TCP_CLOSE_WAIT */ TCP_LAST_ACK  | TCP_ACTION_FIN,
</span><span class='line'>  /* TCP_LAST_ACK   */ TCP_LAST_ACK,
</span><span class='line'>  /* TCP_LISTEN     */ TCP_CLOSE,
</span><span class='line'>  /* TCP_CLOSING    */ TCP_CLOSING,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static int tcp_close_state(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>    //取得new state
</span><span class='line'>    int next = (int)new_state[sk-&gt;sk_state];
</span><span class='line'>    int ns = next & TCP_STATE_MASK;
</span><span class='line'>
</span><span class='line'>    tcp_set_state(sk, ns);
</span><span class='line'>
</span><span class='line'>    //得到action
</span><span class='line'>    return next & TCP_ACTION_FIN;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>接下来来看tcp_close的剩余部分的代码，剩下的部分就是处理一些状态以及通知这里只有一个要注意的就是TCP_LINGER2这个套接字，这个套接字能够设置等待fin的超时时间，也就是tcp_sock的域linger2.我们知道系统还有一个sysctl_tcp_fin_timeout，也就是提供了一个sys文件系统的接口来修改这个值，不过我们如果设置linger2为一个大于0的值的话，内核就会取linger2这个值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adjudge_to_death:
</span><span class='line'>
</span><span class='line'>    //得到sock的状态。
</span><span class='line'>    state = sk-&gt;sk_state;
</span><span class='line'>    sock_hold(sk);
</span><span class='line'>    sock_orphan(sk);
</span><span class='line'>
</span><span class='line'>    //唤醒阻塞在这个sock的队列(前面有详细介绍这个函数)
</span><span class='line'>    release_sock(sk);
</span><span class='line'>
</span><span class='line'>    local_bh_disable();
</span><span class='line'>    bh_lock_sock(sk);
</span><span class='line'>    WARN_ON(sock_owned_by_user(sk));
</span><span class='line'>
</span><span class='line'>    //全局的cpu变量引用计数减一。
</span><span class='line'>    percpu_counter_inc(sk-&gt;sk_prot-&gt;orphan_count);
</span><span class='line'>
</span><span class='line'>    /* Have we already been destroyed by a softirq or backlog? */
</span><span class='line'>    if (state != TCP_CLOSE && sk-&gt;sk_state == TCP_CLOSE)
</span><span class='line'>        goto out;
</span><span class='line'>
</span><span class='line'>    //如果状态为TCP_FIN_WAIT2,说明接收了ack，在等待对端的fin。
</span><span class='line'>    if (sk-&gt;sk_state == TCP_FIN_WAIT2) {
</span><span class='line'>        struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>        //超时时间小于0,则说明马上超时，设置状态为tcp_close,然后发送rst给对端。
</span><span class='line'>        if (tp-&gt;linger2 &lt; 0) {
</span><span class='line'>            tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>            tcp_send_active_reset(sk, GFP_ATOMIC);
</span><span class='line'>            NET_INC_STATS_BH(sock_net(sk),
</span><span class='line'>                    LINUX_MIB_TCPABORTONLINGER);
</span><span class='line'>        } else {
</span><span class='line'>            //得到等待fin的超时时间。这里主要也就是在linger2和sysctl_tcp_fin_timeout中来取得。
</span><span class='line'>            const int tmo = tcp_fin_time(sk);
</span><span class='line'>            //如果超时时间太长，则启动keepalive定时器发送探测报。
</span><span class='line'>            if (tmo &gt; TCP_TIMEWAIT_LEN) {
</span><span class='line'>                inet_csk_reset_keepalive_timer(sk,
</span><span class='line'>                        tmo - TCP_TIMEWAIT_LEN);
</span><span class='line'>            } else {
</span><span class='line'>                //否则进入time_wait状态。
</span><span class='line'>                tcp_time_wait(sk, TCP_FIN_WAIT2, tmo);
</span><span class='line'>                goto out;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    ......................................
</span><span class='line'>
</span><span class='line'>    //如果sk的状态为tcp_close则destroy掉这个sk
</span><span class='line'>    if (sk-&gt;sk_state == TCP_CLOSE)
</span><span class='line'>        inet_csk_destroy_sock(sk);
</span><span class='line'>    /* Otherwise, socket is reprieved until protocol close. */
</span><span class='line'>
</span><span class='line'>out:
</span><span class='line'>    bh_unlock_sock(sk);
</span><span class='line'>    local_bh_enable();
</span><span class='line'>    sock_put(sk);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>然后来看send_fin的实现，这个函数用来发送一个fin，并且尽量发送完发送缓冲区中的数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void tcp_send_fin(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>    struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>    //取得写bufer的尾部。
</span><span class='line'>    struct sk_buff *skb = tcp_write_queue_tail(sk);
</span><span class='line'>    int mss_now;
</span><span class='line'>
</span><span class='line'>    /* Optimization, tack on the FIN if we have a queue of
</span><span class='line'>     * unsent frames.  But be careful about outgoing SACKS
</span><span class='line'>     * and IP options.
</span><span class='line'>     */
</span><span class='line'>    mss_now = tcp_current_mss(sk);
</span><span class='line'>    //如果发送队列不为空，此时我们只需要设置sk buffer的标记位(也就是tcp报文的控制位为fin)，可以看到我们是加到写buffer的尾部，这里是为了能尽量将写buffer中的数据全部传出)
</span><span class='line'>    if (tcp_send_head(sk) != NULL) {
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;flags |= TCPCB_FLAG_FIN;
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;end_seq++;
</span><span class='line'>        tp-&gt;write_seq++;
</span><span class='line'>    } else {
</span><span class='line'>    ..................................
</span><span class='line'>        //到这里标明发送缓冲区位空，因此我们需要新建一个sk buffer，然后设置标记位，并加入到写buffer。
</span><span class='line'>        skb_reserve(skb, MAX_TCP_HEADER);
</span><span class='line'>        /* FIN eats a sequence byte, write_seq advanced by tcp_queue_skb(). */
</span><span class='line'>        tcp_init_nondata_skb(skb, tp-&gt;write_seq,
</span><span class='line'>                     TCPCB_FLAG_ACK | TCPCB_FLAG_FIN);
</span><span class='line'>        tcp_queue_skb(sk, skb);
</span><span class='line'>    }
</span><span class='line'>    //发送写缓冲区中的数据。
</span><span class='line'>    __tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_OFF);
</span><span class='line'>}
</span><span class='line'>void __tcp_push_pending_frames(struct sock *sk, unsigned int cur_mss,
</span><span class='line'>                   int nonagle)
</span><span class='line'>{
</span><span class='line'>    struct sk_buff *skb = tcp_send_head(sk);
</span><span class='line'>
</span><span class='line'>    if (!skb)
</span><span class='line'>        return;
</span><span class='line'>
</span><span class='line'>    /* If we are closed, the bytes will have to remain here.
</span><span class='line'>     * In time closedown will finish, we empty the write queue and
</span><span class='line'>     * all will be happy.
</span><span class='line'>     */
</span><span class='line'>    if (unlikely(sk-&gt;sk_state == TCP_CLOSE))
</span><span class='line'>        return;
</span><span class='line'>    //发送数据，这里关闭了nagle。也就是立即将数据全部发送出去(我前面的blog有详细解释这个函数).
</span><span class='line'>    if (tcp_write_xmit(sk, cur_mss, nonagle, 0, GFP_ATOMIC))
</span><span class='line'>        tcp_check_probe_timer(sk);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>接下来来看shutdown的实现。在2.26.31中，系统调用的实现有些变化。</h4>

<p>这里我们要知道shutdown会将写缓冲区的数据发出，然后唤醒阻塞的进程，来读取读缓冲区中的数据。</p>

<p>这个系统调用所对应的内核函数就是os_shutdown_socket。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define SHUT_RD 0
</span><span class='line'>#define SHUT_WR 1
</span><span class='line'>#define SHUT_RDWR 2
</span><span class='line'>
</span><span class='line'>int os_shutdown_socket(int fd, int r, int w)
</span><span class='line'>{
</span><span class='line'>    int what, err;
</span><span class='line'>
</span><span class='line'>    if (r && w)
</span><span class='line'>        what = SHUT_RDWR;
</span><span class='line'>    else if (r)
</span><span class='line'>        what = SHUT_RD;
</span><span class='line'>    else if (w)
</span><span class='line'>        what = SHUT_WR;
</span><span class='line'>    else
</span><span class='line'>        return -EINVAL;
</span><span class='line'>
</span><span class='line'>    //调用socket的shutdown也就是kernel_sock_shutdown
</span><span class='line'>    err = shutdown(fd, what);
</span><span class='line'>    if (err &lt; 0)
</span><span class='line'>        return -errno;
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how)
</span><span class='line'>{
</span><span class='line'>    //他最终会调用inet_shutdown
</span><span class='line'>    return sock-&gt;ops-&gt;shutdown(sock, how);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>来看inet_shutdown的实现.这个函数的主要工作就是通过判断sock的状态不同来调用相关的函数：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int inet_shutdown(struct socket *sock, int how)
</span><span class='line'>{
</span><span class='line'>    struct sock *sk = sock-&gt;sk;
</span><span class='line'>    int err = 0;
</span><span class='line'>
</span><span class='line'>    /* This should really check to make sure
</span><span class='line'>     * the socket is a TCP socket. (WHY AC...)
</span><span class='line'>     */
</span><span class='line'>    //这里要注意每个how都是加1的，这说明在内核里读写是为1,2,3
</span><span class='line'>    how++; /* maps 0-&gt;1 has the advantage of making bit 1 rcvs and
</span><span class='line'>               1-&gt;2 bit 2 snds.
</span><span class='line'>               2-&gt;3 */
</span><span class='line'>    //判断how的合法性。
</span><span class='line'>    if ((how & ~SHUTDOWN_MASK) || !how) /* MAXINT-&gt;0 */
</span><span class='line'>        return -EINVAL;
</span><span class='line'>    //锁住sock
</span><span class='line'>    lock_sock(sk);
</span><span class='line'>
</span><span class='line'>    //SS_CONNECTING说明这个sock的连接正在处理中。state域表示socket当前的内部状态
</span><span class='line'>    if (sock-&gt;state == SS_CONNECTING) {
</span><span class='line'>        //如果状态为这几个状态，说明是处于半连接处理阶段，此时设置状态为SS_DISCONNECTING
</span><span class='line'>        if ((1 &lt;&lt; sk-&gt;sk_state) &
</span><span class='line'>            (TCPF_SYN_SENT | TCPF_SYN_RECV | TCPF_CLOSE))
</span><span class='line'>            sock-&gt;state = SS_DISCONNECTING;
</span><span class='line'>        else
</span><span class='line'>            //否则设置为连接完毕
</span><span class='line'>            sock-&gt;state = SS_CONNECTED;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //除过TCP_LISTEN以及TCP_SYN_SENT状态外的其他状态最终都会进入sk-&gt;sk_prot-&gt;shutdown也就是tcp_shutdown函数。
</span><span class='line'>
</span><span class='line'>    switch (sk-&gt;sk_state) {
</span><span class='line'>    //如果状态为tco_close则设置错误号，然后进入default处理
</span><span class='line'>    case TCP_CLOSE:
</span><span class='line'>        err = -ENOTCONN;
</span><span class='line'>        /* Hack to wake up other listeners, who can poll for
</span><span class='line'>           POLLHUP, even on eg. unconnected UDP sockets -- RR */
</span><span class='line'>    default:
</span><span class='line'>        sk-&gt;sk_shutdown |= how;
</span><span class='line'>        if (sk-&gt;sk_prot-&gt;shutdown)
</span><span class='line'>            sk-&gt;sk_prot-&gt;shutdown(sk, how);
</span><span class='line'>        break;
</span><span class='line'>
</span><span class='line'>    /* Remaining two branches are temporary solution for missing
</span><span class='line'>     * close() in multithreaded environment. It is _not_ a good idea,
</span><span class='line'>     * but we have no choice until close() is repaired at VFS level.
</span><span class='line'>     */
</span><span class='line'>    case TCP_LISTEN:
</span><span class='line'>        //如果不为SHUT_RD则跳出switch，否则进入tcp_syn_sent的处理。
</span><span class='line'>        if (!(how & RCV_SHUTDOWN))
</span><span class='line'>            break;
</span><span class='line'>        /* Fall through */
</span><span class='line'>    case TCP_SYN_SENT:
</span><span class='line'>        //断开连接，然后设置state
</span><span class='line'>        err = sk-&gt;sk_prot-&gt;disconnect(sk, O_NONBLOCK);
</span><span class='line'>        sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /* Wake up anyone sleeping in poll. */
</span><span class='line'>    //唤醒阻塞在这个socket上的进程，这里是为了将读缓冲区的数据尽量读完。
</span><span class='line'>    sk-&gt;sk_state_change(sk);
</span><span class='line'>    release_sock(sk);
</span><span class='line'>    return err;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>来看tcp_shutdown函数。</p>

<p>这里要注意，当只关闭读的话，并不会引起发送fin，也就是只会设置个标记，然后在读取数据的时候返回错误。而关闭写端，则就会引起发送fin。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void tcp_shutdown(struct sock *sk, int how)
</span><span class='line'>{
</span><span class='line'>    /*  We need to grab some memory, and put together a FIN,
</span><span class='line'>     *  and then put it into the queue to be sent.
</span><span class='line'>     *      Tim MacKenzie(tym@dibbler.cs.monash.edu.au) 4 Dec '92.
</span><span class='line'>     */
</span><span class='line'>    //如果为SHUT_RD则直接返回。
</span><span class='line'>    if (!(how & SEND_SHUTDOWN))
</span><span class='line'>        return;
</span><span class='line'>
</span><span class='line'>    /* If we've already sent a FIN, or it's a closed state, skip this. */
</span><span class='line'>    //这里英文注释很详细我就不多解释了。
</span><span class='line'>    if ((1 &lt;&lt; sk-&gt;sk_state) &
</span><span class='line'>        (TCPF_ESTABLISHED | TCPF_SYN_SENT |
</span><span class='line'>         TCPF_SYN_RECV | TCPF_CLOSE_WAIT)) {
</span><span class='line'>        /* Clear out any half completed packets.  FIN if needed. */
</span><span class='line'>        //和tcp_close那边处理一样
</span><span class='line'>        if (tcp_close_state(sk))
</span><span class='line'>            tcp_send_fin(sk);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最后来看sock_def_readable它就是sk->sk_state_change。也就是用来唤醒阻塞的进程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void sock_def_readable(struct sock *sk, int len)
</span><span class='line'>{
</span><span class='line'>    read_lock(&sk-&gt;sk_callback_lock);
</span><span class='line'>    //判断是否有进程在等待这个sk
</span><span class='line'>    if (sk_has_sleeper(sk))
</span><span class='line'>    //有的话，唤醒进程，这里可以看到递交给上层的是POLLIN,也就是读事件。
</span><span class='line'>    wake_up_interruptible_sync_poll(sk-&gt;sk_sleep, POLLIN |
</span><span class='line'>                        POLLRDNORM | POLLRDBAND);
</span><span class='line'>
</span><span class='line'>    //这里异步唤醒，可以看到这里也是POLL_IN.
</span><span class='line'>    sk_wake_async(sk, SOCK_WAKE_WAITD, POLL_IN);
</span><span class='line'>    read_unlock(&sk-&gt;sk_callback_lock);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以看到shutdown函数只会处理SEND_SHUTDOWN。并且当调用shutdown之后，读缓冲区，还可以继续读取。</p>
]]></content>
  </entry>
  
</feed>
