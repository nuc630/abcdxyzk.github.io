<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-03-09T11:22:18+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bonding的源代码分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding-source/"/>
    <updated>2016-03-09T10:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding-source</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/matrix207/bonding">https://github.com/matrix207/bonding</a></p>

<h3>1.  目的</h3>

<p>  本文档结合相关内核代码和对Linux 2.6.9内核中Bonding模块的三种主要工作模式的工作<br/>
  原理和流程。在配置Bond模块时，除了资料[2]，本文档也有一定的参考价值。</p>

<h3>2. 内容</h3>

<p>本文档包含下列内容：</p>

<ul>
<li>Bonding模块工作流程综述。（第3节）</li>
<li>Bonding链路状态监控机制（mii模式、arp模式）描述。（第4节）</li>
<li>Bonding模块三种主要工作模式：balance-rr、active- backup和broadcast相关代码分析。（第5节）</li>
<li>Bonding模块关键数据结构和函数的代码分析。（第5节）</li>
</ul>


<p>如果想了解bonding模块的原理和工作流程，请阅读3、4节，如果想进一步分析bonding模块的代码，请阅读5节。</p>

<h3>3. Bonding模块工作流程综述</h3>

<p>  Bonding模块本质上是一个虚拟的网卡驱动（network device driver），只不过并没有<br/>
  真实的物理网卡与之对应，而是由这个虚拟网卡去“管辖”一系列的真实的物理网卡，所以<br/>
  它的代码结构和一般网卡驱动的代码结构非常类似，这是共性；除此之外，它还有自己的<br/>
  一些特性功能，例如特别的链路状态监控机制，绑定/解除绑定等。</p>

<h4>3.1 物理网卡的活动状态和链路状态：</h4>

<p>  在bonding模块中为每一个被绑定的物理网卡定义了两种活动状态和四种链路状态：注意，<br/>
  这里的链路状态和实际网卡真实的链路状态（是否故障、是否有网线连接）没有直接的关系，<br/>
  虽然bonding模块通过MII或者ARP侦测到实际网卡故障时也会改变自定义的链路状态值<br/>
  （例如从BOND_LINK_UP切换到BOND_LINK_FAIL随后切换到 BOND_LINK_DOWN状态），但是<br/>
  概念上应该把这两类链路状态区分开。在本文档随后的内容中，除非特别指出，“链路状态”<br/>
  都指bonding模块自定义的链路状态。</p>

<p>  活动状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOND_STATE_ACTIVE：处于该状态的网卡是潜在的发送数据包的候选者
</span><span class='line'>BOND_STATE_BACKUP：处于该状态的网卡在选择发送数据的网卡时被排除</span></code></pre></td></tr></table></div></figure>


<p>  链路状态：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOND_LINK_UP：  上线状态（处于该状态的网卡是是潜在的发送数据包的候选者）
</span><span class='line'>BOND_LINK_DOWN：故障状态
</span><span class='line'>BOND_LINK_FAIL：网卡出现故障，向状态BOND_LINK_DOWN 切换中
</span><span class='line'>BOND_LINK_BACK：网卡恢复，向状态BOND_LINK_UP切换中</span></code></pre></td></tr></table></div></figure>


<p>  一个网卡必须活动状态为BOND_STATE_ACTIVE并且链路状态为 BOND_LINK_UP，才有可能作<br/>
  为发送数据包的候选者，注意，这里所说的数据包并不包含ARP请求，在使用ARP链路状态<br/>
  监控时，一个处于BOND_LINK_BACK状态的网卡也可能发送ARP请求。</p>

<p>  bonding模块的所有工作模式可以分为两类：多主型工作模式和主备型工作模式，balance-rr<br/>
  和broadcast属于多主型工作模式而active-backup属于主备型工作模式。（balance-xor、<br/>
  自适应传输负载均衡模式（balance-tlb）和自适应负载均衡模式（balance-alb）也属于<br/>
  多主型工作模式，IEEE 802.3ad动态链路聚合模式（802.3ad）属于主备型工作模式，在本文档中不加以讨论）</p>

<p>  在多主型工作模式中，如果物理网卡不出现故障，所有的物理网卡都处于 BOND_STATE_ACTIVE<br/>
  和BOND_LINK_UP的状态下，参与数据的收发，此时：如果工作在balance-rr 模式中轮流<br/>
  向各个网卡发送数据，curr_active_slave字段（见5.1.3）指向前次发送数据（不包含<br/>
  ARP请求）的物理网卡，该指针每次发送过数据后都会切换到下一个物理网卡；在broadcast<br/>
  模式中向所有网卡发送数据，curr_active_slave字段除非网卡有故障发生不会切换。</p>

<p>  在主备型工作模式中，如果物理网卡不出现故障，只有一块网卡（活动网卡）处于 <br/>
  BOND_STATE_ACTIVE和BOND_LINK_UP的状态下，负责数据的收发，而其他网卡（后备网卡）<br/>
  处于BOND_STATE_BACKUP 和BOND_LINK_DOWN状态下，此时curr_active_slave字段指向当前的活动网卡。</p>

<p>  如果工作在active-backup模式下，可以指定一个物理网卡作为主网卡（primitive interface）<br/>
  ,如果主网卡可用，就把主网卡作为当前活动网卡，否则在其他的可用网卡中选取一块网<br/>
  卡作为当前活动网卡，而一旦主网卡从故障中恢复，不管当前活动网卡是否故障都切换到<br/>
  主网卡。在balance-tlb和balance-alb模式中也可以指定主网卡，但是其意义和active-backup模式中并不相同。</p>

<h4>3.2 数据收发流程</h4>

<p>  如果一个物理网卡被虚拟网卡绑定，则代表该网卡的数据结构struct net_device中下列字段将发生变化：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>flags字段（unsigned short）将包含IFF_SLAVE标志。
</span><span class='line'>master字段（struct net_device *）将指向虚拟网卡。</span></code></pre></td></tr></table></div></figure>


<p>  在主备型工作模式下，所有的非活动物理网卡的flags字段还将设置IFF_NOARP标志位表示对ARP请求不做出回应。</p>

<p>  而代表虚拟网卡的struct net_device数据结构的flags字段将包含IFF_MASTER标志。</p>

<p>  所有被绑定的物理网卡都将被设置相同的MAC地址和MTU值（和虚拟网卡也相同），这些值<br/>
  将和第一块被绑定的物理网卡保持一致（“第一块网卡”并不是一个强制条件，这是由bonding<br/>
  模块的启动流程造成的，我们也可以手工设置虚拟网卡的MAC地址和MTU值，这个设定同时<br/>
  也将用于所有被绑定的物理网卡）。另外，所有被绑定的物理网卡没有IP地址，所以不参<br/>
  与发送IP数据包的路由选择。</p>

<p>  在下面的三节中，只描述数据发送和接收过程中和bonding相关的一些特殊处理，关于Linux<br/>
  内核的一般数据包收发流程请参考资料[3][4]，本文档不再赘述。</p>

<h5>3.2.1 接收数据</h5>

<p>  无论在何种模式下，只要物理网卡的实际链路状态正常，任何被绑定的物理网卡都可以接<br/>
  收数据（虽然没有IP地址，但是仍然有MAC地址），即使是处于BOND_STATE_BACKUP和BOND_LINK_DOWN<br/>
  状态时，这是由于BOND_STATE_BACKUP和BOND_LINK_DOWN是bonding模块自己定义的管理物<br/>
  理网卡所用的状态，和内核的TCP/IP栈没有任何关系，bonding模块最多在主备模式下给<br/>
  备用物理网卡设置IFF_NOARP标志，使它对ARP数据包不做出回应，仅此而已。</p>

<p>  收取数据包时，物理网卡驱动的中断处理函数把数据包放入接收队列中，随后软中断<br/>
  NET_RX_SOFTIRQ的处理函数net_rx_action被调用，该函数将调用接收数据包的物理网卡网卡的poll函数。</p>

<p>  无论一个物理网卡是否支持NAPI，函数netif_receive_skb都将在某个阶段被调用。<br/>
  （如果物理网卡不支持NAPI，内核使用函数process_backlog代替真实的poll调用，<br/>
  而process_backlog调用netif_receive_skb）。</p>

<p>  在netif_receive_skb函数中将调用函数skb_bond，该函数本质上作如下操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(dev-&gt;master) skb-&gt;dev = dev-&gt;master;</span></code></pre></td></tr></table></div></figure>


<p>  即把数据包skb的物理网卡字段替换为虚拟网卡，使得该数据包看起来像是从虚拟网卡接<br/>
  收的一样，随后的处理和其他数据包没有任何差别，不再赘述。</p>

<h5>3.2.2 发送数据</h5>

<p>  发送数据包时，内核根据路由选择某一个虚拟网卡作为发送接口（注意被绑定的物理网卡<br/>
  没有IP地址），最后调用该虚拟网卡的数据包传输接口net_device-> hard_start_xmit，<br/>
  注意此时该数据包中的dev字段指向虚拟网卡。net_device-> hard_start_xmit接口根据<br/>
  不同的工作模式指向不同的传输函数，但是无论是何种工作模式，最后bond_dev_queue_xmit<br/>
  函数都将被调用（以一个选定的物理网卡作为参数调用）。</p>

<p>  bond_dev_queue_xmit函数将作如下操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>skb-&gt;dev = slave_dev;</span></code></pre></td></tr></table></div></figure>


<p>  即替换skb的dev字段为选定的物理网卡。</p>

<p>  随后，bond_dev_queue_xmit将调用标准的内核接口dev_queue_xmit把数据包放入选定物理网卡的发送队列中。</p>

<h5>3.2.3 ARP请求和回应</h5>

<p>  既然被绑定物理网卡没有IP地址，那么如果接收到ARP请求之后，根据何IP地址决定是否产生应答？<br/>
  如果产生应答，在应答中，源IP地址应该是什么？</p>

<p>  答案是：被绑定物理网卡接收到ARP请求后，由于函数arp_rcv在netif_receive_skb之后被调用，<br/>
  而skb->dev经过netif_receive_skb的处理将指向虚拟网卡，所以是否产生应答由该物理网卡所<br/>
  属的虚拟网卡的IP地址决定（当然前提是物理网卡没有设置IFF_NOARP标志），并且最终的ARP<br/>
  回应将包含虚拟网卡的IP地址（细节请参考arp_rcv和arp_process函数）。</p>

<h3>4. 链路状态监控</h3>

<p>链路状态监控有如下两个作用：</p>

<ul>
<li>根据被绑定物理网卡的实际链路状态（是否故障、网线是否连接）更新bonding模块自定义<br/>
的物理网卡链路状态和活动状态。</li>
<li>在主备模式下，根据自定义的物理网卡链路状态切换活动状态和当前的活动网卡。</li>
</ul>


<p>Bonging模块支持两种模式的链路状态监控：通过MII ioctl调用直接进行或是通过发送ARP<br/>
请求间接进行。前者通过调用物理网卡驱动程序的MII ioctl接口直接获得物理网卡是否<br/>
故障的信息，后者通过向预定义的一组IP地址发送ARP请求，并观察被监控物理网卡是否<br/>
有收到数据包（可能是ARP回答或者是一般数据包）间接进行。</p>

<p>这两种链路状态监控模式不能并存。参数arp_interval和miimon表示以毫秒为单位的检测<br/>
间隔，在加载bonding模块时如果指定了非0的arp_interval参数并且miimon参数等于0，<br/>
则使用ARP链路状态监控；如果指定了非0 miimon参数则使用MII链路状态监控<br/>
（强制arp_interval = 0从而忽略arp_interval参数）。如果arp_interval和miimon都<br/>
等于0则使用参数值为100的MII链路状态监控（强制miimon等于100 ms）。</p>

<p>如果使用ARP链路状态监控，还<em>必须</em>指定 arp_ip_target参数，该参数设定ARP监控时发送ARP<br/>
请求的目标IP列表，各个IP之间使用逗号分隔。</p>

<p>如果使用MII链路状态监控，还<em>可以</em>指定参数updelay和downdelay作为从BOND_LINK_DOWN到<br/>
BOND_LINK_UP或者从BOND_LINK_UP 到BOND_LINK_DOWN切换的时间间隔，这两个参数默认是0值。<br/>
（在ARP链路状态监控中这两个参数没有用）</p>

<h4>4.1 MII链路状态监控</h4>

<p>MII链路状态监控可以用下列流程图表示</p>

<p>您的浏览器可能不支持显示此图像。</p>

<p>初始时，如果虚拟网卡工作在多主型工作模式下，则所有物理网卡的链路状态为BOND_LINK_UP，<br/>
并且活动状态处于BOND_STATE_ACTIVE，IFF_NOARP标志都没有设置；否则所有物理网卡的链路<br/>
状态为 BOND_LINK_UP，但是只有当前活动网卡的活动状态处于BOND_STATE_ACTIVE并且没有<br/>
设置IFF_NOARP 标志，而其余网卡的活动状态为BOND_STATE_BACKUP并且IFF_NOARP标志被设置。</p>

<p>MII检测机制每miimon毫秒检测一遍所有被绑定物理网卡的状态。</p>

<ol>
<li>在某时刻，如果通过MII调用侦测到某一个物理网卡发生故障，则该物理网卡的链路状态立<br/>
即被设置为BOND_LINK_FAILED。</li>
<li>如果在downdelay毫秒内物理网卡恢复正常，则重新把网卡的链路状态设置为BOND_LINK_UP。</li>
<li>如果在downdelay毫秒内物理网卡始终没有恢复正常，则该物理网卡的链路状态被设置为<br/>
BOND_LINK_DOWN。如果虚拟网卡工作于主备型工作模式下，则活动状态被设置为BOND_STATE_BACKUP<br/>
同时设置物理网卡的IFF_NOARP标志，并且如果出故障的是当前活动网卡，则通过一个重<br/>
选择过程选择新的活动网卡（一般是第一块可用物理网卡）。</li>
<li>如果一个链路状态为BOND_LINK_DOWN的物理网卡在MII检测过程中恢复正常，则立即把网卡<br/>
的链路状态设置为BOND_LINK_BACK。</li>
<li>如果在updelay毫秒内物理网卡又发生故障，就把链路状态重新设置为BOND_LINK_DOWN。</li>
<li>如果ådelay毫秒内物理网卡始终保持可用状态，就把链路状态重新设置为BOND_LINK_UP。<br/>
如果虚拟网卡工作于主备型工作模式下，则同时设置活动状态为BOND_STATE_ACTIVE并且<br/>
清除物理网卡的IFF_NOARP标志，并且如果是主网卡恢复到BOND_STATE_ACTIVE状态，则会<br/>
把当前活动网卡切换到主网卡。</li>
</ol>


<h4>4.2 ARP链路状态监控</h4>

<h5>4.2.1 active-backup工作模式下的ARP链路状态监控</h5>

<p>该模式下的ARP链路状态监控可以分为两个阶段：</p>

<ol>
<li><p>如果当前活动网卡（curr_active_slave不为NULL）存在，则以间隔 arp_interval毫秒从当<br/>
前活动网卡向arp_targets表示的各个IP地址发送ARP请求，如果当前活动网卡在过去的<br/>
2<em>arp_interval毫秒内没有数据包发送</em>和<em>接收并且已经作为活动网卡至少 2</em>arp_interval<br/>
毫秒，则把当前活动网卡的链路状态设置为BOND_LINK_DOWN并且试图在链路状态为BOND_LINK_UP<br/>
或者BOND_LINK_BACK的网卡中选取一个网卡作为当前活动网卡。如果有这样一个网卡存在，<br/>
则原来的活动网卡的活动状态被设置为BOND_STATE_BACKUP，并且IFF_NOARP标志被设置，<br/>
新的活动网卡链路状态被设置为BOND_STATE_UP, 活动状态被设置为BOND_STATE_ACTIVE，<br/>
IFF_NOARP标志被清除。</p></li>
<li><p>如果上述过程没有选出新的活动网卡（正常情况下active-backup 模式下除当前活动网卡<br/>
外所有网卡的链路状态都是BOND_LINK_DOWN，所以可能没有链路状态为BOND_LINK_UP或者<br/>
BOND_LINK_BACK的后备网卡），则开始一个下述的选取活动网卡的过程：</p></li>
</ol>


<p>从第一块可用（即IFF_UP标志被设置，netif_running(dev)和netif_carrier_ok(dev)都返回非0值）<br/>
物理网卡开始，向arp_targets表示的各个IP地址发送ARP请求，然后观察所有的物理网卡，<br/>
如果有物理网卡在arp_interval毫秒内有数据发送<em>和</em>接收，就把它设置为当前活动网卡，结束这个选取过程。否则换下一个可用物理网卡，重复这个过程。
注意即使物理网卡被设置IFF_NOARP标志，仍旧可以收到ARP应答数据包。</p>

<h5>4.2.2 其他工作模式下的ARP链路状态监控</h5>

<p>  虚拟网卡每arp_interval遍历一遍所有被绑定物理网卡，如果在网卡在过去的2 * arp_interval毫秒内没有任何数据的发送<em>或者</em>接收，就把网卡的链路状态设置为 BOND_LINK_DOWN，活动状态设置为BOND_STATE_BACKUP，如果在过去的arp_interval毫秒有数据包发送<em>和</em>接收，则把网卡的链路状态设置为BOND_LINK_UP，活动状态设置为 BOND_STATE_ACTIVE。</p>

<p>  在遍历过程中，对每一个可用的物理网卡（IFF_UP标志被设置，netif_running(dev)和netif_carrier_ok(dev)都返回非0值），都试图从该网卡向arp_targets表示的各个IP地址发送ARP请求，保证其他的被绑定的物理网卡可以收到ARP应答包。</p>

<h3>5. 代码分析</h3>

<h4>5.1 关键数据结构</h4>

<ul>
<li>1.struct bond_params</li>
</ul>


<p>文件：driver/net/bonding/bonding.h</p>

<p>该结构是全局结构（每系统一个），对应于加载bonding模块时传入的各个参数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>mode  int  Bonding模块工作模式
</span><span class='line'>&#9;BOND_MODE_ROUNDROBIN     balance-rr模式
</span><span class='line'>&#9;BOND_MODE_ACTIVEBACKUP   active-backup模式
</span><span class='line'>&#9;BOND_MODE_XOR            balance-xor模式
</span><span class='line'>&#9;BOND_MODE_BROADCAST      broadcast模式
</span><span class='line'>&#9;BOND_MODE_8023AD         IEEE 802.3ad动态链路聚合模式
</span><span class='line'>&#9;BOND_MODE_TLB            自适应传输负载均衡模式
</span><span class='line'>&#9;BOND_MODE_ALB            自适应负载均衡模式
</span><span class='line'>miimon  int  使用MII链路状态监控时的时间间隔（ms）
</span><span class='line'>arp_interval  int  使用arp链路状态监控时的时间间隔（ms）
</span><span class='line'>use_carrier  int  使用MII链路状态监控时是否使用更新的carrier调用
</span><span class='line'>updelay  int  使用MII链路状态监控时从BACK状态切换到UP状态的时延(ms)
</span><span class='line'>downdelay  int  使用MII链路状态监控时从FAIL状态切换到DOWN状态的时延(ms)
</span><span class='line'>primary  char[]  用来在active-backup、balance-tlb和balance-alb模式中指定主网卡
</span><span class='line'>arp_targets  u32[]  在ARP链路状态监控中将向这些IP地址发送ARP请求。</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2.struct slave</li>
</ul>


<p>文件：driver/net/bonding/Bonding.h</p>

<p>每一个被管辖的物理网卡对应一个该数据结构的实例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>dev  struct net_device*  指向被绑定的物理网卡
</span><span class='line'>next，prev  struct slave *  所有的slave数据结构通过这两个指针双向链接到一起形成*循环*链表
</span><span class='line'>delay  s16  用于保存MII链路状态监控和ARP链路状态监控的时延值。
</span><span class='line'>jiffies  u32  用于active-backup模式下的ARP状态监控
</span><span class='line'>link  s8  表示对应网卡的链路状态，取下列四个值之一：
</span><span class='line'>&#9;BOND_LINK_UP     上线状态
</span><span class='line'>&#9;BOND_LINK_DOWN   故障状态
</span><span class='line'>&#9;BOND_LINK_FAIL   网卡出现故障，状态BOND_LINK_DOWN切换中
</span><span class='line'>&#9;BOND_LINK_BACK   网卡恢复，状态BOND_LINK_UP切换中
</span><span class='line'>state  s8  表示对应网卡活动状态，取下列两个值之一：
</span><span class='line'>&#9;BOND_STATE_ACTIVE            活动状态
</span><span class='line'>&#9;BOND_STATE_BACKUP            后备状态
</span><span class='line'>original_flags  u32  保存被绑定物理网卡原来的flags
</span><span class='line'>perm_hwaddr  u8[]  保存被绑定物理网卡原来的MAC地址
</span><span class='line'>ad_info  struct ad_slave_info  记录IEEE 802.3ad动态链路聚合模式下的“每网卡”相关状态信息
</span><span class='line'>tlb_info  struct tlb_slave_info  记录自适应传输负载均衡模式下的“每网卡”相关状态信息
</span><span class='line'>link_failure_count  u32  网卡从BOND_LINK_FAIL切换到BOND_LINK_DOWN的次数
</span><span class='line'>speed  u16  记录网卡的传输速度（10M/100M/1000G）
</span><span class='line'>duplex  u8  网卡工作模式（全双工？）</span></code></pre></td></tr></table></div></figure>


<ul>
<li>3.struct bonding</li>
</ul>


<p>文件：driver/net/bonding/Bonding.h</p>

<p>每一个虚拟网卡对应一个该数据结构的实例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>dev  struct net_device*  指向虚拟网卡（例如bond0、bond1等等）
</span><span class='line'>first_slave  struct   slave *  指向被绑定的第一个物理网卡对应的slave结构。
</span><span class='line'>curr_active_slave  struct   slave *  指向当前活动的网卡对应的slave结构，在不同的工作模式下有不同的含义。
</span><span class='line'>current_arp_slave  struct   slave *  用于ARP状态监控（只用于bond_activebackup_arp_mon）
</span><span class='line'>primary_slave  struct   slave *  如果使用BOND_MODE_ACTIVEBACKUP、BOND_MODE_TLB或者BOND_MODE_ALB模式，则指向主物理网卡对应的slave结构（primary_slave）
</span><span class='line'>slave_cnt  s32  虚拟网卡所管辖的物理网络接口的个数
</span><span class='line'>lock  rwlock_t  每一个虚拟网卡管辖一系列物理网卡，每一个物理网卡对应一个slave结构，所有的slave被放在一个链表中，这个读写锁用来保护该链表。
</span><span class='line'>curr_slave_lock  rwlock_t  用来保护curr_active_slave的读写锁。
</span><span class='line'>mii_timer  struct   timer_list  用于MII链路状态监控的定时器
</span><span class='line'>arp_timer  struct   timer_list  用于ARP链路状态监控的定时器
</span><span class='line'>kill_timers  s8  如果该标志置位，所有的计时器超时后就不再重新设置，从而可以被安全删除
</span><span class='line'>bond_list  struct   list_head  通过该结构，所有的bonding数据结构被连接为双向链表，链表头是全局变量bond_dev_list。</span></code></pre></td></tr></table></div></figure>


<h4>5.2 关键函数</h4>

<p>本节描述了bonding模块关键函数的操作流程，这些函数是基本的原子模块，其他没有被列举的函数仅仅是对这些函数的简单包装。</p>

<h5>5.2.1 模块初始化/释放</h5>

<ul>
<li>1.初始化</li>
</ul>


<h6>bonding_init</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int __init bonding_init(void)</span></code></pre></td></tr></table></div></figure>


<p>bonding_init作为bonging模块的初始化函数，在模块被加载时被调用。它主要做如下工作：</p>

<ol>
<li>调用函数bond_check_params解析传入模块的参数并检查其合法性，结果放入数据结构params中。其中params是一个类型为bond_params的全局变量。</li>
<li>如果内核支持proc文件系统，调用bond_create_proc_dir在/proc/net下创建目录/proc/net/bonding。</li>
<li>如果传入参数指定了bond设备的个数（通过参数max_bonds），则通过下列步骤创建max_bonds个bond设备（从bond0到bondN）

<ol>
<li>调用alloc_netdev和dev_alloc_name创建网络设备，指定每一个设嘯一个bonding结构（dev->priv）。</li>
<li>为每一个新创建的虚拟网络设备调用bond_init函数。</li>
<li>调用register_netdevice注册这个新创建的网络设备。</li>
</ol>
</li>
<li>调用register_netdevice_notifier，注册函数bond_netdev_notifier为网络事件处理函数。</li>
</ol>


<h6>bond_init</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int __init bond_init(struct net_device *bond_dev, struct bond_params *params)</span></code></pre></td></tr></table></div></figure>


<p>该函数对每一个新创建的虚拟网络设备调用一次。它主要做下列工作。</p>

<ol>
<li>取出虚拟网络设备bond_dev的私有数据块，用bond指向它（struct bonding *bond）。</li>
<li>初始化两个读写锁bond->lock和bond->curr_slave_lock。</li>
<li>把bond->first_slave、bond->curr_active_slave、bond->current_arp_slave、bond->primary_slave全部置为NULL。bond->dev指向属主网络设备bond_dev。</li>
<li>设置bond_dev的一系列通用接口函数，例如open、close、get_stats、do_ioctl、set_multicast_list、change_mtu和set_mac_address。</li>
<li>根据不同的工作模式，设置bond_dev的通用接口函数hard_start_xmit 指向不同的目的函数。例如如果工作模式是BOND_MODE_ROUNDROBIN，则 hard_start_xmit指向函数bond_xmit_roundrobin。</li>
<li>设置bond_dev->tx_queue_len为0，表示发送队列大小没有限制。</li>
<li>设置bond_dev->flags为IFF_MASTER|IFF_MULTICAST表示该设备支持Muticase并且是一个流量均衡组中的master（被它管辖的其他物理网卡将被设置IFF_SLAVE标志）。</li>
<li>其他和VLAN相关的标志设置和初始化。</li>
<li>如果内核支持proc文件系统，调用bond_create_proc_entry在目录/proc/net/bonding下创建对应的proc文件。</li>
<li>调用list_add_tail把该bonding数据结构添加到bond_dev_list中。</li>
</ol>


<h6>2. 释放 bonding_exit</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void __exit bonding_exit(void)</span></code></pre></td></tr></table></div></figure>


<p>该函数在模块被卸载的时候被调用，它主要做如下工作：</p>

<ol>
<li>调用unregister_netdevice_notifier注销网络事件处理函数。</li>
<li>调用bond_free_all注销所有形如bondN的虚拟网络接口。bond_free_all遍历bond_dev_list链表，并且对其中的每一个类型为 struct bonding*的数据结构bond做如下操作：</li>
<li>调用unregister_netdevice注销bond->dev</li>
<li>调用bond_deinit(bond->dev)</li>
<li>调用bond_destroy_proc_dir删除/proc/net/bonding目录</li>
</ol>


<h5>bond_deinit</h5>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline void bond_deinit(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数对每一个虚拟网卡的实例调用一次，它主要做如下操作：</p>

<ol>
<li>调用list_del把虚拟网卡对应的bonding数据结构从bond_dev_list链表中摘除。</li>
<li>调用bond_remove_proc_entry删除/proc/net/bonding目录中的对应文件。</li>
</ol>


<h5>5.2.2 物理网卡的绑定/解除绑定</h5>

<p>在下面的讨论中，假定ifenslave使用新的ABI接口，即：</p>

<ul>
<li>在绑定物理网卡时，如果虚拟的网卡还没有MAC地址，则ifenslave通过IOCTL把该虚拟网卡的MAC地址设置为该物理网卡的MAC地址（保证bond_enslave被调用时虚拟网卡已经有了MAC地址）。</li>
<li>如果被绑定网卡处于UP状态，则ifenslave首先把它设置为DOWN状态（保证bond_enslave被调用时被绑定物理网卡处于DOWN状态）。</li>
</ul>


<p>如果使用旧版本的ABI接口，则虚拟的网卡的MAC地址由bonding模块在bond_enslave函数中自行设置，并且被绑定网卡在bond_enslave被调用时可能处于UP状态，需要由bond_enslave函数自行处理。</p>

<h6>1. 绑定 bond_enslave</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数在试图把一个物理网卡绑定到一个虚拟的网卡时被调用，其中bond_dev表示虚拟的网卡，slave_dev表示真实的物理网卡。该函数主要做如下操作：</p>

<ol>
<li>取出bond_dev的私有数据，用bond指向它（struct bonding *）。</li>
<li>一系列的合法性检查，包括：

<ol>
<li>bond_dev的flags是否已经设置了IFF_UP（虚拟的网卡必须已经处于UP状态）</li>
<li>slave_dev的flags是否没有设置IFF_SLAVE（防止同一个物理网卡被绑定两次）</li>
<li>bond_dev的flags如果设置了NETIF_F_VLAN_CHALLENGED，则bond->vlan_list不能为空。</li>
<li>slave_dev->flags是否没有设置IFF_UP（物理网卡应该处于DOWN状态）</li>
<li>slave_dev->set_mac_address不能为NULL（物理网卡应该支持设置MAC地址）</li>
</ol>
</li>
<li>调用kmalloc分配一个新的slave结构。</li>
<li>把slave_dev->flags保存在slave->original_flags中。</li>
<li>把slave_dev原有的MAC地址保存在slave-> perm_hwaddr中。</li>
<li>设置slave_dev新的MAC地址为虚拟网卡的MAC地址。</li>
<li>调用netdev_set_master设置slave_dev，该函数主要作如下操作：

<ol>
<li>设置slave_dev->flags的IFF_SLAVE标志。</li>
<li>设置slave_dev->master指向虚拟网卡bond_dev。</li>
</ol>
</li>
<li>设置slave->dev指向slave_dev。</li>
<li>如果bond_dev工作在模式BOND_MODE_TLB或者BOND_MODE_ALB，对slave调用bond_alb_init_slave函数。</li>
<li>维护和Multicast以及VLAN相关的一系列数据结构。</li>
<li>调用bond_attach_slave把slave加入bond的链表（通过维护bond-> first_slave和slave结构的next，prev指针）</li>
<li>把slave的delay和link_failure_count都清零。</li>
<li>监测slave_dev的链路状态：<br/>
1.如果使用MII链路，并且bond_check_dev_link返回BMSR_LSTATUS（表示链路正常），或者不使用MII链路监控，则根据updelay是否为0把slave->link设置为BOND_LINK_BACK或者BOND_LINK_UP。<br/>
2.如果使用MII链路，并且bond_check_dev_link返回非BMSR_LSTATUS值，则设置slave->link为BOND_LINK_DOWN。</li>
<li>调用bond_update_speed_duplex更新slave_dev的链路速率，如果失败则设置slave_dev的链路速率为100M全双工。</li>
<li>如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP、BOND_MODE_TLB或者BOND_MODE_ALB模式下，并且slave_dev是用户指定的主网卡，则设置bond->primary_slave为slave_dev。</li>
<li>设置bond->curr_active_slave和slave的活动状态，维护VLAN和Multicast相关数据结构：<br/>
1.如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP：如果bond->curr_active_slave没有被设置或者bond->curr_active_slave不响应ARP（设置了IFF_NOARP标志），并且slave_dev不处于BOND_LINK_DOWN状态，则设置slave_dev为活动网卡（设置BOND_STATE_ACTIVE标志，清除IFF_NOARP标志），否则设置slave_dev为后备网卡（设置BOND_STATE_BACKUP标志，设置IFF_NOARP标志）。<br/>
2.如果虚拟网卡工作在BOND_MODE_ROUNDROBIN或者 BOND_MODE_BROADCAST：直接设置slave_dev的活动状态为BOND_STATE_ACTIVE（在BOND_MODE_ROUNDROBIN和BOND_MODE_BROADCAST 模式下，IFF_NOARP标志始终被清除），如果没有设置bond->curr_active_slave，则设置bond->curr_active_slave指向slave。<br/>
3.其他工作模式：（还没有加以分析）</li>
</ol>


<h6>2. 解除绑定 bond_release</h6>

<p>原型</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数在试图解除一个物理网卡的绑定状态时被调用，其中bond_dev表示虚拟的网卡，slave_dev表示真实的物理网卡。该函数主要做如下操作：</p>

<ol>
<li>取出bond_dev的私有数据，用bond指向它（struct bonding *）。</li>
<li>寻找对应的slave结构。</li>
<li>一系列的合法性检查，包括：

<ol>
<li>slave_dev->flags是否设置了IFF_SLAVE。</li>
<li>slave结构是否存在。</li>
<li>slave_dev原来的MAC地址是否和bond_dev相同，如果相同给出警告（防止MAC冲突）</li>
</ol>
</li>
<li>如果虚拟网卡工作在BOND_MODE_8023AD模式，调用bond_3ad_unbind_slave</li>
<li>调用bond_detach_slave把slave从bond的链表中摘除（通过维护bond-> first_slave和slave结构的next，prev指针）。</li>
<li>如果slave_dev是虚拟网卡以前的主物理网卡，则设置bond->primary_slave为NULL。</li>
<li>如果slave_dev是虚拟网卡以前的活动网卡，则设置bond->active_slave为NULL（通过调用bond_change_active_slave函数）。</li>
<li>如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB则调用bond_alb_deinit_slave。</li>
<li>如果slave_dev是虚拟网卡以前的活动网卡，则调用bond_select_active_slave寻找一个新的活动网卡。</li>
<li>如果虚拟网卡再也没有管辖的物理网卡，清除虚拟网卡的MAC地址（如果新调用ifenslave绑定物理网卡，则重新设置这个MAC地址）。</li>
<li>维护VLAN和Multicast相关的数据结构。</li>
<li>调用netdev_set_master解除master和slave的绑定关系并且调用dev_close关闭slave_dev。</li>
<li>恢复slave_dev的MAC地址（根据slave->perm_hwaddr）和flags（根据slave->original_flags）。</li>
<li>调用kfree释放slave结构。</li>
</ol>


<h5>5.2.3 网卡驱动通用接口（interface service routines）</h5>

<p>既然bonding模块本质上是一个虚拟网卡的驱动模块，所以必须提供一组所有网卡驱动模块都遵守的通用接口函数。</p>

<h6>1. open/close</h6>

<p>bond_open（net_device->open接口）</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_open(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数在对应的虚拟网卡被打开时调用（即使用ifup/ifconfig工具启动网卡的时候），主要做如下操作（只分析三种主要模式）：</p>

<ol>
<li>设置bond->kill_timers为0。</li>
<li>如果使用MII链路状态监控：

<ol>
<li>初始化mii_timer。</li>
<li>设置超时时间mii_timer->expires为当前jiffies+1（立即调用bond_mii_monitor函数）</li>
<li>设置bond_mii_monitor为定时器的超时处理函数。</li>
</ol>
</li>
<li>如果使用ARP链路状态监控：

<ol>
<li>初始化arp_timer。</li>
<li>设置超时时间arp_timer->expires为当前jiffies+1（立即调用定时器的超时处理函数）</li>
<li>如果工作在BOND_MODE_ACTIVEBACKUP，设置bond_activebackup_arp_mon为超时处理函数。</li>
<li>如果工作在其他模式，设置bond_loadbalance_arp_mon为超时处理函数。</li>
</ol>
</li>
</ol>


<h6>bond_close（net_device->stop接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_close(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数在对应的虚拟网卡被关闭时调用（即使用ifdown/ifconfig工具关闭网卡的时候），主要做如下操作（只分析三种主要模式）：</p>

<ol>
<li>调用bond_mc_list_destroy维护Multicast相关数据结构。</li>
<li>设置bond->kill_timers为1，所有的计时器超时后就不再重新设置，从而可以被安全删除。</li>
<li>删除所有的定时器，包括mii_timer和arp_timer。</li>
<li>调用bond_release_all释放所有被绑定的物理网卡，本质上该函数只是遍历slave链表并且对每一个元素调用bond_release。</li>
<li>如果虚拟网卡工作在BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_deinitialize。</li>
</ol>


<h6>2. ioctl接口</h6>

<p>bond_do_ioctl（net_device->do_ioctl 接口）</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_do_ioctl(struct net_device *bond_dev, struct ifreq *ifr, int cmd)</span></code></pre></td></tr></table></div></figure>


<p>该函数是虚拟网卡的IOCTRL接口，仅仅根据不同的IOCTRL命令调用其他函数执行相应的功能，
所以不再列出操作流程而仅仅列举出这些被调用的函数和相应的功能：</p>

<p>  1.链路状态设置和查询（bond_ethtool_ioctl或者if_mii）
  2.Bonding模块状态查询（bond_info_query）
  3.被绑定的物理网卡状态查询（bond_slave_info_query）
  4.物理网卡的绑定和解除绑定（bond_enslave/bond_release）
  5.虚拟网卡的MAC地址设置（bond_sethwaddr）
  6.切换当前活动的物理网卡（bond_ioctl_change_active）</p>

<h6>3. 统计值查询</h6>

<p>bond_get_stats（net_device-> get_stats 接口）</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct net_device_stats *bond_get_stats(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数枚举所有被管辖的物理网卡，并且对每一个物理网卡调用get_stats接口，然后把对应的统计值加起来并作为最终的返回值，这些统计值包括。
名称  含义
rx_packets  接收包总数
rx_bytes  接收字节总数
rx_errors  接收过程中错误数据包数
rx_dropped  接受过程中丢弃包数
tx_packets  发送包总数
tx_bytes  发送字节总数
tx_errors  发送过程中错误数据包数
tx_dropped  发送过程中丢弃包数
multicast  Multicast数据包总数
collisions  MAC地址冲突次数
rx_length_errors  接收数据包长度错误总数
rx_over_errors  ring buff溢出次数
rx_crc_errors  接收数据包CRC校验错误总数
rx_frame_errors  接收数据包frame对齐错误总数
rx_fifo_errors  接收队列溢出次数
rx_missed_errors  接收时丢失的包数（仅仅对某些媒体有效）
tx_aborted_errors  发送取消次数（例如发送超时）
tx_carrier_errors  链路错误总数
tx_fifo_errors  发送队列溢出次数
tx_heartbeat_errors  心跳信号丢失（仅仅对某些媒体有效）
tx_window_errors  接收窗口错误（不明，需要进一步确认）</p>

<h6>bond_set_multicast_list（net_device-> set_multicast_list 接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void bond_set_multicast_list(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数设置和Multicast和混杂模式相关的一组数据结构，由于三种主要工作模式并不过多地涉及这个函数，所以本文档不给出详细的说明。</p>

<h6>bond_change_mtu（net_device-> change_mtu 接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_change_mtu(struct net_device *bond_dev, int new_mtu)</span></code></pre></td></tr></table></div></figure>


<p>该函数把被虚拟网卡的MTU和被它管辖的所有物理网卡的MTU设置为同一值，主要做如下操作：</p>

<ol>
<li>枚举所有被管辖的物理网卡，对每一个物理网卡调用change_mtu设置新的MTU值，如果物理网卡没有change_mtu接口函数，则直接设置slave->dev->mtu等于new_mtu。</li>
<li>设置bond_dev->mtu的值等于new_mtu。</li>
</ol>


<h6>bond_set_mac_address（net_device-> set_mac_address 接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_set_mac_address(struct net_device *bond_dev, void *addr)</span></code></pre></td></tr></table></div></figure>


<p>该函数设置虚拟网卡的MAC地址和被管辖的物理网卡的MAC地址为同一值，主要做如下操作：</p>

<ol>
<li>枚举所有被管辖的物理网卡，对每一个物理网卡调用set_mac_address设置新的MAC地址，如果物理网卡没有set_mac_address函数，则错误返回。</li>
<li>设置bond_dev->dev_addr的值等于新的MAC地址。</li>
</ol>


<h6>4. 数据包传输（接收/发送）</h6>

<p>Bonding模块仅仅负责把发送数据包按照特定的工作模式转给被管辖的物理网卡发送，而每一个物理网卡负责自己的数据包接收，即虚拟网卡不管理各个物理网卡的数据接收过程，它能做的仅仅是设置它们的IFF_NOARP标志，使某一个物理网卡对ARP请求不做出回应。</p>

<p>在模块初始化时， bond_init函数根据工作模式把net_device-> hard_start_xmit接口设置为不同的函数，对于 BOND_MODE_ROUNDROBIN、BOND_MODE_ACTIVEBACKUP和BOND_MODE_BROADCAST 模式，该接口分别被设置为下列三个函数之一</p>

<h6>bond_xmit_roundrobin（net_device-> hard_start_xmit 接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_xmit_roundrobin(struct sk_buff *skb, struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数用来在BOND_MODE_ROUNDROBIN模式中发送数据包，主要做如下操作：</p>

<ol>
<li><p>合法性检查，包括：</p>

<ol>
<li>检查bond_dev ->flags中IFF_UP标志是否设置</li>
<li>netif_running(bond_dev)是否返回非0值</li>
<li>对应的虚拟网卡是否至少有一个管辖的物理网卡</li>
</ol>
</li>
<li><p>从bond->curr_active_slave开始遍历slave链表，找到第一个链路状态为BOND_LINK_UP，活动状态为BOND_STATE_ACTIVE的物理网卡并且调用bond_dev_queue_xmit向这个物理网卡发送数据，然后设置bond->curr_active_slave为slave链表中的下一个物理网卡。</p></li>
<li><p>如果没有找到这样的网卡或者bond_dev_queue_xmit返回非0值，则调用dev_kfree_skb丢弃数据包。</p></li>
</ol>


<h6>bond_xmit_activebackup（net_device-> hard_start_xmit 接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_xmit_activebackup(struct sk_buff *skb, struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数用来在BOND_MODE_ACTIVEBACKUP模式中发送数据包，主要做如下操作：</p>

<ol>
<li>如果是试图发送ARP请求，则把全局变量my_ip设置为ARP请求中的发送方IP地址（skb->data+以太网头长度+ARP头长度+6），这个全局变量在ARP链路状态监控中被使用。</li>
<li><p>合法性检查，包括：</p>

<ol>
<li>检查bond_dev ->flags中IFF_UP标志是否设置</li>
<li>netif_running(bond_dev)是否返回非0值</li>
<li>对应的虚拟网卡是否至少有一个管辖的物理网卡</li>
</ol>
</li>
<li><p>如果bond->curr_active_slave不为空，则调用bond_dev_queue_xmit向这个物理网卡发送数据。</p></li>
<li><p>否则，调用dev_kfree_skb丢弃数据包。</p></li>
</ol>


<h6>bond_xmit_broadcast（net_device-> hard_start_xmit接口）</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_xmit_broadcast(struct sk_buff *skb, struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数用来在BOND_MODE_BROADCAST模式中发送数据包，主要做如下操作：</p>

<ol>
<li><p>合法性检查，包括：</p>

<ol>
<li>检查bond_dev ->flags中IFF_UP标志是否设置</li>
<li>netif_running(bond_dev)是否返回非0值</li>
<li>对应的虚拟网卡是否至少有一个管辖的物理网卡</li>
</ol>
</li>
<li><p>从bond->curr_active_slave开始遍历slave链表，找到所有状态为BOND_LINK_UP，活动状态为BOND_STATE_ACTIVE的物理网卡，包括bond->curr_active_slave，调用bond_dev_queue_xmit向这些物理网卡发送数据（其中需要通过skb_clone复制skb结构）。</p></li>
<li><p>如果发送失败，调用dev_kfree_skb丢弃数据包</p></li>
</ol>


<h6># bond_dev_queue_xmit</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int bond_dev_queue_xmit(struct bonding *bond, struct sk_buff *skb, struct net_device *slave_dev)</span></code></pre></td></tr></table></div></figure>


<p>该函数被bond_xmit_roundrobin，bond_xmit_activebackup 和bond_xmit_broadcast 调用，向实际的物理网卡发送数据包，主要做如下操作：</p>

<ol>
<li>设置skb->dev为slave_dev（在此之前skb->dev指向虚拟网卡，现在指向真实的物理网卡）</li>
<li>维护和VLAN相关的数据结构。</li>
<li>调用dev_queue_xmit发送数据包。</li>
</ol>


<h6>dev_queue_xmit</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int dev_queue_xmit(struct sk_buff *skb)</span></code></pre></td></tr></table></div></figure>


<p>该函数不是bonding模块的一部分而是内核的一个标准接口，为了清楚起见也把它列出来，请参考net/core/dev.c文件。</p>

<ol>
<li>如果底层的物理网卡不支持Scatter/Gather IO，而skb包含了分片（注意不是IP分片，而是和DMA相关的一个概念，见skbbuff.h），则调用__skb_linearize合并分片。</li>
<li>如果底层的设备不支持计算校验和，则计算一系列校验和。</li>
<li>如果底层的设备有发送队列（qdisc），则把数据包放入发送队列中，退出。</li>
<li>如果底层的设备没有发送队列（例如loopback或者其他没有真实物理网卡对应的设备，bonding模块自然也算一个），则直接调用底层设备的hard_start_xmit发送数据包。</li>
<li>如果发送失败，调用dev_kfree_skb丢弃数据包</li>
</ol>


<h5>5.2.4. 链路状态监控</h5>

<h6>1. MII链路状态监控</h6>

<p>bond_mii_monitor</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void bond_mii_monitor(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>如果使用MII链路状态监控，则该函数被周期调用以检测每一个被绑定物理网卡的链路状态, 主要做如下操作：</p>

<ol>
<li>计算局部变量delta_in_ticks = (bond->params.miimon * HZ) / 1000，即miimon参数的jiffies表示。</li>
<li>如果kill_timers被设置，直接退出。</li>
<li>如果没有任何物理网卡被绑定，重新设置定时器，退出。</li>
<li>根据bond_check_dev_link的结果，按照第5节描述的MII链路状态监控模型设置网卡的链路状态。</li>
<li><p>如果原来物理网卡的链路状态为BOND_LINK_FAIL，而 bond_check_dev_link返回非BMSR_LSTATUS值，则除了把链路状态设置为BOND_LINK_DOWN之外，还做如下操作：</p>

<ol>
<li>如果虚拟网卡工作在模式BOND_MODE_8023AD，调用bond_3ad_handle_link_change</li>
<li>如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_handle_link_change。</li>
<li>如果当前被检查的slave不是curr_active_slave，设置标志do_failover表明可能会发生slave切换。</li>
</ol>
</li>
<li><p>如果原来物理网卡的链路状态为BOND_LINK_BACK而bond_check_dev_link 返回BMSR_LSTATUS，则除了把链路状态设置为BOND_LINK_UP之外，还做如下操作：</p>

<ol>
<li>如果虚拟网卡工作在模式BOND_MODE_8023AD或者被监测网卡不是primary_slave，则设置物理网卡的活动状态为BOND_STATE_BACKUP</li>
<li>如果虚拟网卡<em>不是</em>工作在模式BOND_MODE_ACTIVEBACKUP，则设置物理网卡的活动状态为BOND_STATE_ACTIVE</li>
<li>如果虚拟网卡工作在模式BOND_MODE_8023AD，调用bond_3ad_handle_link_change</li>
<li>如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_handle_link_change。</li>
<li>如果当前被检查的slave不是curr_active_slave，设置标志do_failover表明可能会发生slave切换。</li>
</ol>
</li>
<li><p>调用bond_update_speed_duplex更新物理网卡的速率。</p></li>
<li><p>如果do_failover被设置，调用bond_select_active_slave。</p></li>
<li>设置定时器的超时值为jiffies+delta_in_ticks。</li>
</ol>


<h6>bond_check_dev_link</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int bond_check_dev_link(struct bonding *bond, struct net_device *slave_dev, int reporting)</span></code></pre></td></tr></table></div></figure>


<p>该函数调用MII/ETHTOOL IOCTL或者使用netif_carrier_ok()检查链路是否正常工作（如果用<br/>
户指定了use_carrier）参数，如果该函数返回BMSR_LSTATUS表明链路是正常的，否则表示链<br/>
路故障（例如掉网线等等）。</p>

<h6>2. ARP链路状态监控</h6>

<p>bond_loadbalance_arp_mon</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void bond_loadbalance_arp_mon(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>如果虚拟网卡工作在<em>非</em>BOND_MODE_ACTIVEBACKUP 模式下，而用户指定了使用ARP状态监控，<br/>
则周期性地对每一个被绑定物理网卡调用该函数，注意该函数不使用 downdelay和updelay参数。</p>

<p>由于<em>非</em>BOND_MODE_ACTIVEBACKUP模式下所有的被绑定网卡都是处于活动状态（BOND_STATE_ACTIVE），<br/>
所以该函数的功能是轮流从每一个被绑定物理网卡发送ARP请求，并且在一段时间间隔内是否<br/>
有数据包接收，如果没有就设置被检查物理网卡的链路状态为BOND_LINK_DOWN，活动状态设置<br/>
为BOND_STATE_BACKUP 表示不参与发送数据（但是只要IFF_UP被设置、netif_running和<br/>
netif_carrier_ok都返回非0（真）值，即本地网卡检查通过，仍然周期性地发送ARP请求出去），<br/>
请参考5.2节中的描述。</p>

<p>该函数主要做如下操作：</p>

<ol>
<li>计算局部变量delta_in_ticks = (bond->params.arp_interval * HZ) / 1000，即arp_interval参数的jiffies表示。</li>
<li>如果kill_timers被设置，直接退出。</li>
<li>如果没有任何物理网卡被绑定，重新设置定时器，退出。</li>
<li>枚举所有被绑定的物理网卡，做如下操作：

<ol>
<li>假如物理网卡的链路状态不是BOND_LINK_UP并且在delta_in_ticks时间间隔内发送过<em>并且</em>接受过数据包，则把链路状态设置为BOND_LINK_UP，活动状态设置为BOND_STATE_ACTIVE，并且如果curr_active_slave为空则设置do_failover局部变量。</li>
<li>假如物理网卡的链路状态是BOND_LINK_UP并且在2*delta_in_ticks时间间隔内没有发送过或者没有接受过数据包，则把链路状态设置为BOND_LINK_DOWN，活动状态设置为BOND_STATE_BACKUP，如果当前slave是curr_active_slave则设置do_failover局部变量。</li>
<li>如果dev->flags中IFF_UP被设置，netif_running和netif_carrier_ok都返回非0（真）值，则尝试调用bond_arp_send_all从该网卡发送ARP请求（参考bond_arp_send_all的描述）。</li>
</ol>
</li>
<li>如果do_failover被设置，调用bond_select_active_slave。</li>
<li>设置定时器的超时值为jiffies+delta_in_ticks。</li>
</ol>


<h6>bond_activebackup_arp_mon</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void bond_activebackup_arp_mon(struct net_device *bond_dev)</span></code></pre></td></tr></table></div></figure>


<p>如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP模式下，而用户指定了使用ARP状态监控，则周期性地对每一个被绑定物理网卡调用该函数。</p>

<p>该函数主要做如下操作：</p>

<ol>
<li>计算局部变量delta_in_ticks = (bond->params.arp_interval * HZ) / 1000，即arp_interval参数的jiffies表示。</li>
<li>如果kill_timers被设置，直接退出。</li>
<li>如果没有任何物理网卡被绑定，重新设置定时器，退出。</li>
<li>枚举所有被绑定的物理网卡，做如下操作：

<ol>
<li>如果物理网卡在时间间隔delta_in_ticks内接收过数据包，就把网卡的链路状态设置为BOND_LINK_UP（网卡的活动状态保持不变），设置curr_active_slave为NULL。</li>
<li>如果物理网卡在时间间隔3*delta_in_ticks内没有接收过数据包并且该网卡不是curr_active_slave，就把网卡的链路状态设置为BOND_LINK_DOWN并且调用bond_set_slave_inactive_flags设置网卡的活动状态为BOND_STATE_BACKUP，并且设置IFF_NOARP标志位，设置curr_active_slave为NULL。</li>
</ol>
</li>
<li>检查curr_active_slave，如果curr_active_slave不为NULL：

<ol>
<li>如果curr_active_slave在2*delta_in_ticks内没有发送也没有接收过数据包，就把curr_active_slave的链路状态设置为BOND_LINK_DOWN并且调用bond_select_active_slave寻找一个新的网卡作为新的curr_active_slave，设置current_arp_slave为curr_active_slave。</li>
<li>如果使用bond->primary_slave并且bond->primary_slave的链路状态是BOND_LINK_UP且bond->primary_slave不是curr_active_slave，就把bond->primary_slave作为新的curr_active_slave。</li>
<li>否则设置current_arp_slave为NULL；</li>
<li>调用bond_arp_send_all通过curr_active_slave发送ARP请求。</li>
</ol>
</li>
<li>检查curr_active_slave，如果curr_active_slave为NULL，则从current_arp_slave 开始或者从first_slave开始选出一个网卡并且把链路状态设置为BOND_LINK_BACK的作为 curr_active_slave的候选者（包存在current_arp_slave中），在下一次lbond_activebackup_arp_mon 被调用的时候将把这个网卡设置为curr_active_slave。</li>
<li>设置定时器的超时值为jiffies+delta_in_ticks。</li>
</ol>


<h6>3. slave切换</h6>

<p>bond_find_best_slave</p>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static struct slave *bond_find_best_slave(struct bonding *bond)</span></code></pre></td></tr></table></div></figure>


<p>该函数从被绑定网卡中选出最佳者作为curr_active_slave的候选，主要做如下操作：</p>

<ol>
<li>如果没有物理网卡被绑定，返回NULL。</li>
<li>如果没有设置primary_slave或者primary_slave不可用，从first_slave开始，否则从primary_slave开始遍历被绑定物理网卡列表，如果有网卡的链路状态为BOND_LINK_UP，则返回这个物理网卡。如果没有链路状态为BOND_LINK_UP的网卡，返回处于BOND_LINK_BACK状态最久者（delay值最小）。</li>
</ol>


<h6>bond_change_active_slave</h6>

<p>原型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static void bond_change_active_slave(struct bonding *bond, struct slave *new_active)</span></code></pre></td></tr></table></div></figure>


<p>该函数切换new_active为新的curr_active_slave，主要做如下操作：</p>

<ol>
<li>如果curr_active_slave和new_active相同，不做任何操作。</li>
<li>如果new_active的链路状态是BOND_LINK_BACK，把链路状态设为BOND_LINK_UP。</li>
<li>如果当前工作在BOND_MODE_ACTIVEBACKUP状态，把curr_active_slave的活动状态设置为BOND_STATE_BACKUP，并且设置IFF_NOARP标志位；把new_active的活动状态设置为BOND_STATE_ACTIVE，清除IFF_NOARP标志位。</li>
<li>设置curr_active_slave为new_active。</li>
</ol>


<h3>6. 参考</h3>

<ul>
<li>[1]《Linux 多网卡绑定/负载均衡调研报告》</li>
<li>[2]《Linux Ethernet Bonding Driver mini-howto》/src/net/Documentation/networking/bonding.txt</li>
<li>[3]《The Linux® Networking Architecture: Design and Implementation of Network Protocols in the Linux Kernel》Klaus Wehrle</li>
<li>[4]《Understanding Linux Network_Internals》Christian Benvenuti</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[七种网卡绑定模式详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding/"/>
    <updated>2016-03-09T09:50:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding</id>
    <content type="html"><![CDATA[<p>按ip+port哈希可能会比较好</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mode=2 miimon=100 xmit_hash_policy=1</span></code></pre></td></tr></table></div></figure>


<hr />

<p><a href="http://blog.csdn.net/wuweilong/article/details/39720571">http://blog.csdn.net/wuweilong/article/details/39720571</a></p>

<h4>概览：</h4>

<p>目前网卡绑定mode共有七种(0~6)mode=0、mode=1、mode=2、mode=3、mode=4、mode=5、mode=6</p>

<h4>说明:</h4>

<p>需要说明的是如果想做成mode 0的负载均衡,仅仅设置这里optionsbond0 miimon=100 mode=0是不够的,与网卡相连的交换机必须做特殊配置（这两个端口应该采取聚合方式），因为做bonding的这两块网卡是使用同一个MAC地址.从原理分析一下（bond运行在mode0下）：</p>

<p>mode 0下bond所绑定的网卡的IP都被修改成相同的mac地址，如果这些网卡都被接在同一个交换机，那么交换机的arp表里这个mac地址对应的端口就有多 个，那么交换机接受到发往这个mac地址的包应该往哪个端口转发呢？正常情况下mac地址是全球唯一的，一个mac地址对应多个端口肯定使交换机迷惑了。所以 mode0下的bond如果连接到交换机，交换机这几个端口应该采取聚合方式（cisco称为 ethernetchannel，foundry称为portgroup），因为交换机做了聚合后，聚合下的几个端口也被捆绑成一个mac地址.我们的解 决办法是，两个网卡接入不同的交换机即可。</p>

<p>mode6模式下无需配置交换机，因为做bonding的这两块网卡是使用不同的MAC地址。</p>

<h3>七种bond模式说明：</h3>

<h4>第一种模式：mode=0 ，即：(balance-rr)Round-robin policy（平衡抡循环策略）</h4>

<p>特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降</p>

<h4>第二种模式：mode=1，即： (active-backup)Active-backup policy（主-备份策略）</h4>

<p>特点：只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有 N 个网络接口的情况下，资源利用率为1/N</p>

<h4>第三种模式：mode=2，即：(balance-xor)XOR policy（平衡策略）</h4>

<p>特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址)% slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力</p>

<h4>第四种模式：mode=3，即：broadcast（广播策略）</h4>

<p>特点：在每个slave接口上传输每个数据包，此模式提供了容错能力</p>

<h4>第五种模式：mode=4，即：(802.3ad)IEEE 802.3ad Dynamic link aggregation（IEEE802.3ad 动态链接聚合）</h4>

<p>特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应 性。</p>

<h5>必要条件：</h5>

<p>条件1：ethtool支持获取每个slave的速率和双工设定</p>

<p>条件2：switch(交换机)支持IEEE802.3ad Dynamic link aggregation</p>

<p>条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</p>

<h4>第六种模式：mode=5，即：(balance-tlb)Adaptive transmit load balancing（适配器传输负载均衡）</h4>

<p>特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</p>

<p>该模式的必要条件：ethtool支持获取每个slave的速率</p>

<h4>第七种模式：mode=6，即：(balance-alb)Adaptive load balancing（适配器适应性负载均衡）</h4>

<p>特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receiveload balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。</p>

<p>来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播 ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新（ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（roundrobin）在bond中最高速的slave上当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答 不会被switch(交换机)阻截。</p>

<h5>必要条件：</h5>

<p>条件1：ethtool支持获取每个slave的速率；</p>

<p>条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个 bond 中的slave都有一个唯一的硬件地址。如果curr_active_slave出故障，它的硬件地址将会被新选出来的 curr_active_slave接管其实mod=6与mod=0的区别：mod=6，先把eth0流量占满，再占eth1，….ethX；而mod=0的话，会发现2个口的流量都很稳定，基本一样的带宽。而mod=6，会发现第一个口流量很高，第2个口只占了小部分流量</p>

<h4>Linux网口绑定：</h4>

<p>通过网口绑定(bond)技术,可以很容易实现网口冗余，负载均衡，从而达到高可用高可靠的目的。前提约定：</p>

<p>2个物理网口分别是：eth0,eth1</p>

<p>绑定后的虚拟口是：bond0</p>

<p>服务器IP是：10.10.10.1</p>

<h5>第一步，配置设定文件：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-bond0
</span><span class='line'>DEVICE=bond0
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>ONBOOT=yes
</span><span class='line'>IPADDR=10.10.10.1
</span><span class='line'>NETMASK=255.255.255.0
</span><span class='line'>NETWORK=192.168.0.0
</span><span class='line'>
</span><span class='line'>[root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-eth0
</span><span class='line'>DEVICE=eth0
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>MASTER=bond0
</span><span class='line'>SLAVE=yes
</span><span class='line'>
</span><span class='line'>[root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-eth1
</span><span class='line'>DEVICE=eth1
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>MASTER=bond0
</span><span class='line'>SLAVE=yes</span></code></pre></td></tr></table></div></figure>


<h5>第二步，修改modprobe相关设定文件，并加载bonding模块：</h5>

<p>1.在这里，我们直接创建一个加载bonding的专属设定文件/etc/modprobe.d/bonding.conf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@woo ~]# vi /etc/modprobe.d/bonding.conf
</span><span class='line'>alias bond0 bonding
</span><span class='line'>options bonding mode=0 miimon=200</span></code></pre></td></tr></table></div></figure>


<p>2.加载模块(重启系统后就不用手动再加载了)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@woo ~]# modprobe bonding</span></code></pre></td></tr></table></div></figure>


<p>3.确认模块是否加载成功：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@woo ~]# lsmod | grep bonding
</span><span class='line'>bonding 100065 0</span></code></pre></td></tr></table></div></figure>


<h5>第三步，重启一下网络，然后确认一下状况：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@db01 ~]# service network restart
</span><span class='line'>Shutting down interface bond0:  [  OK  ]
</span><span class='line'>Shutting down loopback interface:  [  OK  ]
</span><span class='line'>Bringing up loopback interface:  [  OK  ]
</span><span class='line'>Bringing up interface bond0:  [  OK  ]</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@db01 ~]#  cat /proc/net/bonding/bond0
</span><span class='line'>Ethernet Channel Bonding Driver: v3.4.0-1 (October 7, 2008)
</span><span class='line'>
</span><span class='line'>Bonding Mode: fault-tolerance (active-backup)
</span><span class='line'>Primary Slave: None
</span><span class='line'>Currently Active Slave: eth0
</span><span class='line'>MII Status: up
</span><span class='line'>MII Polling Interval (ms): 100
</span><span class='line'>Up Delay (ms): 0
</span><span class='line'>Down Delay (ms): 0
</span><span class='line'>
</span><span class='line'>Slave Interface: eth0
</span><span class='line'>MII Status: up
</span><span class='line'>Speed: 1000 Mbps
</span><span class='line'>Duplex: full
</span><span class='line'>Link Failure Count: 0
</span><span class='line'>Permanent HW addr: 40:f2:e9:db:c9:c2
</span><span class='line'>
</span><span class='line'>Slave Interface: eth1
</span><span class='line'>MII Status: up
</span><span class='line'>Speed: 1000 Mbps
</span><span class='line'>Duplex: full
</span><span class='line'>Link Failure Count: 0
</span><span class='line'>Permanent HW addr: 40:f2:e9:db:c9:c3
</span><span class='line'>[root@db01 ~]#  ifconfig | grep HWaddr
</span><span class='line'>bond0     Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2
</span><span class='line'>eth1      Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2</span></code></pre></td></tr></table></div></figure>


<p>从上面的确认信息中，我们可以看到3个重要信息：</p>

<p>1.现在的bonding模式是active-backup</p>

<p>2.现在Active状态的网口是eth0</p>

<p>3.bond0,eth1的物理地址和处于active状态下的eth0的物理地址相同，这样是为了避免上位交换机发生混乱。</p>

<p>任意拔掉一根网线，然后再访问你的服务器，看网络是否还是通的。</p>

<h5>第四步(一般不需要)，系统启动自动绑定、增加默认网关：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@woo ~]# vi /etc/rc.d/rc.local
</span><span class='line'>#追加
</span><span class='line'>ifenslave bond0 eth0 eth1
</span><span class='line'>route add default gw 10.10.10.1
</span><span class='line'>#如可上网就不用增加路由，0.1地址按环境修改.</span></code></pre></td></tr></table></div></figure>


<hr />

<p>留心：前面只是2个网口绑定成一个bond0的情况，如果我们要设置多个bond口，比如物理网口eth0和eth1组成bond0，eth2和eth3组成bond1，</p>

<h4>多网口绑定：</h4>

<p>那么网口设置文件的设置方法和上面第1步讲的方法相同，只是/etc/modprobe.d/bonding.conf的设定就不能像下面这样简单的叠加了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias bond0 bonding
</span><span class='line'>options bonding mode=1 miimon=200
</span><span class='line'>
</span><span class='line'>alias bond1 bonding
</span><span class='line'>options bonding mode=1 miimon=200</span></code></pre></td></tr></table></div></figure>


<h5>正确的设置方法有2种：</h5>

<p>第一种,你可以看到，这种方式的话，多个bond口的模式就只能设成相同的了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias bond0 bonding
</span><span class='line'>alias bond1 bonding
</span><span class='line'>options bonding max_bonds=2 miimon=200 mode=1</span></code></pre></td></tr></table></div></figure>


<p>第二种，这种方式，不同的bond口的mode可以设成不一样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias bond0 bonding
</span><span class='line'>options bond0 miimon=100 mode=1
</span><span class='line'>install bond1 /sbin/modprobe bonding -o bond1 miimon=200 mode=0</span></code></pre></td></tr></table></div></figure>


<p>仔细看看上面这2种设置方法，现在如果是要设置3个，4个，甚至更多的bond口，你应该也会了吧！</p>

<h4>后记：</h4>

<p>简单的介绍一下上面在加载bonding模块的时候，options里的一些参数的含义：</p>

<p>miimon 监视网络链接的频度，单位是毫秒，我们设置的是200毫秒。</p>

<p>max_bonds 配置的bond口个数</p>

<p>mode bond模式，主要有以下几种，在一般的实际应用中，0和1用的比较多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[socket建立连接 sys_connect]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect/"/>
    <updated>2016-02-29T22:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chensichensi/article/details/5272346">http://blog.csdn.net/chensichensi/article/details/5272346</a></p>

<p><a href="http://blog.csdn.net/qy532846454/article/details/7882819">http://blog.csdn.net/qy532846454/article/details/7882819</a></p>

<p><a href="http://www.2cto.com/kf/201303/198459.html">http://www.2cto.com/kf/201303/198459.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>connect(fd, servaddr, addrlen);
</span><span class='line'>-&gt; SYSCALL_DEFINE3()
</span><span class='line'>-&gt; sock-&gt;ops-&gt;connect() == inet_stream_connect (sock-&gt;ops即inet_stream_ops)
</span><span class='line'>-&gt; tcp_v4_connect()
</span><span class='line'>&#9;-&gt; inet_hash_connect()
</span><span class='line'>&#9;&#9;-&gt; __inet_hash_connect()
</span><span class='line'>&#9;&#9;&#9;-&gt; check_established()
</span><span class='line'>&#9;&#9;&#9;&#9;-&gt; __inet_check_established()</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
</span><span class='line'>&#9;&#9;int, addrlen)
</span><span class='line'>{
</span><span class='line'>&#9;struct socket *sock;
</span><span class='line'>&#9;struct sockaddr_storage address;
</span><span class='line'>&#9;int err, fput_needed;
</span><span class='line'>&#9;/* 找到文件描述符对应的BSD socket结构，在前面的socket调用中建立*/
</span><span class='line'>&#9;sock = sockfd_lookup_light(fd, &err, &fput_needed);
</span><span class='line'>&#9;if (!sock)
</span><span class='line'>&#9;&#9;goto out;
</span><span class='line'>&#9;/* copy对端的地址到内核空间 */
</span><span class='line'>&#9;err = move_addr_to_kernel(uservaddr, addrlen, (struct sockaddr *)&address);
</span><span class='line'>&#9;if (err &lt; 0)
</span><span class='line'>&#9;&#9;goto out_put;
</span><span class='line'>
</span><span class='line'>&#9;err =
</span><span class='line'>&#9;    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
</span><span class='line'>&#9;if (err)
</span><span class='line'>&#9;&#9;goto out_put;
</span><span class='line'>&#9;/* 调用该BSD socket对应的connect调用 */
</span><span class='line'>&#9;err = sock-&gt;ops-&gt;connect(sock, (struct sockaddr *)&address, addrlen,
</span><span class='line'>&#9;&#9;&#9;&#9; sock-&gt;file-&gt;f_flags);
</span><span class='line'>out_put:
</span><span class='line'>&#9;/* 释放文件的引用 */
</span><span class='line'>&#9;fput_light(sock-&gt;file, fput_needed);
</span><span class='line'>out:
</span><span class='line'>&#9;return err;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> *    Connect to a remote host. There is regrettably still a little
</span><span class='line'> *    TCP 'magic' in here.
</span><span class='line'> */
</span><span class='line'>int inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
</span><span class='line'>&#9;&#9;&#9;int addr_len, int flags)
</span><span class='line'>{
</span><span class='line'>&#9;struct sock *sk = sock-&gt;sk;
</span><span class='line'>&#9;int err;
</span><span class='line'>&#9;long timeo;
</span><span class='line'>
</span><span class='line'>&#9;lock_sock(sk);
</span><span class='line'>
</span><span class='line'>&#9;if (uaddr-&gt;sa_family == AF_UNSPEC) {
</span><span class='line'>&#9;&#9;err = sk-&gt;sk_prot-&gt;disconnect(sk, flags);
</span><span class='line'>&#9;&#9;sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;
</span><span class='line'>&#9;&#9;goto out;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;switch (sock-&gt;state) {
</span><span class='line'>&#9;default:
</span><span class='line'>&#9;&#9;err = -EINVAL;
</span><span class='line'>&#9;&#9;goto out;
</span><span class='line'>&#9;case SS_CONNECTED:     /* 该BSD socket已连接*/
</span><span class='line'>&#9;&#9;err = -EISCONN;
</span><span class='line'>&#9;&#9;goto out;
</span><span class='line'>&#9;case SS_CONNECTING:   /* 该BSD socket正在连接*/
</span><span class='line'>&#9;&#9;err = -EALREADY;
</span><span class='line'>&#9;&#9;/* Fall out of switch with err, set for this state */
</span><span class='line'>&#9;&#9;break;
</span><span class='line'>&#9;case SS_UNCONNECTED:
</span><span class='line'>&#9;&#9;err = -EISCONN;
</span><span class='line'>&#9;&#9;if (sk-&gt;sk_state != TCP_CLOSE)
</span><span class='line'>&#9;&#9;&#9;goto out;
</span><span class='line'>&#9;        /* INET SOCKET 调用协议特有connect操作符 */
</span><span class='line'>&#9;&#9;err = sk-&gt;sk_prot-&gt;connect(sk, uaddr, addr_len);
</span><span class='line'>&#9;&#9;if (err &lt; 0)
</span><span class='line'>&#9;&#9;&#9;goto out;
</span><span class='line'>&#9;        /* 上面的调用完成后，连接并没有完成，*/
</span><span class='line'>&#9;&#9;sock-&gt;state = SS_CONNECTING;
</span><span class='line'>
</span><span class='line'>&#9;&#9;/* Just entered SS_CONNECTING state; the only
</span><span class='line'>&#9;&#9; * difference is that return value in non-blocking
</span><span class='line'>&#9;&#9; * case is EINPROGRESS, rather than EALREADY.
</span><span class='line'>&#9;&#9; */
</span><span class='line'>&#9;&#9;err = -EINPROGRESS;
</span><span class='line'>&#9;&#9;break;
</span><span class='line'>&#9;}
</span><span class='line'>&#9;/* 获取连接超时时间*/
</span><span class='line'>&#9;timeo = sock_sndtimeo(sk, flags & O_NONBLOCK);
</span><span class='line'>
</span><span class='line'>&#9;if ((1 &lt;&lt; sk-&gt;sk_state) & (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
</span><span class='line'>&#9;&#9;/* Error code is set above 进入定时等待 */
</span><span class='line'>&#9;&#9;if (!timeo || !inet_wait_for_connect(sk, timeo))
</span><span class='line'>&#9;&#9;&#9;goto out;
</span><span class='line'>
</span><span class='line'>&#9;&#9;err = sock_intr_errno(timeo);
</span><span class='line'>&#9;&#9;if (signal_pending(current))
</span><span class='line'>&#9;&#9;&#9;goto out;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;/* Connection was closed by RST, timeout, ICMP error
</span><span class='line'>&#9; * or another process disconnected us.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;if (sk-&gt;sk_state == TCP_CLOSE)
</span><span class='line'>&#9;&#9;goto sock_error;
</span><span class='line'>
</span><span class='line'>&#9;/* sk-&gt;sk_err may be not zero now, if RECVERR was ordered by user
</span><span class='line'>&#9; * and error was received after socket entered established state.
</span><span class='line'>&#9; * Hence, it is handled normally after connect() return successfully.
</span><span class='line'>&#9; */
</span><span class='line'>
</span><span class='line'>&#9;sock-&gt;state = SS_CONNECTED;
</span><span class='line'>&#9;err = 0;
</span><span class='line'>out:
</span><span class='line'>&#9;release_sock(sk);
</span><span class='line'>&#9;return err;
</span><span class='line'>
</span><span class='line'>sock_error:
</span><span class='line'>&#9;err = sock_error(sk) ? : -ECONNABORTED;
</span><span class='line'>&#9;sock-&gt;state = SS_UNCONNECTED;
</span><span class='line'>&#9;if (sk-&gt;sk_prot-&gt;disconnect(sk, flags))
</span><span class='line'>&#9;&#9;sock-&gt;state = SS_DISCONNECTING;
</span><span class='line'>&#9;goto out;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* This will initiate an outgoing connection. */
</span><span class='line'>int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
</span><span class='line'>{
</span><span class='line'>&#9;struct inet_sock *inet = inet_sk(sk);
</span><span class='line'>&#9;struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>&#9;struct sockaddr_in *usin = (struct sockaddr_in *)uaddr;
</span><span class='line'>&#9;struct rtable *rt;
</span><span class='line'>&#9;__be32 daddr, nexthop;
</span><span class='line'>&#9;int tmp;
</span><span class='line'>&#9;int err;
</span><span class='line'>
</span><span class='line'>&#9;if (addr_len &lt; sizeof(struct sockaddr_in))
</span><span class='line'>&#9;&#9;return -EINVAL;
</span><span class='line'>
</span><span class='line'>&#9;if (usin-&gt;sin_family != AF_INET)
</span><span class='line'>&#9;&#9;return -EAFNOSUPPORT;
</span><span class='line'>&#9;/* 开始准备路由 */
</span><span class='line'>&#9;nexthop = daddr = usin-&gt;sin_addr.s_addr;
</span><span class='line'>&#9;if (inet-&gt;opt && inet-&gt;opt-&gt;srr) {
</span><span class='line'>&#9;&#9;if (!daddr)
</span><span class='line'>&#9;&#9;&#9;return -EINVAL;
</span><span class='line'>&#9;&#9;nexthop = inet-&gt;opt-&gt;faddr;
</span><span class='line'>&#9;}
</span><span class='line'>&#9;/* 调用路由模块获取出口信息，这里不深入 */
</span><span class='line'>&#9;tmp = ip_route_connect(&rt, nexthop, inet-&gt;saddr,
</span><span class='line'>&#9;&#9;&#9;       RT_CONN_FLAGS(sk), sk-&gt;sk_bound_dev_if,
</span><span class='line'>&#9;&#9;&#9;       IPPROTO_TCP,
</span><span class='line'>&#9;&#9;&#9;       inet-&gt;sport, usin-&gt;sin_port, sk, 1);
</span><span class='line'>&#9;if (tmp &lt; 0) {
</span><span class='line'>&#9;&#9;if (tmp == -ENETUNREACH)
</span><span class='line'>&#9;&#9;&#9;IP_INC_STATS_BH(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
</span><span class='line'>&#9;&#9;return tmp;
</span><span class='line'>&#9;}
</span><span class='line'>&#9;/* 如果获取的路由是广播或多播域， 返回网络不可达，tcp不支持多播与广播 */
</span><span class='line'>&#9;if (rt-&gt;rt_flags & (RTCF_MULTICAST | RTCF_BROADCAST)) {
</span><span class='line'>&#9;&#9;ip_rt_put(rt);
</span><span class='line'>&#9;&#9;return -ENETUNREACH;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;if (!inet-&gt;opt || !inet-&gt;opt-&gt;srr)
</span><span class='line'>&#9;&#9;daddr = rt-&gt;rt_dst;
</span><span class='line'>
</span><span class='line'>&#9;if (!inet-&gt;saddr)
</span><span class='line'>&#9;&#9;inet-&gt;saddr = rt-&gt;rt_src;
</span><span class='line'>&#9;inet-&gt;rcv_saddr = inet-&gt;saddr;
</span><span class='line'>
</span><span class='line'>&#9;if (tp-&gt;rx_opt.ts_recent_stamp && inet-&gt;daddr != daddr) {
</span><span class='line'>&#9;&#9;/* Reset inherited state */
</span><span class='line'>&#9;&#9;tp-&gt;rx_opt.ts_recent      = 0;
</span><span class='line'>&#9;&#9;tp-&gt;rx_opt.ts_recent_stamp = 0;
</span><span class='line'>&#9;&#9;tp-&gt;write_seq         = 0;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;if (tcp_death_row.sysctl_tw_recycle &&
</span><span class='line'>&#9;    !tp-&gt;rx_opt.ts_recent_stamp && rt-&gt;rt_dst == daddr) {
</span><span class='line'>&#9;&#9;struct inet_peer *peer = rt_get_peer(rt);
</span><span class='line'>&#9;&#9;/*
</span><span class='line'>&#9;&#9; * VJ's idea. We save last timestamp seen from
</span><span class='line'>&#9;&#9; * the destination in peer table, when entering state
</span><span class='line'>&#9;&#9; * TIME-WAIT * and initialize rx_opt.ts_recent from it,
</span><span class='line'>&#9;&#9; * when trying new connection.
</span><span class='line'>&#9;&#9; */
</span><span class='line'>&#9;&#9;if (peer != NULL &&
</span><span class='line'>&#9;&#9;    peer-&gt;tcp_ts_stamp + TCP_PAWS_MSL &gt;= get_seconds()) {
</span><span class='line'>&#9;&#9;&#9;tp-&gt;rx_opt.ts_recent_stamp = peer-&gt;tcp_ts_stamp;
</span><span class='line'>&#9;&#9;&#9;tp-&gt;rx_opt.ts_recent = peer-&gt;tcp_ts;
</span><span class='line'>&#9;&#9;}
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;inet-&gt;dport = usin-&gt;sin_port;
</span><span class='line'>&#9;inet-&gt;daddr = daddr;
</span><span class='line'>
</span><span class='line'>&#9;inet_csk(sk)-&gt;icsk_ext_hdr_len = 0;
</span><span class='line'>&#9;if (inet-&gt;opt)
</span><span class='line'>&#9;&#9;inet_csk(sk)-&gt;icsk_ext_hdr_len = inet-&gt;opt-&gt;optlen;
</span><span class='line'>&#9;/* mss_clamp */
</span><span class='line'>&#9;tp-&gt;rx_opt.mss_clamp = 536;
</span><span class='line'>
</span><span class='line'>&#9;/* Socket identity is still unknown (sport may be zero).
</span><span class='line'>&#9; * However we set state to SYN-SENT and not releasing socket
</span><span class='line'>&#9; * lock select source port, enter ourselves into the hash tables and
</span><span class='line'>&#9; * complete initialization after this.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;tcp_set_state(sk, TCP_SYN_SENT);
</span><span class='line'>&#9;err = inet_hash_connect(&tcp_death_row, sk);
</span><span class='line'>&#9;if (err)
</span><span class='line'>&#9;&#9;goto failure;
</span><span class='line'>
</span><span class='line'>&#9;err = ip_route_newports(&rt, IPPROTO_TCP,
</span><span class='line'>&#9;&#9;&#9;&#9;inet-&gt;sport, inet-&gt;dport, sk);
</span><span class='line'>&#9;if (err)
</span><span class='line'>&#9;&#9;goto failure;
</span><span class='line'>
</span><span class='line'>&#9;/* OK, now commit destination to socket.  */
</span><span class='line'>&#9;sk-&gt;sk_gso_type = SKB_GSO_TCPV4;
</span><span class='line'>&#9;sk_setup_caps(sk, &rt-&gt;u.dst);
</span><span class='line'>
</span><span class='line'>&#9;if (!tp-&gt;write_seq)
</span><span class='line'>&#9;&#9;tp-&gt;write_seq = secure_tcp_sequence_number(inet-&gt;saddr,
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;&#9;   inet-&gt;daddr,
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;&#9;   inet-&gt;sport,
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;&#9;   usin-&gt;sin_port);
</span><span class='line'>&#9;/* id是IP包头的id域 */
</span><span class='line'>&#9;inet-&gt;id = tp-&gt;write_seq ^ jiffies;
</span><span class='line'>
</span><span class='line'>&#9;err = tcp_connect(sk);
</span><span class='line'>&#9;rt = NULL;
</span><span class='line'>&#9;if (err)
</span><span class='line'>&#9;&#9;goto failure;
</span><span class='line'>
</span><span class='line'>&#9;return 0;
</span><span class='line'>
</span><span class='line'>failure:
</span><span class='line'>&#9;/*
</span><span class='line'>&#9; * This unhashes the socket and releases the local port,
</span><span class='line'>&#9; * if necessary.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>&#9;ip_rt_put(rt);
</span><span class='line'>&#9;sk-&gt;sk_route_caps = 0;
</span><span class='line'>&#9;inet-&gt;dport = 0;
</span><span class='line'>&#9;return err;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>当snum==0时，表明此时源端口没有指定，此时会随机选择一个空闲端口作为此次连接的源端口。low和high分别表示可用端口的下限和上限，remaining表示可用端口的数，注意这里的可用只是指端口可以用作源端口，其中部分端口可能已经作为其它socket的端口号在使用了，所以要循环1~remaining，直到查找到空闲的源端口。</p>

<p>下面来看下对每个端口的检查，即//choose a valid port部分的代码。这里要先了解下tcp的内核表组成，udp的表内核表udptable只是一张hash表，tcp的表则稍复杂，它的名字是tcp_hashinfo，在tcp_init()中被初始化，这个数据结构定义如下(省略了不相关的数据)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct inet_hashinfo {
</span><span class='line'>&#9;struct inet_ehash_bucket *ehash;
</span><span class='line'>&#9;……
</span><span class='line'>&#9;struct inet_bind_hashbucket *bhash;
</span><span class='line'>&#9;……
</span><span class='line'>&#9;struct inet_listen_hashbucket  listening_hash[INET_LHTABLE_SIZE]
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;____cacheline_aligned_in_smp;
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>从定义可以看出，tcp表又分成了三张表ehash, bhash, listening_hash，其中ehash, listening_hash对应于socket处在TCP的ESTABLISHED, LISTEN状态，bhash对应于socket已绑定了本地地址。三者间并不互斥，如一个socket可同时在bhash和ehash中，由于TIME_WAIT是一个比较特殊的状态，所以ehash又分成了chain和twchain，为TIME_WAIT的socket单独形成一张表。</p>

<p>回到刚才的代码，现在还只是建立socket连接，使用的就应该是tcp表中的bhash。首先取得内核tcp表的bind表 – bhash，查看是否已有socket占用：</p>

<p>如果没有，则调用inet_bind_bucket_create()创建一个bind表项tb，并插入到bind表中，跳转至goto ok代码段；
如果有，则跳转至goto ok代码段。</p>

<p>进入ok代码段表明已找到合适的bind表项(无论是创建的还是查找到的)，调用inet_bind_hash()赋值源端口inet_num。</p>

<p>inet_hash_connect()函数只是对<code>__inet_hash_connect()</code>函数进行了简单的封装。在<code>__inet_hash_connect()</code>中如果已绑定了端口号，并且是和其他传输控制块共享绑定的端口号，则会调用check_established参数指向的函数来检查这个绑定的端口号是否可用，代码如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int __inet_hash_connect(struct inet_timewait_death_row *death_row,
</span><span class='line'>&#9;&#9;struct sock *sk, u32 port_offset,
</span><span class='line'>&#9;&#9;int (*check_established)(struct inet_timewait_death_row *,
</span><span class='line'>&#9;&#9;struct sock *, __u16, struct inet_timewait_sock **),
</span><span class='line'>&#9;&#9;void (*hash)(struct sock *sk))
</span><span class='line'>{
</span><span class='line'>&#9;struct inet_hashinfo *hinfo = death_row-&gt;hashinfo;
</span><span class='line'>&#9;const unsigned short snum = inet_sk(sk)-&gt;num;
</span><span class='line'>&#9;struct inet_bind_hashbucket *head;
</span><span class='line'>&#9;struct inet_bind_bucket *tb;
</span><span class='line'>&#9;int ret;
</span><span class='line'>&#9;struct net *net = sock_net(sk);
</span><span class='line'>
</span><span class='line'>&#9;if (!snum) {
</span><span class='line'>&#9;&#9;int i, remaining, low, high, port;
</span><span class='line'>&#9;&#9;static u32 hint;
</span><span class='line'>&#9;&#9;u32 offset = hint + port_offset;
</span><span class='line'>&#9;&#9;struct hlist_node *node;
</span><span class='line'>&#9;&#9;struct inet_timewait_sock *tw = NULL;
</span><span class='line'>
</span><span class='line'>&#9;&#9;inet_get_local_port_range(&low, &high);
</span><span class='line'>&#9;&#9;remaining = (high - low) + 1;
</span><span class='line'>
</span><span class='line'>&#9;&#9;local_bh_enable();
</span><span class='line'>&#9;&#9;for (i = 1; i &lt;= remaining; i++) {
</span><span class='line'>&#9;&#9;&#9;port = low + (i + offset) % remaining;
</span><span class='line'>&#9;&#9;&#9;if (inet_is_reserved_local_port(port)
</span><span class='line'>&#9;&#9;&#9;&#9;continue;
</span><span class='line'>&#9;&#9;&#9;head = &hinfo-&gt;bhash[inet_bhashfn(net, port, hinfo-&gt;bhash_size)];
</span><span class='line'>&#9;&#9;&#9;spin_lock(&head-&gt;lock);
</span><span class='line'>&#9;&#9;&#9;inet_bind_bucket_for_each(tb, node, &head-&gt;chain) {
</span><span class='line'>&#9;&#9;&#9;&#9;if (net_eq(ib_net(tb), net) && tb-&gt;port == port) {
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;if (tb-&gt;fastreuse &gt;= 0)
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;goto next_port;
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;WARN_ON(hlist_empty(&tb-&gt;owners));
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;if (!check_established(death_row, sk, port, &tw))
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;goto ok;
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;goto next_port;
</span><span class='line'>&#9;&#9;&#9;&#9;}
</span><span class='line'>&#9;&#9;&#9;}
</span><span class='line'>
</span><span class='line'>&#9;&#9;&#9;tb = inet_bind_bucket_create(hinfo-&gt;bind_bucket_cachep, net, head, port);
</span><span class='line'>&#9;&#9;&#9;if (!tb) {
</span><span class='line'>&#9;&#9;&#9;&#9;spin_unlock(&head-&gt;lock);
</span><span class='line'>&#9;&#9;&#9;&#9;break;
</span><span class='line'>&#9;&#9;&#9;}
</span><span class='line'>&#9;&#9;&#9;tb-&gt;fastreuse = -1;
</span><span class='line'>&#9;&#9;&#9;tb-&gt;fastreuseport = -1;
</span><span class='line'>&#9;&#9;&#9;goto ok;
</span><span class='line'>&#9;&#9;next_port:
</span><span class='line'>&#9;&#9;&#9;spin_unlock(&head-&gt;lock);
</span><span class='line'>&#9;&#9;}
</span><span class='line'>&#9;&#9;local_bh_enable();
</span><span class='line'>
</span><span class='line'>&#9;&#9;return -EADDRNOTAVAIL;
</span><span class='line'>
</span><span class='line'>ok:
</span><span class='line'>&#9;&#9;hint += i;
</span><span class='line'>
</span><span class='line'>&#9;&#9;inet_bind_hash(sk, tb, port);
</span><span class='line'>&#9;&#9;if (sk_unhashed(sk)) {
</span><span class='line'>&#9;&#9;&#9;inet_sk(sk)-&gt;sport = htons(port);
</span><span class='line'>&#9;&#9;&#9;hash(sk);
</span><span class='line'>&#9;&#9;}
</span><span class='line'>&#9;&#9;spin_unlock(&head-&gt;lock);
</span><span class='line'>&#9;&#9;if (tw) {
</span><span class='line'>&#9;&#9;&#9;inet_twsk_deschedule(tw, death_row);
</span><span class='line'>&#9;&#9;&#9;inet_twsk_put(tw);
</span><span class='line'>&#9;&#9;}
</span><span class='line'>
</span><span class='line'>&#9;&#9;ret = 0;
</span><span class='line'>&#9;&#9;goto out;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;head = &hinfo-&gt;bhash[inet_bhashfn(net, snum, hinfo-&gt;bhash_size)];
</span><span class='line'>&#9;tb  = inet_csk(sk)-&gt;icsk_bind_hash;
</span><span class='line'>&#9;spin_lock_bh(&head-&gt;lock);
</span><span class='line'>&#9;if (sk_head(&tb-&gt;owners) == sk && !sk-&gt;sk_bind_node.next) {
</span><span class='line'>&#9;&#9;hash(sk);
</span><span class='line'>&#9;&#9;spin_unlock_bh(&head-&gt;lock);
</span><span class='line'>&#9;&#9;return 0;
</span><span class='line'>&#9;} else {
</span><span class='line'>&#9;&#9;spin_unlock(&head-&gt;lock);
</span><span class='line'>&#9;&#9;/* No definite answer... Walk to established hash table */
</span><span class='line'>&#9;&#9;ret = check_established(death_row, sk, snum, NULL);
</span><span class='line'>out:
</span><span class='line'>&#9;&#9;local_bh_enable();
</span><span class='line'>&#9;&#9;return ret;
</span><span class='line'>&#9;}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>(sk_head(&amp;tb->owners) == sk &amp;&amp; !sk->sk_bind_node.next)这个判断条件就是用来判断是不是只有当前传输控制块在使用已绑定的端口，条件为false时，会执行else分支，检查是否可用。这么看来，调用bind()成功并不意味着这个端口就真的可以用。</p>

<p>check_established参数对应的函数是<code>__inet_check_established()</code>，在inet_hash_connect()中可以看到。在上面的代码中我们还注意到调用check_established()时第三个参数为NULL，这在后面的分析中会用到。</p>

<p><code>__inet_check_established()</code>函数中，会分别在TIME_WAIT传输控制块和除TIME_WIAT、LISTEN状态外的传输控制块中查找是已绑定的端口是否已经使用，代码片段如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* called with local bh disabled */
</span><span class='line'>static int __inet_check_established(struct inet_timewait_death_row *death_row,
</span><span class='line'>&#9;&#9;&#9;struct sock *sk, __u16 lport,
</span><span class='line'>&#9;&#9;&#9;struct inet_timewait_sock **twp)
</span><span class='line'>{
</span><span class='line'>&#9;struct inet_hashinfo *hinfo = death_row-&gt;hashinfo;
</span><span class='line'>&#9;struct inet_sock *inet = inet_sk(sk);
</span><span class='line'>&#9;__be32 daddr = inet-&gt;rcv_saddr;
</span><span class='line'>&#9;__be32 saddr = inet-&gt;daddr;
</span><span class='line'>&#9;int dif = sk-&gt;sk_bound_dev_if;
</span><span class='line'>&#9;INET_ADDR_COOKIE(acookie, saddr, daddr)
</span><span class='line'>&#9;const __portpair ports = INET_COMBINED_PORTS(inet-&gt;dport, lport);
</span><span class='line'>&#9;struct net *net = sock_net(sk);
</span><span class='line'>&#9;unsigned int hash = inet_ehashfn(net, daddr, lport, saddr, inet-&gt;dport);
</span><span class='line'>&#9;struct inet_ehash_bucket *head = inet_ehash_bucket(hinfo, hash);
</span><span class='line'>&#9;spinlock_t *lock = inet_ehash_lockp(hinfo, hash);
</span><span class='line'>&#9;struct sock *sk2;
</span><span class='line'>&#9;const struct hlist_nulls_node *node;
</span><span class='line'>&#9;struct inet_timewait_sock *tw;
</span><span class='line'>
</span><span class='line'>&#9;spin_lock(lock);
</span><span class='line'>
</span><span class='line'>&#9;/* Check TIME-WAIT sockets first. */
</span><span class='line'>&#9;sk_nulls_for_each(sk2, node, &head-&gt;twchain) {
</span><span class='line'>&#9;&#9;tw = inet_twsk(sk2);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&#9;&#9;if (INET_TW_MATCH(sk2, net, hash, acookie,
</span><span class='line'>&#9;&#9;&#9;&#9;saddr, daddr, ports, dif)) {
</span><span class='line'>&#9;&#9;&#9;if (twsk_unique(sk, sk2, twp))
</span><span class='line'>&#9;&#9;&#9;&#9;goto unique;
</span><span class='line'>&#9;&#9;&#9;else
</span><span class='line'>&#9;&#9;&#9;&#9;goto not_unique;
</span><span class='line'>&#9;&#9;}
</span><span class='line'>&#9;}
</span><span class='line'>&#9;tw = NULL;
</span><span class='line'>
</span><span class='line'>&#9;/* And established part... */
</span><span class='line'>&#9;sk_nulls_for_each(sk2, node, &head-&gt;chain) {
</span><span class='line'>&#9;&#9;if (INET_MATCH(sk2, net, hash, acookie,
</span><span class='line'>&#9;&#9;&#9;&#9;saddr, daddr, ports, dif))
</span><span class='line'>&#9;&#9;&#9;goto not_unique;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>unique:
</span><span class='line'>&#9;......
</span><span class='line'>&#9;return 0;
</span><span class='line'>
</span><span class='line'>not_unique:
</span><span class='line'>&#9;spin_unlock(lock);
</span><span class='line'>&#9;return -EADDRNOTAVAIL;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果是TCP套接字，twsk_uniqueue()中会调用tcp_twsk_uniqueue()来判断，返回true的条件如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int tcp_twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
</span><span class='line'>{
</span><span class='line'>&#9;const struct tcp_timewait_sock *tcptw = tcp_twsk(sktw);
</span><span class='line'>&#9;struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>
</span><span class='line'>&#9;if (tcptw-&gt;tw_ts_recent_stamp &&
</span><span class='line'>&#9;&#9;&#9;(twp == NULL || (sysctl_tcp_tw_reuse &&
</span><span class='line'>&#9;&#9;&#9;get_seconds() - tcptw-&gt;tw_ts_recent_stamp &gt; 1))) {
</span><span class='line'>&#9;&#9;......
</span><span class='line'>&#9;&#9;return 1;
</span><span class='line'>&#9;}
</span><span class='line'>
</span><span class='line'>&#9;return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Build a SYN and send it off.
</span><span class='line'> */
</span><span class='line'>int tcp_connect(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>&#9;struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>&#9;struct sk_buff *buff;
</span><span class='line'>&#9;/* 初始化连接对应的INET socket结构的参数，为连接做准备 */
</span><span class='line'>&#9;tcp_connect_init(sk);
</span><span class='line'>&#9;/* 获取一个skb，由于是syn包，没有数据，所以大小是MAX_TCP_HEADER的16位对齐 */
</span><span class='line'>&#9;buff = alloc_skb_fclone(MAX_TCP_HEADER + 15, sk-&gt;sk_allocation);
</span><span class='line'>&#9;if (unlikely(buff == NULL))
</span><span class='line'>&#9;&#9;return -ENOBUFS;
</span><span class='line'>
</span><span class='line'>&#9;/* Reserve space for headers. */
</span><span class='line'>&#9;skb_reserve(buff, MAX_TCP_HEADER);
</span><span class='line'>
</span><span class='line'>&#9;tp-&gt;snd_nxt = tp-&gt;write_seq;
</span><span class='line'>&#9;/* 设置skb相关参数 */
</span><span class='line'>&#9;tcp_init_nondata_skb(buff, tp-&gt;write_seq++, TCPCB_FLAG_SYN);
</span><span class='line'>&#9;/* 设置ECN */
</span><span class='line'>&#9;TCP_ECN_send_syn(sk, buff);
</span><span class='line'>
</span><span class='line'>&#9;/* Send it off. */
</span><span class='line'>&#9;/* 保存该数据包的发送时间*/
</span><span class='line'>&#9;TCP_SKB_CB(buff)-&gt;when = tcp_time_stamp;
</span><span class='line'>&#9;tp-&gt;retrans_stamp = TCP_SKB_CB(buff)-&gt;when;
</span><span class='line'>&#9;skb_header_release(buff);
</span><span class='line'>&#9;/* 加入发送队列，待确认后在丢弃*/
</span><span class='line'>&#9;__tcp_add_write_queue_tail(sk, buff);
</span><span class='line'>&#9;sk-&gt;sk_wmem_queued += buff-&gt;truesize;
</span><span class='line'>&#9;sk_mem_charge(sk, buff-&gt;truesize);
</span><span class='line'>&#9;tp-&gt;packets_out += tcp_skb_pcount(buff);
</span><span class='line'>&#9;tcp_transmit_skb(sk, buff, 1, GFP_KERNEL);
</span><span class='line'>
</span><span class='line'>&#9;/* We change tp-&gt;snd_nxt after the tcp_transmit_skb() call
</span><span class='line'>&#9; * in order to make this packet get counted in tcpOutSegs.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;tp-&gt;snd_nxt = tp-&gt;write_seq;
</span><span class='line'>&#9;tp-&gt;pushed_seq = tp-&gt;write_seq;
</span><span class='line'>&#9;TCP_INC_STATS(sock_net(sk), TCP_MIB_ACTIVEOPENS);
</span><span class='line'>
</span><span class='line'>&#9;/* Timer for repeating the SYN until an answer. */
</span><span class='line'>&#9;inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
</span><span class='line'>&#9;&#9;&#9;&#9;  inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);
</span><span class='line'>&#9;return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'> * Do all connect socket setups that can be done AF independent.
</span><span class='line'> */
</span><span class='line'>static void tcp_connect_init(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>&#9;struct dst_entry *dst = __sk_dst_get(sk);
</span><span class='line'>&#9;struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>&#9;__u8 rcv_wscale;
</span><span class='line'>
</span><span class='line'>&#9;/* We'll fix this up when we get a response from the other end.
</span><span class='line'>&#9; * See tcp_input.c:tcp_rcv_state_process case TCP_SYN_SENT.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;tp-&gt;tcp_header_len = sizeof(struct tcphdr) +
</span><span class='line'>&#9;&#9;(sysctl_tcp_timestamps ? TCPOLEN_TSTAMP_ALIGNED : 0);
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_TCP_MD5SIG
</span><span class='line'>&#9;if (tp-&gt;af_specific-&gt;md5_lookup(sk, sk) != NULL)
</span><span class='line'>&#9;&#9;tp-&gt;tcp_header_len += TCPOLEN_MD5SIG_ALIGNED;
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>&#9;/* If user gave his TCP_MAXSEG, record it to clamp */
</span><span class='line'>&#9;if (tp-&gt;rx_opt.user_mss)
</span><span class='line'>&#9;&#9;tp-&gt;rx_opt.mss_clamp = tp-&gt;rx_opt.user_mss;
</span><span class='line'>&#9;tp-&gt;max_window = 0;
</span><span class='line'>&#9;/* 初始化MTU probe*/
</span><span class='line'>&#9;tcp_mtup_init(sk);
</span><span class='line'>&#9;/* 设置mss */
</span><span class='line'>&#9;tcp_sync_mss(sk, dst_mtu(dst));
</span><span class='line'>
</span><span class='line'>&#9;if (!tp-&gt;window_clamp)
</span><span class='line'>&#9;&#9;tp-&gt;window_clamp = dst_metric(dst, RTAX_WINDOW);
</span><span class='line'>&#9;tp-&gt;advmss = dst_metric(dst, RTAX_ADVMSS);
</span><span class='line'>&#9;if (tp-&gt;rx_opt.user_mss && tp-&gt;rx_opt.user_mss &lt; tp-&gt;advmss)
</span><span class='line'>&#9;&#9;tp-&gt;advmss = tp-&gt;rx_opt.user_mss;
</span><span class='line'>
</span><span class='line'>&#9;tcp_initialize_rcv_mss(sk);
</span><span class='line'>&#9;/* 根据接收空间大小初始化一个通告窗口 */
</span><span class='line'>&#9;tcp_select_initial_window(tcp_full_space(sk),
</span><span class='line'>&#9;&#9;&#9;&#9;  tp-&gt;advmss - (tp-&gt;rx_opt.ts_recent_stamp ? tp-&gt;tcp_header_len - sizeof(struct tcphdr) : 0),
</span><span class='line'>&#9;&#9;&#9;&#9;  &tp-&gt;rcv_wnd,
</span><span class='line'>&#9;&#9;&#9;&#9;  &tp-&gt;window_clamp,
</span><span class='line'>&#9;&#9;&#9;&#9;  sysctl_tcp_window_scaling,
</span><span class='line'>&#9;&#9;&#9;&#9;  &rcv_wscale);
</span><span class='line'>
</span><span class='line'>&#9;tp-&gt;rx_opt.rcv_wscale = rcv_wscale;
</span><span class='line'>&#9;tp-&gt;rcv_ssthresh = tp-&gt;rcv_wnd;
</span><span class='line'>
</span><span class='line'>&#9;sk-&gt;sk_err = 0;
</span><span class='line'>&#9;sock_reset_flag(sk, SOCK_DONE);
</span><span class='line'>&#9;tp-&gt;snd_wnd = 0;
</span><span class='line'>&#9;/* 更新一些滑动窗口的成员*/
</span><span class='line'>&#9;tcp_init_wl(tp, tp-&gt;write_seq, 0);
</span><span class='line'>&#9;tp-&gt;snd_una = tp-&gt;write_seq;
</span><span class='line'>&#9;tp-&gt;snd_sml = tp-&gt;write_seq;
</span><span class='line'>&#9;tp-&gt;snd_up = tp-&gt;write_seq;
</span><span class='line'>&#9;tp-&gt;rcv_nxt = 0;
</span><span class='line'>&#9;tp-&gt;rcv_wup = 0;
</span><span class='line'>&#9;tp-&gt;copied_seq = 0;
</span><span class='line'>
</span><span class='line'>&#9;inet_csk(sk)-&gt;icsk_rto = TCP_TIMEOUT_INIT;
</span><span class='line'>&#9;inet_csk(sk)-&gt;icsk_retransmits = 0;
</span><span class='line'>&#9;tcp_clear_retrans(tp);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>skb发送后，connect并没有返回，因为此时连接还没有建立，tcp进入等待状态，此时回到前面的inet_stream_connect函数</p>

<p>在发送syn后进入等待状态</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static long inet_wait_for_connect(struct sock *sk, long timeo)
</span><span class='line'>{
</span><span class='line'>&#9;DEFINE_WAIT(wait);
</span><span class='line'>&#9;/* sk_sleep 保存此INET SOCKET的等待队列 */
</span><span class='line'>&#9;prepare_to_wait(sk-&gt;sk_sleep, &wait, TASK_INTERRUPTIBLE);
</span><span class='line'>
</span><span class='line'>&#9;/* Basic assumption: if someone sets sk-&gt;sk_err, he _must_
</span><span class='line'>&#9; * change state of the socket from TCP_SYN_*.
</span><span class='line'>&#9; * Connect() does not allow to get error notifications
</span><span class='line'>&#9; * without closing the socket.
</span><span class='line'>&#9; */
</span><span class='line'>&#9;/* 定时等待知道状态变化 */
</span><span class='line'>&#9;while ((1 &lt;&lt; sk-&gt;sk_state) & (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
</span><span class='line'>&#9;&#9;release_sock(sk);
</span><span class='line'>&#9;&#9;timeo = schedule_timeout(timeo);
</span><span class='line'>&#9;&#9;lock_sock(sk);
</span><span class='line'>&#9;&#9;if (signal_pending(current) || !timeo)
</span><span class='line'>&#9;&#9;&#9;break;
</span><span class='line'>&#9;&#9;prepare_to_wait(sk-&gt;sk_sleep, &wait, TASK_INTERRUPTIBLE);
</span><span class='line'>&#9;}
</span><span class='line'>&#9;finish_wait(sk-&gt;sk_sleep, &wait);
</span><span class='line'>&#9;return timeo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[udp checksum]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum/"/>
    <updated>2016-01-21T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum</id>
    <content type="html"><![CDATA[<p><a href="http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/">http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/</a></p>

<h4>a. 网卡设备属性</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define NETIF_F_IP_CSUM     2   /* 基于IPv4的L4层checksum. */  
</span><span class='line'>#define NETIF_F_NO_CSUM     4   /* 设备可靠不需要L4层checksum. loopack. */  
</span><span class='line'>#define NETIF_F_HW_CSUM     8   /* 基于所有协议的L4层checksum*/  
</span><span class='line'>#define NETIF_F_IPV6_CSUM   16  /* 基于IPv6的L4层checksum*/  </span></code></pre></td></tr></table></div></figure>


<p>通过ethtool -k eth0可以查看网卡是否支持硬件checksum，tx-checksumming: on  表明支持发送hardware checksum。</p>

<h4>b. linux UDP checksum数据结构</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>union {
</span><span class='line'>&#9;__wsum    csum;
</span><span class='line'>&#9;struct {
</span><span class='line'>&#9;&#9;__u16 csum_start;
</span><span class='line'>&#9;&#9;__u16 csum_offset;
</span><span class='line'>&#9;};
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>1） skb->csum和skb->ip_summed这两个域也是与4层校验相关的，这两个域的含义依赖于skb表示的是一个输入包还是一个输出包。</p>

<p>2） 当网卡设备能提供硬件checksum并且作为输出包的时候，表示为skb->csum_start和skb->csum_offset</p>

<p>csum_start: Offset from skb->head where checksumming should start</p>

<p>csum_offset: Offset from csum_start where checksum should be stored</p>

<p>当数据包是一个输入包时</p>

<p>skb->ip_summed表示的是四层校验的状态，下面的几个宏定义表示了设备驱动传递给4层的一些信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define CHECKSUM_NONE 0
</span><span class='line'>#define CHECKSUM_UNNECESSARY 1
</span><span class='line'>#define CHECKSUM_COMPLETE 2</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>skb->csum:存放硬件或者软件计算的payload的checksum不包括伪头，但是是否有意义由skb->ip_summed的值决定。</p>

<p>CHECKSUM_NONE表示csum域中的校验值是无意义的，需要L4层自己校验payload和伪头。有可能是硬件检验出错或者硬件没有校验功能，协议栈软件更改如pskb_trim_rcsum函数。</p>

<p>CHECKSUM_UNNECESSARY表示网卡或者协议栈已经计算和验证了L4层的头和校验值。也就是计算了tcp udp的伪头。还有一种情况就是回环，因为在回环中错误发生的概率太低了，因此就不需要计算校验来节省cpu事件。</p>

<p>CHECKSUM_COMPLETE表示网卡已经计算了L4层payload的校验，并且csum已经被赋值，此时L4层的接收者只需要加伪头并验证校验结果。</p>

<p>1) 在L4层发现如果udp->check位段被设为0，那么skb->ip_summed直接设为CHECKSUM_UNNECESSARY，放行该报文。</p>

<p>2) 如果skb->ip_summed为CHECKSUM_COMPLETE，则把skb->csum加上伪头进行校验，成功则将skb->ip_summed设为CHECKSUM_UNNECESSARY， 放行该数据包。</p>

<p>3) 通过上述后skb->ip_summed还不是CHECKSUM_UNNECESSARY，那么重新计算伪头赋给skb->csum。</p>

<p>4) 将还不是CHECKSUM_UNNECESSARY的数据报文的payload加上skb->csum进行checksum计算，成功将设为CHECKSUM_UNNECESSARY并放行，失败则丢弃。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline int udp4_csum_init(struct sk_buff *skb, struct udphdr *uh, 
</span><span class='line'>&#9;&#9;&#9;&#9;int proto)
</span><span class='line'>{
</span><span class='line'>&#9;const struct iphdr *iph;
</span><span class='line'>&#9;int err; 
</span><span class='line'>
</span><span class='line'>&#9;UDP_SKB_CB(skb)-&gt;partial_cov = 0; 
</span><span class='line'>&#9;UDP_SKB_CB(skb)-&gt;cscov = skb-&gt;len;
</span><span class='line'>
</span><span class='line'>&#9;if (proto == IPPROTO_UDPLITE) {
</span><span class='line'>&#9;&#9;err = udplite_checksum_init(skb, uh); 
</span><span class='line'>&#9;&#9;if (err)
</span><span class='line'>&#9;&#9;&#9;return err; 
</span><span class='line'>&#9;}    
</span><span class='line'>
</span><span class='line'>&#9;iph = ip_hdr(skb);
</span><span class='line'>&#9;if (uh-&gt;check == 0) { 
</span><span class='line'>&#9;&#9;skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
</span><span class='line'>&#9;} else if (skb-&gt;ip_summed == CHECKSUM_COMPLETE) {
</span><span class='line'>&#9;&#9;if (!csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len,
</span><span class='line'>&#9;&#9;&#9;&#9;proto, skb-&gt;csum))
</span><span class='line'>&#9;&#9;&#9;skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
</span><span class='line'>&#9;}    
</span><span class='line'>&#9;if (!skb_csum_unnecessary(skb))
</span><span class='line'>&#9;&#9;skb-&gt;csum = csum_tcpudp_nofold(iph-&gt;saddr, iph-&gt;daddr,
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;&#9;skb-&gt;len, proto, 0);
</span><span class='line'>&#9;/* Probably, we should checksum udp header (it should be in cache
</span><span class='line'>&#9; * in any case) and data in tiny packets (&lt; rx copybreak).
</span><span class='line'>&#9; */
</span><span class='line'>
</span><span class='line'>&#9;return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (udp_lib_checksum_complete(skb))
</span><span class='line'>&#9;goto csum_error;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline int udp_lib_checksum_complete(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>&#9;return !skb_csum_unnecessary(skb) &&
</span><span class='line'>&#9;&#9;__udp_lib_checksum_complete(skb);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static inline __sum16 __udp_lib_checksum_complete(struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>&#9;return __skb_checksum_complete_head(skb, UDP_SKB_CB(skb)-&gt;cscov);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>__sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len)
</span><span class='line'>{
</span><span class='line'>&#9;__sum16 sum;
</span><span class='line'>
</span><span class='line'>&#9;sum = csum_fold(skb_checksum(skb, 0, len, skb-&gt;csum));
</span><span class='line'>&#9;if (likely(!sum)) {
</span><span class='line'>&#9;&#9;if (unlikely(skb-&gt;ip_summed == CHECKSUM_COMPLETE))
</span><span class='line'>&#9;&#9;&#9;netdev_rx_csum_fault(skb-&gt;dev);
</span><span class='line'>&#9;&#9;skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
</span><span class='line'>&#9;}
</span><span class='line'>&#9;return sum;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>当数据包是输出包时</h4>

<p>skb->csum表示为csum_start和csum_offset，它表示硬件网卡存放将要计算的校验值的地址，和最后填充的便宜。这个域在输出包时使用，只在校验值在硬件计算的情况下才对于网卡真正有意义。硬件checksum功能只能用于非分片报文。
而此时ip_summed可以被设置的值有下面两种：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define CHECKSUM_NONE        0
</span><span class='line'>#define CHECKSUM_PARTIAL  3</span></code></pre></td></tr></table></div></figure>


<p>CHECKSUM_NONE 表示协议栈计算好了校验值，设备不需要做任何事。CHECKSUM_PARTIAL表示协议栈算好了伪头需要硬件计算payload checksum。</p>

<p>1）对于UDP socket开启了UDP_CSUM_NOXMIT /<em> UDP csum disabled </em>/</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uh-&gt;check = 0；
</span><span class='line'>skb-&gt;ip_summed = CHECKSUM_NONE;</span></code></pre></td></tr></table></div></figure>


<p>2）软件udp checksum</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct iphdr *iph = ip_hdr(skb);
</span><span class='line'>struct udphdr *uh = udp_hdr(skb);
</span><span class='line'>uh-&gt;check = 0;
</span><span class='line'>skb-&gt;csum = csum_partial(skb_transport_header (skb), skb-&gt;len, 0);//skb-&gt;data指向传输层头
</span><span class='line'>uh-&gt;check = csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, iph-&gt;protocol, skb-&gt;csum);
</span><span class='line'>skb-&gt;ip_summed = CHECKSUM_NONE;
</span><span class='line'>//Todo: scatter and gather</span></code></pre></td></tr></table></div></figure>


<p>3)  硬件checksum: 只能是ip报文长度小于mtu的数据报(没有分片的报文)。</p>

<p>CHECKSUM_PARTIAL表示使用硬件checksum ，L4层的伪头的校验已经完毕，并且已经加入uh->check字段中，此时只需要设备计算整个头4层头的校验值。</p>

<p>（对于支持scatter and gather的报文必须要传输层头在线性空间才能使用硬件checksum功能）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uh-&gt;check = ~csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, IPPROTO_UDP, 0);
</span><span class='line'>skb-&gt;csum_start = skb_transport_header (skb) - skb-&gt;head;
</span><span class='line'>skb-&gt;csum_offset = offsetof(struct udphdr, check);
</span><span class='line'>skb-&gt;ip_summed = CHECKSUM_PARTIAL;</span></code></pre></td></tr></table></div></figure>


<p>最后在dev_queue_xmit发送的时候发现设备不支持硬件checksum就会进行软件计算</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
</span><span class='line'>&#9;&#9;&#9;&#9;struct netdev_queue *txq)
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>&#9;.......
</span><span class='line'>
</span><span class='line'>&#9;&#9;&#9;/* If packet is not checksummed and device does not
</span><span class='line'>&#9;&#9;&#9; * support checksumming for this protocol, complete
</span><span class='line'>&#9;&#9;&#9; * checksumming here.
</span><span class='line'>&#9;&#9;&#9; */
</span><span class='line'>&#9;&#9;&#9;if (skb-&gt;ip_summed == CHECKSUM_PARTIAL) {
</span><span class='line'>&#9;&#9;&#9;&#9;skb_set_transport_header(skb, skb-&gt;csum_start -
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;skb_headroom(skb));
</span><span class='line'>&#9;&#9;&#9;&#9;if (!dev_can_checksum(dev, skb) &&
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;&#9;skb_checksum_help(skb))
</span><span class='line'>&#9;&#9;&#9;&#9;&#9;goto out_kfree_skb;
</span><span class='line'>&#9;&#9;&#9;}
</span><span class='line'>&#9;........
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux系统启动过程分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/21/system-base-init/"/>
    <updated>2016-01-21T16:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/21/system-base-init</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-23069658-id-3142047.html">http://blog.chinaunix.net/uid-23069658-id-3142047.html</a></p>

<h4>BIOS自检</h4>

<p>  稍有计算机基础的人都应该听过BIOS(Basic Input / Output System)，又称基本输入输出系统，可以视为是一个永久地记录在ROM中的一个软件，是操作系统输入输出管理系统的一部分。早期的BIOS芯片确实是"只读"的，里面的内容是用一种烧录器写入的，一旦写入就不能更改，除非更换芯片。现在的主机板都使用一种叫Flash EPROM的芯片来存储系统BIOS，里面的内容可通过使用主板厂商提供的擦写程序擦除后重新写入，这样就给用户升级BIOS提供了极大的方便。</p>

<p>  BIOS的功能由两部分组成，分别是POST码和Runtime服务。POST阶段完成后它将从存储器中被清除，而Runtime服务会被一直保留，用于目标操作系统的启动。BIOS两个阶段所做的详细工作如下：</p>

<p>  步骤1：上电自检POST(Power-on self test)，主要负责检测系统外围关键设备（如：CPU、内存、显卡、I/O、键盘鼠标等）是否正常。例如，最常见的是内存松动的情况，BIOS自检阶段会报错，系统就无法启动起来；</p>

<p>  步骤2：步骤1成功后，便会执行一段小程序用来枚举本地设备并对其初始化。这一步主要是根据我们在BIOS中设置的系统启动顺序来搜索用于启动系统的驱动器，如硬盘、光盘、U盘、软盘和网络等。我们以硬盘启动为例，BIOS此时去读取硬盘驱动器的第一个扇区(MBR，512字节)，然后执行里面的代码。实际上这里BIOS并不关心启动设备第一个扇区中是什么内容，它只是负责读取该扇区内容、并执行。</p>

<p>至此，BIOS的任务就完成了，此后将系统启动的控制权移交到MBR部分的代码。</p>

<p>PS: 在个人电脑中，Linux的启动是从0xFFFF0地址开始的。</p>

<h4>系统引导</h4>

<p>  我们首先来了解一下MBR，它是Master Boot Record的缩写。硬盘的0柱面、0磁头、1扇区称为主引导扇区。它由三个部分组成，主引导程序(Bootloader)、 硬盘分区表DPT（Disk Partition table）和硬盘有效标志（55AA），其结构图如下所示：</p>

<p><img src="http://abcdxyzk.github.io/images/system/2016-01-21-1.png" alt="" /></p>

<p> 磁盘分区表包含以下三部分：</p>

<p>1）、Partition ID  （5：延申  82：Swap   83：Linux   8e：LVM     fd：RAID）</p>

<p>2）、Partition起始磁柱</p>

<p>3）、Partition的磁柱数量</p>

<p>  通常情况下，诸如lilo、grub这些常见的引导程序都直接安装在MBR中。我们以grub为例来分析这个引导过程。</p>

<h5>grub引导也分为两个阶段stage1阶段和stage2阶段(有些较新的grub又定义了stage1.5阶段)。</h5>

<p>1)、stage1：stage1是直接被写入到MBR中去的，这样机器一启动检测完硬件后，就将控制权交给了GRUB的代码。也就是上图所看到的前446个字节空间中存放的是stage1的代码。BIOS将stage1载入内存中0x7c00处并跳转执行。stage1（/stage1/start.S）的任务非常单纯，仅仅是将硬盘0头0道2扇区读入内存。而0头0道2扇区内容是源代码中的/stage2/start.S，编译后512字节，它是stage2或者stage1_5的入口。而此时，stage1是没有识别文件系统的能力的。如果感觉脑子有些晕了，那么下面的过程就直接跳过，去看stage2吧！</p>

<h5>【外传】定位硬盘的0头0道2扇区的过程：</h5>

<p>  BIOS将stage1载入内存0x7c00处并执行，然后调用BIOS INIT13中断，将硬盘0头0道2扇区内容载入内存0x7000处，然后调用copy_buffer将其转移到内存0x8000处。在定位0头0道2扇区时通常有两种寻址方式：LBA和CHS。如果你是刨根问底儿型的爱好者，那么此时去找谷哥打听打听这两种方式的来龙去脉吧。</p>

<p>2)、stage2：严格来说这里还应该再区分个stage1.5的，就一并把stage1.5放在这里一起介绍了，免得大家看得心里乱哄哄的。好的，我们继续说0头0到2扇区的/stage2/start.S文件，当它的内容被读入到内存之后，它的主要作用就是负责将stage2或stage1.5从硬盘读到内存中。如果是stage2，它将被载入到0x820处；如果是stage1.5，它将被载入到0x2200处。这里的stage2或者stage1_5不是/boot分区/boot/grub目录下的文件，因为这个时候grub还没有能力识别任何文件系统。</p>

<p> 如果start.S加载stage1.5：stage1.5它存放在硬盘0头0道3扇区向后的位置，stage1_5作为stage1和stage2中间的桥梁，stage1_5有识别文件系统的能力，此后grub才有能力去访问/boot分区/boot/grub目录下的 stage2文件，将stage2载入内存并执行。</p>

<p> 如果start.S加载stage2：同样，这个stage2也不是/boot分区/boot/grub目录下的stage2，这个时候start.S读取的是存放在/boot分区Boot Sector的stage2。这种情况下就有一个限制：因为start.S通过BIOS中断方式直接对硬盘寻址（而非通过访问具体的文件系统），其寻址范围有限，限制在8GB以内。因此这种情况需要将/boot分区分在硬盘8GB寻址空间之前。</p>

<p>假如是情形2，我们将/boot/grub目录下的内容清空，依然能成功启动grub；假如是情形1，将/boot/grub目录下stage2删除后，则系统启动过程中grub会启动失败。</p>

<h4>启动内核</h4>

<p>  当stage2被载入内存执行时，它首先会去解析grub的配置文件/boot/grub/grub.conf，然后加载内核镜像到内存中，并将控制权转交给内核。而内核会立即初始化系统中各设备并做相关的配置工作，其中包括CPU、I/O、存储设备等。</p>

<p>关于Linux的设备驱动程序的加载，有一部分驱动程序直接被编译进内核镜像中，另一部分驱动程序则是以模块的形式放在initrd(ramdisk)中。</p>

<p>  Linux内核需要适应多种不同的硬件架构，但是将所有的硬件驱动编入内核又是不实际的，而且内核也不可能每新出一种硬件结构，就将该硬件的设备驱动写入内核。实际上Linux的内核镜像仅是包含了基本的硬件驱动，在系统安装过程中会检测系统硬件信息，根据安装信息和系统硬件信息将一部分设备驱动写入 initrd 。这样在以后启动系统时，一部分设备驱动就放在initrd中来加载。这里有必要给大家再多介绍一下initrd这个东东：</p>

<p>  initrd 的英文含义是 bootloader initialized RAM disk，就是由 boot loader 初始化的内存盘。在 linu2.6内核启动前，boot loader 会将存储介质中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统。在 boot loader 配置了 initrd 的情况下，内核启动被分成了两个阶段，第一阶段先执行 initrd 文件系统中的init，完成加载驱动模块等任务，第二阶段才会执行真正的根文件系统中的 /sbin/init 进程。</p>

<p>另外一个概念：initramfs</p>

<p>  initramfs 是在 kernel 2.5中引入的技术，实际上它的含义就是：在内核镜像中附加一个cpio包，这个cpio包中包含了一个小型的文件系统，当内核启动时，内核将这个 cpio包解开，并且将其中包含的文件系统释放到rootfs中，内核中的一部分初始化代码会放到这个文件系统中，作为用户层进程来执行。这样带来的明显的好处是精简了内核的初始化代码，而且使得内核的初始化过程更容易定制。
疑惑的是：我的内核是2.6.32-71.el6.i686版本，但在我的/boot分区下面却存在的是/boot/initramfs-2.6.32-71.el6.i686.img类型的文件，没搞明白，还望高人解惑。我只知道在2.6内核中支持两种格式的initrd，一种是2.4内核的文件系统镜像image-initrd，一种是cpio格式。接下来我们就来探究一下initramfs-2.6.32-71.el6.i686.img里到底放了那些东西。</p>

<p><img src="http://abcdxyzk.github.io/images/system/2016-01-21-2.png" alt="" /></p>

<p>在tmp文件夹中解压initrd.img里的内容：</p>

<p><img src="http://abcdxyzk.github.io/images/system/2016-01-21-3.png" alt="" /></p>

<p>如果initrd.img文件的格式显示为“initrd.img:ISO 9660 CD-ROM filesystem data”，则可直接输入命令“mount -o loop initrd.img /mnt/test”进行挂载。</p>

<p>通过上的分析和我们的验证，我们确实得到了这样的结论：</p>

<p>  grub的stage2将initrd加载到内存里，让后将其中的内容释放到内容中，内核便去执行initrd中的init脚本，这时内核将控制权交给了init文件处理。我们简单浏览一下init脚本的内容，发现它也主要是加载各种存储介质相关的设备驱动程序。当所需的驱动程序加载完后，会创建一个根设备，然后将根文件系统rootfs以只读的方式挂载。这一步结束后，释放未使用的内存，转换到真正的根文件系统上面去，同时运行/sbin/init程序，执行系统的1号进程。此后系统的控制权就全权交给/sbin/init进程了。</p>

<h4>初始化系统</h4>

<p>经过千辛万苦的跋涉，我们终于接近黎明的曙光了。接下来就是最后一步了：初始化系统。/sbin/init进程是系统其他所有进程的父进程，当它接管了系统的控制权先之后，它首先会去读取/etc/inittab文件来执行相应的脚本进行系统初始化，如设置键盘、字体，装载模块，设置网络等。主要包括以下工作：</p>

<p>1)、执行系统初始化脚本(/etc/rc.d/rc.sysinit)，对系统进行基本的配置，以读写方式挂载根文件系统及其它文件系统，到此系统算是基本运行起来了，后面需要进行运行级别的确定及相应服务的启动。rc.sysinit所做的事情(不同的Linux发行版，该文件可能有些差异)如下：</p>

<p>（1）获取网络环境与主机类型。首先会读取网络环境设置文件"/etc/sysconfig/network"，获取主机名称与默认网关等网络环境。</p>

<p>（2）测试与载入内存设备/proc及usb设备/sys。除了/proc外，系统会主动检测是否有usb设备，并主动加载usb驱动，尝试载入usb文件系统。</p>

<p>（3）决定是否启动SELinux。</p>

<p>（4）接口设备的检测与即插即用（pnp）参数的测试。</p>

<p>（5）用户自定义模块的加载。用户可以再"/etc/sysconfig/modules/*.modules"加入自定义的模块，此时会加载到系统中。</p>

<p>（6）加载核心的相关设置。按"/etc/sysctl.conf"这个文件的设置值配置功能。</p>

<p>（7）设置系统时间（clock）。</p>

<p>（8）设置终端的控制台的字形。</p>

<p>（9）设置raid及LVM等硬盘功能。</p>

<p>（10）以方式查看检验磁盘文件系统。</p>

<p>（11）进行磁盘配额quota的转换。</p>

<p>（12）重新以读取模式载入系统磁盘。</p>

<p>（13）启动quota功能。</p>

<p>（14）启动系统随机数设备（产生随机数功能）。</p>

<p>（15）清楚启动过程中的临时文件。</p>

<p>（16）将启动信息加载到"/var/log/dmesg"文件中。</p>

<p> 当/etc/rc.d/rc.sysinit执行完后，系统就可以顺利工作了，只是还需要启动系统所需要的各种服务，这样主机才可以提供相关的网络和主机功能，因此便会执行下面的脚本。</p>

<p>2)、执行/etc/rc.d/rc脚本。该文件定义了服务启动的顺序是先K后S，而具体的每个运行级别的服务状态是放在/etc/rc.d/rc<em>.d（</em>=0~6）目录下，所有的文件均是指向/etc/init.d下相应文件的符号链接。rc.sysinit通过分析/etc/inittab文件来确定系统的启动级别，然后才去执行/etc/rc.d/rc*.d下的文件。</p>

<p>/etc/init.d-> /etc/rc.d/init.d</p>

<p>/etc/rc ->/etc/rc.d/rc</p>

<p>/etc/rc<em>.d ->/etc/rc.d/rc</em>.d</p>

<p>/etc/rc.local-> /etc/rc.d/rc.local</p>

<p>/etc/rc.sysinit-> /etc/rc.d/rc.sysinit</p>

<p>也就是说，/etc目录下的init.d、rc、rc*.d、rc.local和rc.sysinit均是指向/etc/rc.d目录下相应文件和文件夹的符号链接。我们以启动级别3为例来简要说明一下。</p>

<p>/etc/rc.d/rc3.d目录，该目录下的内容全部都是以 S 或 K 开头的链接文件，都链接到"/etc/rc.d/init.d"目录下的各种shell脚本。S表示的是启动时需要start的服务内容，K表示关机时需要关闭的服务内容。/etc/rc.d/rc<em>.d中的系统服务会在系统后台启动，如果要对某个运行级别中的服务进行更具体的定制，通过chkconfig命令来操作，或者通过setup、ntsys、system-config-services来进行定制。如果我们需要自己增加启动的内容，可以在init.d目录中增加相关的shell脚本，然后在rc</em>.d目录中建立链接文件指向该shell脚本。这些shell脚本的启动或结束顺序是由S或K字母后面的数字决定，数字越小的脚本越先执行。例如，/etc/rc.d/rc3.d /S01sysstat就比/etc/rc.d/rc3.d /S99local先执行。</p>

<p>3)、执行用户自定义引导程序/etc/rc.d/rc.local。其实当执行/etc/rc.d/rc3.d/S99local时，它就是在执行/etc/rc.d/rc.local。S99local是指向rc.local的符号链接。就是一般来说，自定义的程序不需要执行上面所说的繁琐的建立shell增加链接文件的步骤，只需要将命令放在rc.local里面就可以了，这个shell脚本就是保留给用户自定义启动内容的。</p>

<p>4)、完成了系统所有的启动任务后，linux会启动终端或X-Window来等待用户登录。tty1,tty2,tty3&hellip;这表示在运行等级1，2，3，4的时候，都会执行"/sbin/mingetty"，而且执行了6个，所以linux会有6个纯文本终端，mingetty就是启动终端的命令。</p>

<p>除了这6个之外还会执行"/etc/X11/prefdm-nodaemon"这个主要启动X-Window</p>

<p>至此，系统就启动完毕了。以上分析不到的地方还请各位大虾不吝指正。</p>

<p>关于Linux的其他分析内容下次再继续写。
最后附上一张非常完整的系统启动流程图，适合各个水平阶段的读者。</p>

<p><img src="http://abcdxyzk.github.io/images/system/2016-01-21-4.jpg" alt="" /></p>

<p><a href="http://blog.itpub.net/8111049/viewspace-680043">http://blog.itpub.net/8111049/viewspace-680043</a></p>

<p><a href="http://bbs.chinaunix.net/thread-2046548-1-1.html">http://bbs.chinaunix.net/thread-2046548-1-1.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-26495963-id-3066282.html">http://blog.chinaunix.net/uid-26495963-id-3066282.html</a></p>
]]></content>
  </entry>
  
</feed>
