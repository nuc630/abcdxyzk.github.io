<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~sched | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~sched/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-07T14:44:12+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用户态到内核态切换]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-sched-user-to-kernel/"/>
    <updated>2015-06-02T14:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/02/kernel-sched-user-to-kernel</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/justcxtoworld/p/3155741.html">http://www.cnblogs.com/justcxtoworld/p/3155741.html</a></p>

<p>本文将主要研究在X86体系下Linux系统中用户态到内核态切换条件，及切换过程中内核栈和任务状态段TSS在中断机制/任务切换中的作用及相关寄存器的变化。</p>

<h4>一、用户态到内核态切换途径：</h4>

<p> 1：系统调用        2：中断 　　3：异常</p>

<p>对应代码，在3.3内核中，可以在/arch/x86/kernel/entry_32.S文件中查看。</p>

<h4>二、内核栈</h4>

<p>内核栈：Linux中每个进程有两个栈，分别用于用户态和内核态的进程执行，其中的内核栈就是用于内核态的堆栈，它和进程的task_struct结构，更具体的是thread_info结构一起放在两个连续的页框大小的空间内。</p>

<p>在内核源代码中使用C语言定义了一个联合结构方便地表示一个进程的thread_info和内核栈：</p>

<p>此结构在3.3内核版本中的定义在include/linux/sched.h文件的第2106行：
<code>
    2016  union thread_union {
    2017          struct thread_info thread_info;
    2018          unsigned long stack[THREAD_SIZE/sizeof(long)];
    2019     };        
</code></p>

<p>其中thread_info结构的定义如下：</p>

<p>3.3内核 /arch/x86/include/asm/thread_info.h文件第26行：
<code>
     26 　　struct thread_info {
     27         struct task_struct      *task;          /* main task structure */
     28         struct exec_domain      *exec_domain;   /* execution domain */
     29         __u32                   flags;          /* low level flags */
     30         __u32                   status;         /* thread synchronous flags */
     31         __u32                   cpu;            /* current CPU */
     32         int                     preempt_count;  /* 0 =&gt; preemptable,
     33                                                    &lt;0 =&gt; BUG */
     34         mm_segment_t            addr_limit;
     35         struct restart_block    restart_block;
     36         void __user             *sysenter_return;
     37 #ifdef CONFIG_X86_32
     38         unsigned long           previous_esp;   /* ESP of the previous stack in
     39                                                    case of nested (IRQ) stacks
     40                                                 */
     41         __u8                    supervisor_stack[0];
     42 #endif
     43         unsigned int            sig_on_uaccess_error:1;
     44         unsigned int            uaccess_err:1;  /* uaccess failed */
     45 };
</code></p>

<p>它们的结构图大致如下：</p>

<p><img src="/images/kernel/2015-06-02.png" alt="" /></p>

<p>  esp寄存器是CPU栈指针，存放内核栈栈顶地址。在X86体系中，栈开始于末端，并朝内存区开始的方向增长。从用户态刚切换到内核态时，进程的内核栈总是空的，此时esp指向这个栈的顶端。</p>

<p>  在X86中调用int指令型系统调用后会把用户栈的%esp的值及相关寄存器压入内核栈中，系统调用通过iret指令返回，在返回之前会从内核栈弹出用户栈的%esp和寄存器的状态，然后进行恢复。所以在进入内核态之前要保存进程的上下文，中断结束后恢复进程上下文，那靠的就是内核栈。</p>

<p>  这里有个细节问题，就是要想在内核栈保存用户态的esp,eip等寄存器的值，首先得知道内核栈的栈指针，那在进入内核态之前，通过什么才能获得内核栈的栈指针呢？答案是：TSS</p>

<h4>三、TSS</h4>

<p>X86体系结构中包括了一个特殊的段类型：任务状态段（TSS），用它来存放硬件上下文。TSS反映了CPU上的当前进程的特权级。</p>

<p>linux为每一个cpu提供一个tss段，并且在tr寄存器中保存该段。</p>

<p>在从用户态切换到内核态时，可以通过获取TSS段中的esp0来获取当前进程的内核栈 栈顶指针，从而可以保存用户态的cs,esp,eip等上下文。</p>

<p>注：linux中之所以为每一个cpu提供一个tss段，而不是为每个进程提供一个tss段，主要原因是tr寄存器永远指向它，在任务切换的适合不必切换tr寄存器，从而减小开销。</p>

<p>下面我们看下在X86体系中Linux内核对TSS的具体实现：</p>

<p>内核代码中TSS结构的定义：</p>

<p>3.3内核中：/arch/x86/include/asm/processor.h文件的第248行处：
<code>
    248   struct tss_struct {
    249         /*
    250          * The hardware state:
    251          */
    252         struct x86_hw_tss       x86_tss;
    253
    254         /*
    255          * The extra 1 is there because the CPU will access an
    256          * additional byte beyond the end of the IO permission
    257          * bitmap. The extra byte must be all 1 bits, and must
    258          * be within the limit.
    259          */
    260         unsigned long           io_bitmap[IO_BITMAP_LONGS + 1];
    261
    262         /*
    263          * .. and then another 0x100 bytes for the emergency kernel stack:
    264          */
    265         unsigned long           stack[64];
    266
    267 } ____cacheline_aligned;    
</code></p>

<p>其中主要的内容是：<br/>
  硬件状态结构:     x86_hw_tss<br/>
  IO权位图: 　　　　io_bitmap<br/>
  备用内核栈: 　　  stack</p>

<p>其中硬件状态结构：其中在32位X86系统中x86_hw_tss的具体定义如下：</p>

<p>/arch/x86/include/asm/processor.h文件中第190行处：
<code>
    190#ifdef CONFIG_X86_32
    191 /* This is the TSS defined by the hardware. */
    192 struct x86_hw_tss {
    193         unsigned short          back_link, __blh;
    194         unsigned long           sp0;　　            //当前进程的内核栈顶指针
    195         unsigned short          ss0, __ss0h;       //当前进程的内核栈段描述符
    196         unsigned long           sp1;
    197         /* ss1 caches MSR_IA32_SYSENTER_CS: */
    198         unsigned short          ss1, __ss1h;
    199         unsigned long           sp2;
    200         unsigned short          ss2, __ss2h;
    201         unsigned long           __cr3;
    202         unsigned long           ip;
    203         unsigned long           flags;
    204         unsigned long           ax;
    205         unsigned long           cx;
    206         unsigned long           dx;
    207         unsigned long           bx;
    208         unsigned long           sp;      　　　　　　//当前进程用户态栈顶指针
    209         unsigned long           bp;
    210         unsigned long           si;
    211         unsigned long           di;
    212         unsigned short          es, __esh;
    213         unsigned short          cs, __csh;
    214         unsigned short          ss, __ssh;
    215         unsigned short          ds, __dsh;
    216         unsigned short          fs, __fsh;
    217         unsigned short          gs, __gsh;
    218         unsigned short          ldt, __ldth;
    219         unsigned short          trace;
    220         unsigned short          io_bitmap_base;
    221
    222 } __attribute__((packed));
</code></p>

<p>linux的tss段中只使用esp0和iomap等字段，并且不用它的其他字段来保存寄存器，在一个用户进程被中断进入内核态的时候，从tss中的硬件状态结构中取出esp0（即内核栈栈顶指针），然后切到esp0，其它的寄存器则保存在esp0指的内核栈上而不保存在tss中。</p>

<p>每个CPU定义一个TSS段的具体实现代码：</p>

<p>3.3内核中/arch/x86/kernel/init_task.c第35行：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 35  * per-CPU TSS segments. Threads are completely &lsquo;soft&rsquo; on Linux,
</span><span class='line'> 36  * no more per-task TSS&rsquo;s. The TSS size is kept cacheline-aligned
</span><span class='line'> 37  * so they are allowed to end up in the .data..cacheline_aligned
</span><span class='line'> 38  * section. Since TSS&rsquo;s are completely CPU-local, we want them
</span><span class='line'> 39  * on exact cacheline boundaries, to eliminate cacheline ping-pong.
</span><span class='line'> 40  */&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 41 DEFINE_PER_CPU_SHARED_ALIGNED(struct tss_struct, init_tss) = INIT_TSS;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>INIT_TSS的定义如下:
</span><span class='line'>
</span><span class='line'>3.3内核中 /arch/x86/include/asm/processor.h文件的第879行：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;879 #define INIT_TSS  {                                                       \
</span><span class='line'>880         .x86_tss = {                                                      \
</span><span class='line'>881                 .sp0            = sizeof(init_stack) + (long)&amp;init_stack, \
</span><span class='line'>882                 .ss0            = __KERNEL_DS,                            \
</span><span class='line'>883                 .ss1            = __KERNEL_CS,                            \
</span><span class='line'>884                 .io_bitmap_base = INVALID_IO_BITMAP_OFFSET,               \
</span><span class='line'>885          },                                                               \
</span><span class='line'>886         .io_bitmap              = { [0 ... IO_BITMAP_LONGS] = ~0 },       \
</span><span class='line'>887 }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其中init_stack是宏定义，指向内核栈：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;61 #define init_stack              (init_thread_union.stack)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>这里可以看到分别把内核栈栈顶指针、内核代码段、内核数据段赋值给TSS中的相应项。从而进程从用户态切换到内核态时，可以从TSS段中获取内核栈栈顶指针，进而保存进程上下文到内核栈中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;总结、有了上面的一些准备，现总结在进程从用户态到内核态切换过程中，Linux主要做的事：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  1：读取tr寄存器，访问TSS段&lt;br/&gt;
</span><span class='line'>  2：从TSS段中的sp0获取进程内核栈的栈顶指针&lt;br/&gt;
</span><span class='line'>  3：由控制单元在内核栈中保存当前eflags,cs,ss,eip,esp寄存器的值。&lt;br/&gt;
</span><span class='line'>  4：由SAVE_ALL保存其寄存器的值到内核栈&lt;br/&gt;
</span><span class='line'>  5：把内核代码选择符写入CS寄存器，内核栈指针写入ESP寄存器，把内核入口点的线性地址写入EIP寄存器&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;此时，CPU已经切换到内核态，根据EIP中的值开始执行内核入口点的第一条指令。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[进程切换过程分析]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-sched-switch/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-06-02T14:10:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/06/02/kernel-sched-switch&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/nkguohao/article/details/9187381"&gt;http://blog.csdn.net/nkguohao/article/details/9187381&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;参考《深入理解Linux内核（第三版）》&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;进程切换&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换，任务切换或上下文切换。下面几节描述在Linux中进行进程切换的主要内容。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;硬件上下文&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;尽管每个进程可以拥有属于自己的地址空间，但所有进程必须共享CPU寄存器。因此要恢复一个进程的执行之前，内核必须确保每个寄存器装入了挂起进程时的值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程恢复执行前必须装入寄存器的一组数据称为硬件上下文。硬件上下文是进程可执行上下文的一个子集，因为可执行上下文包含进程执行时需要的所有信息。在Linux中，进程硬件上下文的一部分存在TSS段，而剩余部分存放在内核态的堆栈中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在下面的描述中，我们假定用prev局部变量表示切换出的进程的描述符，next表示切换进的进程的描述符。因此，我们把进程切换定义为这样的行为：保存prev硬件上下文，用next硬件上下文代替prev。因为进程切换经常发生，因此减少和装入硬件上下文所花费的时间是非常重要的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;早期的Linux版本利用80x86体系结构所提供的硬件支持，并通过far jmp指令跳到进程TSS描述符的选择符来执行进程切换。当执行这条指令时，CPU通过自动保存原来的硬件上下文，装入新的硬件上下文来执行硬件上下文切换。但是基于以下原因，Linux2.6使用软件执行进程切换：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  通过一组mov指令逐步执行切换，这样能较好地控制所装入数据的合法性，尤其是，这使检查ds和es段寄存器的值成为可能，这些值有可能被恶意用户伪造。当用单独的farjmp指令时，不可能进行这类检查。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  旧方法和新方法所需时间大致相同。然而，尽管当前的切换代码还有改进的余地，却不能对硬件上下文切换进行优化。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程切换只发生在内核态。在执行进程切换之前，用户态进程所使用的所有寄存器内容已保存在内核态堆栈上，这也包括ss和esp这对寄存器的内容。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;任务状态段&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;80x86体系结构包括一个特殊的段类型，叫任务状态段（Task State Segment, TSS）来存放硬件上下文。尽管Linux并不使用硬件上下文切换，但是强制它为系统中每个不同的CPU创建一个TSS。这样做的两个主要理由为：&lt;br/&gt;
</span><span class='line'>  当80x86的一个CPU从用户态切换到内核态时，它就从TSS中获取内核态堆栈的地址。&lt;br/&gt;
</span><span class='line'>  当用户态进程试图通过in或out指令访问一个I/O端口时，CPU需要访问存放在TSS中的I/O许可图以检查该进程是否有访问端口的权力。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;更确切地说，当进程在用户态下执行in或out指令时，控制单元执行下列操作：&lt;br/&gt;
</span><span class='line'>  它检查eflags寄存器中的2位IOPL字段。如果该字段值为3，控制单元就执行I/O指令。否则，执行下一个检查。&lt;br/&gt;
</span><span class='line'>  访问tr寄存器以确定当前的TSS和相应的I/O许可权位图。&lt;br/&gt;
</span><span class='line'>  检查I/O指令中指定的I/O端口在I/O许可权位图中对应的位。如果该位清0，这条I/O指令就执行，否则控制单元产生一个”Generalprotetion”异常。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tss_struct结构描述TSS的格式。正如第二章(《深入理解Linux内核（第三版）》)所提到的，init_tss数组为系统上每个不同的CPU存放一个TSS。在每次进程切换时，内核都更新TSS的某些字段以便相应的CPU控制单元可以安全地检索到它需要的信息。因此，TSS反映了CPU上的当前进程的特权级，但不必为没有在运行的进程保留TSS。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;每个TSS有它自己8字节的任务状态段描述符。这个描述符包括指向TSS起始地址的32位Base字段，20位Limit字段。TSSD的S标志被清0，以表示相应的TSS是系统段的事实。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Type字段置为11或9以表示这个段实际上是TSS。在Intel的原始设计中，系统中的每个进程都应当指向自己的TSS；Type字段的第二个有效位叫做Busy位；如果进程正由CPU执行，则该位置为1，否则置为0。在Linux的设计中，每个CPU只有一个TSS，因此，Busy位总置为1。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由linux创建的TSSD存放在全局描述符表中。GDT的基地址存放在每个CPU的gdtr寄存器中。每个CPU的tr寄存器包含相应TSS的TSSD选择符，也包括了两个隐藏了非编程字段；TSSD的Base字段和Limit字段。这样，处理器就能直接对TSS寻址而不用从GDT中检索TSS的地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Thread字段&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在每次进程切换时，被替换进程的硬件上下文必须保存在别处。不能像Intel原始设计那样把它保存在TSS中，因为Linux为每个处理器而不是为每个进程使用TSS。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;因此，每个进程描述符包含一个类型为thread_struct的thread字段，只要进程被切换出去，内核就把其硬件上下文保存在这个结构中。随后我们会看到，这个数据结构包含的字段涉及大部分CPU寄存器，但不包括诸如exa、ebx等等这些通用寄存器，它们的值保留在内核堆栈中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;执行进程切换&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程切换可能只发生在精心定义的点：schedule()函数（《深入理解Linux内核（第三版）》第七章有详细讨论）。这里，我们仅关注内核如何执行一个进程切换。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从本质上说，每个进程切换由两步组成：&lt;br/&gt;
</span><span class='line'>  切换页全局目录以安装一个新的地址空间；将在第九章（《深入理解Linux内核（第三版）》）描述这一步。&lt;br/&gt;
</span><span class='line'>  切换内核态堆栈和硬件上下文，因为硬件上下文提供了内核执行新进程所需要的所有信息，包含CPU寄存器。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们又一次假定prev指向被替换进程的描述符，而next指向被激活进程的描述符。prev和next是schedule()函数的局部变量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;switch_to宏&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进程切换的第二步由switch_to宏执行。它是内核中与硬件关系最密切的例程之一，要理解它到低做了些什么我们必须下些功夫。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先，该宏有三个参数，它们是prev,next和last。你可能很容易猜到prev和next的作用：它们仅是局部变量prev和next的占位符，即它们是输入参数，分别表示被替换进程和新进程描述符的地址在内存中的位置。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;那第三个参数last呢？在任何进程切换中，涉及到三个进程而不是两个。假设内核决定暂停进程A而激活里程B。在schedule()函数中，prev指向A的描述符而next指向B的描述符。switch_to宏一但使A暂停，A的执行流就冻结。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;随后，当内核想再次此激活A，就必须暂停另一个进程C，于是就要用prev指向C而next指向A来执行另一个swithch_to宏。当A恢复它的执行流时，就会找到它原来的内核栈，于是prev局部变量还是指向A的描述符而next指向B的描述符。此时，代表进程A执行的内核就失去了对C的任何引用。但是，事实表明这个引用对于完成进程切换是很有用的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;switch_to宏的最后一个参数是输出参数，它表示宏把进程C的描述符地址写在内存的什么位置了。在进程切换之前，宏把第一个输入参数prev表示的变量的内容存入CPU的eax寄存器。在完成进程切换，A已经恢复执行时，宏把CPU的eax寄存器的内容写入由第三个输出参数&mdash;&mdash;-last所指示的A在内存中的位置。因为CPU寄存器不会在切换点发生变化，所以C的描述符地址也存在内存的这个位置。在schedule()执行过程中，参数last指向A的局部变量prev，所以prev被C的地址覆盖。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图3-7显示了进程A，B，C内核堆栈的内容以及eax寄存器的内容。必须注意的是：图中显示的是在被eax寄存器的内容覆盖以前的prev局部变量的值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #define switch_to(prev, next, last)                 \
</span><span class='line'>32do {                                  \
</span><span class='line'>33  /*                              \
</span><span class='line'>34   * Context-switching clobbers all registers, so we clobber  \
</span><span class='line'>35   * them explicitly, via unused output variables.        \
</span><span class='line'>36   * (EAX and EBP is not listed because EBP is saved/restored \
</span><span class='line'>37   * explicitly for wchan access and EAX is the return value of   \
</span><span class='line'>38   * __switch_to())                       \
</span><span class='line'>39   */                             \
</span><span class='line'>40  unsigned long ebx, ecx, edx, esi, edi;              \
</span><span class='line'>41                                  \
</span><span class='line'>42  asm volatile("pushfl\n\t"       /* save    flags */ \
</span><span class='line'>43           "pushl %%ebp\n\t"      /* save    EBP   */ \
</span><span class='line'>44           "movl %%esp,%[prev_sp]\n\t"    /* save    ESP   */ \
</span><span class='line'>45           "movl %[next_sp],%%esp\n\t"    /* restore ESP   */ \
</span><span class='line'>46           "movl $1f,%[prev_ip]\n\t"  /* save    EIP   */ \
</span><span class='line'>47           "pushl %[next_ip]\n\t" /* restore EIP   */ \
</span><span class='line'>48           __switch_canary                    \
</span><span class='line'>49           "jmp __switch_to\n"    /* regparm call  */ \
</span><span class='line'>50           "1:\t"                     \
</span><span class='line'>51           "popl %%ebp\n\t"       /* restore EBP   */ \
</span><span class='line'>52           "popfl\n"          /* restore flags */ \
</span><span class='line'>53                                  \
</span><span class='line'>54           /* output parameters */                \
</span><span class='line'>55           : [prev_sp] "=m" (prev-&gt;thread.sp),     \
</span><span class='line'>56             [prev_ip] "=m" (prev-&gt;thread.ip),     \
</span><span class='line'>57             "=a" (last),                 \
</span><span class='line'>58                                  \
</span><span class='line'>59             /* clobbered output registers: */        \
</span><span class='line'>60             "=b" (ebx), "=c" (ecx), "=d" (edx),      \
</span><span class='line'>61             "=S" (esi), "=D" (edi)               \
</span><span class='line'>62                                      \
</span><span class='line'>63             __switch_canary_oparam               \
</span><span class='line'>64                                  \
</span><span class='line'>65             /* input parameters: */              \
</span><span class='line'>66           : [next_sp]  "m" (next-&gt;thread.sp),     \
</span><span class='line'>67             [next_ip]  "m" (next-&gt;thread.ip),     \
</span><span class='line'>68                                      \
</span><span class='line'>69             /* regparm parameters for __switch_to(): */  \
</span><span class='line'>70             [prev]     "a" (prev),               \
</span><span class='line'>71             [next]     "d" (next)                \
</span><span class='line'>72                                  \
</span><span class='line'>73             __switch_canary_iparam               \
</span><span class='line'>74                                  \
</span><span class='line'>75           : /* reloaded segment registers */         \
</span><span class='line'>76          "memory");                  \
</span><span class='line'>77} while (0)
</span><span class='line'>78
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由于switch_to宏采用扩展的内联汇编语言编码，所以可读性比较差：实际上这段代码通过特殊位置记数法使用寄存器，而实际使用的通用寄存器由编译器自由选择。我们将采用标准汇编语言而不是麻烦的内联汇编语言来描述switch_to宏在80x86微处理器上所完成的典型工作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在eax和edx寄存器中分别保存prev和next的值。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl prev ,%eax
</span><span class='line'>movl next ,%edx
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  把eflags和ebp寄存器的内容保存在prev内核栈中。必須保存它们的原因是编译器认为在switch_to结束之前它们的值应当保持不变。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>pushf1
</span><span class='line'>push %ebp
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  把esp的内容保存到prev-&gt;thread.esp中以使该字段指向prev内核栈的栈顶：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl %esp, 484(%eax)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  把next-&gt;thread.esp装入esp.此时，内核开始在next的内核栈上操作，因此这条指令实际上完成了从prev到next的切换。由于进程描述符的地址和内核栈的地址紧挨着，所以改变内核栈意味着改变进程。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl 484(%edx),%esp
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  把标记为1的地址存入prev-&gt;thread.eip。当被替换的进程重新恢复执行时，进程执行被标记为1的那条指令：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl $lf, 480(%eax)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  宏把next-&gt;thread.eip的值压入next的内核栈。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>push1 480(%edx)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  跳到&lt;code&gt;__switch_to()&lt;/code&gt; 函数
</span><span class='line'>&lt;code&gt;
</span><span class='line'>jmp __switch_to
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  这里被进程B替换的进程A再次获得CPU；它执行一些保存eflags和ebp寄存器内容的指令，这两条指令的第一条指令被标记为1。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  拷贝eax寄存器的内容到switch_to宏的第三个参数lash标识的内存区域中：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl  %eax, last
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>正如以前讨论的，eax寄存器指向刚被替换的进程描述符。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;&lt;code&gt;__switch_to()&lt;/code&gt;函数&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;__switch_to()&lt;/code&gt;函数执行大多数开始于switch_to()宏的进程切换。这个函数作用于prev_p和next_p参数，这两个参数表示前一个进程和新进程。这个函数的调用不同于一般函数的调用，因为&lt;code&gt;__switch_to()&lt;/code&gt;从eax和edx取参数prev_p和next_p，而不像大多数函数一样从栈中取参数。为了强迫函数从寄存器取它的参数，内核利用&lt;code&gt;__attribute__&lt;/code&gt;和regparm关键字，这两个关键字是C语言非标准的扩展名，由gcc编译程序实现。在include/asm-i386/system.h头文件中，&lt;code&gt;__switch_to()&lt;/code&gt;函数的声明如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>__switch_to(structtask_struct *prev_p,struct tast_struct *next_p)__attribute_(regparm(2));
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>函数执行的步骤如下：&lt;br/&gt;
</span><span class='line'>  1、执行由&lt;code&gt;__unlazy_fpu()&lt;/code&gt;宏产生的代码，以有选择地保存prev_p进程的FPU、MMX及XMM寄存器的内容。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>__unlazy_fpu(prev_p);
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  2、执行smp_processor_id()宏获得本地(local)CPU的下标，即执行代码的CPU。该宏从当前进程的thread_info结构的cpu字段获得下标将它保存到cpu局部变量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  3、把next_p-&gt;thread.esp0装入对应于本地CPU的TSS的esp0字段；将在通过sysenter指令发生系统调用一节看到，以后任何由sysenter汇编指令产生的从用户态到内核态的特权级转换将把这个地址拷贝到esp寄存器中：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>init_tss[cpu].esp0= next_p-&gt;thread.esp0;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  4、把next_p进程使用的线程局部存储段装入本地CPU的全局描述符表；三个段选择符保存在进程描述符内的tls_array数组中
</span><span class='line'>&lt;code&gt;
</span><span class='line'>cpu_gdt_table[cpu][6]= next_p-&gt;thread.tls_array[0];
</span><span class='line'>cpu_gdt_table[cpu][7]= next_p-&gt;thread.tls_array[1];
</span><span class='line'>cpu_gdt_table[cpu][8]= next_p-&gt;thread.tls_array[2];
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  5、把fs和gs段寄存器的内容分别存放在prev_p-&gt;thread.fs和prev_p-&gt;thread.gs中，对应的汇编语言指令是：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl%fs,40(%esi)
</span><span class='line'>movl%gs,44(%esi)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  6、如果fs或gs段寄存器已经被prev_p或next_p进程中的任意一个使用，则将next_p进程的thread_struct描述符中保存的值装入这些寄存器中。这一步在逻辑上补充了前一步中执行的操作。主要的汇编语言指令如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl40(%ebx),%fs
</span><span class='line'>movl44(%edb),%gs
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  7、ebx寄存器指向next_p-&gt;thread结构。代码实际上更复杂，因为当它检测到一个无效的段寄存器值时，CPU可能产生一个异常。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  8、用next_p-&gt;thread.debugreg数组的内容装载dr0,&hellip;,dr7中的6个调试寄存器。只有在next_p被挂起时正在使用调试寄存器，这种操作才能进行。这些寄存器不需要被保存，因为只有当一个调试器想要监控prev时prev_p-&gt;thread.debugreg才会修改。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if(next_p-&gt;thread.debugreg[7]){
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,0);
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,1);
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,2);
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,3);
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,6);
</span><span class='line'>loaddebug(&amp;next_p-&gt;thread,7);
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  8、如果必要，更新TSS中的I/O位图。当next_p或prev_p有其自己的定制I/O权限位图时必须这么做：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if(prev_p-&gt;thread.io_bitmap_ptr|| next_p-&gt;thread.io_bitmap_ptr )
</span><span class='line'>handle_io_bitmap(&amp;next_p-&gt;thread,&amp;init_tss[cpu]);
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;因为进程很修改I/O权限位图，所以该位图在“懒”模式中被处理；当且仅当一个进程在当前时间片内实际访问I/O端口时，真实位图才被拷贝到本地CPU的TSS中。进程的定制I/O权限位图被保存在thread_info结构的io_bitmap_ptr字段指向的缓冲区中。handle_io_bitmap()函数为next_p进程设置本地CPU使用的TSS的in_bitmap字段如下：&lt;br/&gt;
</span><span class='line'>  (a)如果next_p进程不拥有自己的I/O权限位图，则TSS的io_bitmap字段被设为0x8000.&lt;br/&gt;
</span><span class='line'>  (b) 如果next_p进程拥有自己的I/O权限位图，则TSS的io_bitmap字段被设为0x9000。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;TSS的io_bitmap字段应当包含一个在TSS中的偏移量，其中存放实际位图。无论何时用户态进程试图访问一个I/O端口，0x8000和0x9000指向TSS界限之外并将因此引起”Generalprotection”异常。do_general_protection()异常处理程序将检查保存在io_bitmap字段的值：如果是0x8000，函数发送一个SIGSEGV信号给用户态进程；如果是0x9000，函数把进程位图拷贝拷贝到本地CPU的TSS中，把io_bitmap字段为实际位图的偏移(104)，并强制再一次执行有缺陷的汇编指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  9、终止。
</span><span class='line'>&lt;code&gt;__switch_to()&lt;/code&gt;函数通过使用下列声明结束：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>return prev_p;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  由编译器产生的相应汇编语言指令是：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>movl %edl,%eax
</span><span class='line'>ret
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  prev_p参数被拷贝到eax，因为缺省情况下任何C函数的返回值被传递给eax寄存器。注意eax的值因此在调用&lt;code&gt;__switch_to()&lt;/code&gt;的过程中被保护起来；这非常重要，因为调用switch_to宏时会假定eax总是用来存放被替换的进程描述符的地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  汇编语言指令ret把栈顶保存的返回地址装入eip程序计数器。不过，通过简单地跳转到&lt;code&gt;__switch_to()&lt;/code&gt;函数来调用该函数。因此，ret汇编指令在栈中找到标号为1的指令的地址，其中标号为1的地址是由switch_to()宏推入栈中的。如果因为next_p第一次执行而以前从未被挂起，&lt;code&gt;__switch_to()&lt;/code&gt;就找到ret_from_fork()函数的起始地址。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[字符设备驱动和等待队列样例]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-05-21T15:58:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue-sample&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;前两篇的样例&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="/blog/2015/05/21/kernel-base-chardev/"&gt;字符设备驱动程序&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="/blog/2015/05/21/kernel-sched-waitqueue/"&gt;Linux内核中的等待队列&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;waitqueue.c&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/fs.h&gt;
</span><span class='line'>#include &lt;asm/uaccess.h&gt;
</span><span class='line'>#include &lt;linux/wait.h&gt;
</span><span class='line'>#include &lt;linux/semaphore.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/proc_fs.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;linux/socket.h&gt;
</span><span class='line'>#include &lt;linux/tcp.h&gt;
</span><span class='line'>#include &lt;linux/proc_fs.h&gt;
</span><span class='line'>#include &lt;net/net_namespace.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;net/tcp.h&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_read(struct file *, char *, size_t, loff_t*);
</span><span class='line'>static ssize_t globalvar_write(struct file *, const char *, size_t, loff_t*);
</span><span class='line'>
</span><span class='line'>struct file_operations globalvar_fops =
</span><span class='line'>{
</span><span class='line'>    .owner   = THIS_MODULE,
</span><span class='line'>    .read = globalvar_read,
</span><span class='line'>    .write = globalvar_write,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>#define LEN 1024
</span><span class='line'>static char global_var[LEN];
</span><span class='line'>static int read_index = 0;
</span><span class='line'>static int write_index = 0;
</span><span class='line'>static spinlock_t var_lock;
</span><span class='line'>static wait_queue_head_t waitq;
</span><span class='line'>static int flag = 0;
</span><span class='line'>static int major;
</span><span class='line'>
</span><span class='line'>static const char procname[] = "testvar";
</span><span class='line'>
</span><span class='line'>static int __init globalvar_init(void)
</span><span class='line'>{
</span><span class='line'>    init_waitqueue_head(&amp;waitq);
</span><span class='line'>    spin_lock_init(&amp;var_lock);
</span><span class='line'>//  if (!proc_net_fops_create(&amp;init_net, procname, S_IRUSR, &amp;globalvar_fops)) {
</span><span class='line'>    if (!(major = register_chrdev(0, "globalvar", &amp;globalvar_fops))) {
</span><span class='line'>        printk("globalvar register failure\n");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    printk("major = %d\n", major);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void __exit globalvar_exit(void)
</span><span class='line'>{
</span><span class='line'>//  proc_net_remove(&amp;init_net, procname);
</span><span class='line'>    unregister_chrdev(major, "globalvar");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_read(struct file *filp, char *buf, size_t len, loff_t *off)
</span><span class='line'>{
</span><span class='line'>    int read_len;
</span><span class='line'>    //等待数据可获得
</span><span class='line'>    if (wait_event_interruptible(waitq, flag != 0))
</span><span class='line'>        return -ERESTARTSYS;
</span><span class='line'>
</span><span class='line'>    spin_lock(&amp;var_lock);
</span><span class='line'>    read_len = write_index - read_index;
</span><span class='line'>    if (copy_to_user(buf, global_var+read_index, read_len)) {
</span><span class='line'>        spin_unlock(&amp;var_lock);
</span><span class='line'>        return -EFAULT;
</span><span class='line'>    }
</span><span class='line'>    read_index = write_index;
</span><span class='line'>    flag = 0;
</span><span class='line'>    spin_unlock(&amp;var_lock);
</span><span class='line'>    return read_len;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static ssize_t globalvar_write(struct file *filp, const char *buf, size_t len, loff_t *off)
</span><span class='line'>{
</span><span class='line'>    spin_lock(&amp;var_lock);
</span><span class='line'>    if (copy_from_user(global_var+write_index, buf, len)) {
</span><span class='line'>        spin_unlock(&amp;var_lock);
</span><span class='line'>        return -EFAULT;
</span><span class='line'>    }
</span><span class='line'>    write_index += len;
</span><span class='line'>    spin_unlock(&amp;var_lock);
</span><span class='line'>
</span><span class='line'>    flag = 1;
</span><span class='line'>    //通知数据可获得
</span><span class='line'>    wake_up_interruptible(&amp;waitq);
</span><span class='line'>    return len;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(globalvar_init);
</span><span class='line'>module_exit(globalvar_exit);
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Makefile&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    obj-m += waitqueue.o
</span><span class='line'>
</span><span class='line'>PWD = $(shell pwd)
</span><span class='line'>KERNEL := /lib/modules/`uname -r`/build
</span><span class='line'>
</span><span class='line'>all:
</span><span class='line'>    make -C $(KERNEL) M=$(PWD) modules
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;安装模块&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    insmod ./waitqueue.ko
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;查看对应的设备号&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    $ cat /proc/devices | grep globalvar
</span><span class='line'>$ 249 globalvar
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;建立文件&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    mknod /dev/globalvar c 249 0
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;终端1: cat文件&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    cat /dev/globalvar
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;终端2: echo数据到文件&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    echo 123 &gt; /dev/globalvar
</span><span class='line'>echo 1234567 &gt; /dev/globalvar
</span><span class='line'>echo 123 &gt; /dev/globalvar
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这时就能看见终端1读到了内容。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux内核中的等待队列]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-05-21T15:58:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/05/21/kernel-sched-waitqueue&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.sina.com.cn/s/blog_49d5604e010008bn.html"&gt;http://blog.sina.com.cn/s/blog_49d5604e010008bn.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;等待队列可以参考net/ipv4/tcp_probe.c的实现&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/"&gt;简单样例&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Linux内核中的等待队列&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  Linux内核的等待队列是以双循环链表为基础数据结构，与进程调度机制紧密结合，能够用于实现核心的异步事件通知机制。在Linux2.4.21中，等待队列在源代码树include/linux/wait.h中，这是一个通过list_head连接的典型双循环链表，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如下图所示。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-05-21.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在这个链表中，有两种数据结构：等待队列头（wait_queue_head_t）和等待队列项（wait_queue_t）。等待队列头和等待队列项中都包含一个list_head类型的域作为"连接件"。由于我们只需要对队列进行添加和删除操作，并不会修改其中的对象（等待队列项），因此，我们只需要提供一把保护整个基础设施和所有对象的锁，这把锁保存在等待队列头中，为wq_lock_t类型。在实现中，可以支持读写锁（rwlock）或自旋锁（spinlock）两种类型，通过一个宏定义来切换。如果使用读写锁，将wq_lock_t定义为rwlock_t类型；如果是自旋锁，将wq_lock_t定义为spinlock_t类型。无论哪种情况，分别相应设置wq_read_lock、wq_read_unlock、wq_read_lock_irqsave、wq_read_unlock_irqrestore、wq_write_lock_irq、wq_write_unlock、wq_write_lock_irqsave和wq_write_unlock_irqrestore等宏。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;等待队列头&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct __wait_queue_head {
</span><span class='line'>    wq_lock_t lock;
</span><span class='line'>    struct list_head task_list;
</span><span class='line'>};
</span><span class='line'>typedef struct __wait_queue_head wait_queue_head_t;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  前面已经说过，等待队列的主体是进程，这反映在每个等待队列项中，是一个任务结构指针（struct task_struct * task）。flags为该进程的等待标志，当前只支持互斥。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;等待队列项&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct __wait_queue {
</span><span class='line'>    unsigned int flags;
</span><span class='line'>#define WQ_FLAG_EXCLUSIVE 0x01
</span><span class='line'>    struct task_struct * task;
</span><span class='line'>    struct list_head task_list;
</span><span class='line'>};
</span><span class='line'>typedef struct __wait_queue wait_queue_t;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;声明和初始化&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #define DECLARE_WAITQUEUE(name, tsk)            \
</span><span class='line'>    wait_queue_t name = __WAITQUEUE_INITIALIZER(name, tsk)
</span><span class='line'>#define __WAITQUEUE_INITIALIZER(name, tsk) {    \
</span><span class='line'>    task:  tsk,                                 \
</span><span class='line'>    task_list: { NULL, NULL },                  \
</span><span class='line'>    __WAITQUEUE_DEBUG_INIT(name)}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  通过DECLARE_WAITQUEUE宏将等待队列项初始化成对应的任务结构，并且用于连接的相关指针均设置为空。其中加入了调试相关代码。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define DECLARE_WAIT_QUEUE_HEAD(name)                    \
</span><span class='line'>    wait_queue_head_t name = __WAIT_QUEUE_HEAD_INITIALIZER(name)
</span><span class='line'>#define __WAIT_QUEUE_HEAD_INITIALIZER(name) {            \
</span><span class='line'>    lock:  WAITQUEUE_RW_LOCK_UNLOCKED,                   \
</span><span class='line'>    task_list: { &amp;(name).task_list, &amp;(name).task_list }, \
</span><span class='line'>    __WAITQUEUE_HEAD_DEBUG_INIT(name)}
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  通过DECLARE_WAIT_QUEUE_HEAD宏初始化一个等待队列头，使得其所在链表为空，并设置链表为"未上锁"状态。其中加入了调试相关代码。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static inline void init_waitqueue_head(wait_queue_head_t *q)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数初始化一个已经存在的等待队列头，它将整个队列设置为"未上锁"状态，并将链表指针prev和next指向它自身。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    q-&gt;lock = WAITQUEUE_RW_LOCK_UNLOCKED;
</span><span class='line'>    INIT_LIST_HEAD(&amp;q-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数初始化一个已经存在的等待队列项，它设置对应的任务结构，同时将标志位清0。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    q-&gt;flags = 0;
</span><span class='line'>    q-&gt;task = p;
</span><span class='line'>}
</span><span class='line'>static inline int waitqueue_active(wait_queue_head_t *q)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数检查等待队列是否为空。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    return !list_empty(&amp;q-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *new)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;将指定的等待队列项new添加到等待队列头head所在的链表头部，该函数假设已经获得锁。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    list_add(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __add_wait_queue_tail(wait_queue_head_t *head, wait_queue_t *new)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;将指定的等待队列项new添加到等待队列头head所在的链表尾部，该函数假设已经获得锁。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    list_add_tail(&amp;new-&gt;task_list, &amp;head-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>static inline void __remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>将函数从等待队列头head所在的链表中删除指定等待队列项old，该函数假设已经获得锁，并且old在head所在链表中。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>{
</span><span class='line'>    list_del(&amp;old-&gt;task_list);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;睡眠和唤醒操作&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对等待队列的操作包括睡眠和唤醒（相关函数保存在源代码树的/kernel/sched.c和include/linux/sched.h中）。思想是更改当前进程（CURRENT）的任务状态，并要求重新调度，因为这时这个进程的状态已经改变，不再在调度表的就绪队列中，因此无法再获得执行机会，进入"睡眠"状态，直至被"唤醒"，即其任务状态重新被修改回就绪态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;常用的睡眠操作有interruptible_sleep_on和sleep_on。两个函数类似，只不过前者将进程的状态从就绪态（TASK_RUNNING）设置为TASK_INTERRUPTIBLE，允许通过发送signal唤醒它（即可中断的睡眠状态）；而后者将进程的状态设置为TASK_UNINTERRUPTIBLE，在这种状态下，不接收任何singal。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;以interruptible_sleep_on为例，其展开后的代码是：</span></code></pre></td></tr></table></div></figure>
    void interruptible_sleep_on(wait_queue_head_t <em>q)
    {
        unsigned long flags;
        wait_queue_t wait;
        /</em> 构造当前进程对应的等待队列项 */
        init_waitqueue_entry(&amp;wait, current);</p>

<pre><code>    /* 将当前进程的状态从TASK_RUNNING改为TASK_INTERRUPTIBLE */
    current-&gt;state = TASK_INTERRUPTIBLE;

    /* 将等待队列项添加到指定链表中 */
    wq_write_lock_irqsave(&amp;q-&gt;lock,flags);
    __add_wait_queue(q, &amp;wait); 
    wq_write_unlock(&amp;q-&gt;lock);

    /* 进程重新调度，放弃执行权 */
    schedule();

    /* 本进程被唤醒，重新获得执行权，首要之事是将等待队列项从链表中删除 */
    wq_write_lock_irq(&amp;q-&gt;lock);
    __remove_wait_queue(q, &amp;wait);
    wq_write_unlock_irqrestore(&amp;q-&gt;lock,flags);
    /* 至此，等待过程结束，本进程可以正常执行下面的逻辑 */
}
</code></pre>

<pre><code>
对应的唤醒操作包括wake_up_interruptible和wake_up。wake_up函数不仅可以唤醒状态为TASK_UNINTERRUPTIBLE的进程，而且可以唤醒状态为TASK_INTERRUPTIBLE的进程。

wake_up_interruptible只负责唤醒状态为TASK_INTERRUPTIBLE的进程。这两个宏的定义如下：
</code></pre>

<pre><code>#define wake_up(x)   __wake_up((x),TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE, 1)
#define wake_up_interruptible(x) __wake_up((x),TASK_INTERRUPTIBLE, 1)
</code></pre>

<pre><code>
__wake_up函数主要是获取队列操作的锁，具体工作是调用__wake_up_common完成的。
</code></pre>

<pre><code>void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr)
{
    if (q) {
        unsigned long flags;
        wq_read_lock_irqsave(&amp;q-&gt;lock, flags);
        __wake_up_common(q, mode, nr, 0);
        wq_read_unlock_irqrestore(&amp;q-&gt;lock, flags);
    }
}
</code></pre>

<pre><code>
/* The core wakeup function.  Non-exclusive wakeups (nr_exclusive == 0) just wake everything up.  If it's an exclusive wakeup (nr_exclusive == small +ve number) then we wake all the non-exclusive tasks and one exclusive task.
There are circumstances in which we can try to wake a task which has already started to run but is not in state TASK_RUNNING.  try_to_wake_up() returns zero in this (rare) case, and we handle it by contonuing to scan the queue. */
</code></pre>

<pre><code>static inline void __wake_up_common (wait_queue_head_t *q, unsigned int mode, int nr_exclusive, const int sync)
</code></pre>

<pre><code>
参数q表示要操作的等待队列，mode表示要唤醒任务的状态，如TASK_UNINTERRUPTIBLE或TASK_INTERRUPTIBLE等。nr_exclusive是要唤醒的互斥进程数目，在这之前遇到的非互斥进程将被无条件唤醒。sync表示？？？
</code></pre>

<pre><code>{
    struct list_head *tmp;
    struct task_struct *p;

    CHECK_MAGIC_WQHEAD(q);
    WQ_CHECK_LIST_HEAD(&amp;q-&gt;task_list);

    /* 遍历等待队列 */
    list_for_each(tmp,&amp;q-&gt;task_list) {
        unsigned int state;
        /* 获得当前等待队列项 */
        wait_queue_t *curr = list_entry(tmp, wait_queue_t, task_list);

        CHECK_MAGIC(curr-&gt;__magic);
        /* 获得对应的进程 */
        p = curr-&gt;task;
        state = p-&gt;state;

        /* 如果我们需要处理这种状态的进程 */
        if (state &amp; mode) {
            WQ_NOTE_WAKER(curr);
            if (try_to_wake_up(p, sync) &amp;&amp; (curr-&gt;flags&amp;WQ_FLAG_EXCLUSIVE) &amp;&amp; !--nr_exclusive)
                break;
        }
    }
}
</code></pre>

<pre><code>
/* 唤醒一个进程，将它放到运行队列中，如果它还不在运行队列的话。"当前"进程总是在运行队列中的（except when the actual re-schedule is in progress)，and as such you're allowed to do the simpler "current-&gt;state = TASK_RUNNING" to mark yourself runnable without the overhead of this. */
</code></pre>

<pre><code>static inline int try_to_wake_up(struct task_struct * p, int synchronous)
{
    unsigned long flags;
    int success = 0;

    /* 由于我们需要操作运行队列，必须获得对应的锁 */
    spin_lock_irqsave(&amp;runqueue_lock, flags);
    /* 将进程状态设置为TASK_RUNNING */
    p-&gt;state = TASK_RUNNING;
    /* 如果进程已经在运行队列中，释放锁退出 */
    if (task_on_runqueue(p))
        goto out;
    /* 否则将进程添加到运行队列中 */
    add_to_runqueue(p);

    /* 如果设置了同步标志 */
    if (!synchronous || !(p-&gt;cpus_allowed &amp; (1UL &lt;&lt; smp_processor_id())))
        reschedule_idle(p);
    /* 唤醒成功，释放锁退出 */
    success = 1;
out:
    spin_unlock_irqrestore(&amp;runqueue_lock, flags);
    return success;
}
</code></pre>

<pre><code>
#### 等待队列应用模式

等待队列的的应用涉及两个进程，假设为A和B。A是资源的消费者，B是资源的生产者。A在消费的时候必须确保资源已经生产出来，为此定义一个资源等待队列。这个队列同时要被进程A和进程B使用，我们可以将它定义为一个全局变量。
</code></pre>

<pre><code>DECLARE_WAIT_QUEUE_HEAD(rsc_queue); /* 全局变量 */
</code></pre>

<pre><code>
在进程A中，执行逻辑如下：
</code></pre>

<pre><code>while (resource is unavaiable) {
    interruptible_sleep_on( &amp;wq );
}
consume_resource();
</code></pre>

<pre><code>
在进程B中，执行逻辑如下：
</code></pre>

<pre><code>produce_resource();
wake_up_interruptible( &amp;wq );
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux进程调度之FIFO和RR调度策略]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt/"/>
    <updated>2015-03-13T00:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/03/13/kernel-sched-rt</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-24774106-id-3379478.html">http://blog.chinaunix.net/uid-24774106-id-3379478.html</a></p>

<p>严格地说，对于优先级对于实时进程和普通进程的意义是不一样的。</p>

<p>1、在一定程度上，实时进程优先级高，实时进程存在，就没有普通进程占用CPU的机会，（但是前一篇博文也讲过了，实时组调度出现在内核以后，允许普通进程占用少量的CPU时间,取决于配置)。</p>

<p>2、对于实时进程而言，高优先级的进程存在，低优先级的进程是轮不上的，没机会跑在CPU上，所谓实时进程的调度策略,指的是相同优先级之间的调度策略。如果是FIFO实时进程在占用CPU，除非出现以下事情，否则FIFO一条道跑到黑。<br/>
  a）FIFO进程良心发现，调用了系统调用sched_yield 自愿让出CPU<br/>
  b) 更高优先级的进程横空出世，抢占FIFO进程的CPU。有些人觉得很奇怪，怎么FIFO占着CPU，为啥还能有更高优先级的进程出现呢。别忘记，我们是多核多CPU ,如果其他CPU上出现了一个比FIFO优先级高的进程，可能会push到FIFO进程所在的CPU上。<br/>
  c) FIFO进程停止（TASK_STOPPED or TASK_TRACED状态）或者被杀死（EXIT_ZOMBIE or EXIT_DEAD状态）<br/>
  d) FIFO进程执行了阻塞调用并进入睡眠（TASK_INTERRUPTIBLE OR TASK_UNINTERRUPTIBLE）。</p>

<p>  如果是进程的调度策略是时间片轮转RR，那么，除了前面提到的abcd，RR实时进程耗尽自己的时间片后，自动退到对应优先级实时队列的队尾，重新调度。</p>

<pre><code>    struct sched_param {
        /* ... */
        int sched_priority;
        /* ... */
    };
    int sched_setscheduler (pid_t pid,
                            int policy,
                            const struct sched_param *sp);
</code></pre>

<p>  sched_setscheduler函数的第二个参数调度方法 ：
<code>
    #define SCHED_OTHER 0
    #define SCHED_FIFO 1
    #define SCHED_RR 2
    #ifdef __USE_GNU
    # define SCHED_BATCH 3
    #endif
</code>
  SCHED_OTHER表示普通进程，对于普通进程，第三个参数sp->sched_priority只能是0<br/>
  SCHED_FIFO 和SCHED_RR表示实时进程的调度策略，第三个参数的取值范围为[1,99]。<br/>
  如果sched_setscheduler 优先级设置的值和调度策略不符合的话，会返回失败的。</p>

<p>应用层和内核层的优先级含义是不同的：<br/>
  首先说实时进程：实时进程的优先级设置可以通过sched_setsheduler设置，也可以通过sched_setparam设置优先级的大小。
int sched_setparam (pid_t pid, const struct sched_param *sp);</p>

<p>  在用户层或者应用层，1表示优先级最低，99表示优先级最高。但是在内核中，[0,99]表示的实时进程的优先级，0最高，99最低。[100,139]是普通进程折腾的范围。应用层比较天真率直，就看大小，数字大，则优先级高。ps查看进程的优先级也是如此。有意思的是，应用层实时进程最高优先级的99，在ps看进程优先级的时候，输出的是139.</p>

<p>  对于普通进程，是通过nice系统调用来调整优先级的。从内核角度讲[100,139]是普通进程的优先级的范围，100最高，139最低，默认是120。普通进程的优先级的作用和实时进程不同，普通进程优先级表示的是占的CPU时间。深入linux内核架构中提到，普通优先级越高（100最高，139最低），享受的CPU time越多，相邻的两个优先级，高一级的进程比低一级的进程多占用10%的CPU，比如内核优先级数值为120的进程要比数值是121的进程多占用10%的CPU。</p>

<p>  内核中有一个数组：prio_to_weight[20]表示的是默认优先级120的权重，数值为1024，prio_to_weight[21]表示nice值为1，优先级为121的进程的权重，数值为820。这就到了CFS的原理了
<code>
    static const int prio_to_weight[40] = {
     /* -20 */ 88761, 71755, 56483, 46273, 36291,
     /* -15 */ 29154, 23254, 18705, 14949, 11916,
     /* -10 */ 9548, 7620, 6100, 4904, 3906,
     /* -5 */ 3121, 2501, 1991, 1586, 1277,
     /* 0 */ 1024, 820, 655, 526, 423,
     /* 5 */ 335, 272, 215, 172, 137,
     /* 10 */ 110, 87, 70, 56, 45,
     /* 15 */ 36, 29, 23, 18, 15,
    };
</code>
  假如有1台电脑，10个人玩，怎么才公平。<br/>
  1 约定好时间片，每人玩1小时，玩完后记账，张XX 1小时，谁玩的时间短，谁去玩<br/>
  2 引入优先级的概念，李四有紧急情况，需要提高他玩电脑的时间，怎么办，玩1个小时，记账半小时，那么同等情况下，李四会比其他人被选中玩电脑的频率要高，就体现了这个优先级的概念。<br/>
  3  王五也有紧急情况，但是以考察，不如李四的紧急，好吧，玩1个小时，记账45分钟。<br/>
  4  情况有变化，听说这里有电脑，突然又来了10个人，如果按照每人玩1小时的时间片，排在最后的那哥们早就开始骂人了，怎么办？时间片动态变化，根据人数来确定时间片。人越多，每个人玩的时间越少，防止哥们老捞不着玩，耐心耗尽，开始骂人。</p>

<p>  这个记账就是我们prio_to_weight的作用。我就不多说了，prio_to_weight[20]就是基准，玩一小时，记账一小时，数组20以前的值是特权一级，玩1小时记账20分钟之类的享有特权的，数组20之后是倒霉蛋，玩1小时，记账1.5小时之类的倒霉蛋。 CFS这种调度好在大家都能捞着玩。</p>

<p>对于FIFO而言，一旦sleep过后，高优先级运行，低优先级是没戏运行的，同等优先级的进程，先运行的不运行完，后运行的也没戏。<br/>
对于RR而言，高优先级的先运行，同等优先级的进程过家家，你玩完，我玩，我玩完你再玩，每个进程耗费一个时间片的时间。对于Linux，RR时间片是100ms：
<code>
    #define DEF_TIMESLICE        (100 * HZ / 1000)
</code></p>
]]></content>
  </entry>
  
</feed>
