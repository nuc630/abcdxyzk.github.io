<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~mark | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~mark/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-24T17:14:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tcp_collapse do not copy headers]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/15/debug-mark-tcp_collapse-bug/"/>
    <updated>2015-05-15T10:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/15/debug-mark-tcp_collapse-bug</id>
    <content type="html"><![CDATA[<pre><code>commit b3d6cb92fd190d720a01075c4d20cdca896663fc
Author: Eric Dumazet &lt;edumazet@google.com&gt;
Date:   Mon Sep 15 04:19:53 2014 -0700

    tcp: do not copy headers in tcp_collapse()

    tcp_collapse() wants to shrink skb so that the overhead is minimal.

    Now we store tcp flags into TCP_SKB_CB(skb)-&gt;tcp_flags, we no longer
    need to keep around full headers.
    Whole available space is dedicated to the payload.

    Signed-off-by: Eric Dumazet &lt;edumazet@google.com&gt;
    Acked-by: Neal Cardwell &lt;ncardwell@google.com&gt;
    Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
</code></pre>

<pre><code>    diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
    index 228bf0c..ea92f23 100644
    --- a/net/ipv4/tcp_input.c
    +++ b/net/ipv4/tcp_input.c
    @@ -4535,26 +4535,13 @@ restart:
            return;

        while (before(start, end)) {
    +       int copy = min_t(int, SKB_MAX_ORDER(0, 0), end - start);
            struct sk_buff *nskb;
    -       unsigned int header = skb_headroom(skb);
    -       int copy = SKB_MAX_ORDER(header, 0);

    -       /* Too big header? This can happen with IPv6. */
    -       if (copy &lt; 0)
    -           return;
    -       if (end - start &lt; copy)
    -           copy = end - start;
    -       nskb = alloc_skb(copy + header, GFP_ATOMIC);
    +       nskb = alloc_skb(copy, GFP_ATOMIC);
            if (!nskb)
                return;

    -       skb_set_mac_header(nskb, skb_mac_header(skb) - skb-&gt;head);
    -       skb_set_network_header(nskb, (skb_network_header(skb) -
    -                         skb-&gt;head));
    -       skb_set_transport_header(nskb, (skb_transport_header(skb) -
    -                       skb-&gt;head));
    -       skb_reserve(nskb, header);
    -       memcpy(nskb-&gt;head, skb-&gt;head, header);
            memcpy(nskb-&gt;cb, skb-&gt;cb, sizeof(skb-&gt;cb));
            TCP_SKB_CB(nskb)-&gt;seq = TCP_SKB_CB(nskb)-&gt;end_seq = start;
            __skb_queue_before(list, skb, nskb);
</code></pre>

<hr />

<p>这个改进无形中修了一个BUG，但是这BUG正常情况下不会触发，除非我们对skb进行改动导致skb->data - skb->head = 4k时，如果此时内存紧张，且满足tcp_collapse合并条件才触发。</p>

<p>BUG：
tcp_collapse代码中有：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    while (before(start, end)) {
</span><span class='line'>        struct sk_buff *nskb;
</span><span class='line'>        unsigned int header = skb_headroom(skb);
</span><span class='line'>        int copy = SKB_MAX_ORDER(header, 0);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        /* Too big header? This can happen with IPv6. */
</span><span class='line'>    if (copy &lt; 0) 
</span><span class='line'>        return;
</span><span class='line'>
</span><span class='line'>    ......
</span><span class='line'>
</span><span class='line'>    /* Copy data, releasing collapsed skbs. */
</span><span class='line'>    while (copy &gt; 0) { 
</span><span class='line'>        int offset = start - TCP_SKB_CB(skb)-&gt;seq;
</span><span class='line'>        int size = TCP_SKB_CB(skb)-&gt;end_seq - start;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>也就是说如果header = 4k，那么copy = 0，那么会一直申请len=0的skb插入到receive队列，直到申请skb失败。这样就会造成tcp_recvmsg出错
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;        skb_queue_walk(&amp;sk-&gt;sk_receive_queue, skb) {
</span><span class='line'>        /* Now that we have two receive queues this
</span><span class='line'>         * shouldn't happen.
</span><span class='line'>         */
</span><span class='line'>        if (WARN(before(*seq, TCP_SKB_CB(skb)-&gt;seq),
</span><span class='line'>             KERN_INFO "recvmsg bug: copied %X "
</span><span class='line'>                   "seq %X rcvnxt %X fl %X\n", *seq,
</span><span class='line'>                   TCP_SKB_CB(skb)-&gt;seq, tp-&gt;rcv_nxt,
</span><span class='line'>                   flags))
</span><span class='line'>            break;
</span><span class='line'>
</span><span class='line'>        offset = *seq - TCP_SKB_CB(skb)-&gt;seq;
</span><span class='line'>        if (tcp_hdr(skb)-&gt;syn)
</span><span class='line'>            offset--;
</span><span class='line'>        if (offset &lt; skb-&gt;len)
</span><span class='line'>            goto found_ok_skb;
</span><span class='line'>        if (tcp_hdr(skb)-&gt;fin)
</span><span class='line'>            goto found_fin_ok;
</span><span class='line'>        WARN(!(flags &amp; MSG_PEEK), KERN_INFO "recvmsg bug 2: "
</span><span class='line'>                "copied %X seq %X rcvnxt %X fl %X\n",
</span><span class='line'>                *seq, TCP_SKB_CB(skb)-&gt;seq,
</span><span class='line'>                tp-&gt;rcv_nxt, flags);
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;因为offset = 0, len = 0, if (offset &lt; skb-&gt;len)就不符合，报WARN。而且如果申请的len=0的skb过多，会导致一直在这里循环，因为WARN有打印堆栈，执行很慢。
</span><span class='line'>
</span><span class='line'>错误如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;WARNING: at net/ipv4/tcp.c:1457 tcp_recvmsg+0x96a/0xc20() (Tainted: G   W  ---------------   )
</span><span class='line'>Hardware name: PowerEdge R620
</span><span class='line'>Modules linked in: sha256_generic ws_st_tcp_cubic(U) ws_st(U) autofs4 i2c_dev i2c_core bonding 8021q garp stp llc be2iscsi iscsi_boot_sysfs ib]
</span><span class='line'>Pid: 6964, comm: squid Tainted: G        W  ---------------    2.6.32-358.6.1.x86_64 #1
</span><span class='line'>Call Trace:
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff81069aa8&gt;] ? warn_slowpath_common+0x98/0xc0
</span><span class='line'> [&lt;ffffffff81069bce&gt;] ? warn_slowpath_fmt+0x6e/0x70
</span><span class='line'> [&lt;ffffffff814ce08e&gt;] ? _spin_lock_bh+0x2e/0x40
</span><span class='line'> [&lt;ffffffff813fea53&gt;] ? skb_release_data+0xb3/0x100
</span><span class='line'> [&lt;ffffffff813feb56&gt;] ? __kfree_skb+0x46/0xa0
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff813f93c7&gt;] ? sock_common_recvmsg+0x37/0x50
</span><span class='line'> [&lt;ffffffff813f6b05&gt;] ? sock_aio_read+0x185/0x190
</span><span class='line'> [&lt;ffffffff81171912&gt;] ? do_sync_read+0xf2/0x130
</span><span class='line'> [&lt;ffffffff81090e60&gt;] ? autoremove_wake_function+0x0/0x40
</span><span class='line'> [&lt;ffffffff811b4a2c&gt;] ? sys_epoll_wait+0x21c/0x3f0
</span><span class='line'> [&lt;ffffffff8120b3b6&gt;] ? security_file_permission+0x16/0x20
</span><span class='line'> [&lt;ffffffff81171bab&gt;] ? vfs_read+0x18b/0x1a0
</span><span class='line'> [&lt;ffffffff81172df5&gt;] ? sys_read+0x55/0x90
</span><span class='line'> [&lt;ffffffff8100af72&gt;] ? system_call_fastpath+0x16/0x1b
</span><span class='line'>---[ end trace ef9663ba0fc61730 ]---
</span><span class='line'>------------[ cut here ]------------
</span><span class='line'>WARNING: at net/ipv4/tcp.c:1457 tcp_recvmsg+0x96a/0xc20() (Tainted: G        W  ---------------   )
</span><span class='line'>Hardware name: PowerEdge R620
</span><span class='line'>Modules linked in: sha256_generic ws_st_tcp_cubic(U) ws_st(U) autofs4 i2c_dev i2c_core bonding 8021q garp stp llc be2iscsi iscsi_boot_sysfs ib]
</span><span class='line'>Pid: 6964, comm: squid Tainted: G        W  ---------------    2.6.32-358.6.1.x86_64 #1
</span><span class='line'>Call Trace:
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff81069aa8&gt;] ? warn_slowpath_common+0x98/0xc0
</span><span class='line'> [&lt;ffffffff81069bce&gt;] ? warn_slowpath_fmt+0x6e/0x70
</span><span class='line'> [&lt;ffffffff814ce08e&gt;] ? _spin_lock_bh+0x2e/0x40
</span><span class='line'> [&lt;ffffffff813fea53&gt;] ? skb_release_data+0xb3/0x100
</span><span class='line'> [&lt;ffffffff813feb56&gt;] ? __kfree_skb+0x46/0xa0
</span><span class='line'> [&lt;ffffffff8144f1ca&gt;] ? tcp_recvmsg+0x96a/0xc20
</span><span class='line'> [&lt;ffffffff813f93c7&gt;] ? sock_common_recvmsg+0x37/0x50
</span><span class='line'> [&lt;ffffffff813f6b05&gt;] ? sock_aio_read+0x185/0x190
</span><span class='line'> [&lt;ffffffff81171912&gt;] ? do_sync_read+0xf2/0x130
</span><span class='line'> [&lt;ffffffff81090e60&gt;] ? autoremove_wake_function+0x0/0x40
</span><span class='line'> [&lt;ffffffff811b4a2c&gt;] ? sys_epoll_wait+0x21c/0x3f0
</span><span class='line'> [&lt;ffffffff8120b3b6&gt;] ? security_file_permission+0x16/0x20
</span><span class='line'> [&lt;ffffffff81171bab&gt;] ? vfs_read+0x18b/0x1a0
</span><span class='line'> [&lt;ffffffff81172df5&gt;] ? sys_read+0x55/0x90
</span><span class='line'> [&lt;ffffffff8100af72&gt;] ? system_call_fastpath+0x16/0x1b
</span><span class='line'>---[ end trace ef9663ba0fc61731 ]---
</span><span class='line'>------------[ cut here ]------------
</span><span class='line'>
</span><span class='line'>.......
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>如果skb申请的不多，很快就能看到tcp_cleanup_rbuf的WARN，仔细观察会发现，这里打印的end_seq和上面的seq是一样的。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void tcp_cleanup_rbuf(struct sock *sk, int copied)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>int time_to_ack = 0;
</span><span class='line'>
</span><span class='line'>#if TCP_DEBUG
</span><span class='line'>struct sk_buff *skb = skb_peek(&amp;sk-&gt;sk_receive_queue);
</span><span class='line'>
</span><span class='line'>WARN(skb &amp;&amp; !before(tp-&gt;copied_seq, TCP_SKB_CB(skb)-&gt;end_seq),
</span><span class='line'>     KERN_INFO "cleanup rbuf bug: copied %X seq %X rcvnxt %X\n",
</span><span class='line'>     tp-&gt;copied_seq, TCP_SKB_CB(skb)-&gt;end_seq, tp-&gt;rcv_nxt);
</span><span class='line'>#endif
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[tcp_read_sock BUG]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/05/11/debug-mark-tcp_read_sock_bug/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-05-11T10:17:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/05/11/debug-mark-tcp_read_sock_bug&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;commit baff42ab1494528907bf4d5870359e31711746ae
</span><span class='line'>Author: Steven J. Magnani &lt;steve@digidescorp.com&gt;
</span><span class='line'>Date:   Tue Mar 30 13:56:01 2010 -0700
</span><span class='line'>
</span><span class='line'>net: Fix oops from tcp_collapse() when using splice()
</span><span class='line'>
</span><span class='line'>tcp_read_sock() can have a eat skbs without immediately advancing copied_seq.
</span><span class='line'>This can cause a panic in tcp_collapse() if it is called as a result
</span><span class='line'>of the recv_actor dropping the socket lock.
</span><span class='line'>
</span><span class='line'>A userspace program that splices data from a socket to either another
</span><span class='line'>socket or to a file can trigger this bug.
</span><span class='line'>
</span><span class='line'>Signed-off-by: Steven J. Magnani &lt;steve@digidescorp.com&gt;
</span><span class='line'>Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
</span><span class='line'>index 6afb6d8..2c75f89 100644
</span><span class='line'>--- a/net/ipv4/tcp.c
</span><span class='line'>+++ b/net/ipv4/tcp.c
</span><span class='line'>@@ -1368,6 +1368,7 @@ int tcp_read_sock(struct sock *sk, read_descriptor_t *desc,
</span><span class='line'>        sk_eat_skb(sk, skb, 0);
</span><span class='line'>        if (!desc-&gt;count)
</span><span class='line'>            break;
</span><span class='line'>+       tp-&gt;copied_seq = seq;
</span><span class='line'>    }
</span><span class='line'>    tp-&gt;copied_seq = seq;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果在tcp_read_sock中sk_eat_skb时copied_seq没有及时一起修改的话，就会出现copied_seq小于sk_write_queue队列第一个包的seq。&lt;br/&gt;
</span><span class='line'>tcp_read_sock的recv_actor指向的函数(比如tcp_splice_data_recv)是有可能释放sk锁的，如果这时进入收包软中断且内存紧张调用tcp_collapse，&lt;br/&gt;
</span><span class='line'>tcp_collapse中：&lt;br/&gt;</span></code></pre></td></tr></table></div></figure>
    start = copied_seq
    &hellip;
    int offset = start - TCP_SKB_CB(skb)->seq;</p>

<pre><code>BUG_ON(offset &lt; 0);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcp_match_skb_to_sack BUG]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/11/debug-mark-tcp_match_skb_to_sack_bug/"/>
    <updated>2015-05-11T10:09:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/11/debug-mark-tcp_match_skb_to_sack_bug</id>
    <content type="html"><![CDATA[<pre><code>commit 2cd0d743b05e87445c54ca124a9916f22f16742e
Author: Neal Cardwell &lt;ncardwell@google.com&gt;
Date:   Wed Jun 18 21:15:03 2014 -0400

    tcp: fix tcp_match_skb_to_sack() for unaligned SACK at end of an skb

    If there is an MSS change (or misbehaving receiver) that causes a SACK
    to arrive that covers the end of an skb but is less than one MSS, then
    tcp_match_skb_to_sack() was rounding up pkt_len to the full length of
    the skb ("Round if necessary..."), then chopping all bytes off the skb
    and creating a zero-byte skb in the write queue.

    This was visible now because the recently simplified TLP logic in
    bef1909ee3ed1c ("tcp: fixing TLP's FIN recovery") could find that 0-byte
    skb at the end of the write queue, and now that we do not check that
    skb's length we could send it as a TLP probe.

    Consider the following example scenario:

     mss: 1000
     skb: seq: 0 end_seq: 4000  len: 4000
     SACK: start_seq: 3999 end_seq: 4000

    The tcp_match_skb_to_sack() code will compute:

     in_sack = false
     pkt_len = start_seq - TCP_SKB_CB(skb)-&gt;seq = 3999 - 0 = 3999
     new_len = (pkt_len / mss) * mss = (3999/1000)*1000 = 3000
     new_len += mss = 4000

    Previously we would find the new_len &gt; skb-&gt;len check failing, so we
    would fall through and set pkt_len = new_len = 4000 and chop off
    pkt_len of 4000 from the 4000-byte skb, leaving a 0-byte segment
    afterward in the write queue.

    With this new commit, we notice that the new new_len &gt;= skb-&gt;len check
    succeeds, so that we return without trying to fragment.

    Fixes: adb92db857ee ("tcp: Make SACK code to split only at mss boundaries")
    Reported-by: Eric Dumazet &lt;edumazet@google.com&gt;
    Signed-off-by: Neal Cardwell &lt;ncardwell@google.com&gt;
    Cc: Eric Dumazet &lt;edumazet@google.com&gt;
    Cc: Yuchung Cheng &lt;ycheng@google.com&gt;
    Cc: Ilpo Jarvinen &lt;ilpo.jarvinen@helsinki.fi&gt;
    Acked-by: Eric Dumazet &lt;edumazet@google.com&gt;
    Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;
</code></pre>

<pre><code>    diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
    index 40661fc..b5c2375 100644
    --- a/net/ipv4/tcp_input.c
    +++ b/net/ipv4/tcp_input.c
    @@ -1162,7 +1162,7 @@ static int tcp_match_skb_to_sack(struct sock *sk, struct sk_buff *skb,
                unsigned int new_len = (pkt_len / mss) * mss;
                if (!in_sack &amp;&amp; new_len &lt; pkt_len) {
                    new_len += mss;
    -               if (new_len &gt; skb-&gt;len)
    +               if (new_len &gt;= skb-&gt;len)
                        return 0;
                }
                pkt_len = new_len;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gro收包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/08/debug-mark-gro-attention/"/>
    <updated>2015-05-08T16:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/08/debug-mark-gro-attention</id>
    <content type="html"><![CDATA[<p><a href="/blog/2015/04/18/kernel-net-gro/">linux kernel 网络协议栈之GRO(Generic receive offload)</a></p>

<p>gro会合并多个gso_size不同的包, 会将gso_size设置成第一个包的gso_size.</p>

<p>如果此时把这个包发出去，那么就会导致不满足： skb->gso_size * (skb->segs-1) &lt; skb->len &lt;= skb->gso_size * skb->segs</p>

<p>那么后面的三个函数就有可能出错</p>

<h4>一、tcp_shift_skb_data</h4>

<pre><code>    mss = skb-&gt;gso_size
    len = len/mss * mss

    |---|-------|-------|
     mss    |
            V
    |---|---|
</code></pre>

<h4>二、tcp_mark_head_lost</h4>

<pre><code>    len = (packets - cnt) * mss

    |--------|--|--|
       mss   |
             V
    |--------|--------|
</code></pre>

<h4>三、tcp_match_skb_to_sack</h4>

<pre><code>    new_len = (pkt_len/mm)*mss
    in_sack = 1
    pkt_len = new_len

    |---|-------|-------|
     mss    |
            V
    |---|---|
</code></pre>

<h4>修改</h4>

<p>加入发包队列前
<code>
    skb_shinfo(skb)-&gt;gso_size = 0;
    skb_shinfo(skb)-&gt;gso_segs = 0;
    skb_shinfo(skb)-&gt;gso_type = 0;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcp_trim_head BUG]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/08/debug-mark-tcp_trim_head_bug/"/>
    <updated>2015-05-08T16:24:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/08/debug-mark-tcp_trim_head_bug</id>
    <content type="html"><![CDATA[<p><a href="http://kernel.opensuse.org/cgit/kernel/commit/?id=5b35e1e6e9ca651e6b291c96d1106043c9af314a">http://kernel.opensuse.org/cgit/kernel/commit/?id=5b35e1e6e9ca651e6b291c96d1106043c9af314a</a></p>

<p>author  Neal Cardwell <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x6e;&#x63;&#97;&#114;&#x64;&#x77;&#101;&#108;&#x6c;&#x40;&#103;&#x6f;&#111;&#x67;&#108;&#101;&#46;&#x63;&#111;&#109;">&#110;&#x63;&#97;&#114;&#x64;&#x77;&#101;&#x6c;&#108;&#64;&#103;&#111;&#x6f;&#103;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>    2012-01-28 17:29:46 (GMT)<br/>
committer   David S. Miller <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x64;&#97;&#x76;&#101;&#x6d;&#64;&#100;&#x61;&#x76;&#x65;&#109;&#108;&#x6f;&#102;&#116;&#x2e;&#x6e;&#101;&#116;">&#100;&#x61;&#118;&#101;&#x6d;&#64;&#100;&#97;&#118;&#x65;&#x6d;&#108;&#111;&#102;&#x74;&#46;&#x6e;&#x65;&#116;</a>   2012-01-30 17:42:58 (GMT)<br/>
commit  5b35e1e6e9ca651e6b291c96d1106043c9af314a (patch)<br/>
tree    d18caadee5e93dc45d0c5fa2c530537cfa14586c<br/>
parent  4acb41903b2f99f3dffd4c3df9acc84ca5942cb2 (diff)</p>

<h4>tcp: fix tcp_trim_head() to adjust segment count with skb MSS</h4>

<p>This commit fixes tcp_trim_head() to recalculate the number of segments in the skb with the skb&rsquo;s existing MSS, so trimming the head causes the skb segment count to be monotonically non-increasing - it should stay the same or go down, but not increase.</p>

<p>Previously tcp_trim_head() used the current MSS of the connection. But if there was a decrease in MSS between original transmission and ACK (e.g. due to PMTUD), this could cause tcp_trim_head() to counter-intuitively increase the segment count when trimming bytes off the head of an skb. This violated assumptions in tcp_tso_acked() that tcp_trim_head() only decreases the packet count, so that packets_acked in tcp_tso_acked() could underflow, leading tcp_clean_rtx_queue() to pass u32 pkts_acked values as large as 0xffffffff to ca_ops->pkts_acked().</p>

<p>As an aside, if tcp_trim_head() had really wanted the skb to reflect the current MSS, it should have called tcp_set_skb_tso_segs() unconditionally, since a decrease in MSS would mean that a single-packet skb should now be sliced into multiple segments.</p>

<p>Signed-off-by: Neal Cardwell <a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#110;&#99;&#97;&#114;&#100;&#119;&#101;&#x6c;&#108;&#x40;&#x67;&#111;&#111;&#x67;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#110;&#99;&#97;&#x72;&#x64;&#x77;&#101;&#x6c;&#x6c;&#x40;&#103;&#x6f;&#111;&#103;&#x6c;&#101;&#46;&#x63;&#x6f;&#x6d;</a> <br/>
Acked-by: Nandita Dukkipati <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x6e;&#x61;&#110;&#100;&#x69;&#116;&#97;&#100;&#x40;&#103;&#x6f;&#x6f;&#x67;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;">&#x6e;&#x61;&#x6e;&#100;&#105;&#116;&#x61;&#100;&#x40;&#103;&#x6f;&#x6f;&#x67;&#108;&#x65;&#x2e;&#x63;&#111;&#109;</a> <br/>
Acked-by: Ilpo Järvinen <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x69;&#x6c;&#112;&#111;&#46;&#x6a;&#97;&#x72;&#x76;&#105;&#x6e;&#101;&#110;&#64;&#x68;&#x65;&#108;&#115;&#x69;&#x6e;&#107;&#x69;&#x2e;&#102;&#x69;">&#x69;&#108;&#112;&#x6f;&#x2e;&#x6a;&#x61;&#114;&#x76;&#x69;&#110;&#101;&#x6e;&#64;&#104;&#101;&#x6c;&#115;&#105;&#110;&#x6b;&#105;&#46;&#102;&#x69;</a> <br/>
Signed-off-by: David S. Miller <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#100;&#x61;&#x76;&#x65;&#x6d;&#64;&#x64;&#97;&#118;&#x65;&#x6d;&#x6c;&#x6f;&#x66;&#x74;&#x2e;&#x6e;&#101;&#x74;">&#x64;&#97;&#x76;&#x65;&#x6d;&#64;&#x64;&#97;&#x76;&#x65;&#x6d;&#x6c;&#x6f;&#x66;&#x74;&#46;&#110;&#x65;&#x74;</a></p>

<p>1 files changed, 2 insertions, 4 deletions
<code>
    diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
    index 8c8de27..4ff3b6d 100644
    --- a/net/ipv4/tcp_output.c
    +++ b/net/ipv4/tcp_output.c
    @@ -1141,11 +1141,9 @@ int tcp_trim_head(struct sock *sk, struct sk_buff *skb, u32 len)
        sk_mem_uncharge(sk, len);
        sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
    -   /* Any change of skb-&gt;len requires recalculation of tso
    -    * factor and mss.
    -    */
    +   /* Any change of skb-&gt;len requires recalculation of tso factor. */
        if (tcp_skb_pcount(skb) &gt; 1)
    -       tcp_set_skb_tso_segs(sk, skb, tcp_current_mss(sk));
    +       tcp_set_skb_tso_segs(sk, skb, tcp_skb_mss(skb));
        return 0;
     }
</code></p>

<hr />

<p>会出现tp->packets_out不正确, 导致sk_write_queue为空时却掉tcp_rearm_rto()，判断tp->packets_out不为0，启动重传定时器，然后重传时取出的是list_head的地址，不是skb的地址，导致后面异常。</p>
]]></content>
  </entry>
  
</feed>
