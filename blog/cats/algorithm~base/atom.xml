<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/algorithm~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-30T16:01:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数A到数B之间的统计]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count/"/>
    <updated>2014-11-03T18:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count</id>
    <content type="html"><![CDATA[<p><a href="http://acm.fzu.edu.cn/problem.php?pid=1896">Problem 1896 神奇的魔法数</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accept: 98    Submit: 307
</span><span class='line'>Time Limit: 1000 mSec    Memory Limit : 32768 KB&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Problem Description&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;John定义了一种“神奇的魔法数”。 不含前导零且相邻两个数字之差至少为m的正整数被称为“神奇的魔法数”。特别的，对于任意的m，数字1..9都是“神奇的魔法数”。
</span><span class='line'>John想知道，对于给定的m，在正整数a和b之间，包括a和b，总共有多少个“神奇的魔法数”？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一行一个数字T（1&lt;=T&lt;=100），表示测试数据组数。
</span><span class='line'>接下来T行，每行代表一组测试数据，包括三个整数a,b,m。（1&lt;=a&lt;=b&lt;=2,000,000,000, 0&lt;=m&lt;=9）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于每组测试数据，输出一行表示“神奇的魔法数”的个数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;7 1 10 2 1 20 3 1 100 0 10 20 4 20 30 5 1 10 9 11 100 9&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;9 15 100 5 3 9 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Source福州大学第七届程序设计竞赛</span></code></pre></td></tr></table></div></figure></p>

<pre><code>    #include &lt;stdio.h&gt;

    int n,m,d,dp[13][13],sum[13],dn[13],dm[13];


    // DFS的时候这两个地方根据不同要求写。
    int dfs(int da[], int dep, int all)
    {
        int i,j,ret=0;
        if (dep == 0) return 1;
        for (i=0;i&lt;da[dep];i++)
        {
            if (all &gt; 0 || i &gt; 0) {
                if (all == 0 || i-da[dep+1]&gt;=d || i-da[dep+1]&lt;=-d)
                    ret += dp[dep][i];
            } else
                ret += sum[dep-1];
        }
        if (all == 0 || da[dep]-da[dep+1]&gt;=d || da[dep]-da[dep+1]&lt;=-d)
            ret += dfs(da, dep-1, all+da[dep]);
        return ret;
    }

    int main()
    {
        int i,j,k,l,T;
        scanf("%d", &amp;T);
        while (T--)
        {
            scanf("%d %d %d", &amp;m, &amp;n, &amp;d);
            for (i=0;i&lt;13;i++)
                for (j=0;j&lt;13;j++) dp[i][j] = 0;
            sum[0] = 0; sum[1] = 9;
            for (i=0;i&lt;10;i++) dp[1][i] = 1;
            for (i=2;i&lt;13;i++) {
                sum[i] = sum[i-1];
                for (j=0;j&lt;10;j++) {
                    for (k=0;k&lt;10;k++)
                        if (j-k&gt;=d || j-k&lt;=-d)
                            dp[i][j] += dp[i-1][k];
                    if (j &gt; 0)
                        sum[i] += dp[i][j];
                }
            }
    //      for (i=0;i&lt;=2;i++)
    //          for (j=0;j&lt;10;j++) printf("%d %d %d\n", i, j, dp[i][j]);
            i = 1; k = n;
            while (i &lt; 13) {
                dn[i] = k % 10; k /= 10;
                i++;
            }
            i = 1; k = m-1;
            while (i &lt; 13) {
                dm[i] = k % 10; k /= 10;
                i++;
            }
            n = dfs(dn, 11, 0);
            if (m == 1)
                m = 0;
            else
                m = dfs(dm, 11, 0);
            printf("%d\n", n-m);
        }
        return 0;
    }
</code></pre>

<h4><a href="http://poj.org/problem?id=3286">How many 0&rsquo;s?</a></h4>

<pre><code>Time Limit: 1000MS
Memory Limit: 65536KTotal Submissions: 2997
Accepted: 1603

Description

A Benedict monk No.16 writes down the decimal representations of all natural numbers between and including m and n, m ≤ n. How many 0's will he write down?

Input

Input consists of a sequence of lines. Each line contains two unsigned 32-bit integers m and n, m ≤ n. The last line of input has the value of m negative and this line should not be processed.

Output

For each line of input print one line of output with one integer number giving the number of 0's written down by the monk.

Sample Input

10 11
100 200
0 500
1234567890 2345678901
0 4294967295
-1 -1

Sample Output

1
22
92
987654304
3825876150

Source

Waterloo Local Contest, 2006.5.27
</code></pre>

<pre><code>    import java.util.*;
    import java.math.*;
    import java.io.*;

    public class Main {
        static long val,n,m,dp[][]=new long[13][13],a[]=new long[13],dn[]=new long[13], dm[]=new long[13], sum[]=new long[13];
        static long dfs(long dnm[], int dep, long all)
        {
            int i, j, k;
            long ret=0;
            if (dep == 0) return 0;
            for (i=0;i&lt;dnm[dep];i++) {
                if (all &gt; 0 || i &gt; 0)
                    ret += dp[dep][i]; // 需要计算前导0
                else
                    ret += sum[dep-1]; // 不需要计算前导0
            }
            if (all &gt; 0 &amp;&amp; dnm[dep] == 0)
                ret += val % a[dep] + 1;
            ret += dfs(dnm, dep-1, all+dnm[dep]);
            return ret;
        }

        public static void main(String[] args) {
            int i,j,k,l;
            Scanner cin = new Scanner(System.in);
            a[1] = 10;
            for (i=2;i&lt;13;i++) a[i] = a[i-1]*10;
            for (i=0;i&lt;13;i++)
                for (j=0;j&lt;13;j++) dp[i][j] = 0;
            dp[1][0] = 1;
            sum[0] = sum[1] = 0;
            for (i=2;i&lt;13;i++) {
                sum[i] = sum[i-1];
                for (j=0;j&lt;10;j++) {
                    for (k=0;k&lt;10;k++)
                        dp[i][j] += dp[i-1][k];
                    dp[i][j] += j==0 ? a[i-1] : 0;
                    if (j &gt; 0)
                        sum[i] += dp[i][j];
                }
            }
            while (true) {
                m = cin.nextLong();
                n = cin.nextLong();
                if (m == -1 || n == -1) break;
                for (i=0;i&lt;13;i++) dn[i] = dm[i] = 0;
                i = 1;
                val = n;
                while (val &gt; 0) {
                    dn[i] = val % 10;
                    val /= 10;
                    i++;
                }
                i = 1;
                val = m-1;
                while (val &gt; 0) {
                    dm[i] = val % 10;
                    val /= 10;
                    i++;
                }
                val = n;
                n = dfs(dn, 12, 0) + 1; // 0 还有一个0
                val = m-1;
                m = dfs(dm, 12, 0) + 1;
                if (val &lt; 0) m = 0;
                System.out.println(n-m);
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1.5倍空间归并排序--Knuth]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/25/alg-merge-sort/"/>
    <updated>2014-09-25T11:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/25/alg-merge-sort</id>
    <content type="html"><![CDATA[<p>divide-and-conquer algorithm, in the style
suggested by Knuth volume 3 (2nd edition),
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   |&mdash;&mdash;&mdash;&mdash;-I&mdash;&mdash;&mdash;&mdash;-|&mdash;&mdash;&mdash;&mdash;-|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;     p1            p2            ex
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p1+p2原数组，p1前半部分，p2后半部分，ex额外空间
</span><span class='line'>1、将p2用ex额外空间排到p2
</span><span class='line'>2、将p1排到ex
</span><span class='line'>3、将p2、ex合并到原数组</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个数只出现一次]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once/"/>
    <updated>2012-11-12T16:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once</id>
    <content type="html"><![CDATA[<h4>problem</h4>

<p>一个数组，其中只有两个数只出现一次，其余数皆出现偶数次。<br/>
设计Time: O(n) 的算法得出那个只出现一次的数。</p>

<h4>answer</h4>

<p>再因为a和b不等，那么a<sup>b</sup>必然不为0。<br/>
那么a<sup>b</sup>这个数上面必然能够找到一个二进制位是1<br/>
在这个二进制位上，a和b不等。<br/>
根据这个二进制位，将各元素中在这位上为1的分派到左边，为0的分派到右边，形成两个子数组。</p>

<p>可以证明，<br/>
1）这两个数组分别包含a和b。<br/>
2）每个数组中除了a或b之外的所有元素都是成对出现的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[异或值最大]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/11/alg-xor-or-not/"/>
    <updated>2012-10-11T11:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/11/alg-xor-or-not</id>
    <content type="html"><![CDATA[<p><a href="http://acm.hust.edu.cn:8080/judge/problem/viewProblem.action?id=18669">http://acm.hust.edu.cn:8080/judge/problem/viewProblem.action?id=18669</a></p>

<p><a href="http://acm.sgu.ru/problem.php?contest=0&amp;problem=275">http://acm.sgu.ru/problem.php?contest=0&amp;problem=275</a></p>

<h4>275. To xor or not to xor</h4>

<p>time limit per test: 0.5 sec.<br/>
memory limit per test: 65536 KB</p>

<p>input: standard<br/>
output: standard</p>

<p>The sequence of non-negative integers  A1, A2, &hellip;, AN is given. You are to find some subsequence Ai1, Ai2, &hellip;, Aik(1 &lt;= i1&lt; i2&lt; &hellip; &lt; ik&lt;= N) such, that Ai1XOR Ai2XOR &hellip; XOR Aikhas a maximum value.</p>

<h5>Input</h5>

<p>The first line of the input file contains the integer number N (1 &lt;= N &lt;= 100). The second line contains the sequence A1, A2, &hellip;, AN (0 &lt;= Ai &lt;= 10<sup>18</sup>).</p>

<h5>Output</h5>

<p>Write to the output file a single integer number &ndash; the maximum possible value of Ai1XOR Ai2XOR &hellip; XOR Aik.</p>

<h5>Sample test(s)</h5>

<h5>Input</h5>

<p>3
11 9 5</p>

<h5>Output</h5>

<p>14</p>

<p>从n个数中选出若干个使得异或的值最大</p>

<pre><code>    #include&lt;stdio.h&gt;
    #include&lt;iostream&gt;
    #include&lt;queue&gt;
    using namespace std;
    priority_queue&lt;__int64&gt; q;
    int main() {
        int n;
        __int64 ans, pre, i;
        while (scanf("%d", &amp;n) != EOF) {
            while (n--) {
                scanf("%I64d", &amp;i);
                q.push(i);
            }
            ans = 0;
            pre = 0;
            while (!q.empty()) {
                i = q.top();
                q.pop();
                if ((pre ^ i) != 0 &amp;&amp; (pre ^ i) &lt; pre &amp;&amp; (pre ^ i) &lt; i) {
                    q.push(pre ^ i);
                } else {
                    if ((ans ^ i) &gt; ans) {
                        ans ^= i;
                    }
                    pre = i;
                }
            }
            printf("%I64d\n", ans);
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分图匹配, 二分图的最大独立集]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/11/alg-hungary/"/>
    <updated>2012-10-11T11:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/11/alg-hungary</id>
    <content type="html"><![CDATA[<h5>POJ 3692 Kindergarten（二分图匹配）</h5>

<pre><code>Kindergarten
Time Limit: 2000MS         Memory Limit: 65536K
Total Submissions: 3866        Accepted: 1832

Description

In a kindergarten, there are a lot of kids. All girls of the kids know each other and all boys also know each other. In addition to that, some girls and boys know each other. Now the teachers want to pick some kids to play a game, which need that all players know each other. You are to help to find maximum number of kids the teacher can pick.

Input

The input consists of multiple test cases. Each test case starts with a line containing three integers
G, B (1 ≤ G, B ≤ 200) and M (0 ≤ M ≤ G × B), which is the number of girls, the number of boys and
the number of pairs of girl and boy who know each other, respectively.
Each of the following M lines contains two integers X and Y (1 ≤ X≤ G,1 ≤ Y ≤ B), which indicates that girl X and boy Y know each other.
The girls are numbered from 1 to G and the boys are numbered from 1 to B.

The last test case is followed by a line containing three zeros.

Output

For each test case, print a line containing the test case number( beginning with 1) followed by a integer which is the maximum number of kids the teacher can pick.

Sample Input

2 3 3
1 1
1 2
2 3
2 3 5
1 1
1 2
2 1
2 2
2 3
0 0 0

Sample Output

Case 1: 3
Case 2: 4

Source
2008 Asia Hefei Regional Contest Online by USTC
</code></pre>

<p>幼儿园有g个女孩和b个男孩，同性之间互相认识，而且男孩和女孩之间有的也互相认识。现在要选出来最多的孩子，他们之间都互相认识。</p>

<p>一道基础的二分图最大独立集问题。<br/>
二分图的最大独立集 = n-最小覆盖集 = n-完美匹配数。</p>

<p>所以就转化成了二分图匹配，用匈牙利算法实现即可。</p>

<pre><code>    /*
    POJ 3692
    反过来建图，建立不认识的图，就变成求最大独立集了。
    */
    #include&lt;stdio.h&gt;
    #include&lt;iostream&gt;
    #include&lt;string.h&gt;
    #include&lt;algorithm&gt;
    using namespace std;

    /* **************************************************************************
    //二分图匹配（匈牙利算法的DFS实现）
    //初始化：g[][]两边顶点的划分情况
    //建立g[i][j]表示i-&gt;j的有向边就可以了，是左边向右边的匹配
    //g没有边相连则初始化为0
    //uN是匹配左边的顶点数，vN是匹配右边的顶点数
    //调用：res=hungary();输出最大匹配数
    //优点：适用于稠密图，DFS找增广路，实现简洁易于理解
    //时间复杂度:O(VE)
    //***************************************************************************/
    //顶点编号从0开始的
    const int MAXN=510;
    int uN,vN;//u,v数目
    int g[MAXN][MAXN];
    int linker[MAXN];
    bool used[MAXN];
    bool dfs(int u)//从左边开始找增广路径
    {
        int v;
        for(v=0;v&lt;vN;v++)//这个顶点编号从0开始，若要从1开始需要修改
            if(g[u][v]&amp;&amp;!used[v])
            {
                used[v]=true;
                if(linker[v]==-1||dfs(linker[v]))
                {//找增广路，反向
                    linker[v]=u;
                    return true;
                }
            }
        return false;//这个不要忘了，经常忘记这句
    }
    int hungary()
    {
        int res=0;
        int u;
        memset(linker,-1,sizeof(linker));
        for(u=0;u&lt;uN;u++)
        {
            memset(used,0,sizeof(used));
            if(dfs(u)) res++;
        }
        return res;
    }

    int main()
    {
        int m;
        int u,v;
        int iCase=0;
        while(scanf("%d%d%d",&amp;uN,&amp;vN,&amp;m)!=EOF)
        {
            iCase++;
            if(uN==0&amp;&amp;vN==0&amp;&amp;m==0)break;
            for(int i=0;i&lt;uN;i++)
                for(int j=0;j&lt;vN;j++)
                    g[i][j]=1;
            while(m--)
            {
                scanf("%d%d",&amp;u,&amp;v);
                u--;
                v--;
                g[u][v]=0;
            }
            printf("Case %d: %d\n",iCase,uN+vN-hungary());
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
