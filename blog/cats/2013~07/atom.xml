<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-23T17:56:52+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Netfilter HOOK]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/07/08/kernel-net-hook/"/>
    <updated>2013-07-08T11:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/07/08/kernel-net-hook</id>
    <content type="html"><![CDATA[<p>下图是Netfilter的IPV4下的结构</p>

<p><img src="/images/kernel/2013-07-08.jpg" alt="" /></p>

<p>可以看到这是基于早期版本内核的，如今内核挂载点的宏定义发生了变化，从NF_IP_XXX => NF_INET_XXX</p>

<p>每个注册的钩子函数经过处理后都将返回下列值之一，告知Netfilter核心代码处理结果，以便对报文采取相应的动作：<br/>
NF_ACCEPT：继续正常的报文处理；<br/>
NF_DROP：将报文丢弃；<br/>
NF_STOLEN：由钩子函数处理了该报文，不要再继续传送；<br/>
NF_QUEUE：将报文入队，通常交由用户程序处理；<br/>
NF_REPEAT：再次调用该钩子函数。</p>

<p>// code
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/net.h&gt;
</span><span class='line'>#include &lt;net/tcp.h&gt;
</span><span class='line'>#include &lt;linux/skbuff.h&gt;
</span><span class='line'>#include &lt;linux/netfilter.h&gt;
</span><span class='line'>#include &lt;linux/netfilter_ipv4.h&gt;
</span><span class='line'>#include &lt;net/ip_vs.h&gt;
</span><span class='line'>#include &lt;net/sock.h&gt;
</span><span class='line'>#include &lt;linux/gfp.h&gt;
</span><span class='line'>#include &lt;linux/kallsyms.h&gt;
</span><span class='line'>#include &lt;linux/version.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static unsigned int test_runit(unsigned int hooknum,
</span><span class='line'>#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 32)
</span><span class='line'>    truct sk_buff **skb,
</span><span class='line'>#else
</span><span class='line'>    struct sk_buff *skb,
</span><span class='line'>#endif
</span><span class='line'>    const struct net_device *in,
</span><span class='line'>    const struct net_device *out,
</span><span class='line'>    int (*okfn)(struct sk_buff *))
</span><span class='line'>{
</span><span class='line'>...
</span><span class='line'>return NF_ACCEPT;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static struct nf_hook_ops hook_test = {
</span><span class='line'>.hook    = test_runit,
</span><span class='line'>.owner    = THIS_MODULE,
</span><span class='line'>.pf    = PF_INET,
</span><span class='line'>#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2, 6, 32)
</span><span class='line'>.hooknum        = NF_IP_LOCAL_OUT,
</span><span class='line'>#else
</span><span class='line'>.hooknum        = NF_INET_LOCAL_OUT,
</span><span class='line'>#endif
</span><span class='line'>.priority       = 100,
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static int  __init test_start_init(void)
</span><span class='line'>{
</span><span class='line'>printk("Hi test pre\n");
</span><span class='line'>nf_register_hook(&amp;hook_test);
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void __exit test_start_exit(void)
</span><span class='line'>{
</span><span class='line'>nf_unregister_hook(&amp;hook_test);
</span><span class='line'>printk("Bye test pre\n");
</span><span class='line'>}
</span><span class='line'>module_init(test_start_init);
</span><span class='line'>module_exit(test_start_exit);
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[数据交换sysctl + 定时器（code）]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/07/05/kernel-sample/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-07-05T15:35:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/07/05/kernel-sample&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    #include &lt;linux/module.h&gt;
</span><span class='line'>#include &lt;linux/kernel.h&gt;
</span><span class='line'>#include &lt;linux/init.h&gt;
</span><span class='line'>#include &lt;linux/types.h&gt;
</span><span class='line'>
</span><span class='line'>#include &lt;linux/sysctl.h&gt;
</span><span class='line'>#include &lt;linux/timer.h&gt;
</span><span class='line'>
</span><span class='line'>int value;
</span><span class='line'>
</span><span class='line'>static struct ctl_table debug_table[] = {
</span><span class='line'>    {
</span><span class='line'>        .ctl_name       = CTL_UNNUMBERED,
</span><span class='line'>        .procname       = "value",
</span><span class='line'>        .data           = &amp;value,
</span><span class='line'>        .maxlen         = sizeof(value),
</span><span class='line'>        .mode           = 0644,
</span><span class='line'>        .proc_handler   = &amp;proc_dointvec, },
</span><span class='line'>    { },
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static struct ctl_table ws_dir_table[] = {
</span><span class='line'>    {
</span><span class='line'>        .ctl_name       = CTL_UNNUMBERED,
</span><span class='line'>        .procname        = "debug",
</span><span class='line'>        .mode            = 0555,
</span><span class='line'>        .child           = debug_table, },
</span><span class='line'>    { },
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static struct ctl_table ipv4_dir_table[] = {
</span><span class='line'>    {
</span><span class='line'>        .ctl_name       = NET_IPV4,
</span><span class='line'>        .procname    = "ipv4",
</span><span class='line'>        .mode        = 0555,
</span><span class='line'>        .child       = ws_dir_table, },
</span><span class='line'>    { },
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>static ctl_table net_dir_table[] = {
</span><span class='line'>    {
</span><span class='line'>        .ctl_name       = CTL_NET,
</span><span class='line'>        .procname    = "net",
</span><span class='line'>        .mode        = 0555,
</span><span class='line'>        .child           = ipv4_dir_table, },
</span><span class='line'>    { },
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>struct timer_list timer_last_stat;
</span><span class='line'>static void output_value(unsigned long data)
</span><span class='line'>{
</span><span class='line'>    printk("value = %d\n", value);
</span><span class='line'>    mod_timer(&amp;timer_last_stat, jiffies+HZ*5);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>struct ctl_table_header *ctl_header = NULL;
</span><span class='line'>static int __init file_test_init(void)
</span><span class='line'>{
</span><span class='line'>    printk("sysctl test init\n");
</span><span class='line'>    value = 111;
</span><span class='line'>    ctl_header= register_sysctl_table (net_dir_table, 0);
</span><span class='line'>    if(!ctl_header){
</span><span class='line'>        printk(KERN_ERR"SYNPROXY: sp_sysctl_init() calls failed.");
</span><span class='line'>        return -1;
</span><span class='line'>    }
</span><span class='line'>    setup_timer(&amp;timer_last_stat, output_value, 0);
</span><span class='line'>    mod_timer(&amp;timer_last_stat, jiffies+HZ*5);
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>static void __exit file_test_exit(void)
</span><span class='line'>{
</span><span class='line'>    if (ctl_header)
</span><span class='line'>        unregister_sysctl_table(ctl_header);
</span><span class='line'>    del_timer(&amp;timer_last_stat);
</span><span class='line'>    printk("sysctl test exit\n");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>module_init(file_test_init);
</span><span class='line'>module_exit(file_test_exit);
</span><span class='line'>
</span><span class='line'>MODULE_LICENSE("GPL");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$ dmesg
</span><span class='line'>...
</span><span class='line'>value = 111
</span><span class='line'>$ echo 123 &gt; /proc/sys/net/ipv4/debug/value
</span><span class='line'>$ dmesg
</span><span class='line'>...
</span><span class='line'>value = 111
</span><span class='line'>value = 123
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[内核定时器的使用]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/07/01/kernel-timer/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-07-01T09:46:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/07/01/kernel-timer&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;LINUX内核定时器是内核用来控制在未来某个时间点（基于jiffies）调度执行某个函数的一种机制，其实现位于 &lt;linux/timer.h&gt; 和 kernel/timer.c 文件中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;被调度的函数肯定是异步执行的，它类似于一种“软件中断”，而且是处于非进程的上下文中，所以调度函数必须遵守以下规则：&lt;br/&gt;
</span><span class='line'>1. 没有 current 指针、不允许访问用户空间。因为没有进程上下文，相关代码和被中断的进程没有任何联系。&lt;br/&gt;
</span><span class='line'>2. 不能执行休眠（或可能引起休眠的函数）和调度。&lt;br/&gt;
</span><span class='line'>3. 任何被访问的数据结构都应该针对并发访问进行保护，以防止竞争条件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核定时器的调度函数运行过一次后就不会再被运行了（相当于自动注销），但可以通过在被调度的函数中重新调度自己来周期运行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在SMP系统中，调度函数总是在注册它的同一CPU上运行，以尽可能获得缓存的局域性。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;定时器API&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核定时器的数据结构</span></code></pre></td></tr></table></div></figure>
struct timer_list {
    struct list_head entry;</p>

<pre><code>unsigned long expires;
void (*function)(unsigned long);
unsigned long data;

struct tvec_base *base;
/* ... */
</code></pre>

<p>};
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>其中 expires 字段表示期望定时器执行的 jiffies 值，到达该 jiffies 值时，将调用 function 函数，并传递  data 作为参数。当一个定时器被注册到内核之后，entry 字段用来连接该定时器到一个内核链表中。base 字段是内核内部实现所用的。
</span><span class='line'>需要注意的是 expires 的值是32位的，因为内核定时器并不适用于长的未来时间点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;初始化&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在使用 struct timer_list 之前，需要初始化该数据结构，确保所有的字段都被正确地设置。初始化有两种方法。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;方法一：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;DEFINE_TIMER(timer_name, function_name, expires_value, data);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该宏会静态创建一个名叫 timer_name 内核定时器，并初始化其 function, expires, name 和 base 字段。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;方法二：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct timer_list mytimer;
</span><span class='line'>setup_timer(&amp;mytimer, (*function)(unsigned long), unsigned long data);
</span><span class='line'>mytimer.expires = jiffies + 5*HZ;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;方法三：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct timer_list mytimer;
</span><span class='line'>init_timer(&amp;mytimer);
</span><span class='line'>  mytimer -&gt;timer.expires = jiffies + 5*HZ;
</span><span class='line'>  mytimer -&gt;timer.data = (unsigned long) dev;
</span><span class='line'>  mytimer -&gt;timer.function = &amp;corkscrew_timer; /* timer handler */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;通过init_timer()动态地定义一个定时器，此后，将处理函数的地址和参数绑定给一个timer_list，&lt;br/&gt;
</span><span class='line'>注意，无论用哪种方法初始化，其本质都只是给字段赋值，所以只要在运行 add_timer() 之前，expires, function 和 data 字段都可以直接再修改。&lt;br/&gt;
</span><span class='line'>关于上面这些宏和函数的定义，参见 include/linux/timer.h。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;注册&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;定时器要生效，还必须被连接到内核专门的链表中，这可以通过 add_timer(struct timer_list *timer) 来实现。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;重新注册&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;要修改一个定时器的调度时间，可以通过调用 mod_timer(struct timer_list *timer, unsigned long expires)。mod_timer() 会重新注册定时器到内核，而不管定时器函数是否被运行过。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;注销&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注销一个定时器，可以通过 del_timer(struct timer_list &lt;em&gt;timer) 或  del_timer_sync(struct timer_list &lt;/em&gt;timer)。其中 del_timer_sync 是用在 SMP  系统上的（在非SMP系统上，它等于del_timer），当要被注销的定时器函数正在另一个 cpu 上运行时，del_timer_sync()  会等待其运行完，所以这个函数会休眠。另外还应避免它和被调度的函数争用同一个锁。对于一个已经被运行过且没有重新注册自己的定时器而言，注销函数其实也 没什么事可做。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int timer_pending(const struct timer_list *timer)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个函数用来判断一个定时器是否被添加到了内核链表中以等待被调度运行。注意，当一个定时器函数即将要被运行前，内核会把相应的定时器从内核链表中删除（相当于注销）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;例子1：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #include &lt;linux/module.h&gt;
</span><span class='line'>    #include &lt;linux/timer.h&gt;
</span><span class='line'>    #include &lt;linux/jiffies.h&gt;
</span><span class='line'>
</span><span class='line'>    struct timer_list mytimer;
</span><span class='line'>    static void myfunc(unsigned long data)
</span><span class='line'>    {
</span><span class='line'>        printk("%s/n", (char *)data);
</span><span class='line'>        mod_timer(&amp;mytimer, jiffies + 2*HZ);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    static int __init mytimer_init(void)
</span><span class='line'>    {
</span><span class='line'>        setup_timer(&amp;mytimer, myfunc, (unsigned long)"Hello, world!");
</span><span class='line'>        mytimer.expires = jiffies + HZ;
</span><span class='line'>        add_timer(&amp;mytimer);
</span><span class='line'>        return 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    static void __exit mytimer_exit(void)
</span><span class='line'>    {
</span><span class='line'>        del_timer(&amp;mytimer);
</span><span class='line'>    }
</span><span class='line'>    module_init(mytimer_init);
</span><span class='line'>    module_exit(mytimer_exit);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;例子2：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static struct timer_list power_button_poll_timer;
</span><span class='line'>    static void power_button_poll(unsigned long dummy)
</span><span class='line'>    {
</span><span class='line'>        if (gpio_line_get(N2100_POWER_BUTTON) == 0) {
</span><span class='line'>            ctrl_alt_del();
</span><span class='line'>            return;
</span><span class='line'>        }
</span><span class='line'>        power_button_poll_timer.expires = jiffies + (HZ / 10);
</span><span class='line'>        add_timer(&amp;power_button_poll_timer);
</span><span class='line'>    }
</span><span class='line'>    static void __init n2100_init_machine(void)
</span><span class='line'>    {
</span><span class='line'>    ...
</span><span class='line'>        init_timer(&amp;power_button_poll_timer);
</span><span class='line'>        power_button_poll_timer.function = power_button_poll;
</span><span class='line'>        power_button_poll_timer.expires = jiffies + (HZ / 10);
</span><span class='line'>        add_timer(&amp;power_button_poll_timer);
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;例子3：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;设备open时初始化和注册定时器
</span><span class='line'>&lt;code&gt;
</span><span class='line'>    static int corkscrew_open(struct net_device *dev)
</span><span class='line'>    {
</span><span class='line'>    ...
</span><span class='line'>          init_timer(&amp;vp-&gt;timer);    
</span><span class='line'>          vp-&gt;timer.expires = jiffies + media_tbl[dev-&gt;if_port].wait;
</span><span class='line'>          vp-&gt;timer.data = (unsigned long) dev;
</span><span class='line'>          vp-&gt;timer.function = &amp;corkscrew_timer; /* timer handler */
</span><span class='line'>          add_timer(&amp;vp-&gt;timer);
</span><span class='line'>    ...
</span><span class='line'>    }
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>定时器超时处理函数，对定时器的超时时间重新赋值</span></code></pre></td></tr></table></div></figure>
    static void corkscrew_timer(unsigned long data)
    {
    &hellip;
        vp->timer.expires = jiffies + media_tbl[dev->if_port].wait;
        add_timer(&amp;vp->timer);
    &hellip;
    }</p>

<pre><code>设备close时删除定时器
static int corkscrew_close(struct net_device *dev)
{
...
    del_timer(&amp;vp-&gt;timer);
...
}
</code></pre>

<pre><code>
##### 例子4：
本例子用DEFINE_TIMER静态创建定时器
</code></pre>

<pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/jiffies.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/timer.h&gt;
#include &lt;linux/leds.h&gt;
static void ledtrig_ide_timerfunc(unsigned long data);
DEFINE_LED_TRIGGER(ledtrig_ide);
static DEFINE_TIMER(ledtrig_ide_timer, ledtrig_ide_timerfunc, 0, 0);
static int ide_activity;
static int ide_lastactivity;
void ledtrig_ide_activity(void)
{
    ide_activity++;
    if (!timer_pending(&amp;ledtrig_ide_timer))
        mod_timer(&amp;ledtrig_ide_timer, jiffies + msecs_to_jiffies(10));
}
EXPORT_SYMBOL(ledtrig_ide_activity);
static void ledtrig_ide_timerfunc(unsigned long data)
{
    if (ide_lastactivity != ide_activity) {
        ide_lastactivity = ide_activity;
        led_trigger_event(ledtrig_ide, LED_FULL);
        mod_timer(&amp;ledtrig_ide_timer, jiffies + msecs_to_jiffies(10));
    } else {
        led_trigger_event(ledtrig_ide, LED_OFF);
    }
}
static int __init ledtrig_ide_init(void)
{
    led_trigger_register_simple("ide-disk", &amp;ledtrig_ide);
    return 0;
}
static void __exit ledtrig_ide_exit(void)
{
    led_trigger_unregister_simple(ledtrig_ide);
}
module_init(ledtrig_ide_init);
module_exit(ledtrig_ide_exit);
</code></pre>

<pre><code>--------------
</code></pre>

<pre><code>add_timer() -- 将定时器添加到定时器等待队列中
用add_timer()函数来看timer_base的作用
static inline void add_timer(struct timer_list *timer)
{
    BUG_ON(timer_pending(timer));
    __mod_timer(timer, timer-&gt;expires);
}

int __mod_timer(struct timer_list *timer, unsigned long expires)
{
    tvec_base_t *base, *new_base;
    unsigned long flags;
    int ret = 0;
    timer_stats_timer_set_start_info(timer);
    BUG_ON(!timer-&gt;function);
    base = lock_timer_base(timer, &amp;flags);
如果timer已经放到定时链表中,则释放开
|--------------------------------|
|   if (timer_pending(timer)) { -|
|       detach_timer(timer, 0); -|
|       ret = 1;                 |
|   }                            |
|--------------------------------|
获取当前CPU的timer base
|-----------------------------------------|
|   new_base = __get_cpu_var(tvec_bases); |
|-----------------------------------------|
如果当前CPU的timer base不是当前timer中的base, 更新timer的base
|----------------------------------------------------|
|   if (base != new_base) {                          |
|       if (likely(base-&gt;running_timer != timer)) { -|
|           timer-&gt;base = NULL;                      |
|           spin_unlock(&amp;base-&gt;lock);                |
|           base = new_base;                         |
|           spin_lock(&amp;base-&gt;lock);                  |
|           timer-&gt;base = base;                      |
|       }                                            |
|   }                                                |
|----------------------------------------------------|
给定时器timer设置超时时间；并添加该时钟
|-------------------------------------|
|   timer-&gt;expires = expires;         |
|   internal_add_timer(base, timer); -|
|-------------------------------------|
    spin_unlock_irqrestore(&amp;base-&gt;lock, flags);
    return ret;
}
MODULE_LICENSE("GPL");
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
