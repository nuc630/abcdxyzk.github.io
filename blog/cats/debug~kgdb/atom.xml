<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~kgdb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~kgdb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-12-27T03:04:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VMware配置KGDB串口]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-ttys/"/>
    <updated>2014-02-28T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-ttys</id>
    <content type="html"><![CDATA[<p>在配置KGDB时,必须通过串口才能调试一台测试Linux, 如果通过本机是Linux的话, 就可以使用应用直接链接上VMware的linux,进行通讯.
<code>
1: VM-&gt;Settings-&gt;Hardware-&gt;Add
2: 选择Serial Port-&gt;next-&gt; Output to socket -&gt; next
3: Socket=/tmp/ttyS1, From: Server To: An Application
4: Finesh
5: 在本机Linux,运行socat TCP-LISTEN:5555,fork /tmp/ttyS1 &amp;, 绑定本地端口5555到vmware的socket文件.
6: telnet 0:5555
aaa
bbb
7: 在target Linux上, cat /dev/ttyS1, 如果有aaa bbb,则通讯成功.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGDB配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-conf/"/>
    <updated>2014-02-28T18:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-conf</id>
    <content type="html"><![CDATA[<p>Host机：一个装有Ubuntu12.04-x86-64的主机<br/>
Target机：运行在vmware上的 Ubuntu12.04-server-x86-64 的Linux.</p>

<h4>Target机器配置</h4>

<ol>
<li>配置好VMware对外串口, 详情见:<a href="http://my.oschina.net/u/139611/blog/110052">http://my.oschina.net/u/139611/blog/110052</a></li>
<li>下载源码到/usr/src/linux-source-3.2.0下, 解压.</li>
<li>make menuconfig</li>
<li>进入General setup，把Local version设置一下(-kgdb)</li>
<li>进入Kernel hacking，选"Compile the kernel with debug info"为*</li>
<li>选"KGDB: kernel debugging with remote gdb"为*</li>
<li>选"Write protect kernel read-only data structures"为空 （否则在断下来继续执行的时候可能会报错：Cannot remove breakpoints because program is no longer writable）</li>
<li>进入"KGDB: &hellip; &ldquo; 选"KGDB: use KGDB over the serial console"为*，选"KGDB: internal test suite“为空，否则kgdboc会注册不了</li>
<li>保存，编译: make -j4 &amp;&amp; make modules install &amp;&amp; make install</li>
<li>把vmliunux和System.map拷贝到host机器上</li>
<li>修改/boot/grub/grub.cfg中menuentry为kgdb的项，在kernel后面添加参数: kgdboc=ttyS1,115200 kgdbwait</li>
<li>重启，系统进入等待状态。</li>
</ol>


<h4>Host机：</h4>

<ol>
<li>安装好GDB，配好串口等。
2.运行 socat TCP-LISTEN:5555,fork /tmp/ttyS1 &amp; , 链接到vmware对外的串口文件</li>
<li>gdb vmlinux</li>
<li>在GDB中:
(gdb) target remote 0:5555
就可以进入调试状态了</li>
<li>(gdb) c ,则target进入Linux系统</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGDB--Cannot insert breakpoint]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-breakpoint/"/>
    <updated>2014-02-28T17:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/02/28/debug-kgdb-breakpoint</id>
    <content type="html"><![CDATA[<h4>原因：</h4>

<p>内核编译选项CONFIG_DEBUG_RODATA，会对kernel text做write protect。 那么kgdb就不能设置断点了。</p>

<h4>解决方法是：</h4>

<p>编辑kernel source目录下生成的.config文件， 禁用CONFIG_DEBUG_RODATA=n (read only data)重新编译即可</p>

<hr />

<p><a href="http://www.mail-archive.com/kgdb-bugreport@lists.sourceforge.net/msg03464.html">http://www.mail-archive.com/kgdb-bugreport@lists.sourceforge.net/msg03464.html</a></p>

<blockquote><p>Hi Folks,</p>

<p>I&rsquo;m wondering if anyone has had issues with setting breakpoints. I&rsquo;m<br/>
able to break into the kernel, access data, do a backtrace, etc, but<br/>
when I attempt to set a breakpoint, then continue, I get the following error:</p>

<p>Cannot insert breakpoint 1.<br/>
Error accessing memory address 0xffffffff81310931: Unknown error 4294967295.</p>

<p>I&rsquo;m attaching a sample session, I had set remote debug to 1</p>

<p>Thanks!<br/>
Pat Thomson</p></blockquote>

<p>Hi Thomson,</p>

<p>It seems that your problem is the CONFIG_DEBUG_RODATA option was <br/>
enabled, It is recommend to turn CONFIG_DEBUG_RODATA off when using kgdb.</p>

<p> From the kgdb document(DocBook/kgdb.tmpl):</p>

<pre><code>If the architecture that you are using supports the kernel option
CONFIG_DEBUG_RODATA, you should consider turning it off.  This
option will prevent the use of software breakpoints because it
marks certain regions of the kernel's memory space as read-only.
If kgdb supports it for the architecture you are using, you can
use hardware breakpoints if you desire to run with the
CONFIG_DEBUG_RODATA option turned on, else you need to turn off
this option.
</code></pre>

<p>Thanks,
Dongdong</p>
]]></content>
  </entry>
  
</feed>
