<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language~java | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language~java/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-22T11:40:38+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eclipse生成jar包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar/"/>
    <updated>2012-10-29T11:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar</id>
    <content type="html"><![CDATA[<h4>第一：普通类导出jar包</h4>

<p>普通类就是指此类包含main方法，并且没有用到别的jar包。<br/>
1.在eclipse中选择你要导出的类或者package，右击，选择Export子选项；<br/>
2.在弹出的对话框中，选择java文件&mdash;选择JAR file，单击next；<br/>
3.在JAR file后面的文本框中选择你要生成的jar包的位置以及名字，注意在Export generated class files and resources和Export java source files and resources前面打上勾，单击next; <br/>
4.单击两次next按钮，到达JAR Manifest Specification。注意在最底下的Main class后面的文本框中选择你的jar包的入口类。单击Finish，完成。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>

<h4>第二、你所要导出的类里边用到了别的jar包。</h4>

<p>比如说你写的类连接了数据库，用到数据库驱动包oracl.jar.。<br/>
1.先把你要导出的类按照上面的步骤导出形成jar包，比如叫test.jar<br/>
2.新建一个文件夹main，比如在D盘根目录下；<br/>
3.把test.jar和oracl.jar拷贝到main文件下，右击test.jar，解压到当前文件夹。把META-INF\MANIFEST.MF剪切到另外一个地方 （比如是桌面！） ；<br/>
4.右击oracl.jar，解压到当前文件夹。<br/>
5.在dos环境下，进入到D盘的main文件夹下，执行 jar cvfm new.jar meta-inf/manifest.mf .，不要忘了最后面的点。<br/>
6.用压缩工具打开你新生成的new.jar，用你放在桌面的META-INF\MANIFEST.MF覆盖new.jar原有。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jni 编程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/15/lang-java-jni/"/>
    <updated>2012-02-15T20:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/15/lang-java-jni</id>
    <content type="html"><![CDATA[<h4>jni 编译：</h4>

<p>g++ -L /usr/lib/jvm/default-java/jre/lib/amd64/server -o judge judge.cpp -ljvm</p>

<h4>jni 运行：</h4>

<p>以root身份把库路径加入/etc/ld.so.conf或在/etc/ld.so.conf.d中创建特定的.conf文件，然后运行 ldconfig更新/etc/ld.so.cache。例如：在/etc/ld.so.conf.d下创建文件jvm.conf写入
<code>
/usr/lib/jvm/default-java/jre/lib/amd64
/usr/lib/jvm/default-java/jre/lib/amd64/server
</code></p>

<h4>jni</h4>

<p>  GetFieldID是得到java类中的参数ID，GetMethodID得到java类中方法的ID，它们只能调用类中声明为 public的参数或方法。使用如下：
<code>
jfieldID topicFieldId = env-&gt;GetFieldID(objectClass,"name", "Ljava/lang/String;");
jmethodID getcName=env-&gt;GetMethodID(objectClass,"getcatName","()Ljava/lang/String;");
</code>
第一参数是Java 类对象。第二个参数是参数（或方法名），第三个参数是该参数（或方法）的签名。第三个参数由以下方法得到。
有类
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cat {
</span><span class='line'>    private int catNumber;
</span><span class='line'>    String catName;
</span><span class='line'>    public Cat(int i,String name){catNumber=i;catName=name;}
</span><span class='line'>    public String getCatName () {
</span><span class='line'>        return this.catName;
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    public void setCatName (String catName) {
</span><span class='line'>    this.catName=catName;
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;查看 Cat类进入到Cat所在目录 先用javac Cat.java进行编译 然后输入命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Javap –s Cat
</span><span class='line'>&lt;code&gt;
</span><span class='line'>得到Cat方法getcatName 的签名是()Ljava/lang/String，Cat类中的参数是private 所以它没有签名。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>options[0].optionString = &ldquo;-Djava.class.path=./tmp/1&rdquo;;</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse安装Windowbuilder]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/06/28/lang-java-eclipse-winbuild/"/>
    <updated>2011-06-28T23:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/06/28/lang-java-eclipse-winbuild</id>
    <content type="html"><![CDATA[<h5>也就是可以拖拉各种框框</h5>

<p>Eclipse安装Windowbuilder<br/>
<a href="http://code.google.com/intl/en/javadevtools/wbpro/installation/updatesite_3.5.html  ">http://code.google.com/intl/en/javadevtools/wbpro/installation/updatesite_3.5.html  </a>
根据Eclipse的版本选择不同的软件更新地址，比如3.5版本的为<br/>
<a href="http://dl.google.com/eclipse/inst/d2wbpro/latest/3.5">http://dl.google.com/eclipse/inst/d2wbpro/latest/3.5</a></p>

<h4>一.</h4>

<p><img src="/images/lang/20110628-1.png" alt="" /></p>

<h4>二.</h4>

<p><img src="/images/lang/20110628-2.png" alt="" />
选第三个图标 -> SWT -> &hellip;</p>

<h4>三.</h4>

<p>注意在 Source , Design , Bingings 之间切换
<img src="/images/lang/20110628-3.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 多次排序的方法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2009/12/11/lang-java-multi-sort/"/>
    <updated>2009-12-11T19:24:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2009/12/11/lang-java-multi-sort</id>
    <content type="html"><![CDATA[<h4>Java 多次排序的方法</h4>

<pre><code>    import java.util.*;

    class Node implements Comparable
    {
        int x,y;
        public int compareTo(Object obj){
            Node oo=(Node)obj;
            if(Main.u == 1) {
                if(oo.x &lt; this.x || oo.x == this.x &amp;&amp; oo.y &lt;this.y)return 1;
                return -1;
            } else
            if(Main.u == 2) {
                if(oo.y &lt; this.y || oo.y == this.y &amp;&amp; oo.x &lt;this.x)return 1;
                return -1;
            }
            return -1;
        }
    }

    public class Main {
        public static int u;

        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(System.in);
            Node a[]=new Node[11];
            int i,j,k,l;
            for(i=1;i&lt;=10;i++) {
                a[i]=new Node();
                a[i].x=Math.abs(5-i); a[i].y=10-Math.abs(7-i);
            }
            u = 1;
            Arrays.sort(a, 1, 11);
            System.out.println(" sort u = 1");
            for(i=1;i&lt;=10;i++)System.out.println(a[i].x+" "+a[i].y);
            u = 2;
            Arrays.sort(a, 1, 11);
            System.out.println(" sort u = 2");
            for(i=1;i&lt;=10;i++)System.out.println(a[i].x+" "+a[i].y);
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Mune & Button]]></title>
    <link href="http://abcdxyzk.github.io/blog/2009/10/25/lang-java-mune/"/>
    <updated>2009-10-25T21:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2009/10/25/lang-java-mune</id>
    <content type="html"><![CDATA[<h4>Java Mune &amp; Button</h4>

<pre><code>    //package java_menu;
    import java.awt.*;
    import java.awt.event.*;

    class BBB extends Button
    {
        private int tt=0;
        public BBB() {
            super("0");
            addMouseListener( new MouseListener() {
                public void mousePressed(MouseEvent e) {
                    setLabel(String.valueOf((++tt)));
                }
                public void mouseExited(MouseEvent e) {}
                public void mouseReleased(MouseEvent e) {}
                public void mouseEntered(MouseEvent e) {}
                public void mouseClicked(MouseEvent e) {}
            });
            int x=(int)(Math.random()*10000), y=(int)(Math.random()*10000);
            setBounds( x % 500+70, y % 300+70, 70, 70);
            show();
        }
    }

    class MenuExam extends Frame
    {
        public MenuExam()
        {
            super("abcdxyzk");
            MenuBar bar = new MenuBar(); setMenuBar(bar);
            Menu bb = new Menu(" bbb ");
            MenuItem b1 = new MenuItem(" b1 ");
            MenuItem b2 = new MenuItem(" b2 ");
            bb.add(b1); bb.addSeparator(); bb.add(b2); bar.add(bb);

            b2.addActionListener( new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    BBB bbb = new BBB();
                    add(bbb);
                }
            });
            setLayout(null);   setSize(700, 500);
            TextField tf = new TextField();
            tf.setText("click b2");
            tf.setFont(new Font("TimesRoman", Font.BOLD, 30));
            tf.setEnabled(false);
            tf.setBounds(100, 350, 200, 100);
            add(tf);
            show();
        }
    }

    public class Main {
        public static void main(String[] args) {
            MenuExam mm = new MenuExam();
            mm.addWindowListener( new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }
            });
        }
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
