<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-21T17:24:08+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gdb break/watch/catch]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break/"/>
    <updated>2015-07-21T15:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break</id>
    <content type="html"><![CDATA[<p><a href="http://sourceware.org/gdb/current/onlinedocs/gdb">http://sourceware.org/gdb/current/onlinedocs/gdb</a></p>

<p><a href="http://blog.csdn.net/yangzhongxuan/article/details/6897968">gdb break 断点设置（一）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6899186">gdb watch 断点设置（二）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901440">gdb catch 断点设置（三）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901477">gdb 断点删除（四）</a></p>

<hr />

<h3>二、断点设置</h3>

<h4>gdb断点分类：</h4>

<p>以设置断点的命令分类：</p>

<p>breakpoint 可以根据行号、函数、条件生成断点。
watchpoint 监测变量或者表达式的值发生变化时产生断点。
catchpoint 监测信号的产生。例如c++的throw，或者加载库的时候。</p>

<p>gdb中的变量从1开始标号，不同的断点采用变量标号同一管理，可以 用enable、disable等命令管理，同时支持断点范围的操作，比如有些命令接受断点范围作为参数。</p>

<h4>1、break及break变种详解：</h4>

<p>相关命令有break，tbreak，rbreak,hbreak，thbreak，后两种是基于硬件的，先不介绍。</p>

<h5>break 与 tbeak</h5>

<p>break，tbreak可以根据行号、函数、条件生成断点。tbreak设置方法与break相同，只不过tbreak只在断点停一次，过后会自动将断点删除，break需要手动控制断点的删除和使能。</p>

<p>break 可带如下参数：<br/>
  linenum            本地行号，即list命令可见的行号<br/>
  filename:linenum   制定个文件的行号<br/>
  function           函数，可以是自定义函数也可是库函数，如open<br/>
  filename:function  制定文件中的函数<br/>
  condtion           条件<br/>
  *address           地址，可是函数，变量的地址，此地址可以通过info add命令得到。</p>

<p>例如：
<code>
    break 10    
    break test.c:10
    break main
    break test.c:main
    break system
    break open
</code></p>

<p>如果想在指定的地址设置断点，比如在main函数的地址出设断点。可用info add main 获得main的地址如0x80484624，然后用break *0x80484624.</p>

<h6>条件断点</h6>

<p>就是在如上述指定断点的同时指定进入断点的条件。</p>

<p>例如：（假如有int 类型变量 index）
<code>
    break 10 if index == 3
    tbreak 12 if index == 5
</code></p>

<h5>rbreak</h5>

<p>rbreak 可以跟一个规则表达式。rbreak + 表达式的用法与grep + 表达式相似。即在所有与表达式匹配的函数入口都设置断点。</p>

<p>rbreak list<em>* 即在所有以 list</em> 为开头字符的函数地方都设置断点。</p>

<p>rbreak ^list_ 功能与上同。</p>

<h5>查看断点信息</h5>

<pre><code>    info break [break num ]
    info break 可列出所有断点信息，info break 后也可设置要查看的break num如：
    info break 1 列出断点号是1的断点信息

    Num        Type                    Disp Enb  Address      What
     1       breakpoint                keep y    &lt;MULTIPLE&gt;
         stop only if i==1
         breakpoint already hit 1 time
     1.1                                    y    0x080486a2 in void foo&lt;int&gt;() at t.cc:8
     1.2                                    y    0x080486ca in void foo&lt;double&gt;() at t.cc:8
</code></pre>

<hr />

<h4>2、watch</h4>

<pre><code>    watch [-l|-location] expr [thread threadnum] [mask maskvalue]
</code></pre>

<p>-l 与 mask没有仔细研究，thread threadnum 是在多线程的程序中限定只有被线程号是threadnum的线程修改值后进入断点。</p>

<p>经常用到的如下命令：
watch <expr><br/>
为表达式（变量）expr设置一个观察点。变量量表达式值有变化时，马上停住程序。</p>

<p>表达式可以是一个变量, 例如：watch value_a</p>

<p>表达式可以是一个地址, 例如：watch <em>(int </em>)0x12345678 可以检测4个字节的内存是否变化。</p>

<p>表达式可以是一个复杂的语句表达式, 例如：watch a*b + c/d</p>

<p>watch 在有些操作系统支持硬件观测点，硬件观测点的运行速度比软件观测点的快。如果系统支持硬件观测的话，当设置观测点是会打印如下信息：<code>Hardware watchpoint num: expr</code></p>

<p>如果不想用硬件观测点的话可如下设置：<code>set can-use-hw-watchpoints</code></p>

<p>watch两个变种 rwatch，awatch，这两个命令只支持硬件观测点如果系统不支持硬件观测点会答应出不支持这两个命令的信息:，</p>

<p>rwatch <expr><br/>
当表达式（变量）expr被读时，停住程序。</p>

<p>awatch <expr><br/>
当表达式（变量）的值被读或被写时，停住程序。</p>

<p>info watchpoints<br/>
列出当前所设置了的所有观察点。</p>

<p>watch 所设置的断点也可以用控制断点的命令来控制。如 disable、enable、delete等。</p>

<p>可以为停止点设定运行命令
<code>
    commands [bnum]
    ... command-list ...
    end
</code></p>

<p>为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。</p>

<p>例如：
<code>
    break foo if x&gt;0
    commands
    printf "x is %d/n",x
    continue
    end
</code></p>

<p>断点设置在函数foo中，断点条件是x>0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。</p>

<p>注意：watch 设置也是断点，如果调试的时候设置的断点（任何种类的断点）过多的时候，watch断点会被忽略，有时候没有任何提示，这是我在测试的时候发现的，只有把多余的断点删除后才可用。</p>

<hr />

<p>在调试的时候通常用catchpoints来捕获事件，如c++的异常等。捕获点的设置通过catch与tcatch两个命令。</p>

<p>tcatch所设置的断点停止一次后自动删除，设置断点的方法与catch相同。</p>

<p>用法：catch event</p>

<p>这些event事件如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>throw
</span><span class='line'>    The throwing of a C++ exception.
</span><span class='line'>catch
</span><span class='line'>    The catching of a C++ exception.
</span><span class='line'>exception&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;exception unhandled
</span><span class='line'>An exception that was raised but is not handled by the program.
</span><span class='line'>assert
</span><span class='line'>Ada 语言 assert断言失败时，断点被踩到。
</span><span class='line'>exec
</span><span class='line'>调用exec时断点被踩到。
</span><span class='line'>syscall
</span><span class='line'>syscall [name | number] ...
</span><span class='line'>通过系统函数的名称和系统号，来设置捕获点，当所设定的系统调用时，断点被踩到。
</span><span class='line'>因为经常在linux用c语言，所以主要用到的event是最后四个，其他的没有仔细研究。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;catch syscall open
</span><span class='line'>catch syscall 5
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这两个捕获断点一样。
</span><span class='line'>
</span><span class='line'>--------------
</span><span class='line'>
</span><span class='line'>断点的删除与断点的设置同样的重要。删除断点的命令有两个: delete, clear
</span><span class='line'>
</span><span class='line'>##### delete
</span><span class='line'>用法：  
</span><span class='line'>delete [breakpoints num] [range...]
</span><span class='line'>
</span><span class='line'>delete可删除单个断点，也可删除一个断点的集合，这个集合用连续的断点号来描述。
</span><span class='line'>
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;delete 5
</span><span class='line'>delete 1-10
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### clear
</span><span class='line'>用法:  
</span><span class='line'>clear  
</span><span class='line'>删除所在行的多有断点。
</span><span class='line'>
</span><span class='line'>clear location  
</span><span class='line'>clear 删除所选定的环境中所有的断点  
</span><span class='line'>clear location location描述具体的断点。  
</span><span class='line'>
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;clear list_insert         //删除函数的所有断点
</span><span class='line'>clear list.c:list_delet   //删除文件：函数的所有断点
</span><span class='line'>clear 12                  //删除行号的所有断点
</span><span class='line'>clear list.c:12           //删除文件：行号的所有断点
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clear 删除断点是基于行的，不是把所有的断点都删除。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb 修改寄存器/变量]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-21T15:34:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    # 查看所有寄存器
</span><span class='line'>(gdb) info register  # 可以简写成 i r
</span><span class='line'>
</span><span class='line'># 查看单个寄存器
</span><span class='line'>(gdb) i r rax
</span><span class='line'>
</span><span class='line'># 修改寄存器
</span><span class='line'>(gdb) set $rax=3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># 查看变量
</span><span class='line'>(gdb) i local
</span><span class='line'>
</span><span class='line'># 修改变量
</span><span class='line'>(gdb) set var b=4
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[test指令]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/21/assembly-base-test/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-21T15:14:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/21/assembly-base-test&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;TEST对两个参数(目标，源)执行AND逻辑操作,并根据结果设置标志寄存器,结果本身不会保存。TEST AX,BX 与 AND AX,BX 命令有相同效果&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;语法: TEST R/M, R/M/DATA&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;影响标志: C,O,P,Z,S(其中C与O两个标志会被设为0)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结果: 执行AND逻辑操作结果为0则设置ZF零标志为1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;TEST的一个非常普遍的用法是用来测试一方寄存器是否为空:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>TEST ECX, ECX
</span><span class='line'>JZ SOMEWHERE
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>如果ECX为零,设置ZF零标志为1,JZ跳转&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[LVS详解]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/15/kernel-net-lvs-detail/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-15T14:42:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/15/kernel-net-lvs-detail&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.cnblogs.com/xiaocen/p/3709869.html"&gt;http://www.cnblogs.com/xiaocen/p/3709869.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;简介：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Linux 虚拟服务器(Linux Virtual Server. LVS),是一个由章文松开发的自由软件.利用KVS可以实现高可用的、可伸缩缩的Web, Mail, Cache和Medial等网络股务..井在此基 础上开发支持庞大用户数的，可伸缩的，高可用的电子商务应用。LVS1998年发展到现在，已经变得比较成熟，目前广泛应用在各种网络服务和电了商务应用 中.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;LVS具有很好的伸缩缩性、可靠性和管埋性，通过LVS要实现的最终目标是：利用linux 操作系统和LVS集群软件实现一个高可用、高性能，低成本的服务器应用集群。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;LVS集群的组成&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;利用LVS架设的服务器群系统由3个部分组成：最前端的是负栽均衡层（这里用 Lo ad Balancer表示），中间是服务器集群层(用Server Array表示).
</span><span class='line'>LVS体系结构如下图所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-07-15-1.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面对LVS的各个组成部分进行详细介绍&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;负栽均衡层：位于整个集群系统的最前端，由一台或多台负栽调度器（Dircctm Server)组成.LVS核心模块IPVS就安装在director Server上，而director的主要作用类似于一个路由器，它含有为完成LVS功能所设定的路由表，通过这些路由表把用户的请求分发给服务器群组层 的应用服务器(real Server)。同时，在director server上还要安装队real server的监控模块Ldirectord，此模块用于监测各个real server 服务的健康状况。在real server 不可同时可以讲其从LVS路由表中剔除，在恢复时重新加入。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;服务器群组层：由一组实际运行应用服务的机器组成，real Server可以是Web服务器、Mail服务器、FTP服务器、DNS服务器、视颊服务器中的一个或多个，每个Real Server之间通过高速的LAN或分布在&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;各地的WAN相连接:实际的应用中， Director Server也可以同时兼任Real Server的角色&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;共字存储层是为所有Real Server提供共亨存储空问和内容一致性的存储区域，一般由磁盘阵列设备组成。为了提俱内容的一致性，一般可以通过NFS网络义件系统共 亨数据，但是NFS在繁忙的业务系统中，性能并不是很好，此时可以采用集群文件 系统，例如Red Hat的GFS文件系统，Oracle提供的OS2文件系统等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从整个LVS结构可以看出，Director Server是整个LVS的核心。目前，用干Director Server 的操作系统只有Linux和FreeBSD, Linux 2.6内核完全内置了LVS的各个模块，不用任何 设置就可以支持LVS功能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于 Real.Server,几乎所有的系统平台，如 Linux、.. Windows、Solaris、AIX、BSD 系列等都能很好地支持它&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;LVS集群的特点&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;1. IP负载均衡与负载调度&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;负栽均衡技术有很多实现方案，有基于DNS.域名轮流解析的方法，有基于客户端调度访问的方法，还有基于应用层系统负栽的调度方法，还有基于p地址的调度方法。在这些负栽 调度算法中，执行效率最卨的是IP负栽均衡技术。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;LVS 的IP负栽均衡技术是通过IPVS模块来实现的。IPVS是LVS集群系统的核心软件， 它的主要作用是:安装在Director Server上，同时在Director Server ..上虚拟出一个IP地址， 用户必须通过这个虚拟的IP地址访问服务器，这个虚拟IP —般称为LVS的VIP,即Virtual IP  访问的请求首先经过VIP到达负栽调度器，然后由负栽调度器从Real Server列表中选取 一个服务节点响应用户的请求。
</span><span class='line'>在用户的清求到达负栽调度器后，调度器如何将请求发送到提供服务的Real Server节 点，而Real Server节点如何返回数据给用户，是IPVS实现的重点技术。IPVS实现负栽均 衡的方式有4种.分别是NAT|Full NAT、TUN和DR。下面进行详细介绍。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;IPVS/NAT ：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;即 Virtual Server via Network Address Translation,也就是网络地址翻译技术实现虚拟服务器。当用户请求到达调度器时，调度器将请求报文的目标地址（即 虚拟IP地址）改写成选定的Real Server地址，同时将报文的目标端口也改成选定的 Real Server的相应端口，最后将报文请求发送到选定的Real Server。在服务器端得到数据后，Real Server将数据返回给用户时，需要再次经过负栽调度器将报文的源地址和源端口改成虚拟IP地址和相应端口,然后把数据发送给用户，完成整个负栽调度过 程。可以看出，在NAT方式下，用户请求和响应报文都必须经过Director Server地址重写， 当用户请求越来越多时，调度器的处理能力将成为瓶颈. 如下图所示：IPVS/NAT 架构图&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NAT：多目标的DNAT&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特性：&lt;br/&gt;
</span><span class='line'>  RS应该使用私有地址；&lt;br/&gt;
</span><span class='line'>  RS的网关必须指向DIP；&lt;br/&gt;
</span><span class='line'>  RIP和DIP必须在同一网段内；&lt;br/&gt;
</span><span class='line'>  请求和响应的报文都得经过Director；（在高负载应用场景中，Director很可能成为系统性能瓶颈）&lt;br/&gt;
</span><span class='line'>  支持端口映射；&lt;br/&gt;
</span><span class='line'>  RS可以使用任意支持集群服务的OS(如Windows)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;适用场景：非高并发请求场景，10个RS以内；可隐藏内部的DIP和RIP地址；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结构图:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-07-15-2.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;LVS/TUN ：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;即Virtual Server via IP Tunneling,也就是通过IP隧道技术实现虚拟服务器。这种方式的连接调度度和管理与VS/NAT方式一样，只是报文转发方法不同。在 VS/TUN方式中，调度器采用IP隧道技术将用户清求转发到某个Real Server,而这 个Real Server 将直接响应用户的请求，不再经过前端调度器。此外，对Real Server 的地域位置没有要求，可以和Director Server位于同一个网段，也可以在独立的一个 网络中。因此，在TUN方式中，调度器将只处理用户的报文请求，从而使集群系统 的吞吐量大大提高。如下图所示VS/TUN 架构图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;TUN：IP隧道，即含有多个IP报头&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特性：&lt;br/&gt;
</span><span class='line'>  RIP、DIP、VIP都得是公网地址；&lt;br/&gt;
</span><span class='line'>  RS的网关不会指向也不可能指向DIP；&lt;br/&gt;
</span><span class='line'>  请求报文经过Director，但响应报文一定不经过Director；&lt;br/&gt;
</span><span class='line'>  不支持端口映射；&lt;br/&gt;
</span><span class='line'>  RS的操作系统必须得支持隧道功能，即部署ipip模块&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;适用场景：跨互联网的请求转发&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结构图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-07-15-3.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;FULLNAT是一种新的转发模式&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;– 主要思想：引入local address（内网ip地址），cip-vip转
</span><span class='line'>换为lip-&gt;rip，而 lip和rip均为IDC内网ip，可以跨vlan通
</span><span class='line'>讯；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FULLNAT：NAT模型的改进版&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特性：&lt;br/&gt;
</span><span class='line'>  实现RS间跨VLAN通信，是NAT模式的改进版；&lt;br/&gt;
</span><span class='line'>  默认内核不支持，需重新编译内核，才能使用；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;适用场景：内网服务器跨VLAN的负载分担&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结构图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-07-15-4.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;LVS/DR：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;即Virtual Server via Direct Routing,也就是用直接路由技术实现虚拟服务器。 这种方式的连按调度和管理与前两种一样，但它的报文转发方法又有所不同，VS/DR 通过改写请求报文的MAC地址，将请求发送到Real Server,而Real Server将响应直接返回给客户.免去了VS/TUN中的IP隧道开销，这种方式是3种负莪调度方式中 性能最好的，但是要求Director Server与Real Server必须由一块网卡连在同一物理网段上。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如下图所示：VS/DR 架构图&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DR：Direct Routing&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;需解决的关键问题： 让前端路由将请求发往VIP时，只能是Director上的VIP进行响应；实现方式是修改RS上的Linux内核参数，将RS上的VIP配置为lo接口的别名，并限制Linux仅对对应接口的ARP请求做响应&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特性：&lt;br/&gt;
</span><span class='line'>  RS可以使用私有地址，但也可以使用公网地址，此时可以直接通过互联网连入RS以实现配置，监控等；&lt;br/&gt;
</span><span class='line'>  RS的网关一定不能指向DIP；&lt;br/&gt;
</span><span class='line'>  RS和Director要在同一物理网络(即不能由路由器分隔)&lt;br/&gt;
</span><span class='line'>  请求报文经过Director，但响应报文一定不进过Director；&lt;br/&gt;
</span><span class='line'>  不支持端口映射；&lt;br/&gt;
</span><span class='line'>  RS可以使用大多数的操作系统&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;适用场景：因为响应报文不经过Director，极大的减轻了Director的负载压力，故Director可以支持更大的并发访问，一般RS在100台以内；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;结构图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;LVS-DR配置架构根据其VIP与RIP是否在同一个网段内又分为两种模型:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-07-15-5.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;LVS调度算法&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;静态方法：仅根据算法本身进行调度
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rr：Round Robin # 即轮询
</span><span class='line'>wrr：Weighted RR # 即加权轮询
</span><span class='line'>sh：Source Hashing # 即来源IP地址hash
</span><span class='line'>dh：Destination Hashing # 即目标地址hash（不常用，仅用于前端多防火墙的场景，保证防火墙的连接追踪功能有效）
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;动态方法：根据算法及RS当前的负载情况</span></code></pre></td></tr></table></div></figure>
    lc：Least Connection
    # 评判标准：Overhead=Active*256+Inactive
    # Overhead最小者胜出</p>

<pre><code>wlc：Weighted LC
# 评判标准：Overhead=(Active*256+Inactive)/weight
# Overhead最小者胜出

sed：Shortest Expect Delay
# 评判标准：Overhead=(Active+1)*256/weight
# Overhead最小者胜出

nq：Never Queue # 集群开始时工作时，每台服务器都至少分配一个连接请求，然后再根据sed算法调度；

lblc：Locality-based Least Connection # 类似于dh+lc

lblcr：Relicated and Locality-based Least Connection # 主要用于后端服务器是缓存服务器时
</code></pre>

<pre><code>
前面介绍过，负载调度器是根据各个服务器的负栽情况，动态地选择一台Real Server响 应用户请求。那么动态选择是如何实现呢？其实就是通过这里要说的负栽调度算法。根据不同的网络眼务需求和眼务器配IPVS实现T8种负栽调度算法。这里详 细讲述最常用的4 种调度算法。

1、 轮询（round robin, rr),加权轮询(Weighted round robin, wrr)——新的连接请求被轮流分配至各RealServer；算法的优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。轮叫调度 算法假设所有服务器处理性能均相同，不管服务器的当前连接数和响应速度。该算法相对简单，不适用于服务器组中处理性能不一的情况，而且当请求服务时间变化 比较大时，轮叫调度算法容易导致服务器间的负载不平衡。

2、 最少连接(least connected, lc)， 加权最少连接(weighted least connection, wlc)——新的连接请求将被分配至当前连接数最少的RealServer；最小连接调度是一种动态调度算法，它通过服务器当前所活跃的连接数来估计服务 器的负载情况。调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1；当连接中止或超时，其连接数减一。

3、 基于局部性的最少链接调度（Locality-Based Least Connections Scheduling，lblc）——针对请求报文的目标IP地址的负载均衡调度，目前主要用于Cache集群系统，因为在Cache集群中客户请求报文 的目标IP地址是变化的。这里假设任何后端服务器都可以处理任一请求，算法的设计目标是在服务器的负载基本平衡情况下，将相同目标IP地址的请求调度到同 一台服务器，来提高各台服务器的访问局部性和主存Cache命中率，从而整个集群系统的处理能力。LBLC调度算法先根据请求的目标IP地址找出该目标 IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于其一半的工作负载，则 用“最少链接”的原则选出一个可用的服务器，将请求发送到该服务器。

4、 带复制的基于局部性最少链接调度（Locality-Based Least Connections with Replication Scheduling，lblcr）——也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统。它与LBLC算法的不同之处是它要维护从一个 目标IP地址到一组服务器的映射，而 LBLC算法维护从一个目标IP地址到一台服务器的映射。对于一个“热门”站点的服务请求，一台Cache 服务器可能会忙不过来处理这些请求。这时，LBLC调度算法会从所有的Cache服务器中按“最小连接”原则选出一台Cache服务器，映射该“热门”站 点到这台Cache服务器，很快这台Cache服务器也会超载，就会重复上述过程选出新的Cache服务器。这样，可能会导致该“热门”站点的映像会出现 在所有的Cache服务器上，降低了Cache服务器的使用效率。LBLCR调度算法将“热门”站点映射到一组Cache服务器（服务器集合），当该“热 门”站点的请求负载增加时，会增加集合里的Cache服务器，来处理不断增长的负载；当该“热门”站点的请求负载降低时，会减少集合里的Cache服务器 数目。这样，该“热门”站点的映像不太可能出现在所有的Cache服务器上，从而提供Cache集群系统的使用效率。LBLCR算法先根据请求的目标IP 地址找出该目标IP地址对应的服务器组；按“最小连接”原则从该服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载；则按 “最小连接”原则从整个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服 务器从服务器组中删除，以降低复制的程度。

5、 目标地址散列调度（Destination Hashing，dh）算法也是针对目标IP地址的负载均衡，但它是一种静态映射算法，通过一个散列（Hash）函数将一个目标IP地址映射到一台服务 器。目标地址散列调度算法先根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。

6、 源地址散列调度（Source Hashing，sh）算法正好与目标地址散列调度算法相反，它根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。它采用的散列函数与目标地址散列调度算法 的相同。除了将请求的目标IP地址换成请求的源IP地址外，它的算法流程与目标地址散列调度算法的基本相似。在实际应用中，源地址散列调度和目标地址散列 调度可以结合使用在防火墙集群中，它们可以保证整个系统的唯一出入口。

7、加权最少连接调度（Weighted Least Connections)。
“加 权最少连接调度”是“最少连接调度”的超集。每个服务节点可以用相应的权值表示其处理能力，而系统管理员可以动态地设置相应的权值，默认权值为1。加权最 小连接调 度在分新连接请求时尽可能使服务节点的已建立连接数和其权值成正比。算法： overhead=active*256+inactive/weight   overhead最小值胜出；

8、sed：shorttest expect delay  最小期望延迟(改进的wlc) 算法：overhead=(active+1)*256/weight，案例：假如DFG三台机器分别权重123，连接数也分别是123.那么如果使用WLC算法的话一个新请求进入时它可能会分给DFG中的任意一个。使用sed算法后会进行这样一个运算：  
D(1+1)/1  
F(1+2)/2  
G(1+3)/3  

9、nq：nerver queue        增强改进的sed算法.如果有台real Server的连接数=0直接分配,不需要再进行sed运算

#### 2.高可用性

LVS 是一个基于内核级别的应用软件，因此具有很髙的处理性能。由LVS构建的负载 均衡集群系统具有优秀的处理能力，每个服务节点的故障不会影响整个系统的正常使用，又能够实现负载的合理均衡，使应用具有超高负荷的服务能力，可支持上百 万个并发连接请 求。如配置百兆网卡，采用VS/TUN或VS/DR调度技术，整个集群系统的吞吐量可高达 1 Gbit/s；又如配置千兆网卡，系统的最大吞吐量可接近10Gbit/s。

#### 3.高可靠性

LVS负载均衡集群软件已经在 企业和学校中得到了很好的普及，国内外很多大型的、关键性的Web站点也都采用了 LVS集群软件，所以它的可靠性在实践中得到了很好印证。有 很多由LVS构成的负载均衡系统，运行很长时间，从未进行过重新启动。这些都说明了 LVS 的髙稳定性和高可靠性。

#### 4、配置LVS

1、定义在Director上进行dispatching的服务(service)，以及哪此服务器(server)用来提供此服务；

2、为每台同时提供某一种服务的服务器定义其权重（即概据服务器性能确定的其承担负载的能力）；

注：权重用整数来表示，有时候也可以将其设置为atomic_t；其有效表示值范围为24bit整数空间，即（2^24-1）；

因此，ipvsadm命令的主要作用表现在以下方面：  
1、添加服务（通过设定其权重&gt;0）；  
2、关闭服务（通过设定其权重&gt;0）；此应用场景中，已经连接的用户将可以继续使用此服务，直到其退出或超时；新的连接请求将被拒绝；  
3、保存ipvs设置，通过使用“ipvsadm-sav &gt; ipvsadm.sav”命令实现；  
4、恢复ipvs设置，通过使用“ipvsadm-sav &lt; ipvsadm.sav”命令实现；  
5、显示ip_vs的版本号，下面的命令显示ipvs的hash表的大小为4k；  
</code></pre>

<pre><code># ipvsadm  
IP Virtual Server version 1.2.1 (size=4096)  
</code></pre>

<pre><code>6、显示ipvsadm的版本号  
</code></pre>

<pre><code># ipvsadm --version  
ipvsadm v1.24 2003/06/07 (compiled with popt and IPVS v1.2.0)  
</code></pre>

<pre><code>
##### 二、ipvsadm使用中应注意的问题

默认情况下，ipvsadm在输出主机信息时使用其主机名而非IP地址，因此，Director需要使用名称解析服务。如果没有设置名称解析服务、服务不可 用或设置错误，ipvsadm将会一直等到名称解析超时后才返回。当然，ipvsadm需要解析的名称仅限于RealServer，考虑到DNS提供名称 解析服务效率不高的情况，建议将所有RealServer的名称解析通过/etc/hosts文件来实现；

##### 三、调度算法

Director在接收到来自于Client的请求时，会基于"schedule"从RealServer中选择一个响应给Client。ipvs支持以下调度算法：

##### 四、关于LVS追踪标记fwmark：

如果LVS放置于多防火墙的网络中，并且每个防火墙都用到了状态追踪的机制，那么在回应一个针对于LVS的连接请求时必须经过此请求连接进来时的防火墙，否则，这个响应的数据包将会被丢弃。


常用命令：
</code></pre>

<pre><code>查看LVS上当前的所有连接
# ipvsadm -Lcn   
或者
#cat /proc/net/ip_vs_conn

查看虚拟服务和RealServer上当前的连接数、数据包数和字节数的统计值，则可以使用下面的命令实现：
# ipvsadm -l --stats

查看包传递速率的近似精确值，可以使用下面的命令：
# ipvsadm -l --rate
</code></pre>

<pre><code>
#### VS/NAT

LVS- NAT基于cisco的LocalDirector。VS/NAT不需要在RealServer上做任何设置，其只要能提供一个tcp/ip的协议栈即 可，甚至其无论基于什么OS。基于VS/NAT，所有的入站数据包均由Director进行目标地址转换后转发至内部的 RealServer，RealServer响应的数据包再由Director转换源地址后发回客户端。 

VS/NAT模式不能与netfilter兼容，因此，不能将VS/NAT模式的Director运行在netfilter的保护范围之中。现在已经有补丁可以解决此问题，但尚未被整合进ip_vs code。
</code></pre>

<p>  　　　<strong><strong><strong><strong><strong>
      |            |
      |  client    |
      |</strong></strong></strong></strong></strong><strong>|                  <br/>
    CIP=192.168.0.253 (eth0)          <br/>
             |                        <br/>
             |                        <br/>
    VIP=192.168.0.220 (eth0)          <br/>
       </strong><strong><strong><strong><strong><strong>                    <br/>
      |            |                  <br/>
      |  director  |                  <br/>
      |</strong></strong></strong></strong></strong><strong>|                  <br/>
    DIP=192.168.10.10 (eth1)      <br/>
             |                        <br/>
          (switch)&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
             |                           |
    RIP=192.168.10.2 (eth0)       RIP=192.168.10.3 (eth0)
       </strong><strong><strong><strong><strong><strong><em>               </em></strong></strong></strong></strong></strong><strong>
      |             |             |             |
      | realserver1 |             | realserver2 |
      |</strong><strong><strong><strong><strong><strong><em>|             |</em></strong></strong></strong></strong></strong>__|</p>

<pre><code class="">
设置VS/NAT模式的LVS(这里以web服务为例)
Director:
</code></pre>

<pre><code>建立服务
# ipvsadm -A -t VIP:PORT -s rr
如:
# ipvsadm -A -t 192.168.0.220:80 -s rr
设置转发：
# ipvsadm -a -t VIP:PORT -r RIP_N:PORT -m -w N
如：
# ipvsadm -a -t 192.168.0.220:80 -r 192.168.10.2 -m -w 1
# ipvsadm -a -t 192.168.0.220:80 -r 192.168.10.3 -m -w 1
打开路由转发功能
# echo "1" &gt; /proc/sys/net/ipv4/ip_forward
</code></pre>

<pre><code>
服务控制脚本：
</code></pre>

<pre><code>#!/bin/bash
#
# chkconfig: - 88 12
# description: LVS script for VS/NAT
#
. /etc/rc.d/init.d/functions
#
VIP=192.168.0.219
DIP=192.168.10.10
RIP1=192.168.10.11
RIP2=192.168.10.12
#
case "$1" in
start)  
    /sbin/ifconfig eth0:1 $VIP netmask 255.255.255.0 up
    # Since this is the Director we must be able to forward packets
    echo 1 &gt; /proc/sys/net/ipv4/ip_forward
    # Clear all iptables rules.
    /sbin/iptables -F
    # Reset iptables counters.
    /sbin/iptables -Z
    # Clear all ipvsadm rules/services.
    /sbin/ipvsadm -C
    # Add an IP virtual service for VIP 192.168.0.219 port 80
    # In this recipe, we will use the round-robin scheduling method.
    # In production, however, you should use a weighted, dynamic scheduling method.
    /sbin/ipvsadm -A -t $VIP:80 -s rr
    # Now direct packets for this VIP to
    # the real server IP (RIP) inside the cluster
    /sbin/ipvsadm -a -t $VIP:80 -r $RIP1 -m
    /sbin/ipvsadm -a -t $VIP:80 -r $RIP2 -m
    /bin/touch /var/lock/subsys/ipvsadm.lock
;;
stop)
    # Stop forwarding packets
    echo 0 &gt; /proc/sys/net/ipv4/ip_forward
    # Reset ipvsadm
    /sbin/ipvsadm -C
    # Bring down the VIP interface
    ifconfig eth0:1 down

    rm -rf /var/lock/subsys/ipvsadm.lock
;;
status)
    [ -e /var/lock/subsys/ipvsadm.lock ] &amp;&amp; echo "ipvs is running..." || echo "ipvsadm is stopped..."
;;
*)
    echo "Usage: $0 {start|stop}"
;;
esac
</code></pre>

<pre><code>
Real Server：

   route add default gw 192.168.10.10  注释：在real server 上网关一定要指向director服务器的DIP，不然用户请求的数据报文，在LVS/NAT模型中将无法发送出去.
</code></pre>

<pre><code>#!/bin/bash
VIP=192.168.0.219
chmod  755 /etc/rc.d/init.d/functions
/etc/rc.d/init.d/functions
case "$1" in
start)
    echo " start LVS of REALServer"
    /sbin/ifconfig lo:0 $VIP broadcast $VIP netmask 255.255.255.255 up
    /sbin/route add -host $VIP dev lo:0
    echo "1" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
    echo "2" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
    echo "1" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
    echo "2" &gt;/proc/sys/net/ipv4/conf/all/arp_announce
    sysctl -p &gt;/dev/null 2&gt;&amp;1
;;
stop)
    /sbin/ifconfig lo:0 down
    echo "close LVS Directorserver"
    echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
    echo "0" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
    echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
    echo "0" &gt;/proc/sys/net/ipv4/conf/all/arp_announce
;;
*)
    echo "Usage: $0 {start|stop}"
    exit 1
esac
</code></pre>

<pre><code>
ARP问题：
</code></pre>

<pre><code>                    __________
                    |        |
                    | client |
                    |________|
                           |
                        |
                     (router)
                        |
                        |
                        |       __________
                        |  DIP |          |
                        |------| director |
                        |  VIP |__________|
                        |
                        |
                        |
      ------------------------------------
      |                 |                |
      |                 |                |
  RIP1, VIP         RIP2, VIP        RIP3, VIP
______________    ______________    ______________
|              |  |              |  |              |
| realserver1  |  | realserver2  |  | realserver3  |
|______________|  |______________|  |______________|
</code></pre>

<pre><code>

在如上图的VS/DR或VS/TUN 应用的一种模型中（所有机器都在同一个物理网络），所有机器（包括Director和RealServer）都使用了一个额外的IP地址，即VIP。当一 个客户端向VIP发出一个连接请求时，此请求必须要连接至Director的VIP，而不能是RealServer的。因为，LVS的主要目标就是要 Director负责调度这些连接请求至RealServer的。

因此，在Client发出至VIP的连接请求后，只能由Director将其 MAC地址响应给客户端（也可能是直接与Director连接的路由设备），而Director则会相应的更新其ipvsadm table以追踪此连接，而后将其转发至后端的RealServer之一。

如果Client在请求建立至VIP的连接时由某RealServer 响应了其请求，则Client会在其MAC table中建立起一个VIP至RealServer的对就关系，并以至进行后面的通信。此时，在Client看来只有一个RealServer而无法意 识到其它服务器的存在。

为了解决此问题，可以通过在路由器上设置其转发规则来实现。当然，如果没有权限访问路由器并做出相应的设置，则只能通过传统的本地方式来解决此问题了。这些方法包括：

1、禁止RealServer响应对VIP的ARP请求；  
2、在RealServer上隐藏VIP，以使得它们无法获知网络上的ARP请求；  
3、基于“透明代理（Transparent Proxy）”或者“fwmark （firewall mark）”；  
4、禁止ARP请求发往RealServers；  

传统认为，解决ARP问题可以基于网络接口，也可以基于主机来实现。Linux采用了基于主机的方式，因为其可以在大多场景中工作良好，但LVS却并不属于 这些场景之一，因此，过去实现此功能相当麻烦。现在可以通过设置arp_ignore和arp_announce，这变得相对简单的多了。

Linux 2.2和2.4（2.4.26之前的版本）的内核解决“ARP问题”的方法各不相同，且比较麻烦。幸运的是，2.4.26和2.6的内核中引入了两个新的 调整ARP栈的标志（device flags）：arp_announce和arp_ignore。基于此，在DR/TUN的环境中，所有IPVS相关的设定均可使用 arp_announce=2和arp_ignore=1/2/3来解决“ARP问题”了。

arp_annouce：Define different restriction levels for announcing the local source IP address from IP packets in ARP requests sent on interface；  
   0 - (default) Use any local address, configured on any interface.  
   1 - Try to avoid local addresses that are not in the target's subnet for this interface.   
   2 - Always use the best local address for this target.  

arp_ignore: Define different modes for sending replies in response to received ARP requests that resolve local target IP address.  
   0 - (default): reply for any local target IP address, configured on any interface.  
   1 - reply only if the target IP address is local address configured on the incoming interface.  
   2 - reply only if the target IP address is local address configured on the incoming interface and both with the sender's IP address are part from same subnet on this interface.  
   3 - do not reply for local address configured with scope host, only resolutions for golbal and link addresses are replied.  
   4-7 - reserved  
   8 - do not reply for all local addresses  

在RealServers上，VIP配置在本地回环接口lo上。如果回应给Client的数据包路由到了eth0接口上，则arp通告或请应该通过eth0实现，因此，需要在sysctl.conf文件中定义如下配置：
</code></pre>

<pre><code>#vim /etc/sysctl.conf
net.ipv4.conf.eth0.arp_ignore = 1
net.ipv4.conf.eth0.arp_announce = 2
net.ipv4.conf.all.arp_ignore = 1
net.ipv4.conf.all.arp_announce = 2
</code></pre>

<pre><code>
 以上选项需要在启用VIP之前进行，否则，则需要在Drector上清空arp表才能正常使用LVS。

到 达Director的数据包首先会经过PREROUTING，而后经过路由发现其目标地址为本地某接口的地址，因此，接着就会将数据包发往 INPUT(LOCAL_IN HOOK)。此时，正在运行内核中的ipvs（始终监控着LOCAL_IN HOOK）进程会发现此数据包请求的是一个集群服务，因为其目标地址是VIP。于是，此数据包的本来到达本机(Director)目标行程被改变为经由 POSTROUTING HOOK发往RealServer。这种改变数据包正常行程的过程是根据IPVS表(由管理员通过ipvsadm定义)来实现的。

如果有 多台Realserver，在某些应用场景中，Director还需要基于“连接追踪”实现将由同一个客户机的请求始终发往其第一次被分配至的 Realserver，以保证其请求的完整性等。其连接追踪的功能由Hash table实现。Hash table的大小等属性可通过下面的命令查看：
</code></pre>

<pre><code># ipvsadm -lcn
</code></pre>

<pre><code>
为了保证其时效性，Hash table中“连接追踪”信息被定义了“生存时间”。LVS为记录“连接超时”定义了三个计时器：
 1、空闲TCP会话；  
 2、客户端正常断开连接后的TCP会话；  
 3、无连接的UDP数据包（记录其两次发送数据包的时间间隔）；  

上面三个计时器的默认值可以由类似下面的命令修改，其后面的值依次对应于上述的三个计时器：
</code></pre>

<pre><code># ipvsadm --set 28800 30 600
</code></pre>

<pre><code>
数据包在由Direcotr发往 Realserver时，只有目标MAC地址发生了改变(变成了Realserver的MAC地址)。Realserver在接收到数据包后会根据本地路 由表将数据包路由至本地回环设备，接着，监听于本地回环设备VIP上的服务则对进来的数据库进行相应的处理，而后将处理结果回应至RIP，但数据包的原地 址依然是VIP。

##### ipvs的持久连接：

无论基于什么样的算法，只要期望源于同一个客户端的请求都由同一台Realserver响应时，就需要用到持久连接。比如，某一用户连续打开了三个telnet连接请求时，根据RR算法，其请求很可能会被分配至不同的Realserver，这通常不符合使用要求。

2、IPVS/DR

Director:

IP分配  
VIP=192.168.0.210  
RIP1=192.168.0.221  
RIP2=192.168.0.222  

 1、下载安装ipvsadm
</code></pre>

<pre><code>yum install ipvsadm
</code></pre>

<pre><code>
 2、编写并运行脚本（LVS服务器的脚本）

 vim director.sh
</code></pre>

<pre><code>#!/bin/bash
#
# LVS script for VS/DR
#
. /etc/rc.d/init.d/functions
#
VIP=192.168.0.210
RIP1=192.168.0.221
RIP2=192.168.0.222
PORT=80
#
case "$1" in
start)  
    /sbin/ifconfig eth0:1 $VIP broadcast $VIP netmask 255.255.255.255 up
    /sbin/route add -host $VIP dev eth0:1
    # Since this is the Director we must be able to forward packets
    echo 1 &gt; /proc/sys/net/ipv4/ip_forward
    # Clear all iptables rules.
    /sbin/iptables -F
    # Reset iptables counters.
    /sbin/iptables -Z
    # Clear all ipvsadm rules/services.
    /sbin/ipvsadm -C
    # Add an IP virtual service for VIP 192.168.0.219 port 80
    # In this recipe, we will use the round-robin scheduling method.
    # In production, however, you should use a weighted, dynamic scheduling method.
    /sbin/ipvsadm -A -t $VIP:80 -s wlc
    # Now direct packets for this VIP to
    # the real server IP (RIP) inside the cluster
    /sbin/ipvsadm -a -t $VIP:80 -r $RIP1 -g -w 1
    /sbin/ipvsadm -a -t $VIP:80 -r $RIP2 -g -w 2
    /bin/touch /var/lock/subsys/ipvsadm &amp;&gt; /dev/null
;;
stop)
    # Stop forwarding packets
    echo 0 &gt; /proc/sys/net/ipv4/ip_forward
    # Reset ipvsadm
    /sbin/ipvsadm -C
    # Bring down the VIP interface
    /sbin/ifconfig eth0:1 down
    /sbin/route del $VIP                              
    /bin/rm -f /var/lock/subsys/ipvsadm                                                                   
    echo "ipvs is stopped..."
;;
status)
    if [ ! -e /var/lock/subsys/ipvsadm ]; then
        echo "ipvsadm is stopped ..."
    else
        echo "ipvs is running ..."
        ipvsadm -L -n
    fi
;;
*)
    echo "Usage: $0 {start|stop|status}"
;;
esac
</code></pre>

<pre><code>
3、给脚本加权限，并执行
</code></pre>

<pre><code>chmod 755  /etc/rc.d/init.d/functions
chmod +x director.sh
./director.sh start
</code></pre>

<pre><code>
4、配置后端的WEB服务器脚本

vim realserver.sh
</code></pre>

<pre><code>#!/bin/bash
#
# Script to start LVS DR real server.
# description: LVS DR real server
#
.  /etc/rc.d/init.d/functions
VIP=192.168.0.210
host=`/bin/hostname`
case "$1" in
start)
    # Start LVS-DR real server on this machine.
    /sbin/ifconfig lo down
    /sbin/ifconfig lo up
    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce
    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore
    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce
    /sbin/ifconfig lo:0 $VIP broadcast $VIP netmask 255.255.255.255 up
    /sbin/route add -host $VIP dev lo:0
;;
stop)
    # Stop LVS-DR real server loopback device(s).
    /sbin/ifconfig lo:0 down
    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce
    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore
    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce
;;
status)
    # Status of LVS-DR real server.
    islothere=`/sbin/ifconfig lo:0 | grep $VIP`
    isrothere=`netstat -rn | grep "lo:0" | grep $VIP`
    if [ ! "$islothere" -o ! "isrothere" ];then
        # Either the route or the lo:0 device
        # not found.
        echo "LVS-DR real server Stopped."
    else
        echo "LVS-DR real server Running."
    fi
;;
*)
    # Invalid entry.
    echo "$0: Usage: $0 {start|status|stop}"
    exit 1
;;
esac
</code></pre>

<pre><code>
5、给脚本加权限，并执行
</code></pre>

<pre><code>chmod 755  /etc/rc.d/init.d/functions
chmod +x realserver.sh
./realserver.sh start
</code></pre>

<pre><code>
IPvsadm 的用法和格式如下：
</code></pre>

<pre><code>ipvsadm -A|E -t|u|f virutal-service-address:port [-s scheduler] [-p [timeout]] [-M netmask]
ipvsadm -D -t|u|f virtual-service-address
ipvsadm -C
ipvsadm -R
ipvsadm -S [-n]
ipvsadm -a|e -t|u|f service-address:port -r real-server-address:port [-g|i|m] [-w weight]
ipvsadm -d -t|u|f service-address -r server-address
ipvsadm -L|l [options]
ipvsadm -Z [-t|u|f service-address]
ipvsadm --set tcp tcpfin udp
ipvsadm --start-daemon state [--mcast-interface interface]
ipvsadm --stop-daemon
ipvsadm -h
命令选项解释：
有两种命令选项格式，长的和短的，具有相同的意思。在实际使用时，两种都可以。
-A --add-service 在内核的虚拟服务器表中添加一条新的虚拟服务器记录。也就是增加一台新的虚拟服务器。
-E --edit-service 编辑内核虚拟服务器表中的一条虚拟服务器记录。  修改定义过的集群服务
-D --delete-service 删除内核虚拟服务器表中的一条虚拟服务器记录。
-C --clear 清除内核虚拟服务器表中的所有记录。
-R --restore 恢复虚拟服务器规则
-S --save 保存虚拟服务器规则，输出为-R 选项可读的格式
-a --add-server 在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。也就是在一个虚拟服务器中增加一台新的真实服务器
-e --edit-server 编辑一条虚拟服务器记录中的某条真实服务器记录
-d --delete-server 删除一条虚拟服务器记录中的某条真实服务器记录
-L|-l --list 显示内核虚拟服务器表 userver 列表；
-Z --zero 虚拟服务表计数器清零（清空当前的连接数量等）
--set tcp tcpfin udp 设置连接超时值
--start-daemon 启动同步守护进程。他后面可以是master 或backup，用来说明LVS Router 是master 或是backup。在这个功能上也可以采用keepalived 的VRRP 功能。
--stop-daemon 停止同步守护进程
-h --help 显示帮助信息
其他的选项:
-t --tcp-service service-address 说明虚拟服务器提供的是tcp 的服务[vip:port] or [real-server-ip:port]
-u --udp-service service-address 说明虚拟服务器提供的是udp 的服务[vip:port] or [real-server-ip:port]
-f --fwmark-service fwmark 说明是经过iptables 标记过的服务类型。通常用于将两个或两个以上的服务绑定为一个服务进行处理时使用；
-s --scheduler scheduler 使用的调度算法，有这样几个选项 rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,默认的调度算法是：wlc.
-p --persistent [timeout] 持久稳固的服务。这个选项的意思是来自同一个客户的多次请求，将被同一台真实的服务器处理。timeout 的默认值为300 秒。 持久连接；
-M --netmask netmask persistent granularity mask
-r --real-server server-address 真实的服务器[Real-Server:port]
-g --gatewaying 指定LVS 的工作模式为直接路由模式（也是LVS 默认的模式） DR模型
-i --ipip 指定LVS 的工作模式为隧道模式
-m --masquerading 指定LVS 的工作模式为NAT 模式
-w --weight weight 真实服务器的权值
--mcast-interface interface 指定组播的同步接口
-c --connection 显示LVS 目前的连接 如：ipvsadm -L -c
--timeout 显示tcp tcpfin udp 的timeout 值 如：ipvsadm -L --timeout
--daemon 显示同步守护进程状态
--stats 显示统计信息 ipvsadm –Ln  --state 总共的数量
--rate 显示速率信息 ipvsadm –Ln  --rete 平均值
--sort 对虚拟服务器和真实服务器排序输出
--numeric -n 输出IP 地址和端口的数字形式
</code></pre>

<pre><code>
 集群相关的命令参数：
</code></pre>

<pre><code>-A --add-service 在内核的虚拟服务器表中添加一条新的虚拟服务器记录。也就是增加一台新的虚拟服务器。
-t --tcp-service service-address 说明虚拟服务器提供的是tcp 的服务[vip:port] or [real-server-ip:port]
-u --udp-service service-address 说明虚拟服务器提供的是udp 的服务[vip:port] or [real-server-ip:port]
-s --scheduler scheduler 使用的调度算法，有这样几个选项 rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,默认的调度算法是：wlc.
-p --persistent [timeout] 持久稳固的服务。这个选项的意思是来自同一个客户的多次请求，将被同一台真实的服务器处理。timeout 的默认值为300 秒。 持久连接；
-E --edit-service 编辑内核虚拟服务器表中的一条虚拟服务器记录。  修改定义过的集群服务
-D ：删除指定集群服务
</code></pre>

<pre><code>
RS相关的命令参数：
</code></pre>

<pre><code>-a --add-server 在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。也就是在一个虚拟服务器中增加一台新的真实服务器         向指定的CS中添加RS
-r --real-server server-address 真实的服务器[Real-Server:port]，只有支持端口映射的LVS类型才允许此处使用跟集群服务中不同的端口
</code></pre>

<pre><code>
LVS 类型：
</code></pre>

<pre><code>-g ： gateway，DR # 指定集群类型为LVS/DR
-i ipip，TUN  # 指定集群类型为LVS/TUN
-m：masquerade，NAT # 指定集群类型为 NAT
-w：指定RS权重：
-e：修改指定的RS属性
-d ：从指定的集群服务中删除某RS
</code></pre>

<pre><code class="">
##### LVS的持久连接：

持久连接即是不考虑LVS的转发方法，确保所有来自同一个用户的连接转发到同一个RealServer上

lvs持久连接适用于大部分调度算法。当某一种请求需要定向到一个real  server 时，就要用到持久连接
一般应用到：ssl（http.https等），ftp。。

-p  //表示此连接为持久连接  
N  //表示维持此持久连接的时间。默认6分钟。当超过这个时间后，如果网页还没有关掉，仍处于激活状态，重新复位时间为2分钟。  
持久连接的类型：  
1.PCC(persistent client connector,持久用户连接)同一个用户所有的请求在超时范围之内都被定位到同一个RealServer上，这个时候在指定端口的时候使用的是0端口，就是所有的请求都转发出去。  
2.PPC(persistent port connector)用户的所有请求在超时范围内按照端口定位到不同的RS上。  
3.防火墙标记：把相关联的端口在防火墙上打上同样的标记，用户在访问两个相关联的服务的时候，就会定位到同一个RealServer上。  
4.FTP connection：由于ftp使用的是两个端口号，所以需要单独列出来。  

A.PCC实例：
</code></pre>

<pre><code>Directory-------RealServer1(192.168.1.11)
       |
       |____RealServer2(192.168.1.12)
VIP=192.168.1.10
</code></pre>

<pre><code>
Directory上的配置：
</code></pre>

<pre><code>ifconfig eth0 192.168.1.9/24
ifconfig eth0:0 192.168.1.10 broadcast 192.168.1.10 netmask 255.255.255.255 up
route add -host 192.168.1.10 dev eth0:0
echo 1 &gt;/proc/sys/net/ipv4/ip_forward
ipvsadm -A　-t 192.168.1.10:0 -s rr -p 600
ipvsadm -a -t 192.168.1.10:0 -r 192.168.1.11:0 -g
ipvsadm -a -t 192.168.1.10:0 -r 192.168.1.12:0 -g
</code></pre>

<pre><code>
RealServer1上的配置：
</code></pre>

<pre><code>ifconfig eth0 192.168.1.11/24
ifconfig lo:0 192.168.1.10 broadcast 192.168.1.10 netmask 255.255.255.255 up
route add -host 192.168.1.10 dev lo:0
echo 1 &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
echo 1 &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
echo 2 &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
echo 2 &gt;/proc/sys/net/ipv4/conf/all/arp_announce
yum install httpd
echo "rs1" &gt; /var/www/html/index.html
service httpd start
</code></pre>

<pre><code>
RealServer2上的配置：
</code></pre>

<pre><code>ifconfig eth0 192.168.1.12/24
ifconfig lo:0 192.168.1.10 broadcast 192.168.1.10 netmask 255.255.255.255 up
route add -host 192.168.1.10 dev lo:0
echo 1 &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
echo 1 &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
echo 2 &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
echo 2 &gt;/proc/sys/net/ipv4/conf/all/arp_announce
yum install httpd
echo "rs2" &gt; /var/www/html/index.html
service httpd start
</code></pre>

<pre><code>
在浏览其中输入 http://192.168.1.80 然后刷新页面，可以看到页面一直不变,然后我们再使用ssh登录到192.168.1.10，使用ifconfig查看，和网页所在的RealServer同样，实验完成！

B.PPC就是根据服务的不同，定向到不同的RealServer上，在Directory上多写几个ipvsadm指向，注意端口要区分开来就行了

C.防火墙标记的持久连接

依然是上面的图
两个RealServer配置不变
在Directory上重新配置：
</code></pre>

<pre><code>ipvsadm -C　／／清空ipvs表
iptables -t mangle -A PREROUTING -d 192.168.1.10 -p tcp --dport 80 -j MARK --set-mark 10  把目的地为1982.168.1.10:80标记为10
ipvsadm -A -f 10 -s rr -p 60  //使用上面标记的10定义集群服务
ipvsadm -a -f 10 -r 192.168.1.11 -g //为集群定义RealServer
ipvsadm -a -f 10 -r 192.168.1.12 -g
</code></pre>

<pre><code>
测试：
在浏览其中输入 http://192.168.1.10 可以访问到网页，但是如果使用ssh连接192.168.1.10的话，就只能呗定向到192.168.1.12上也就是Directory上，实验完成

D.使用防火墙标记实现http&amp;&amp;https姻亲关系：

依然使用上面的拓扑图：

![](/images/kernel/2015-07-15-6.png)  

1.首先在RS上做证书
</code></pre>

<pre><code>yum install mod_ssl
cd /etc/pki/tls/certs
make httpd.pem  //在设置的时候，Common Name设置和Directory的主机名一样就行了
mkdir /etc/httpd/ssl
cp httpd.pem /etc/httpd/ssl
vim /etc/httpd/conf.d/ssl.conf
    SSLCertificateFile /etc/httpd/ssl/httpd.pem
    SSLCertificateKeyFile /etc/httpd/ssl/httpd.pem
    ServerName node1.a.org:443  //我的Directory的主机名是node1.a.org
service httpd restart
</code></pre>

<pre><code>
2.其他的配置和上面一样，同样RealServer2上也采取同样的配置，我这里就不演示了

3.Directory上的配置如下：

只需要在iptables上多添加一条命令如下
</code></pre>

<pre><code># iptables -t mangle -A PREROUTING -d 192.168.1.10 -p tcp --dport 443 -j MARK --set-mark 10 
//这里的标记和http的80端口的标记是一样的，这个时候在访问的时候，就会建立姻亲关系，其他的配置和C的配置一样，不多演示了
</code></pre>

<pre><code>测试：在浏览器中输入 http://192.168.1.80 和 https://192.168.1.80 发现访问的是同一个页面，就证明成功啦！


因为LVS自身本没有多后端real server 做健康状态检测的功能所以： 
### 编写健康状态监测脚本：

LVS负载均衡器本身是没有对后端服务器做健康状态监测的功能的；所以我们可以编写一个小小的脚本来完成这个功能; 注释：这些脚本的列子很粗糙，只是让你们了解整个过程是怎样的；

健康状态监测脚本实例：

RS健康状态检查脚本示例第一版：
</code></pre>

<pre><code>#!/bin/bash
#
VIP=192.168.10.3
CPORT=80
FAIL_BACK=127.0.0.1
FBSTATUS=0
RS=("192.168.10.7" "192.168.10.8")
RSTATUS=("1" "1")
RW=("2" "1")
RPORT=80
TYPE=g
add() {
    ipvsadm -a -t $VIP:$CPORT -r $1:$RPORT -$TYPE -w $2
    [ $? -eq 0 ] &amp;&amp; return 0 || return 1
}
del() {
    ipvsadm -d -t $VIP:$CPORT -r $1:$RPORT
    [ $? -eq 0 ] &amp;&amp; return 0 || return 1
}
while :; do
    let COUNT=0
    for I in ${RS[*]}; do
        if curl --connect-timeout 1 http://$I &amp;&gt; /dev/null; then
            if [ ${RSTATUS[$COUNT]} -eq 0 ]; then
     add $I ${RW[$COUNT]}
     [ $? -eq 0 ] &amp;&amp; RSTATUS[$COUNT]=1
            fi
        else
            if [ ${RSTATUS[$COUNT]} -eq 1 ]; then
     del $I
     [ $? -eq 0 ] &amp;&amp; RSTATUS[$COUNT]=0
            fi
        fi
        let COUNT++
    done
    sleep 5
done
</code></pre>

<pre><code>
RS健康状态检查脚本示例第二版：
</code></pre>

<pre><code>#!/bin/bash
#
VIP=192.168.10.3
CPORT=80
FAIL_BACK=127.0.0.1
RS=("192.168.10.7" "192.168.10.8")
declare -a RSSTATUS
RW=("2" "1")
RPORT=80
TYPE=g
CHKLOOP=3
LOG=/var/log/ipvsmonitor.log
addrs() {
    ipvsadm -a -t $VIP:$CPORT -r $1:$RPORT -$TYPE -w $2
    [ $? -eq 0 ] &amp;&amp; return 0 || return 1
}
delrs() {
    ipvsadm -d -t $VIP:$CPORT -r $1:$RPORT
    [ $? -eq 0 ] &amp;&amp; return 0 || return 1
}
checkrs() {
    local I=1
    while [ $I -le $CHKLOOP ]; do
        if curl --connect-timeout 1 http://$1 &amp;&gt; /dev/null; then
            return 0
        fi
        let I++
    done
    return 1
}
initstatus() {
    local I
    local COUNT=0;
    for I in ${RS[*]}; do
        if ipvsadm -L -n | grep "$I:$RPORT" &amp;&amp; &gt; /dev/null ; then
            RSSTATUS[$COUNT]=1
        else
            RSSTATUS[$COUNT]=0
        fi
    let COUNT++
    done
}
initstatus
while :; do
    let COUNT=0
    for I in ${RS[*]}; do
        if checkrs $I; then
            if [ ${RSSTATUS[$COUNT]} -eq 0 ]; then
     addrs $I ${RW[$COUNT]}
     [ $? -eq 0 ] &amp;&amp; RSSTATUS[$COUNT]=1 &amp;&amp; echo "`date +'%F %H:%M:%S'`, $I is back." &gt;&gt; $LOG
            fi
        else
            if [ ${RSSTATUS[$COUNT]} -eq 1 ]; then
     delrs $I
     [ $? -eq 0 ] &amp;&amp; RSSTATUS[$COUNT]=0 &amp;&amp; echo "`date +'%F %H:%M:%S'`, $I is gone." &gt;&gt; $LOG
            fi
        fi
        let COUNT++
    done
    sleep 5
done
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVS简介及使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/15/kernel-net-lvs-start/"/>
    <updated>2015-07-15T14:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/15/kernel-net-lvs-start</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/codebean/archive/2011/07/25/2116043.html">http://www.cnblogs.com/codebean/archive/2011/07/25/2116043.html</a></p>

<h4>一、LVS是什么？</h4>

<p>LVS的英文全称是Linux Virtual Server，即Linux虚拟服务器。它是我们国家的章文嵩博士的一个开源项目。在linux内存2.6中，它已经成为内核的一部分，在此之前的内核版本则需要重新编译内核。</p>

<h4>二、LVS能干什么？</h4>

<p>LVS主要用于多服务器的负载均衡。它工作在网络层，可以实现高性能，高可用的服务器集群技术。它廉价，可把许多低性能的服务器组合在一起形成一个超级服务器。它易用，配置非常简单，且有多种负载均衡的方法。它稳定可靠，即使在集群的服务器中某台服务器无法正常工作，也不影响整体效果。另外可扩展性也非常好。</p>

<h4>三、工作原理</h4>

<p><img src="/images/kernel/2015-07-15.png" alt="" /></p>

<p>如上图，LVS可分为三部分：</p>

<p>1.Load Balancer：这是LVS的核心部分，它好比我们网站MVC模型的Controller。它负责将客户的请求按照一定的算法分发到下一层不同的服务器进行处理，自己本身不做具体业务的处理。另外该层还可用监控下一层的状态，如果下一层的某台服务器不能正常工作了，它会自动把其剔除，恢复后又可用加上。该层由一台或者几台Director Server组成。</p>

<p>2.Server Array：该层负责具体业务。可有WEB Server、mail Server、FTP Server、DNS Server等组成。注意，其实上层的Director Server也可以当Real server用的。</p>

<p>3.Shared Storage：主要是提高上一层数据和为上一层保持数据一致。</p>

<h4>四、负载均衡机制</h4>

<p>前面我们说了LVS是工作在网络层。相对于其它负载均衡的解决办法，比如DNS域名轮流解析、应用层负载的调度、客户端的调度等，它的效率是非常高的。LVS的通过控制IP来实现负载均衡。IPVS是其具体的实现模块。IPVS的主要作用：安装在Director Server上面，在Director Server虚拟一个对外访问的IP（VIP）。用户访问VIP，到达Director Server，Director Server根据一定的规则选择一个Real Server，处理完成后然后返回给客户端数据。这些步骤产生了一些具体的问题，比如如何选择具体的Real Server，Real Server如果返回给客户端数据等等。IPVS为此有三种机制：</p>

<p>1.VS/NAT(Virtual Server via Network Address Translation)，即网络地址翻转技术实现虚拟服务器。当请求来到时，Diretor server上处理的程序将数据报文中的目标地址（即虚拟IP地址）改成具体的某台Real Server,端口也改成Real Server的端口，然后把报文发给Real Server。Real Server处理完数据后，需要返回给Diretor Server，然后Diretor server将数据包中的源地址和源端口改成VIP的地址和端口，最后把数据发送出去。由此可以看出，用户的请求和返回都要经过Diretor Server，如果数据过多，Diretor Server肯定会不堪重负。</p>

<p>2.VS/TUN（Virtual Server via IP Tunneling）,即IP隧道技术实现虚拟服务器。它跟VS/NAT基本一样，但是Real server是直接返回数据给客户端，不需要经过Diretor server,这大大降低了Diretor server的压力。</p>

<p>3.VS/DR（Virtual Server via Direct Routing），即用直接路由技术实现虚拟服务器。跟前面两种方式，它的报文转发方法有所不同，VS/DR通过改写请求报文的MAC地址，将请求发送到Real Server，而Real Server将响应直接返回给客户，免去了VS/TUN中的IP隧道开销。这种方式是三种负载调度机制中性能最高最好的，但是必须要求Director Server与Real Server都有一块网卡连在同一物理网段上。</p>

<h4>五、负载调度算法</h4>

<p>前面我们都知道Director Server要选择不同的Real server，那么它具体的如果选择Real Server以达到负载均衡的呢，IPVS实现了八种调度方法,具体算法可以查看官网或者百度，这里就不一一列出
了。官网：www.linuxvirtualserver.org。</p>

<h4>六、具体配置操作</h4>

<p>首先我们这里有三台机子，IP分别是192.168.132.30（Diretor server）,192.168.132.64(Real server 1)，192.168.132.68(real server 2)。在real server 1和2上面，已经配置好了web服务，并且我们假设还有一个对外访问的虚拟IP是192.168.132.254（VIP）。另外在Diretor server上面已经安装好了ipvsadm。</p>

<p>下面我们VS/DR介绍详细的配置过程。</p>

<h4>Diretor server上面的配置：</h4>

<pre><code>    //首先在Director Server上绑定一个虚拟IP（也叫VIP），此IP用于对外提供服务：
    ifconfig eth0:0 192.168.132.254 broadcast 192.168.132.254 netmask 255.255.255.255 up

    //给设备eth0:0指定一条路由
    route add -host 192.168.132.254 dev eth0:0

    //启用系统的包转发功能
    echo "1"&gt;/proc/sys/net/ipv4/ip_forward

    //清楚ipvsadm以前的设置
    ipvsadm -C

    //添加一个新的虚拟IP记录192.168.132.254，其持续服务之间是120秒 
    ipvsadm -A -t 192.168.132.254:80 -s rr -p 120

    //在新增的虚拟IP记录中新增两天real server记录，-g即为使用VS/DR模式
    ipvsadm -a -t 192.168.132.254:80 -r 192.168.132.64:80 -g 
    ipvsadm -a -t 192.168.132.254:80 -r 192.168.132.68:80 -g

    //启用LVS服务
    ipvsadm
</code></pre>

<h4>两台real server上的配置：</h4>

<pre><code>    /*在回环设备上绑定了一个虚拟IP地址，并设定其子网掩码为255.255.255.255，与Director Server上的虚拟IP保持互通*/
    ifconfig lo:0 192.168.132.254 broadcast 192.168.132.254 netmask 255.255.255.255 up
    route add -host 192.168.132.254 dev lo:0

    //禁用本机的ARP请求
    echo "1" &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
    echo "1" &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
    echo "2" &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
    echo "2" &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</code></pre>

<p>之后在其他客户端机子上面，访问<a href="http://192.168.132.254/%EF%BC%8C%E5%88%99%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%BB%93%E6%9E%9C%E4%BA%86%E3%80%82">http://192.168.132.254/%EF%BC%8C%E5%88%99%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%BB%93%E6%9E%9C%E4%BA%86%E3%80%82</a></p>
]]></content>
  </entry>
  
</feed>
