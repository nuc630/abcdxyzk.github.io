<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android~me722 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/android~me722/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-14T22:08:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[moto sbf包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-sbf/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-sbf</id>
    <content type="html"><![CDATA[<p>解出的CG35.smg或CG35.img是boot.img, boot.img可以按照 <a href="/blog/2014/12/22/android-img/">这里</a> 的方式编辑</p>

<p><span style="color:red">注意： motorola只有一些新的机型有方法解bootloader锁，沒解锁的bootloader会验证boot、recovery等分区的完整性（两个分区都是8M），不管有用的数据还是没用的数据都加入验证（好像是隔段距离取点数据做验证，因为替换最后100字节可以刷成功，替换多点就失败。可是实际有用的boot.img大小才4M左右）。</span></p>

<p>MOTO X解BL锁教程  <a href="http://bbs.gfan.com/android-6726986-1-1.html">http://bbs.gfan.com/android-6726986-1-1.html</a></p>

<h4>1 命令行解包</h4>

<pre><code>./sbf_flash -x OLYFR_U4_1.8.3_SIGNED_OLPSATTSPE_P013_HWolympus_1g_Service1FF.sbf
</code></pre>

<p>提取到一堆img文件</p>

<h4>2神器：MotoAndroidDepacker</h4>

<p><a href="http://www.veryhuo.com/down/html/47416.html">http://www.veryhuo.com/down/html/47416.html</a></p>

<p>就是这个软件，可以把moto的底包解开。<br/>
使用很简单：<br/>
1 点open from file菜单打开sbf底包，然后点split to files就解开了<br/>
2 将要打包的文件拷到单独的文件夹A，然后点open files，选择刚刚的文件夹A，然后点compile file，就会在文件夹A里面生成result\firmware.sbf文件</p>

<p>解包出的文件解释：
<code>
CG31/CDT是描述各文件版本号的, 相当于注释文件
CG33/CDROM是个ISO文件, 可以用WinRAR之类的打开, 包含PC端程序(MotoHelperAgent)
CG35/Boot包含了系统内核&lt;-boot-only就是这个
CG39/system分区
CG40/cache缓存分区(国行多余的部分), 显然里面什么都没有
CG45/Baseband基带固件
CG47/Recovery就是官方恢复, 里面也包含独立的内核, 但不用于启动
CG61/devtree包含设备描述符
RAMDLD/RamDisk&amp;tmpfs, Android/Linux启动初始化的一部分, 不涉及具体设备
</code></p>

<p>这篇感觉没用 <a href="http://bbs.ihei5.com/thread-5883-1-1.html">http://bbs.ihei5.com/thread-5883-1-1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ME722(A953)刷机教程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-me722-flash/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-me722-flash</id>
    <content type="html"><![CDATA[<h5>ROM</h5>

<p>二楼刷机包 <a href="http://bbs.gfan.com/android-2448659-1-1.html">http://bbs.gfan.com/android-2448659-1-1.html</a></p>

<p>这里的可以直接下 <a href="http://bbs.gfan.com/android-4905385-1-1.html">http://bbs.gfan.com/android-4905385-1-1.html</a></p>

<p>这个包还行 <a href="http://115.com/file/bw6u2lnn">http://115.com/file/bw6u2lnn</a></p>

<h5>工具</h5>

<p>RSDLite5.5汉化版.rar <a href="http://dl.dbank.com/c05d7hs3mo">http://dl.dbank.com/c05d7hs3mo</a></p>

<p>记得装USB驱动</p>

<h3>教程</h3>

<p>[贴自] <a href="http://moto.zol.com.cn/209/295_2084002.html">http://moto.zol.com.cn/209/295_2084002.html</a></p>

<h4>1</h4>

<p>按住X键再按开机键，这时他会出现一个小机器人，按@键 进入recovery模式，双wipe</p>

<h4>2</h4>

<p>手机关机状态先按住拍照键+音量增大键+开机键 进入bootloader模式</p>

<h4>3</h4>

<p>把手机与电脑通过USB线相连，并打开RSD刷机工具，如图</p>

<p><img src="/images/system/2014-12-22-11.jpg" alt="" /></p>

<h4>4</h4>

<p>然后选择刚才下载的底包导入，导入后按start开始刷机，直到手机自动开机，开机后请请再次关闭手机，之后再开机。</p>

<p><img src="/images/system/2014-12-22-12.jpg" alt="" /></p>

<hr />

<p><a href="http://http://anzhuo.paojiao.cn/android/allinfo/1/56998.html">http://http://anzhuo.paojiao.cn/android/allinfo/1/56998.html</a></p>

<p>首先我们要明确，就是BL等级一旦升上去，就再也不能降下来了。</p>

<p>如果降刷，导致的必然结果就是黑屏不能开机，甚至连红色LOGO都看不到，也看不到开机键+音量上的刷机界面。</p>

<p>遇到这种情况，只能通过用RSD盲刷BL和原来一样的底包，来重新开机。</p>

<p>盲刷的具体方法是：</p>

<p>1.拔下电池</p>

<p>2.按住音量加，同时放入电池</p>

<p>3.连接数据线</p>

<p>4.打开RSD，直到RSD识别到手机</p>

<p>5.刷你上次刷的底包去吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完整版刷android内核及定制内核模块攻略]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-kernel-2/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-kernel-2</id>
    <content type="html"><![CDATA[<p>blog.sina.com.cn/s/blog_706845a5010129da.html</p>

<p>终于很恶心的把流程走通了</p>

<p>首先列出需要的东西，从网上搜一下就能搜到了：<br/>
&mdash;&mdash;&mdash;源码类&mdash;&mdash;&mdash;&ndash;<br/>
1. kernel source<br/>
2. .config文件</p>

<p>&mdash;&mdash;&mdash;工具类&mdash;&mdash;&mdash;&ndash;<br/>
1. 交叉编译器arm-eabi-<br/>
2. fastboot,adb等android工具<br/>
3. mkbootimg用于解包boot.img使用</p>

<p>&mdash;&mdash;&mdash;脚本类&mdash;&mdash;&mdash;&ndash;<br/>
1. repack-bootimg.pl //不一定需要<br/>
2. unpack-bootimg.pl</p>

<h5>下面是完整版刷内核及内核模块攻略（基于恶心的Galaxy Nexus）</h5>

<h5>1. 配置交叉编译器等各种环境</h5>

<p>  1)下载交叉编译器：<br/>
  $ git clone <a href="https://android.googlesource.com/platform/prebuilt">https://android.googlesource.com/platform/prebuilt</a></p>

<p>  2)写入环境变量中：<br/>
  export PATH=&ldquo;/home/xxx/android-toolchain/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin:$PATH&rdquo;</p>

<h5>2. 编译内核</h5>

<p>  1)修改内核根目录下的Makefile(一劳永逸的方法&hellip;)：<br/>
<code>
        #ARCH           ?= $(SUBARCH)
        #CROSS_COMPILE  ?= $(CONFIG_CROSS_COMPILE:"%"=%)
        ARCH            ?= arm
        CROSS_COMPILE   ?= arm-eabi-
</code>
  2)从手机目录： /proc/下找到config.gz压缩文件，拿出来解压成.config，复制到内核源码根目录下<br/>
        很多情况下手机中没有config.gz，我们刷了N多的rom加内核才找到一个能正常跑并且里面有这个文件的内核&hellip;<br/>
        但是找到了可以一直使用，即使换了别的rom或者内核也没关系<br/>
        实在没有的话，看第三步。<br/>
  3)如果2)成功了，执行make menuconfig，看看该配置是否支持netfilter，如果不支持安下面的选上<br/>
<code>
        To use netfilter
        Networking support  -&gt; Networking options -&gt;  Network packet filtering framework (Netfilter)
        Choose related choices
</code>
  如果找到config.gz，执行make tuna_defconfig（这个是默认的德州仪器CPU的配置文件，理论上可用，但是我没有成功），然后同样看netfilter配置<br/>
  4)执行make -j 2<br/>
  5)完成编译，得到arch/arm/boot/zImage文件</p>

<h5>3. 将zImage扔到手机中</h5>

<p>  1)从手机中拿出boot.img，或者从刷入手机的rom或kernel中拿也可，总之拿到一个手机在用的boot.img<br/>
  2)执行前确保各个脚本permission正确，将boot.img,zImage,脚本unpack-bootimg.pl,可执行文件mkbootimg,放于同一个目录下。<br/>
  3)执行脚本com.sh：（com.sh内容如下），用于将zImage打包进boot.img形成我们自己的kernel：newtestboot.img<br/>
<code>
        ./unpack-bootimg.pl boot.img
        cd boot.img-ramdisk/
        find . | cpio -o -H newc | gzip &gt; ../ramdisk-repack.cpio.gz
        cd ..       
        ./mkbootimg --kernel zImage --ramdisk boot.img-ramdisk/ramdisk-repack.cpio.gz --base 0x30000000 -o newtestboot.img
</code></p>

<h5>4. 手机进入bootloader模式,利用fastboot刷入newtestboot.img</h5>

<p>  1)$ adb reboot bootloader<br/>
  2)$ fastboot boot newtestboot.img<br/>
        若出现permission denied，waiting for devices之类的问题，执行<br/>
        $ sudo vim /etc/udev/rules.d/51-android.rules<br/>
        在规则中添加<br/>
        若出现permission denied之类的错误，执行<br/>
        $ sudo vim /etc/udev/rules.d/51-android.rules<br/>
        在规则中添加：
<code>
            SUBSYSTEM=="usb", ATTRS{idVendor}=="0bb4", MODE="0666"
            SUBSYSTEM=="usb", SYSFS{idVendor}=="18d1", MODE="0666"
</code>
        这个的作用是将usb权限以及配置与adb或者fastboot配对，特别是fastboot由于是通过usb线刷的，必须保证usb口是匹配的。</p>

<h5>5. 此时不出意外就是完成了内核刷入，下面将内核模块加载进去就简单了</h5>

<h5>6. 编译内核模块</h5>

<p>  1)利用我们的内核源码作为头文件，交叉编译器作为编译器来编译内核模块，Makefile文件写法如下：
<code>
        KERNELDIR := /home/carelife/android_icecream/android_kernel/CyanogenMod
        PWD :=$(shell pwd)
        ARCH=arm
        CROSS_COMPILE=arm-eabi-
        CC=$(CROSS_COMPILE)gcc
        LD=$(CROSS_COMPILE)ld
        obj-m := netCatch.o
        modules:
                $(MAKE) -C $(KERNELDIR) ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_COMPILE) M=$(PWD) modules  
        clean:
                $(MAKE) -C $(KERNELDIR) M=$(PWD) clean
</code></p>

<h5>7. 加载KM</h5>

<pre><code>  1)$ adb push /your_kernel_module_position /sdcard/
  2)$ adb shell
        #cd sdcard
        #insmod your_kernel_module_name
</code></pre>

<h5>8. 查看debug信息</h5>

<p>  1)$ adb shell dmesg<br/>
        这个方法的实质是从手机IO缓存中读取print信息，输出到电脑屏幕上，所以是一个固定时间更新的静态查看信息的方法，十分不利于调试<br/>
  2)等待寻找其他debug方法&hellip;</p>
]]></content>
  </entry>
  
</feed>
