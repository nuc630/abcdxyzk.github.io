<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog~octopress | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/blog~octopress/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-11-08T23:51:40+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress优化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/25/octopress-5/"/>
    <updated>2014-11-25T23:34:33+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/25/octopress-5</id>
    <content type="html"><![CDATA[<h4>octopress优化</h4>

<p>能够让octopress在50篇文章下跑进5s，不优化要跑60s左右<br/>
300篇15s左右</p>

<h5>运行过程</h5>

<p>看octopress目录下的Rakefile，里面有generate，preview，watch等。<br/>
输入rake generate是就是按照Rakefile中<code>task :generate do</code>执行的。<br/>
最主要的两条：
<code>
    system "compass compile --css-dir #{source_dir}/stylesheets"
    system "jekyll build"
</code>
第一条是编译css，第二条是生成文章。</p>

<!--more-->


<p>第一条不知道如何优化，略过。<br/>
第二条接着执行到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/commands/build.rb<br/>
文件的init_with_program -> process -> build然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/command.rb文件的process_site然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb文件的process，<br/>
process代码如下：
<code>
    47     def process
    48       reset
    49       read
    50       generate
    51       render
    52       cleanup
    53       write
    54     end
</code>
这里的函数都在这个文件里，主要费时在generate和render。</p>

<h6>1. generate</h6>

<p>generate会执行octopress/plugins目录下的tag_generator.rb和category_generator.rb，<br/>
这两个文件的write_tag_indexes和write_category_indexes分别回构建tag和category的分类首页。<br/>
所以tag和category越多构建越慢。
<code>
    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:255:in `block in post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:224:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:100:in `write_category_index'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:112:in `block in write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `each'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:141:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:280:in `block in generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:50:in `process'
</code></p>

<h6>2. render</h6>

<pre><code>    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:249:in `block in pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:222:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:299:in `block in render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `render'
</code></pre>

<p>都是慢在octopress/plugins/rubypants.rb的to_html函数。</p>

<h5>优化</h5>

<h6>1、to_html函数的tokenize和gsub很慢。</h6>

<p>to_html函数只是把一些' &ldquo;之类的转成html，试了一下不执行to_html，diff出来差别不大，页面上显示也都还OK。单纯的&lt;在其他地方已经转好了。<br/>
所以octopress/plugins/octopress_filters.rb中不执行to_html</p>

<h6>2、每次计算侧边栏太慢</h6>

<p>所有页面都是按照其layout的格式找对应source/_layout/下的模板来生成的。<br/>
注意post.html和page.html的最后都有 <code>{ { include_array XXX } }</code>, 这就是说每个页面都要运行plugins/include_array.rb中的render(context)来生成侧边栏。<br/>
但是侧边栏应该是(?)都一样的。所以改成隔一定时间计算一次
<code>
     26     @@caltime = 0
     27     @@retstore = ""
     28     def render(context)
     29         if Time.now.to_f - @@caltime &lt; context.registers[:site].config['recaltime']
     30                 return @@retstore;
     31         end
     32         @@caltime = Time.now.to_f
    ...
     58       @@retstore = rtn
</code>
为什么要隔一段时间？因为在preview中有改动任何文件就会重新生成一次，这时侧边栏也要重新计算</p>

<h6>3、减小文件大小</h6>

<p>我的侧边栏有二级目录，整个侧边栏比较大，50篇时已经有20k。所以将侧边栏独立成一个文件，用js来load。<br/>
plugins/include_array.rb中加：
<code>
    59       fp = File.new('sidebar.html', 'w');
    60       fp.puts(rtn);
    61       fp.puts('&lt;script src="http://abcdxyzk.github.io/javascripts/category.js" type="text/javascript"&gt;&lt;/script&gt;');
    62       fp.puts('&lt;script type="text/javascript"&gt; hadOpenDiv();&lt;/script&gt;');
    63       fp.close();
</code>
source/<em>layout/post.html和source/</em>layout/page.html的最后部分改成：
<code>
    35 &lt;aside class="sidebar" id='load_sidebar'&gt;
    36 &lt;/aside&gt;
    37 &lt;script type="text/javascript"&gt;
    38   $('#load_sidebar').load('/sidebar.html');
    39 &lt;/script&gt;
</code>
因为source/index.html里也有 <code>{ { include_array XXX } }</code>，所以不用担心不执行plugins/include_array.rb。<br/>
问题1：就是"最近评论"要从_config.yml中的default_asides:中移到source/index.html中。因为js load进的文件中的document.write不执行了。这也就是为什么source/index.html不采用js load。如果是<code>&lt;aside&gt;</code>中增加div用来load的话，侧边栏缩到底部就没有三列的效果。<br/>
问题2：sidebar.html要写到主目录，source/sidebar.html中用ln软链接到sidebar.html。因为如果在watch状态直接写到source/目录的话，他就会再次认为文件有改变，又重新生成。造成在不断生成的死循环。细节是在Rakefile文件的generate和preview中先加软链接再运行其他
<code>
    56 task :generate do
    57   system('&gt;`pwd`/sidebar.html')
    58   system('ln -f -s `pwd`/sidebar.html `pwd`/source/sidebar.html')
</code></p>

<h5>优化效果</h5>

<p>在文件中加入时间输出代码
<code>
    p "    #{ __FILE__} line:#{__LINE__} time:#{Time.now.to_f}"
</code>
50篇文章，40个tag，61个category，运行如下：
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1416933869.1204205"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1416933870.019113"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1416933870.7509217"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1416933871.8838022"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1416933871.8838577"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1416933872.389736"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1416933872.4271524"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1416933873.8506286"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1416933873.9671116"
    "total = 4.846851825714111"
</code>
total = 4.846851825714111，不优化要60s左右。</p>

<p>300篇
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1426179501.0918927"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1426179502.0703895"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1426179503.376222"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1426179508.2033086"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1426179508.2033658"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1426179508.3304708"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1426179508.3851612"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1426179515.877446"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1426179516.2085445"
    "total = 15.116710424423218"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 加站长统计和站内搜索]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/20/octopress-4/"/>
    <updated>2014-11-20T18:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/20/octopress-4</id>
    <content type="html"><![CDATA[<h4>站长统计</h4>

<p>国内使用很广的CNZZ了，注册后，添加并验证你的网站就可以添加统计代码了，选好自己喜欢的样式，获得代码，可添加到source/_includes/custom/footer.html中。即可查看每天你的博客的流量
<code>
    &lt;script type="text/javascript"&gt;var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1253604690'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s95.cnzz.com/z_stat.php%3Fid%3D1253604690' type='text/javascript'%3E%3C/script%3E"));&lt;/script&gt;
</code></p>

<h4>站内搜索</h4>

<p>为了实现站内搜索(页面不跳转)，</p>

<!--more-->


<h5>需要到tapirgo.com注册你的站点，填入atom.xml的url和邮箱地址，tapirgo会生成一对token，我们只使用public token就够了。</h5>

<h5>打开_config.yml文件，加入tapir_token: your_token</h5>

<h5>修改simple_search为你的站点域名simple_search: your_domain</h5>

<h5>在source/javascripts/新建jquery-tapir.js，内容为</h5>

<pre><code>    (function($){
      var el;
      var settings = {};

      var methods = {
        init: function(options) {
          el = this;

          settings = {
                   token: false,
                   query_param: 'query'
                 };

          if (options) {
        $.extend(settings, options);
          }

          if (!settings.token || settings.query_param == '') {
        return this;
          }

          $.getJSON(
        'http://tapirgo.com/api/1/search.json?token=' + settings.token + '&amp;query=' + paramValue(settings.query_param) + '&amp;callback=?', function(data){
          if(settings['complete']) { settings.complete() }
          $.each(data, function(key, val) {
          document.getElementById('search_results').style.display="block";
          document.getElementById('search_results').style.height="100%";
          document.getElementById('search_results').style.overflow="hidden";
              var str1 = val.content;
              var str2 = str1.substr(1, 250);
              str2 = str2.substr(0, Math.min(str2.length, str2.lastIndexOf(" ")));
            el.append('&lt;div id="content" class="inner"&gt;&lt;article class="post"&gt;&lt;h2 class="title"&gt;&lt;a href="' + val.link + '"&gt;' + val.title + '&lt;/a&gt;&lt;/h2&gt;&lt;div class="entry-content"&gt;&lt;div class="date"&gt;Published on: ' + (val.published_on).substr(0,10) + '&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;' + str2 + '...&lt;/p&gt;&lt;br&gt;&lt;a href="' + val.link +'"&gt;Read on &amp;rarr;&lt;/a&gt;&lt;/article&gt;&lt;/div&gt;');
            if(key &gt;= (data.length-1)){
                el.append('&lt;div id="content" class="inner"&gt;&lt;center&gt;&lt;h2 style="border-bottom: 1px solid #ddd;"&gt;Result ends&lt;/h2&gt;&lt;/center&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;');
            }
          });
        }
          );

          return this;
        }
      };

      // Extract the param value from the URL.
      function paramValue(query_param) {
        var results = new RegExp('[\\?&amp;]' + query_param + '=([^&amp;#]*)').exec(window.location.href);
        return results ? results[1] : false;
      }

      $.fn.tapir = function(method) {
        if (methods[method]) {
          return methods[ method ].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || ! method) {
          return methods.init.apply(this, arguments);
        } else {
          $.error('Method ' +  method + ' does not exist on jQuery.tapir');
        }
      };

    })( jQuery );
</code></pre>

<h5>然后在source/search/index.html中</h5>

<pre><code>---
    layout: default
    ---
    &lt;h1 class="entry-title"&gt;&lt;center&gt;Search Results&lt;/center&gt;&lt;/h1&gt;
    &lt;div id="search_loading" style="margin: 40px 0"&gt;
        &lt;center&gt;&lt;img src="http://abcdxyzk.github.io/images/loading.gif"&gt;&lt;/center&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript" src="http://abcdxyzk.github.io/javascripts/jquery-tapir.js"&gt;&lt;/script&gt;
    &lt;div id="search_results" style="display:none"&gt;
    &lt;br&gt;
    &lt;/div&gt;
    &lt;script&gt;
         $('#search_results').tapir({
             'token': 'your_token',
             'complete' : function() { document.getElementById('search_loading').style.display="none"; }
         });
    &lt;/script&gt;
</code></pre>

<h5>更新source/_includes/navigation.html</h5>

<p>将原来的google搜索
<code>
    &lt;input type="hidden" name="q" value="site:smarterhjw.com" /&gt;
    &lt;input class="search" type="text" name="q" results="0" placeholder="Search"/&gt;
</code>
更改为
<code>
    &lt;input class="search" name="query" type="text" placeholder="Search..." x-webkit-speech /&gt;
</code>
最后rake generate，就可以了。 此时进行搜索，就不会再跳转到站外去了。</p>

<h5>可以修改一下搜索框展示</h5>

<pre><code>    --- a/sass/partials/_navigation.scss
    +++ b/sass/partials/_navigation.scss
    @@ -74,6 +74,7 @@ body &gt; nav {
           float: right;
           text-align: left;
           padding-left: .8em;
    +      padding-top: .35em;
           width: $sidebar-width-medium - $pad-medium*2 - $sidebar-pad-medium + 20px;
           .search {
         width: 93%;
    @@ -86,7 +87,7 @@ body &gt; nav {
           .search { width: 91%; }
         }
         fieldset.mobile-nav { display: none; }
    -    fieldset[role=search]{ width: 99%; }
    +    fieldset[role=search]{ width: 80%; }
       }
       @media only screen and (min-width: 992px) {
         form {
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress分类中使用二级目录]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-3/"/>
    <updated>2014-11-13T23:49:25+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-3</id>
    <content type="html"><![CDATA[<h4>1.修改plugins/category_list_tag.rb为</h4>

<pre><code>    # encoding: UTF-8
    module Jekyll
        class CategoryListTag &lt; Liquid::Tag
            def render(context)
                html = ""
                pre = ""
                divout = 0
                categories = context.registers[:site].categories.keys
                categories.sort.each do |category|
                    posts_in_category = context.registers[:site].categories[category].size
                    category_dir = context.registers[:site].config['category_dir']
                    cats = category.split(/~/)
                    if cats.size &gt; 1 and cats[0] == pre
                        if divout == 0
                            html &lt;&lt; "&lt;div id='#{pre}' class='divclass'&gt;"
                            divout = 1
                        end
                        html &lt;&lt; "&lt;li&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/?opendiv=#{pre}'&gt;#{cats[1]} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
                    else
                        pre = cats[0]
                        if divout &gt; 0
                            html &lt;&lt; "&lt;/div&gt;"
                            divout = 0
                        end
                        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='##' onmousedown=showDiv('#{pre}')&gt;#{category} &lt;/a&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;(#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
                    end
                end
                if divout &gt; 0
                    html &lt;&lt; "&lt;/div&gt;"
                    divout = 0
                end
                html
            end
        end
    end

    Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></pre>

<!--more-->


<h4>2.修改source/_includes/custom/asides/category_list.html为：注意去掉’\‘</h4>

<pre><code>    &lt;section&gt;
    &lt;h1&gt;Categories&lt;/h1&gt;
    &lt;head&gt;
    &lt;style type="text/css"&gt;

    .divclass
    {
        display:none;
        font-size:12px;
        position:relative;
        left:0px;
        top:0px;
        padding:0px 30px 0px 30px;
    }
    &lt;/style&gt;
    &lt;script language="javascript" type="text/javascript"&gt;

    function showDiv(divName)
    {
        if (document.getElementById(divName).style.display == "block")
            document.getElementById(divName).style.display = "none"; //隐藏层
        else
            document.getElementById(divName).style.display = "block"; //显示层
    }

    function GetRequest(name) {
        var url = location.search; //获取url中"?"符后的字串
        if (url.indexOf("?") != -1) {
            var str = url.substr(1);
            strs = str.split("&amp;");
            for(var i = 0; i &lt; strs.length; i ++) {
                if (name == strs[i].split("=")[0])
                return unescape(strs[i].split("=")[1]);
            }
        }
        return null;
    }
    &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div id="menu"&gt;
    &lt;ul&gt;
    {\% category_list \%}
    &lt;/ul&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;

    &lt;script language="javascript" type="text/javascript"&gt;
    var divname = GetRequest("opendiv");
    if (divname != null)
        showDiv(divname)
    &lt;/script&gt;
    &lt;/section&gt;
</code></pre>

<h4>3.使用二级标签的时候先写一个一级标签，写一个一级~二级标签，例如：</h4>

<pre><code> categories:
 - hello
 - hello~hi
</code></pre>

<h4>4.add</h4>

<h5>后来又改成了三级目录，显示调整，单列时间分类等。具体去看源码对应文件。</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress侧边栏添加内容]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-2/"/>
    <updated>2014-11-13T23:21:52+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-2</id>
    <content type="html"><![CDATA[<h4>1.添加about页面</h4>

<p>rake new_page[about]<br/>
会生成 source/about/index.markdown 文件。<br/>
编辑该文件的内容。<br/>
然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h4>2.增加链接</h4>

<p>在source/_includes/custom/asides创建blog_link.html，代码如下：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;link&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>    &lt;li&gt;
</span><span class='line'>        &lt;a href=http://hi.baidu.com/abcdxyzk target=_blank&gt;My&lt;/a&gt;
</span><span class='line'>    &lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/section&gt;</span></code></pre></td></tr></table></div></figure>
然后修改_config.yml文件在default_asides中加入custom/asides/blog_link.html。</p>

<!--more-->


<h4>3.支持评论</h4>

<p>Octopress自身不支持评论功能，不过我们可以使用第三方的评论系统，国外的有Disqus。下面介绍怎样在Octopress中使用Disqus。<br/>
首先需要在Disqus注册一个账号，登录后点击Add Disqus to your site，然后添加站点信息site name和url，记下右侧的name<br/>
然后在_config.yml文件中进行下面设置<br/>
<code>
    # Disqus Comments
    disqus_short_name: 为添加站点信息时的name
    disqus_show_comment_count: true
</code></p>

<h4>4.添加Categories侧边栏</h4>

<p>增加category_list插件<br/>
保存到 plugins/category_list_tag.rb：<br/>
<code>
    # encoding: UTF-8
    module Jekyll
        class CategoryListTag &lt; Liquid::Tag
            def render(context)
                html = ""
                categories = context.registers[:site].categories.keys
                categories.sort.each do |category|
                    posts_in_category = context.registers[:site].categories[category].size
                    category_dir = context.registers[:site].config['category_dir']
                    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://abcdxyzk.github.io/#{category_dir}/#{category.to_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
                end
                html
            end
        end
    end
    Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></p>

<p>注意：一定要在文件的开始添加# encoding: UTF-8这一行，否则无法支持中文分类。<br/>
增加aside<br/>
保存到 source/<em>includes/asides/category_list.html：注意去掉'\&lsquo;<br/>
<code>
    &lt;section&gt;
        &lt;h1&gt;Categories&lt;/h1&gt;
        &lt;ul id="categories"&gt;
            {\% category_list \%}
        &lt;/ul&gt;
    &lt;/section&gt;
</code>
修改</em>config.yml文件<br/>
将category_list添加到default_asides：<br/>
   default_asides: [asides/category_list.html, asides/recent_posts.html]<br/>
安装这个插件后直接可以支持中文分类，url中使用的是分类的拼音，如「数据库」对应「shu-ju-ku」。如果使用中文分类时遇到各种错误，请参考下面这两篇文章：</p>

<pre><code>http://aiku.me/bar/10393365  
http://blog.sprabbit.com/blog/2012/03/23/octopress/  
</code></pre>

<h4>5.添加tag</h4>

<p>首先到<a href="https://github.com/robbyedwards/octopress-tag-pages">https://github.com/robbyedwards/octopress-tag-pages</a><br/>
和<a href="https://github.com/robbyedwards/octopress-tag-cloudclone">https://github.com/robbyedwards/octopress-tag-cloudclone</a><br/>
这两个项目的代码。这两个项目分别用于产生tag page和tag cloud。 针对这两个插件，需要手工复制一些文件到你的octopress目录。</p>

<p>octopress-tag-pages<br/>
复制tag_generator.rb到plugins目录；<br/>
复制tag_index.html到source/<em>layouts目录。<br/>
复制tag_feed.xml到source/</em>includes/custom/目录。tag_feed.xml文件中 layout: nil 改为 layout: null<br/>
其他文件就不需要复制了，都是些例子。</p>

<p>octopress-tag-cloud<br/>
仅复制tag_cloud.rb到plugins目录即可。<br/>
添加aside，复制以下代码到source/<em>includes/custom/asides/tags.html。注意去掉'\&lsquo;<br/>
<code>
    &lt;section&gt;
        &lt;h1&gt;Tags&lt;/h1&gt;
        &lt;ul class="tag-cloud"&gt;
            {\% tag_cloud font-size: 90-210%, limit: 100, style: para \%}
        &lt;/ul&gt;
    &lt;/section&gt;
</code>
tag_cloud的参数中，style :para指定不使用li来分割，limit限定100个tag，font-size指定tag的大小范围，具体参数参看官方文档。<br/>
最后，当然是在</em>config.xml的default_asides 中添加这个tag cloud到导航栏：<br/>
<code>
default_asides: [... custom/asides/tags.html, ...]
</code></p>

<h5>bug:</h5>

<p>除0错误，tag_cloud.rb中<br/>
weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))<br/>
当max==min时出错<br/>
一下修复同时改成像Categories一样显示文章数<br/>
<code>
--- a/plugins/tag_cloud.rb
+++ b/plugins/tag_cloud.rb
@@ -54,7 +54,7 @@ def initialize(name, params, tokens)
 # map: [[tag name, tag count]] -&gt; [[tag name, tag weight]]
    weighted = count.map do |name, count|
 # logarithmic distribution
-   weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))
+   weight = count
    [name, weight]
    end
 # get the top @limit tag pairs when a limit is given, unless the sort method is random
@@ -92,12 +92,17 @@ def initialize(name, params, tokens)
    html = ""
 # iterate over the weighted tag Array and create the tag items
    weighted.each_with_index do |tag, i|
-   name, weight = tag
+   name, weight_orig = tag
+   if min == max
+       weight = 0.5
+   else
+       weight = (Math.log(weight_orig) - Math.log(min))/(Math.log(max) - Math.log(min))
+   end
    size = size_min + ((size_max - size_min) * weight).to_f
    size = sprintf("%.#{@precision}f", size)
    slug = name.to_url
    @separator = "" if i == (weighted.size - 1)
-   html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}&lt;/a&gt;#{@separator}#{@tag_after}\n"
+   html &lt;&lt; "#{@tag_before}&lt;a style=\"font-size: #{size}#{unit}\" href=\"/#{dir}/#{slug}/\"&gt;#{name}(#{weight_orig})&lt;/a&gt;#{@separator}#
    end
    html
    end
</code></p>

<h6>如果会出现:</h6>

<p>添加超过一个tags之后，rake generate就会开始报错了： Error :Liquid Exception: comparison of Array with Array failed in page<br/>
只需要将1个tag重复2次以上使用就可以解决。<br/>
1.第1个post加的tag是：tag1，第2个post加的tag是：tag1<br/>
2.rake generate<br/>
3.第2个post的tag随便改：tagXXX</p>

<h4>6.近期评论</h4>

<p>复制以下代码到source/_includes/custom/asides/recent_comments.html，名字改成自己的<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;section id="comment_sidebar"&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;近期评论&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;script type="text/javascript" src="http://abcdxyzk.disqus.com/recent_comments_widget.js?num_items=10&hide_avatars=0&avatar_size=32&excerpt_length=20"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://disqus.com/"&gt;Powered by Disqus&lt;/a&gt;
</span><span class='line'>&lt;/section&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>修改_config.yml  
</span><span class='line'>最后，当然是在_config.xml的default_asides 中添加这个tag cloud到导航栏：  
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>default_asides: [&hellip; custom/asides/recent_comments.html, &hellip;]</span></code></pre></td></tr></table></div></figure></p>

<h4>7.优化</h4>

<p>删除<br/>
 source/<em>includes/custom/head.html<br/>
 source/</em>includes/head.html<br/>
中googleapis</p>

<h4>8.BUG，最新octopress的已经修复</h4>

<p>除了根目录，其他目录无法将右侧缩到底部。<br/>
可以修改一下source/_includes/head.html文件，去掉src中的'.&lsquo;，改成如下：<br/>
<code>
  &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape('%3Cscript src="http://abcdxyzk.github.io/javascripts/libs/jquery.min.js"%3E%3C/script%3E'))&lt;/script&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress+github建立个人博客]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/octopress-1/"/>
    <updated>2014-11-13T22:59:03+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/octopress-1</id>
    <content type="html"><![CDATA[<p>对于ruby低于1.9.3，下载 <a href="http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p551.tar.bz2">http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p551.tar.bz2</a></p>

<p>高于1.9.3 ???</p>

<p>有时https连不了，http却可以，所以修改Gemfile
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff &ndash;git a/Gemfile b/Gemfile
</span><span class='line'>index b02ee4b..7f7aac3 100644
</span><span class='line'>&mdash; a/Gemfile
</span><span class='line'>+++ b/Gemfile
</span><span class='line'>@@ -1,4 +1,4 @@
</span><span class='line'>-source &ldquo;&lt;a href="https://rubygems.org"&gt;https://rubygems.org&lt;/a&gt;&rdquo;
</span><span class='line'>+source &ldquo;&lt;a href="http://rubygems.org"&gt;http://rubygems.org&lt;/a&gt;&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; group :development do
</span><span class='line'>   gem 'rake', '~&gt; 10.0'
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>----------------
</span><span class='line'>
</span><span class='line'>#### Step 1 安装git ruby nodejs
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sudo apt-get install git zlib1g-dev libyaml-dev openssl libssl-dev tcl-dev tk-dev node/nodejs
</span><span class='line'>sudo apt-get install ruby ruby-dev 安装的版本偏低不行，要1.9.3以上https://www.ruby-lang.org/en/downloads/
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#### Step 2 准备octopress
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress    # 如果你使用RVM, 你会被询问你是否信任 .rvmrc 文件 (选择 yes).
</span><span class='line'>ruby --version  # 这条命令应该输出 Ruby 1.9.3
</span><span class='line'>然后安装依赖
</span><span class='line'>sudo gem install bundler
</span><span class='line'>rbenv rehash    # 如果你使用 rbenv, 执行 rehash 以运行 bundle 命令 (好像不需要这条)
</span><span class='line'>bundle install    # 在octopress目录运行
</span><span class='line'>最后安装默认主题
</span><span class='line'>rake install
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!--more--&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Step 3 部署到github上&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(1)以 用户名/用户名.github.io 的格式建立一个新项目。&lt;br/&gt;
</span><span class='line'>(2)部署&lt;br/&gt;
</span><span class='line'>首先运行&lt;br/&gt;
</span><span class='line'>rake setup_github_pages&lt;br/&gt;
</span><span class='line'>这条命令会询问你刚才建立的项目的地址，按提示输入，然后就会生成一些用于部署的文件和&lt;em&gt;deploy目录，&lt;/em&gt;deploy目录就是对应master分支。 接着执行&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rake generate
</span><span class='line'>rake deploy  # 会cd到_deploy目录运行 commit 和 push
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>这两条命令会生成博客内容，然后添加到git中，自动执行git commit然后推送到主分支(master branch)。几分钟后，你会收到github通知你你的提交已经被接受并发布了你的网站的email。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rake generate可能报错：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>Error reading file /var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml: No such file or directory - /home/kk/kk/github/octopress/source/var/lib/gems/1.9.1/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>是jekyll-sitemap-0.6.1的bug，修改Gemfile.lock, jekyll-sitemap (0.6.1) 改成 jekyll-sitemap (0.6.3), 再&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>bundle install
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source # 记住只push source，要push master就得先pull一下，因为_deploy目录也对应master，而他一运行rake deploy就会push
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Step 4 发布博客&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;你发布的文章被放在source/_posts目录下，并按照Jekyll的命名规则命名：YYYY-MM-DD-post- title.markdown。这个名字会被用于生成url且日期会被用于为文章按时间排序。 但这样比较麻烦，于是Octopress提供了一个rake task来自动按照正确的命名规则建立博文，并生成基本内容。&lt;br/&gt;
</span><span class='line'>格式是：rake new_post[&ldquo;title&rdquo;]&lt;br/&gt;
</span><span class='line'>样例：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rake new_post["tt"]  
</span><span class='line'># 这条命令会创建 source/_posts/2011-07-03-tt.markdown文件  
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>会生成如下内容的文件：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "tt"
</span><span class='line'>date: 2011-07-03 5:59
</span><span class='line'>comments: true
</span><span class='line'>external-url:
</span><span class='line'>categories:
</span><span class='line'>---
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>你可以在这里设置评论功能开关，设置分类。如果你的博客有多个作者共用，你可以在文件中添加【author:Your Name】。如果你在编辑一个草稿，你可以添加【published： false】以使其在生成博客内容时被自动忽略。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Step 5 生成 &amp; 预览&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rake generate # 在公开目录中生成博文和页面
</span><span class='line'>rake watch # 查看 source/ and sass/ 的改动
</span><span class='line'>rake preview # 在浏览器中输入 &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; 即可预览。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Step 6 推送到github&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rake deploy
</span><span class='line'>然后过几分钟，github就会自动更新你的博客了。&lt;br/&gt;
</span><span class='line'>注意：执行rake deploy前一定要先rake generate一下&lt;br/&gt;
</span><span class='line'>不要忘记把为你的博客提交source（Don’t forget to commit the source for your blog）&lt;br/&gt;</span></code></pre></td></tr></table></div></figure>
    git add .
    git commit -m &lsquo;your message&rsquo;
    git push origin source</p>

<pre><code>-----------------------------------

#### 另一台机子的时候
安装需要软件，然后clone自己的代码库  
</code></pre>

<pre><code>git checkout -b source origin/source
sudo gem install bundler
bundle install
rake install
rake setup_github_pages
mkdir _deploy
cd _deploy
git init
git remote add origin git@github.com:abcdxyzk/abcdxyzk.github.io.git
git pull origin master
cd ..
</code></pre>

<pre><code>_deploy目录就是对应master分支，所以必须要先保持一致  
不然先运行rake deploy会在_deploy目录先commit，再push，这就会导致其他和另外机子上提交的冲突。  
如果先rake deploy的话，可以在_deploy目录reset回去，然后pull。  

记住多台机子操作的时候一开始先
</code></pre>

<pre><code>需要保持_deploy/.git/config有master分支
git pull
cd _deploy
git pull
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
