<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/android~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-01-12T16:14:03+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android 系统基本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/12/08/android-base-adjust/"/>
    <updated>2015-12-08T15:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/12/08/android-base-adjust</id>
    <content type="html"><![CDATA[<p><a href="http://tieba.baidu.com/p/2687199243?see_lz=1">http://tieba.baidu.com/p/2687199243?see_lz=1</a></p>

<h3>二、锁定频率和核心</h3>

<h4>1. 了解热插拔</h4>

<p>热插拔驱动（Hotplug Driver）是控制cpu负载控制核心上线下线的驱动</p>

<p>注意：所有热插拔驱动都是根据负载调节cpu上下线，只是策略有不同。这不是“高通异步专利”</p>

<h5>高通机器默认热插拔：mpdecision</h5>

<pre><code>    /system/bin/mpdecision
</code></pre>

<p>这个热插拔驱动其实工作的蛮不错的。各个厂商之间略会有不同。个人建议使用8064以后机器的不使用第三方的热插拔驱动</p>

<h5>Exynos机器热插拔：pegasusq</h5>

<p>三星的热插拔驱动是集成在了governor（调速器）中的，这个调速器可以看作ondemand＋hotplug，工作方式为多核低频</p>

<h5>Tegra机器热插拔：hotplug</h5>

<p>两个字：渣渣<br/>
建议使用开发者开发的热插拔驱动</p>

<h4>2. 如何锁定cpu核心</h4>

<p>方法1: 使用kernel tuner</p>

<p>方法2: 使用脚本(只针对高通机器)：</p>

<pre><code>    #!/system/bin/sh

    stop mpdecision
    echo 0 &gt; /sys/devices/system/cpu/cpu1/online
    chmod 444 /sys/devices/system/cpu/cpu1/online
    echo 0 &gt; /sys/devices/system/cpu/cpu2/online
    chmod 444 /sys/devices/system/cpu/cpu2/online
    echo 1 &gt; /sys/devices/system/cpu/cpu3/online
    chmod 444 /sys/devices/system/cpu/cpu3/online
</code></pre>

<p>注意： 这样做将没有热插拔驱动工作，在空载时依然会有两个核心上线</p>

<h4>3. 如何锁定频率</h4>

<h5>（1）锁定cpu频率</h5>

<p>步骤1: 将governor设置为performance</p>

<p>方法很简单，用fauxclock，trickester mod，kernel tuner都可以搞定，并且不占用资源采样负载</p>

<p>弊端：如果不修改温度配置文件，将会受到降频影响</p>

<p>步骤2: 修改权限让温控进程无法对其降频</p>

<pre><code>    #!/system/bin/sh
    echo 你的cpu的最大频率 &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
    chmod 444 /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
    echo 你的cpu的最大频率 &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq
    chmod 444 /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
    echo 你的cpu的最大频率 &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq
    chmod 444 /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
    echo 你的cpu的最大频率 &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq
    chmod 444 /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
</code></pre>

<p>注意：cpu频率以khz为单位，比如1728mhz应该在这里写为1728000</p>

<h5>(2)锁定gpu频率</h5>

<p>步骤1: 将governor设置为performance</p>

<p>方法很简单，用fauxclock，trickester mod，kernel tuner都可以搞定，并且不占用资源采样负载</p>

<p>弊端：如果不修改温度配置文件，将会受到降频影响</p>

<pre><code>    echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
    echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
    echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
</code></pre>

<p>步骤2:
<code>
    echo 你的gpu的最大频率 &gt; /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk
    chmod 444 /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/max_gpuclk
</code></p>

<p>注意：gpu频率以hz为单位，比如400mhz应该在这里写为400000000</p>

<h4>4. 关于锁定频率的看法</h4>

<p>锁定频率对游戏性能很重要。根据我目前的结果来看，1.7g的krait 300似乎已经有点拖不动adreno 320了，而且随着频率降低，帧数跟着降低。但是对于日常使用来说，高频率只是一瞬间的事，并不需要多久，长期高频率对电池和发热的影响都会非常大。不推荐锁频，除非你要作性能测试</p>

<h3>三、在调节linux设置</h3>

<h4>1. governor</h4>

<p>(1) 什么是governor</p>

<p>governor大多数中文翻译为调速器，也叫调速策略。故名思议，根据cpu负载不同而如何决定提升或者降低频率靠的就是governor</p>

<p>(2) 为什么governor很重要</p>

<p>随着linux内核的更新，governor也会带来许多新功能来提升用户体验、响应速度、省电等。另外不同厂商对于不同governor的优化也是不同的。比如高通，对ondemand/msm-dcvs的优化非常好，然而对于小米用的interactive确实基本没怎么优化，在高通内核中的interactive非常之老旧，对于性能和省电都不利。在游戏中，htc的ondemand表现非常捉急，在需要提升频率的时候还按着不动，从而导致掉帧、顿卡等。切换到performance或者msm－dcvs会好不少。代表：riptide gp， asphalt 8，real racing 3</p>

<p>(3) 安卓上常见governor种类</p>

<h5>cpu：</h5>

<p>ondemand 故名思议，按需。ondemand根据cpu的负载来决定提升和降低频率，工作方式比较简单，也是最常见的一个governor</p>

<p>interactive 故名思议，交互。这个governor重点就是注重交互时的体验，它会比ondemand更快地提升到最高频率，而在降频时确实按照设定的时间慢慢地降。这么做会让系统很流畅，电量嘛，你懂的。</p>

<p>conservative 这个governor被开发者戏称为slow ondemand，它为了节电会限制cpu频率的提升，结果就是卡</p>

<p>performance 一直最高频</p>

<p>powersave 一直最低频</p>

<p>userspace 这个governor实质上就是让软件设定频率。比如在运行stability scaling test的时候，软件就会将其设为userspace</p>

<p>intellidemand intellidemand是faux123基于ondemand开发的一个governor，它和ondemand的主要区别就是在浏览网页的时候会限制频率，然后配合faux的热插拔驱动intelli-plug会获得比较好的省电效果</p>

<p>pegasusq 三星基于ondemand开发的热插拔governor</p>

<p>msm-dcvs msm（高通处理器前缀）－dcvs（dynamic clock &amp; voltage scaling 动态频率电压调整）
这个governor是高通给krait架构开发的，具体有什么魔力我也不清楚，只是用它玩游戏的时候感觉比ondemand流畅多了</p>

<h5>gpu：</h5>

<p>ondemand 这个和cpu的是一样的，按需调整，根据负载决定频率</p>

<p>performance 永远最大频率</p>

<p>simple 这个governor是faux123对adreno 3xx开发的一个governor，其中参数有laziness和thresholds。前者数值分布1-10，决定的是忽略多少降频请求，数字越大性能和耗电都越高；后者是提升频率的阀值，即gpu达到多少负载提升频率，数值分布0-100，数字越大性能和耗电都越低</p>

<p>(3) 如何切换</p>

<p>最简单的当然是在fauxclock，trickester mod等软件里面切换</p>

<p>cpu：</p>

<pre><code>    echo 你的governor &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    echo 你的governor &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
    echo 你的governor &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
    echo 你的governor &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
</code></pre>

<p>gpu：</p>

<pre><code>echo 你的governor &gt; /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/pwrscale/trustzone/governor
</code></pre>

<h4>2. io scheduler</h4>

<p>中文名：输入输出 调度器/io 调度器</p>

<p>(1) 为什么io scheduler很重要</p>

<p>io scheduler完全决定了磁盘的读写性能，而这对于用户体验的影响是极大打</p>

<p>(2) 安卓上常见io scheduler</p>

<h5>cfq</h5>

<p>completely-fair-quening</p>

<p>完全公平队列，是anticipatory模式的替代品，没有过多的做预测性调度，而是根据给定的进程io优先级，直接来分配操作的顺序。这个模式在linux上表现良好，但也许并不是最适合android的io调度模式，太强调均衡，而降低了连续读写数据的性能。</p>

<p>高通默认的就是这个，强烈建议改掉，根本不适合移动设备</p>

<h5>noop</h5>

<p>这个调度模式会把所有的数据请求直接合并到一个简单的队列里。不适合有机械结构的存储器，因为没有优化顺序，会增加额外的寻道时间。属于最简单的一个调度模式，无视io操作优先级和复杂性，执行完一个再执行一个，如果读写操作繁多的话，就会造成效率降低。</p>

<p>nvidia默认，有时候会造成顿卡，但是听说这个scheduler对省电比较有帮助</p>

<h5>deadline</h5>

<p>顾名思义，用过期时间来排序io操作顺序，保证先出现的io请求有最短的延迟时间，相对于写操作，给读操作更优先的级别。是比较好的一个调度模式。</p>

<p>性能不错</p>

<h5>row</h5>

<p>read over write</p>

<p>顾名思义，这个scheduler会优先处理读的请求。在移动设备上读的请求远远多于并且重要于写的请求，并且随机读取速度很重要。这个governor允许单或者双线程的读写，在同时有读写的情况下优先保证读，比较适合移动设备。</p>

<h5>fiops</h5>

<p>fair-iops
这个调度器虽然和cfq一样追求平均的优先级，但是是根据闪存设备重新设计的一个governor，各方面表现良好，是我列出来的五个scheduler里面性能最好的一个</p>

<p>如果有，强烈推荐fiops</p>

<h5>sio</h5>

<p>simple－io
在安卓上其实调度器越简单效果越好。sio就是最简单的一个调度器。不过还是有缺点的，就是随即读写性能不太好。在fiops出来以后，这个scheduler基本就被冷落了</p>

<h4>3. read ahead buffer</h4>

<p>这个其实奇怪。按理说缓存应该是越大越好，但是在安卓上好像不是这样，是越大越省电，越小系统越流畅，具体原理我也不懂。只列下方法</p>

<p>依旧，fauxclock，trickester mod等可以修改</p>

<p>命令：</p>

<p>emmc内置闪存：
<code>
    echo 你想要的大小 &gt; /sys/block/mmcblk0/quene/read_ahead_kb
</code></p>

<p>sd卡：
<code>
    echo 你想要的大小 &gt; /sys/block/mmcblk1/quene/read_ahead_kb
</code></p>

<p>默认为128k，如果想省电可以设成2048k</p>

<h4>4. emmc entropy</h4>

<p>entropy是一个叫混乱度的东西，好像是物理化学里面的，根据faux123的解释，闪存设备根本不需要entropy，所以就把它关掉来提高性能</p>

<p>fauxclock里面可以关闭</p>

<p>命令
<code>
    echo 0 &gt; /sys/block/mmcblk0/quene/add_random
    echo 0 &gt; /sys/block/mmcblk1/quene/add_random
</code></p>

<h4>5. c-states</h4>

<p>高通从krait 200上引进，但是有bug，在krait 300上得到了修复</p>

<p>总共4个状态：</p>

<p>c0, wfi<br/>
c1, rentention<br/>
c2, standalone_power_collapse<br/>
c3, power_collapse</p>

<p>数字从低到高代表了睡眠程度的高低，数字越高的状态越省电</p>

<p>intel也有这个，haswell就是凭借着强大的c－states调整在tdp更高的情况下获得了更低的耗电和更长的续航。桌面上比如e3可以将c6状态打开，能在0.8v左右稳定在3.3g</p>

<p>高通的c－states和intel不一样，在平时工作的时候高通处理器进入c states的时间很少，主要集中在关屏深睡眠的时候</p>

<p>fauxclock可以打开，krait 300建议打开c0 c2 c3</p>

<p>命令：
<code>
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu0/wfi/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu1/wfi/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu2/wfi/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu3/wfi/idle_enabled
    echo 0 &gt; /sys/module/pm_8x60/modes/cpu0/retention/idle_enabled
    echo 0 &gt; /sys/module/pm_8x60/modes/cpu1/retention/idle_enabled
    echo 0 &gt; /sys/module/pm_8x60/modes/cpu2/retention/idle_enabled
    echo 0 &gt; /sys/module/pm_8x60/modes/cpu3/retention/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu0/standalone_power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu1/standalone_power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu2/standalone_power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu3/standalone_power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu0/power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu1/power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu2/power_collapse/idle_enabled
    echo 1 &gt; /sys/module/pm_8x60/modes/cpu3/power_collapse/idle_enabled
</code></p>

<h4>6. 不同的构图方式</h4>

<p>从Android 4.0以后大家可以从build.prop里面发现这么几行：
<code>
    debug.sf.hw=1
    debug.composition.type=gpu
</code></p>

<p>在4.2以后还可以看到这一行
<code>
    persist.hwc.mdpcomp.enable=true
</code>
这就是构图方式</p>

<p>从谷歌4.2的build.prop的变化来看，谷歌已经开始强制使用mdp。性能更强但是耗电更低，何乐而不为</p>

<h5>(1) 构图方式种类</h5>

<p>cpu: 故名思议，cpu构图</p>

<p>gpu: gpu构图，在开发者选项中选择“关闭hw叠加层”和只设置debug.sf.hw=1都是让gpu构图</p>

<p>c2d: c2d构图，这个在2.x时代就已经被抛弃了，比gpu构图还烂</p>

<p>dyn: 这个似乎不错，但是所有高通机器的rom里面只有one的cm在用这个，而且开发者对这个构图方式的看法褒贬不一，就连这个选项是否生效都有争议。</p>

<p>mdp: 从firefox的开发者那里得知，新一点的机器都是有mdp管线的，比gpu构图性能更强、更省电。谷歌也因此强制使用这个构图方式</p>

<h5>(2) 构图方式的影响</h5>

<p>最常见的影响当然就是fps meter打开变卡了</p>

<p>firefox开发者的解释： <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=911391">https://bugzilla.mozilla.org/show_bug.cgi?id=911391</a></p>

<p>当叠加层数量低于mdp管线数量的时候，所有的构图都用mdp完成，不仅性能比gpu构图更好，而且还更省电。但是一旦叠加层数量超过mdp管线的数量，系统就会自动使用“部分mdp构图”，实质上就是要mdp和gpu合作构一帧的图。那么这个时候，就会导致性能下降</p>

<p>为什么打开一些overlay软件就变卡了呢？这就说明打开这类软件以后，比如fps meter，整个图层的数量已经超过了mdp的管线数量，系统启用gpu构图，导致系统、游戏流畅度下降。为什么有些人开始还不觉得fps meter对性能有影响呢？原因可能有三个：1. 他们还在4.2以下，还没用过mdp，一直都在用gpu构图；2. 他们一直都关掉了hw叠加层，也是一直用gpu构图，所以无法感知gpu构图对系统流畅度的严重影响；3. 他们打开了一些overlay软件，但是没有超过mdp的管线数量，没有进入gpu构图</p>

<p>构图的影响还不止这些，如果有人有one，可以试试把这一行
<code>
    persist.hwc.mdpcomp.enable=true
</code></p>

<p>从build.prop里面删掉</p>

<p>重启以后，反复按app抽屉的图标，对比与没删之前的流畅度。另外在贴吧等软件中，mdp构图也会增加滑动的流畅度。至于视频：1. 我没有高速摄像机；2. 这是非常容易感知的问题，耍赖不承认我是没办法的</p>

<p>mdp的缺点：</p>

<p>对于一些老的应用，mdp会造成负面影响，对流畅度负加成：比如在使用老版re管理器的时候，转移到多任务界面会有卡顿，而新版则非常流畅。
在叠加层数量超过mdp管线数量的时候，会转为“部分mdp构图”，mdp管线和gpu合作构图</p>

<p>不过谷歌已经强制使用mdp，随着软件更新，更快更省电的mdp构图将会逐渐替代gpu构图</p>

<h3>四、关于作弊</h3>

<p>很多厂商被逮着了“作弊”，其实我觉得根据不同的app调整策略不是坏事，但是你不开放给用户那就有问题了。凭什么只能跑分得到这样的待遇？厂商真的应该好好反思</p>

<p>1.作弊文件位置：</p>

<p>三星： TwDVFSApp.apk</p>

<p>HTC: /system/bin/pnpmgr; /system/etc/pnp.xml</p>

<p>NVIDIA：/system/app/NvCPLSvc.apk/res/raw/tegraprof.txt</p>

<p>2.如何对待？</p>

<p>作弊固然可耻，但是干掉这些东西又不是明智的选择。虽然这些文件有对跑分的专门配置和优化，但是它们还对普通应用程序/游戏有着配置。比如pnpmgr，它管理者省电模式、touch_boost、60fps视频cpu提频等等非常有用的调整；比如tegraprof，这里面更是有不少针对游戏优化的配置文件。关掉它们只会给用户体验减分。我希望所有厂商能够开放配置，让用户自由定制，而不是现在的加密处理。</p>

<h3>五、关于测试的一些注意事项</h3>

<ol>
<li><p>注明机型，驱动版本，系统版本，内核类型（是官方还是第三方，编译器是什么。换一个编译器可以让某些性能差别达到20%）构图方式</p></li>
<li><p>不要在开启fps meter的同时打开其他悬窗监控软件。fps meter统计的是整个图层的平均帧数，开启其他悬窗监控软解无论刷新率调到多少都是不准的（除非overlay在fps meter上面）</p></li>
<li><p>测试的时候最好关掉温度进程，以防止意外降频</p></li>
<li><p>对比测试的时候注意变化量，在变化量超过一个的时候对比测试结果不可信</p></li>
<li><p>如果想反映整个游戏的帧数情况，用Adreno Profiler。在没有高速摄像机的情况下，这个比视频靠谱得多。<a href="https://developer.qualcomm.com/mobile-development/mobile-technologies/gaming-graphics-optimization-adreno/tools-and-resources">https://developer.qualcomm.com/mobile-development/mobile-technologies/gaming-graphics-optimization-adreno/tools-and-resources</a></p></li>
</ol>


<h3>一、温度控制</h3>

<p>很多人抱怨手机降频，其实这不是坏事，降频厉害，也是oem厂商所为，与soc厂商关系不是太大</p>

<p>可能抱怨最多的就是高通机器了，这里讲下高通机器的温度控制进程的基本调试</p>

<h4>1. 开启和关闭温控进程</h4>

<p>关闭：
<code>
    stop thermald
</code></p>

<p>开启：
<code>
    start thermald
</code></p>

<h5>注意事项：</h5>

<p>关闭温控以后，除非内核中也有温度保护，机器将不会降频，散热设计不好的机器很有可能因此烧毁。请谨慎考虑关闭温控进程</p>

<h4>2. 降频阀值的调整</h4>

<h5>（1）了解自己手机的传感器</h5>

<p>方法1：使用last_kmsg
<code>
    adb pull /proc/last_kmsg
</code>
在adb目录下，找到last_kmsg文件，用记事本（推荐用notepad++/notepad2）打开，搜索sensor</p>

<p>方法2: 使用cat命令逐个查看
<code>
    cat /sys/devices/virtual/thermald/thermald_zone*/temp
</code>
显示出的数值即该传感器的温度</p>

<p>毫无疑问，温度最高的那几个就是cpu温度传感器</p>

<h4>（2）了解thermald配置文件</h4>

<p>配置文件的路径在 /system/etc/thermald.conf，权限为644</p>

<h5>注意：</h5>

<p>对于大部分高通机器，打开即可编辑。对于HTC机器，这个文件是加密的，只能自己写。</p>

<p>对于三星的机器，这个文件会是一个软链，比如E330S软链到了thermald－8974.conf文件，那么你真正应该修改的文件则是thermald－8974.conf</p>

<h4>（3）获取频率表</h4>

<p>获取cpu频率表：
<code>
    cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
</code></p>

<p>获取gpu频率表：
<code>
    cat /sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/gpu_available_frequencies
</code></p>

<p>注意：
部分三星机器，比如E330S无法查看gpu频率</p>

<h4>（4）自己改写thermald.conf</h4>

<p>步骤1: 了解thermald.conf的语言</p>

<pre><code>    sampling：采样时间
    [tsen_tz_sensor*]：对于＊号传感器的配置
    thresholds：降频阀值，达到这个温度即降频
    thresholds_clr：恢复阀值，达到这个温度即恢复到上一阶段配置的频率
    actions：降频所采取的行动
    cpu：降频cpu
    gpu：降频gpu
    shutdown：关机
    lcd：改变屏幕亮度，＋255最大
    battery：不懂，但可以知道的是＋1和＋2，能降低温度
    action_info：定义具体降频到多少
</code></pre>

<p>步骤2: 定义总采样时间
<code>
    sampling 5000
</code>
数值越低采样越勤，也越耗费资源。不建议修改</p>

<p>步骤3: 定义传感器
<code>
    [tsens_tz_sensor7]
    sampling 1500
    thresholds 54 57 64 70 75
    thresholds_clr 51 54 57 64 70
    actions gpu+cpu gpu+cpu cpu cpu cpu
    action_info 400000000+1728000 320000000+1134000 1026000 918000 702000
</code></p>

<p>步骤3.1：定义所需要的传感器</p>

<p>在你获得的传感器中，选择所需要的传感器。据我所知，绝大多数高通机器打sensor7, sensor8, sensor9都是cpu温度传感器，若要使用其他温度传感器，直接修改这个数字即可</p>

<p>步骤3.2：定义该传感器的采样时间</p>

<p>sampling 1500</p>

<p>数值越低，采样越勤，不建议修改</p>

<p>步骤3.3: 修改触发行为的温度阀值，即高于这个设定的温度就会采用当前定义的行为，比如降频</p>

<p>thresholds 54 57 64 70 75</p>

<p>步骤3.4: 修改回到上一行为的温度阀值，即低于这个设定温度就会回到上一个温度阀值所定义的行为（shutdown命令除外）</p>

<p>thresholds_clr 51 54 57 64 70</p>

<p>步骤3.5: 定义行为，最常见的就是cpu，gpu，shutdown，若要定义多个行为，则用加号相连</p>

<p>actions gpu+cpu gpu+cpu cpu cpu cpu</p>

<p>步骤3.6: 定义所采取的行为的具体数值，即降频降到多少。</p>

<p>action_info 400000000+1728000 320000000+1134000 1026000 918000 702000</p>

<p>注意： 其数值顺序必须与actions的顺序一模一样，最好与cpu和gpu频率表一致，否则容易出错。千万不要像三星官方一样敷衍了事。</p>

<h4>3. 关于降频的看法</h4>

<p>个人认为降频并不是一件坏事，在soc发热越来越大的今天，降频是厂商保证用户体验的一种方式之一：降低发热，降低耗电</p>

<p>但是我希望每个厂商都能像小米一样开发不同的模式，在需要降频省电的时候用一套温控配置，在需要性能的时候用另一套温控配置；而大多数国际厂商，比如三星，htc，nvidia，仅仅在跑分的时候使用了更高的温度配置，而且是用户无法选择的。这种行为应该表示抗议！强烈谴责！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[busybox]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/11/26/android-base-busybox/"/>
    <updated>2015-11-26T11:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/11/26/android-base-busybox</id>
    <content type="html"><![CDATA[<p>下载 <a href="http://www.busybox.net/downloads/binaries/latest/">http://www.busybox.net/downloads/binaries/latest/</a></p>

<p>或 <a href="/download/android/busybox-armv7l.tar.gz">busybox_armv7l</a></p>

<pre><code>    adb push ~/Download/busybox-armv7l /sdcard/busybox

    adb shell
    su
    mount -o remount,rw /system

    echo $PATH

    cp /sdcard/busybox /system/xbin
    chmod 755 busybox

    # 但是每次前面都加上个busybox太麻烦了，所以我们还要继续完成安装。
    # 在 /system/xbin 下输入
    # busybox --install .
    # 安装可能会影响root功能，建议改用ln几个常用即可。
    # 例如PATH中/system/sbin在/system/bin之前，安装在/system/sbin之后root软件就访问不到/system/bin/su。
    ln -s busybox free
    ln -s busybox vi
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error, forbidden warning]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/08/10/arm-gcc-warning/"/>
    <updated>2015-08-10T14:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/08/10/arm-gcc-warning</id>
    <content type="html"><![CDATA[<p>编译时出现类似的情况：把Warning当做Error，当没有加-Werror选项
<code>
      CC [M]  /home/kk/udp_probe/udp_probe.o
    /home/kk/udp_probe/udp_probe.c: In function 'kp_init':
    /home/kk/udp_probe/udp_probe.c:36:18: warning: assignment makes pointer from integer without a cast [enabled by default]
    error, forbidden warning: udp_probe.c:36
    make[2]: *** [/home/kk/udp_probe/udp_probe.o] 错误 1
    make[1]: *** [_module_/home/kk/udp_probe] 错误 2
    make[1]:正在离开目录 `/media/000617990000DB90/403a/source/kernel'
    make: *** [all] 错误 2
</code></p>

<p>修改 scripts/gcc-wrapper.py 去掉 interpret_warning 函数中的如下部分
<code>
        # If there is a warning, remove any object if it exists.
        if ofile:
            try:
                os.remove(ofile)
            except OSError:
                pass
        sys.exit(1)
</code></p>

<hr />

<p>若直接加 -w gcc选项，则会直接不显示Warning</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android系统典型bootloader分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader/"/>
    <updated>2015-06-18T11:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader</id>
    <content type="html"><![CDATA[<p><a href="http://security.tencent.com/index.php/blog/msg/38">http://security.tencent.com/index.php/blog/msg/38</a></p>

<h4>1、bootloader是什么？</h4>

<p>  简单地说，bootloader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核准备好正确的环境。</p>

<p>  Android系统基于Linux，所以bootloader部分也是与传统的嵌入式设备上运行的Linux没有什么区别。由于除Google外的大部分Android厂商都没有提供bootloader的源代码，所以分析手机设备的bootloader需要使用逆向工程的手段，当然由于有了Google官方的开源bootloader代码做参考，能让分析工作轻松不少。本文中使用的分析工具为IDA 6.5，针对的手机设备为N9006，固件版本为N9006ZCUDMK2。</p>

<h4>2、bootloader典型结构</h4>

<p>  这部分会以高通MSM8960为例子介绍下Bootloader的典型结构。</p>

<p>  高通MSM8960中包含多个运算单元，分别负责引导过程中的不同功能，sbl1的代码负责加载sbl2，sbl2加载tz和sbl3，sbl3加载apppsbl，appsbl加载HLOS。</p>

<p><img src="/images/android/2015-06-18-1.png" alt="" /><br/>
图1 SecureBoot 3.0 的Code Flow</p>

<p><img src="/images/android/2015-06-18-2.png" alt="" /><br/>
图2 MSM8960引导过程简化流程图</p>

<h4>3、Note3的bootloader结构分析</h4>

<p>  国行版Note3（N9006）使用的CPU是MSM8974，它的bootloader结构与典型的MSM8960差不多，最大的区别就是把sbl1,sbl2,sbl3整合进了一个文件sbl1中，TrustZone和APPSBL都由sbl1进行验证和加载，以下为几个主要功能的加载代码分析。</p>

<p>  sbl1的功能是对硬件进行初始化并加载其他模块，需要加载的模块信息按顺序保存在sbl1中，对应每个模块的数据是一段大小为0x64字节的模块信息数据内，sbl1中有一个循环负责验证和加载所有需要的其他模块（tz，rpm，wdt，appsbl），加载代码会根据模块信息内的数据调用不同的加载器加载和验证的代码，具体代码如下图。</p>

<p><img src="/images/android/2015-06-18-3.jpg" alt="" /><br/>
图3 sbl1中循环加载全部模块的代码</p>

<p><img src="/images/android/2015-06-18-4.jpg" alt="" /><br/>
图4 sbl1中对待加载模块进行验证</p>

<p><img src="/images/android/2015-06-18-5.jpg" alt="" /><br/>
图5 TZ模块信息数据</p>

<p><img src="/images/android/2015-06-18-6.jpg" alt="" /><br/>
图6 APPSBL模块信息数据</p>

<p>  固件包里的tz.mbn是加载在TrustZone中的模块，模块格式为elf，这个模块中的代码和系统其他模块代码运行在互相隔离的区域内，权限也比其他模块更高，三星KNOX的很多底层安全特性也是在这部分中实现，关于TrustZone的更多资料可以参考arm官方的说明。</p>

<p>  固件包里的aboot.mbn就是APPSBL模块，模块格式为bin，文件最前面的0x28字节的头部描述了bin的加载地址等信息，后面的数据就是实际加载到内存中的映像，整个bootloader中这个模块的代码量最大（很大一部分是openssl的代码），linux内核的验证和加载（正常启动和Recovery模式），ODIN模式等等代码都包含在这个模块内。</p>

<p><img src="/images/android/2015-06-18-7.jpg" alt="" /><br/>
图7 aboot.mbn文件头</p>

<p><img src="/images/android/2015-06-18-8.jpg" alt="" /><br/>
图8 根据按键和共享内存中的数据确定引导模式</p>

<p><img src="/images/android/2015-06-18-9.jpg" alt="" /><br/>
图9 三星特有的ODIN刷机模式代码</p>

<h4>4、Note3的bootloader中KNOX系统的底层代码初步分析</h4>

<p>  Note3提供了一个企业安全套装KNOX，这个系统包含了底层的Customizable Secure Boot和TrustZone-based Integrity Measurement Architecture(TIMA，目前为2.0版本)，系统层的SecurityEnhancements for Android（SE-Android）和应用层的Samsung KNOX Container，Encrypted File System（EFS），Virtual Private Network（VPN），其中Customizable Secure Boot和TIMA的代码包含在Bootloader的aboot.mbn，tz.mbn，NON-HLOS.bin中，功能为保障加载的内核在加载时和运行期的完整性。</p>

<p>  通过前面的分析，我们已经知道了tz.mbn和aboot.mbn在加载时已经由sbl1验证过完整性，tz.mbn加载后会在CPU的安全环境下运行，从高权限的隔离区域内对系统的完整性进行监控，而负责加载android内核的aboot.mbn中包含对内核的完整性检测，三星在bootloader每一部分的结尾都会加上自己的签名，加载前会对签名进行验证，以保障系统未被修改过。</p>

<p><img src="/images/android/2015-06-18-10.jpg" alt="" /><br/>
图10  tz.mbn中初始化TIMA系统的的代码</p>

<p><img src="/images/android/2015-06-18-11.jpg" alt="" /><br/>
图11 aboot.mbn中对内核是否使用SEANDROID进行验证</p>

<p>  当任何一部分检测代码发现系统异常状况后，就会调用SMC指令通知TrustZone中运行的TIMA系统设置fuse为系统完整性被破坏，此fuse数据一旦被设置后没有办法被重置，系统也无法再次进入KNOX系统。</p>

<p><img src="/images/android/2015-06-18-12.jpg" alt="" /><br/>
图12 加载内核前对内核签名和TIMA的测点进行验证</p>

<p><img src="/images/android/2015-06-18-13.jpg" alt="" /><br/>
图13 系统完整性检测失败后设置fuse值</p>

<p>  当以上所有检测都通过后，bootloader会把内核复制到指定的内存地址并跳到内核的入口继续执行，到此，就进入了系统内核代码的范畴，bootloader的使命也就完成了，跳到linux内核入口的代码见图14。</p>

<p><img src="/images/android/2015-06-18-14.jpg" alt="" /><br/>
图14 内核加载和校验完成后跳到内核的入口点继续执行</p>

<p>  另外，除了这两个模块外Modem固件相关的NON-HLOS.bin中也有大量TIMA系统相关的文件，由于TIMA系统包含大量硬件相关代码（使用三星猎户座CPU的N900中TIMA系统的实现与高通CPU的N9006差别很大），如果需要进行进一步的分析TIMA在modem中的行为，需要对TrustZone，modem工作方式等有更多了解。</p>

<p><img src="/images/android/2015-06-18-15.jpg" alt="" /><br/>
图15 NON-HLOS.bin中包含的大量TIMA相关文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译android4.4.2源码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2/"/>
    <updated>2015-05-20T15:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2</id>
    <content type="html"><![CDATA[<p>android4.4.2和jdk下载 <a href="http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0</a></p>

<p><a href="http://www.cnblogs.com/zhx831/p/3550688.html">http://www.cnblogs.com/zhx831/p/3550688.html</a></p>

<p>这篇文章主要记录了我是如何搭建Android编译环境，以及搭建当中遇到的问题以及解决方法。搭建环境依照官网进行，整个搭建环境分为两步：<br/>
1. 安装JDK<br/>
2. 安装相对应的库以及软件</p>

<h4>1、安装JDK</h4>

<p>官网上给出的办法是使用apt进行jdk的安装
<code>
    $ sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
    $ sudo apt-get update
    $ sudo apt-get install sun-java6-jdk
</code>
但是我在按照这个方法进行安装是apt提示无法找到jdk安装包。 在更换了好几个source后都无法下载jdk。因此只能考虑手动安装。</p>

<h5>1. 首先在Orecal官网下载JDK：</h5>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html</a></p>

<p>需要注意的是，现在官方网站上最新的版本的JDK7， 但是这个这个版本是不能用于Android的编译的，一定要去下载JDK6. 希望看到的朋友不要在走我的弯路。</p>

<h5>2. 创建jvm文件夹</h5>

<pre><code>    sudo mkdir /usr/lib/jvm
</code></pre>

<h5>3. 安装JDK6</h5>

<pre><code>    sudo cp jdk-6u45-linux-x64.bin /usr/lib/jvm/
    sudo chmod +x jdk-6u45-linux-x64.bin
    sudo ./jdk-6u45-linux-x64.bin
</code></pre>

<h5>4. 设置环境变量</h5>

<pre><code>    sudo mv jdk1.6.0_45/ jdk6
    export JAVA_HOME=/usr/lib/jvm/jdk6
    export JRE_HOME=${JAVA_HOME}/jre
    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
    export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>

<h5>5. 使能环境变量</h5>

<pre><code>    source ~/.bashrc
</code></pre>

<h5>6. 设置JDK6为系统默认JDK</h5>

<p>因为在ubuntu中默认JDK可能是OpenJDK,这里我们设置JDK6为我们默认的JDK
<code>
    sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk6/bin/java 300
    sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk6/bin/javac 300
    sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk6/bin/javaws 300
    sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk6/bin/jar 300
    sudo update-alternatives --config java
</code></p>

<h5>7. 至此JDK就安装好了，现在就可以在shell中查看Java版本</h5>

<pre><code>    java -version
</code></pre>

<p>如果编译还提示java错误，就把java路径加到PATH中
<code>
    PATH=$PATH:/usr/lib/jvm/jdk6/bin
</code></p>

<h4>2、安装相对应的库以及软件</h4>

<p>根据官网上的指示我们需要安装如下软件包和lib
<code>
    $ sudo apt-get install git gnupg flex bison gperf build-essential \
      zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
      libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
      libgl1-mesa-dev g++-multilib mingw32 tofrodos \
      python-markdown libxml2-utils xsltproc zlib1g-dev:i386
    $ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
</code>
* 我安装<code>libgl1-mesa-glx:i386</code>的时候提示要卸掉很多软件，就没装这个，也是能正常编译。</p>

<p>但是在安装过程中遇到了如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Errors were encountered while processing:
</span><span class='line'>libc6-dev:i386&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;E: Sub-process /usr/bin/dpkg returned an error code (1)
</span><span class='line'>&lt;code&gt;
</span><span class='line'>解决方法如下：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>    $ sudo apt-get install linux-libc-dev:i386
</span><span class='line'>    $ sudo apt-get install libc6-dev:i386</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p><a href="http://blog.csdn.net/yf210yf/article/details/9206269">http://blog.csdn.net/yf210yf/article/details/9206269</a></p>

<p><a href="http://www.cnblogs.com/qianxudetianxia/p/3681890.html">http://www.cnblogs.com/qianxudetianxia/p/3681890.html</a></p>

<h4>编译代码</h4>

<p>进入源码根目录,编译初始化,在终端中执行：
<code>
    source build/envsetup.sh
</code></p>

<p>选择编译目标：
<code>
    lunch
</code>
选择第一个吧，或者直接
<code>
    lunch aosp_arm-eng
</code></p>

<p>开始编译
<code>
    make -j4
</code>
3、5个小时左右吧</p>

<p>Android 完成编译的时候先执行  source build/envsetup.sh。  在这个shell 脚本中定义了 help,  croot, m, mm, mmm 等 function</p>

<h4>运行模拟器</h4>

<p>在终端中执行：emulator</p>

<p><img src="/images/android/2015-05-20.png" alt="" /></p>

<h5>修改和编译系统应用代码</h5>

<p>我们修改一下系统应用Mms的标题：</p>

<p><img src="/images/android/2015-05-21.png" alt="" /></p>

<p>使用mm命令编译：
<code>
    xxx@ubuntu:~/Data/android/packages/apps/Mms$ mm
    ============================================
    PLATFORM_VERSION_CODENAME=REL
    PLATFORM_VERSION=4.4.3.2.1.000.000
    TARGET_PRODUCT=aosp_arm
    TARGET_BUILD_VARIANT=eng
    TARGET_BUILD_TYPE=release
    TARGET_BUILD_APPS=
    TARGET_ARCH=arm
    TARGET_2ND_ARCH=
    TARGET_ARCH_VARIANT=armv7-a
    TARGET_CPU_VARIANT=generic
    HOST_ARCH=x86
    HOST_OS=linux
    HOST_OS_EXTRA=Linux-3.13.0-24-generic-x86_64-with-Ubuntu-14.04-trusty
    HOST_BUILD_TYPE=release
    BUILD_ID=OPENMASTER
    OUT_DIR=out
    ============================================
    make:进入目录'/home/xxx/Data/android'
    target R.java/Manifest.java: Mms (out/target/common/obj/APPS/Mms_intermediates/src/R.stamp)
    warning: string 'menu_insert_smiley' has no default translation.
    target Java: Mms (out/target/common/obj/APPS/Mms_intermediates/classes)
    注: 某些输入文件使用或覆盖了已过时的 API。
    注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
    注: 某些输入文件使用了未经检查或不安全的操作。
    注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/emma_out/lib/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.jar
    Proguard: out/target/common/obj/APPS/Mms_intermediates/proguard.classes.jar
    ProGuard, version 4.10
    Reading program jar [/home/xxx/Data/android/out/target/common/obj/APPS/Mms_intermediates/classes.jar]
    // ... ...
    target Dex: Mms
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.dex
    target Package: Mms (out/target/product/generic/obj/APPS/Mms_intermediates/package.apk)
    nothing matches overlay file ic_contact_picture.png, for flavor ,,,,,,,,,,,,mdpi,,,,,,,
    libpng warning: iCCP: known incorrect sRGB profile
    libpng warning: iCCP: known incorrect sRGB profile
    warning: string 'menu_insert_smiley' has no default translation.
    warning: string 'menu_insert_smiley' is missing 19 required localizations: az_AZ en_AU en_CA en_GB en_IN en_NZ en_SG en_US eo_EU hy_AM ka_GE km_KH lo_LA mn_MN ne_NP si_LK zh_CN zh_HK zh_TW
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:1082] dex2oat: out/host/linux-x86/bin/dex2oatd --runtime-arg -Xms64m --runtime-arg -Xmx64m --boot-image=out/target/product/generic/dex_bootjars/system/framework/boot.art --dex-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.apk --dex-location=/system/priv-app/Mms.apk --oat-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.odex --android-root=out/target/product/generic/system --instruction-set=arm --instruction-set-features=default
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:252] dex2oat took 1.189425041s (threads: 8)
    Notice file: packages/apps/Mms/NOTICE -- out/target/product/generic/obj/NOTICE_FILES/src//system/priv-app/Mms.apk.txt
    Install: out/target/product/generic/system/priv-app/Mms.apk
    Install: out/target/product/generic/system/priv-app/Mms.odex
    // ... ...
    Install: out/target/product/generic/data/app/MmsTests.apk
    Install: out/target/product/generic/data/app/MmsTests.odex
    make:离开目录“/home/xxx/Data/android”
</code></p>

<p>主要是生成了两个文件：<br/>
out/target/product/generic/system/priv-app/Mms.apk<br/>
out/target/product/generic/system/priv-app/Mms.odex</p>

<h5>安装到手机</h5>

<p>因为是系统应用，为了重启有效，使用push命令把两个文件push到模拟器中对应的位置：
<code>
    // 注意现在一些核心的应用的位置由以前的system/app调整为了system/priv-app，不要push错了
    /*
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.odex /system/priv-app
    2893 KB/s (2085348 bytes in 0.703s)
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.apk /system/priv-app
    3315 KB/s (1785258 bytes in 0.525s)
</code>
看模拟器的标题被替换了。类似了，你可以修改framework，替换内核</p>

<p>在  ~/.bashrc</p>

<p>添加环境变量：
<code>
    export ANDROID_PRODUCT_OUT=~/code/android-4.2/out/target/product/generic
    export ANDROID_SWT=~/code/android-4.2/out/host/linux-x86/framework/
</code></p>

<h4>备注：</h4>

<p>执行emulator，出现如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>emulator: ERROR: You did not specify a virtual device name, and the system
</span><span class='line'>directory could not be found.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you are an Android SDK user, please use &lsquo;@&lt;name&gt;&rsquo; or &lsquo;-avd &lt;name&gt;&rsquo;
</span><span class='line'>to start a given virtual device (see -help-avd for details).
</span><span class='line'>Otherwise, follow the instructions in -help-disk-images to start the emulator</span></code></pre></td></tr></table></div></figure></p>

<p>解决：
<code>
    source build/envsetup.sh
    lunch sdk-eng
</code>
然后再执行
<code>
    emulator
</code>
可以启动模拟器</p>

<hr />

<p><a href="http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html">http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html</a></p>

<h3>三星S4韩版SHV-E300L源码编译(内核Kernel+ROM)</h3>

<h4>编译ROM</h4>

<h5>①准备工作</h5>

<p>先看说明README_Platform.txt
<code>
        How to build Module for Platform
        - It is only for modules are needed to using Android build system.
        - Please check its own install information under its folder for other module.
        [Step to build]
        1. Get android open source.
            : version info - Android 4.4
            ( Download site : http://source.android.com )
        2. Copy module that you want to build - to original android open source
           If same module exist in android open source, you should replace it. (no overwrite)
            # It is possible to build all modules at once.
        3. You should add module name to 'PRODUCT_PACKAGES' in 'build\target\product\core.mk' as following case.
            case 1) e2fsprog : should add 'e2fsck' to PRODUCT_PACKAGES
            case 2) blkid : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 3) libhyphenation : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 4) KeyUtils : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 5) libexifa : should add 'libexifa' to PRODUCT_PACKAGES
            case 6) libjpega : should add 'libjpega' to PRODUCT_PACKAGES
            ex.) [build\target\product\core.mk] - add all module name for case 1 ~ 5 at once
                PRODUCT_PACKAGES += \
                    e2fsck \
                    blkid \
                    libhyphenation \
                    libkeyutils \
                    libexifa \
                    libjpega \
                    ebtables
        4. excute build command
            ./build_platform.sh
        Note :
        to build SBrowser (vendor/samsung/packages/apps/SBrowser),
        please refer to Buildme.txt at the folder mentioned above.
</code></p>

<p>意思就是说分4部走，后面加了个注释。</p>

<p>分别是下载4.4的源码，把包里的要编译的模块拷进去(替换,非覆盖),增加要编译的模块到core.mk进行注册,执行编译脚本。</p>

<p>查看当前源码版本
<code>
senrsl@senrsl-ubuntu:~$ cd android/source/WORKING_DIRECTORY/
senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ repo branches
*  android-4.4.2_r2          | in all projects
    master                    | in:
                                      abi/cpp
                                      ....
</code>
所有的版本号里没有叫4.4的，只有4.4.*的。。。。</p>

<p>好吧，就用这个。</p>

<h5>②替换模块</h5>

<p>1)external目录,把这些目录剪出来
<code>
        senrsl@senrsl-ubuntu:~/android/source/test/三星替换 /external$ ll
        总用量 40
        drwxrwxr-x 10 senrsl senrsl 4096  3月 30 14:53 ./
        drwxrwxr-x  4 senrsl senrsl 4096  3月 30 15:02 ../
        drwxrwxr-x 17 senrsl senrsl 4096  3月 20 13:35 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096  3月 20 13:36 dnsmasq/
        drwxrwxr-x 19 senrsl senrsl 4096  3月 20 13:36 e2fsprogs/
        drwxrwxr-x  3 senrsl senrsl 4096  3月 20 13:36 gcc-demangle/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 hyphenation/
        drwxrwxr-x 15 senrsl senrsl 4096  3月 20 13:36 iproute2/
        drwxrwxr-x 11 senrsl senrsl 4096  3月 20 13:36 iptables/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 junit/
</code>
把这些目录放进去
<code>
        senrsl@senrsl-ubuntu:~$ cd android/source/SHV-E300L_KK_Opensource/Platform/external/
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/external$ ll
        总用量 44
        drwxrwxr-x 11 senrsl senrsl 4096 10月 14 09:23 ./
        drwxrwxr-x  5 senrsl senrsl 4096  3月 30 13:10 ../
        drwxrwxr-x 17 senrsl senrsl 4096 10月  8 12:16 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096 10月  8 09:07 dnsmasq/
        drwxrwxr-x 18 senrsl senrsl 4096 10月  8 09:07 e2fsprogs/
        drwxrwxr-x  2 senrsl senrsl 4096 10月  8 09:07 gcc-demangle/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 hyphenation/
        drwxrwxr-x 14 senrsl senrsl 4096 10月  8 09:07 iproute2/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 09:07 iptables/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 junit/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 12:23 webkit/
</code>
2)vendor目录，把vendor/samsung放进去</p>

<p>3)build目录，把这俩文件剪出来，把Platform里的放进去
<code>
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/build$ tree
        .
        └── target
            ├── board
            │   └── generic
            │       └── BoardConfig.mk
            └── product
                └── core.mk
        4 directories, 2 files
</code></p>

<h5>③执行编译</h5>

<pre><code>        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></pre>

<p>报错
<code>
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Export includes file: frameworks/opt/emoji/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/export_includes
        Export includes file: external/harfbuzz/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/export_includes
        Export includes file: external/webkit/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/export_includes
        Export includes file: external/libxml2/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxml2_intermediates/export_includes
        Export includes file: external/libxslt/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxslt_intermediates/export_includes
        Export includes file: external/hyphenation/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libhyphenation_intermediates/export_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/import_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/import_includes
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/DocTypeStrings.gperf
        Generating HTMLEntityTable.cpp
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/platform/ColorData.gperf
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/css/CSSGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/xml/XPathGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/html/DocTypeStrings.cpp] 错误 2
        make: *** 正在等待未完成的任务....
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/platform/ColorData.cpp] 错误 2
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/parser/HTMLEntityNames.in
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></p>

<p>在core.mk里把    libwebcore \删掉，再build，报错
<code>
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Bold.ttf
        collect2: error: ld returned 1 exit status
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Regular.ttf
        make: *** [out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/LINKED/dnsmasq] 错误 1
        make: *** 正在等待未完成的任务....
        Install: out/target/product/generic/system/fonts/NotoSansMalayalamUI-Bold.ttf
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: error: undefined reference to 'ext2fs_mem_is_zero'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: error: undefined reference to 'ext2fs_set_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: error: undefined reference to 'ext2fs_get_bitmap_granularity'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: error: undefined reference to 'ext2fs_find_first_zero_generic_bitmap'
        external/e2fsprogs/lib/ext2fs/mmp.c:57: error: undefined reference to 'ext2fs_get_dio_alignment'
        external/e2fsprogs/lib/ext2fs/mmp.c:213: error: undefined reference to 'ext2fs_alloc_block2'
        collect2: error: ld returned 1 exit status
        make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libext2fs_intermediates/LINKED/libext2fs.so] 错误 1
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code>
再把 libexifa \删掉，报错
<code>
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_find_first_zero':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: undefined reference to `ext2fs_test_bit64'
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_clear_bmap_extent':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: undefined reference to `ext2fs_mem_is_zero'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_unmark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_mark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: undefined reference to `ext2fs_set_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_resize_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_convert_subcluster_bitmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: undefined reference to `ext2fs_get_bitmap_granularity'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_find_first_zero_generic_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: undefined reference to `ext2fs_find_first_zero_generic_bitmap'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_read':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        1 warning generated.
        external/openssl/ssl/s2_clnt.c:1027:38: warning: unused parameter 'type' [-Wunused-parameter]
        int ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
                                             ^
        1 warning generated.
        external/openssl/ssl/s2_lib.c:385:38: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:385:50: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                                         ^
        external/openssl/ssl/s2_lib.c:400:30: warning: unused parameter 's' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                     ^
        external/openssl/ssl/s2_lib.c:400:37: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                            ^
        external/openssl/ssl/s2_lib.c:400:49: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                                        ^
        external/openssl/ssl/s2_lib.c:405:29: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                    ^
        external/openssl/ssl/s2_lib.c:405:38: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:405:48: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                       ^
        external/openssl/ssl/s2_lib.c:405:60: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                                   ^
        external/openssl/ssl/s2_lib.c:410:38: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                             ^
        external/openssl/ssl/s2_lib.c:410:47: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                      ^
        external/openssl/ssl/s2_lib.c:410:59: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                                  ^
        12 warnings generated.
        1 warning generated.
        make: *** wait: 没有子进程。 停止。
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code></p>

<p>然后把之前的core.mk第二部分替换成README里的，报错
<code>
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        Processing target/product/generic/dex_bootjars/system/framework/core.jar
        Done!
</code></p>

<p>然后把core.mk里第二部分全都删掉，报的错还是上面那个。</p>

<p>恢复下core.mk重来，</p>

<p>报1：报错external/webkit/Source/WebCore/make-hash-tools.pl line 23.，core.mk砍掉 libwebcore \ 代码砍掉external/webkit.</p>

<p>报2：/home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'，external/e2fsprogs 代码换回原版。</p>

<p>报3：/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: error: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/dhcp-common.o: multiple definition of &lsquo;option_string&rsquo;
/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/option.o: previous definition here，external/dnsmasq换回原版。</p>

<p>然后编译</p>

<p>这样竟编译成功
<code>
        Creating filesystem with parameters:
            Size: 576716800
            Block size: 4096
            Blocks per group: 32768
            Inodes per group: 7040
            Inode size: 256
            Journal blocks: 2200
            Label:
            Blocks: 140800
            Block groups: 5
            Reserved block group size: 39
        Created filesystem with 892/35200 inodes and 65272/140800 blocks
        + '[' 0 -ne 0 ']'
        Install system fs image: out/target/product/generic/system.img
        out/target/product/generic/system.img+ maxsize=588791808 blocksize=2112 total=576716800 reserve=5947392
</code></p>

<p>镜像文件输出到了/home/senrsl/android/source/WORKING_DIRECTORY/out/target /product/generic</p>

<p>4)封包</p>

<p>查看下官方提供的E300LKLUFNE4_E300LLGTFNE4_E300LKLUFNC1_HOME.tar</p>

<p>依次罗列了这几个img.</p>

<p>尝试封装
<code>
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY/out/target/product/generic$ tar cvf p.tar cache.img ramdisk.img system.img userdata.img
        cache.img
        ramdisk.img
        system.img
        userdata.img
</code>
然后重启系统去烧。</p>

<p>//TODO 未成功，无法烧入</p>

<hr />

<h4>I9507V 的external/e2fsprogs，external/dnsmasq换回原版，就能编译成功，没试过烧进真机。</h4>
]]></content>
  </entry>
  
</feed>
