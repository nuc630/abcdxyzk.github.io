<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/android~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-15T20:09:33+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android系统典型bootloader分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader/"/>
    <updated>2015-06-18T11:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/18/android-bootloader</id>
    <content type="html"><![CDATA[<p><a href="http://security.tencent.com/index.php/blog/msg/38">http://security.tencent.com/index.php/blog/msg/38</a></p>

<h4>1、bootloader是什么？</h4>

<p>  简单地说，bootloader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核准备好正确的环境。</p>

<p>  Android系统基于Linux，所以bootloader部分也是与传统的嵌入式设备上运行的Linux没有什么区别。由于除Google外的大部分Android厂商都没有提供bootloader的源代码，所以分析手机设备的bootloader需要使用逆向工程的手段，当然由于有了Google官方的开源bootloader代码做参考，能让分析工作轻松不少。本文中使用的分析工具为IDA 6.5，针对的手机设备为N9006，固件版本为N9006ZCUDMK2。</p>

<h4>2、bootloader典型结构</h4>

<p>  这部分会以高通MSM8960为例子介绍下Bootloader的典型结构。</p>

<p>  高通MSM8960中包含多个运算单元，分别负责引导过程中的不同功能，sbl1的代码负责加载sbl2，sbl2加载tz和sbl3，sbl3加载apppsbl，appsbl加载HLOS。</p>

<p><img src="/images/android/2015-06-18-1.png" alt="" /><br/>
图1 SecureBoot 3.0 的Code Flow</p>

<p><img src="/images/android/2015-06-18-2.png" alt="" /><br/>
图2 MSM8960引导过程简化流程图</p>

<h4>3、Note3的bootloader结构分析</h4>

<p>  国行版Note3（N9006）使用的CPU是MSM8974，它的bootloader结构与典型的MSM8960差不多，最大的区别就是把sbl1,sbl2,sbl3整合进了一个文件sbl1中，TrustZone和APPSBL都由sbl1进行验证和加载，以下为几个主要功能的加载代码分析。</p>

<p>  sbl1的功能是对硬件进行初始化并加载其他模块，需要加载的模块信息按顺序保存在sbl1中，对应每个模块的数据是一段大小为0x64字节的模块信息数据内，sbl1中有一个循环负责验证和加载所有需要的其他模块（tz，rpm，wdt，appsbl），加载代码会根据模块信息内的数据调用不同的加载器加载和验证的代码，具体代码如下图。</p>

<p><img src="/images/android/2015-06-18-3.jpg" alt="" /><br/>
图3 sbl1中循环加载全部模块的代码</p>

<p><img src="/images/android/2015-06-18-4.jpg" alt="" /><br/>
图4 sbl1中对待加载模块进行验证</p>

<p><img src="/images/android/2015-06-18-5.jpg" alt="" /><br/>
图5 TZ模块信息数据</p>

<p><img src="/images/android/2015-06-18-6.jpg" alt="" /><br/>
图6 APPSBL模块信息数据</p>

<p>  固件包里的tz.mbn是加载在TrustZone中的模块，模块格式为elf，这个模块中的代码和系统其他模块代码运行在互相隔离的区域内，权限也比其他模块更高，三星KNOX的很多底层安全特性也是在这部分中实现，关于TrustZone的更多资料可以参考arm官方的说明。</p>

<p>  固件包里的aboot.mbn就是APPSBL模块，模块格式为bin，文件最前面的0x28字节的头部描述了bin的加载地址等信息，后面的数据就是实际加载到内存中的映像，整个bootloader中这个模块的代码量最大（很大一部分是openssl的代码），linux内核的验证和加载（正常启动和Recovery模式），ODIN模式等等代码都包含在这个模块内。</p>

<p><img src="/images/android/2015-06-18-7.jpg" alt="" /><br/>
图7 aboot.mbn文件头</p>

<p><img src="/images/android/2015-06-18-8.jpg" alt="" /><br/>
图8 根据按键和共享内存中的数据确定引导模式</p>

<p><img src="/images/android/2015-06-18-9.jpg" alt="" /><br/>
图9 三星特有的ODIN刷机模式代码</p>

<h4>4、Note3的bootloader中KNOX系统的底层代码初步分析</h4>

<p>  Note3提供了一个企业安全套装KNOX，这个系统包含了底层的Customizable Secure Boot和TrustZone-based Integrity Measurement Architecture(TIMA，目前为2.0版本)，系统层的SecurityEnhancements for Android（SE-Android）和应用层的Samsung KNOX Container，Encrypted File System（EFS），Virtual Private Network（VPN），其中Customizable Secure Boot和TIMA的代码包含在Bootloader的aboot.mbn，tz.mbn，NON-HLOS.bin中，功能为保障加载的内核在加载时和运行期的完整性。</p>

<p>  通过前面的分析，我们已经知道了tz.mbn和aboot.mbn在加载时已经由sbl1验证过完整性，tz.mbn加载后会在CPU的安全环境下运行，从高权限的隔离区域内对系统的完整性进行监控，而负责加载android内核的aboot.mbn中包含对内核的完整性检测，三星在bootloader每一部分的结尾都会加上自己的签名，加载前会对签名进行验证，以保障系统未被修改过。</p>

<p><img src="/images/android/2015-06-18-10.jpg" alt="" /><br/>
图10  tz.mbn中初始化TIMA系统的的代码</p>

<p><img src="/images/android/2015-06-18-11.jpg" alt="" /><br/>
图11 aboot.mbn中对内核是否使用SEANDROID进行验证</p>

<p>  当任何一部分检测代码发现系统异常状况后，就会调用SMC指令通知TrustZone中运行的TIMA系统设置fuse为系统完整性被破坏，此fuse数据一旦被设置后没有办法被重置，系统也无法再次进入KNOX系统。</p>

<p><img src="/images/android/2015-06-18-12.jpg" alt="" /><br/>
图12 加载内核前对内核签名和TIMA的测点进行验证</p>

<p><img src="/images/android/2015-06-18-13.jpg" alt="" /><br/>
图13 系统完整性检测失败后设置fuse值</p>

<p>  当以上所有检测都通过后，bootloader会把内核复制到指定的内存地址并跳到内核的入口继续执行，到此，就进入了系统内核代码的范畴，bootloader的使命也就完成了，跳到linux内核入口的代码见图14。</p>

<p><img src="/images/android/2015-06-18-14.jpg" alt="" /><br/>
图14 内核加载和校验完成后跳到内核的入口点继续执行</p>

<p>  另外，除了这两个模块外Modem固件相关的NON-HLOS.bin中也有大量TIMA系统相关的文件，由于TIMA系统包含大量硬件相关代码（使用三星猎户座CPU的N900中TIMA系统的实现与高通CPU的N9006差别很大），如果需要进行进一步的分析TIMA在modem中的行为，需要对TrustZone，modem工作方式等有更多了解。</p>

<p><img src="/images/android/2015-06-18-15.jpg" alt="" /><br/>
图15 NON-HLOS.bin中包含的大量TIMA相关文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译android4.4.2源码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2/"/>
    <updated>2015-05-20T15:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/20/android-4.4.2</id>
    <content type="html"><![CDATA[<p>android4.4.2和jdk下载 <a href="http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0">http://pan.baidu.com/share/home?uk=3691037096&amp;view=share#category/type=0</a></p>

<p><a href="http://www.cnblogs.com/zhx831/p/3550688.html">http://www.cnblogs.com/zhx831/p/3550688.html</a></p>

<p>这篇文章主要记录了我是如何搭建Android编译环境，以及搭建当中遇到的问题以及解决方法。搭建环境依照官网进行，整个搭建环境分为两步：<br/>
1. 安装JDK<br/>
2. 安装相对应的库以及软件</p>

<h4>1、安装JDK</h4>

<p>官网上给出的办法是使用apt进行jdk的安装
<code>
    $ sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
    $ sudo apt-get update
    $ sudo apt-get install sun-java6-jdk
</code>
但是我在按照这个方法进行安装是apt提示无法找到jdk安装包。 在更换了好几个source后都无法下载jdk。因此只能考虑手动安装。</p>

<h5>1. 首先在Orecal官网下载JDK：</h5>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html</a></p>

<p>需要注意的是，现在官方网站上最新的版本的JDK7， 但是这个这个版本是不能用于Android的编译的，一定要去下载JDK6. 希望看到的朋友不要在走我的弯路。</p>

<h5>2. 创建jvm文件夹</h5>

<pre><code>    sudo mkdir /usr/lib/jvm
</code></pre>

<h5>3. 安装JDK6</h5>

<pre><code>    sudo cp jdk-6u45-linux-x64.bin /usr/lib/jvm/
    sudo chmod +x jdk-6u45-linux-x64.bin
    sudo ./jdk-6u45-linux-x64.bin
</code></pre>

<h5>4. 设置环境变量</h5>

<pre><code>    sudo mv jdk1.6.0_45/ jdk6
    export JAVA_HOME=/usr/lib/jvm/jdk6
    export JRE_HOME=${JAVA_HOME}/jre
    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
    export PATH=${JAVA_HOME}/bin:$PATH
</code></pre>

<h5>5. 使能环境变量</h5>

<pre><code>    source ~/.bashrc
</code></pre>

<h5>6. 设置JDK6为系统默认JDK</h5>

<p>因为在ubuntu中默认JDK可能是OpenJDK,这里我们设置JDK6为我们默认的JDK
<code>
    sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk6/bin/java 300
    sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk6/bin/javac 300
    sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk6/bin/javaws 300
    sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk6/bin/jar 300
    sudo update-alternatives --config java
</code></p>

<h5>7. 至此JDK就安装好了，现在就可以在shell中查看Java版本</h5>

<pre><code>    java -version
</code></pre>

<p>如果编译还提示java错误，就把java路径加到PATH中
<code>
    PATH=$PATH:/usr/lib/jvm/jdk6/bin
</code></p>

<h4>2、安装相对应的库以及软件</h4>

<p>根据官网上的指示我们需要安装如下软件包和lib
<code>
    $ sudo apt-get install git gnupg flex bison gperf build-essential \
      zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev \
      libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \
      libgl1-mesa-dev g++-multilib mingw32 tofrodos \
      python-markdown libxml2-utils xsltproc zlib1g-dev:i386
    $ sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so
</code>
* 我安装<code>libgl1-mesa-glx:i386</code>的时候提示要卸掉很多软件，就没装这个，也是能正常编译。</p>

<p>但是在安装过程中遇到了如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Errors were encountered while processing:
</span><span class='line'>libc6-dev:i386&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;E: Sub-process /usr/bin/dpkg returned an error code (1)
</span><span class='line'>&lt;code&gt;
</span><span class='line'>解决方法如下：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>    $ sudo apt-get install linux-libc-dev:i386
</span><span class='line'>    $ sudo apt-get install libc6-dev:i386</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p><a href="http://blog.csdn.net/yf210yf/article/details/9206269">http://blog.csdn.net/yf210yf/article/details/9206269</a></p>

<p><a href="http://www.cnblogs.com/qianxudetianxia/p/3681890.html">http://www.cnblogs.com/qianxudetianxia/p/3681890.html</a></p>

<h4>编译代码</h4>

<p>进入源码根目录,编译初始化,在终端中执行：
<code>
    source build/envsetup.sh
</code></p>

<p>选择编译目标：
<code>
    lunch
</code>
选择第一个吧，或者直接
<code>
    lunch aosp_arm-eng
</code></p>

<p>开始编译
<code>
    make -j4
</code>
3、5个小时左右吧</p>

<p>Android 完成编译的时候先执行  source build/envsetup.sh。  在这个shell 脚本中定义了 help,  croot, m, mm, mmm 等 function</p>

<h4>运行模拟器</h4>

<p>在终端中执行：emulator</p>

<p><img src="/images/android/2015-05-20.png" alt="" /></p>

<h5>修改和编译系统应用代码</h5>

<p>我们修改一下系统应用Mms的标题：</p>

<p><img src="/images/android/2015-05-21.png" alt="" /></p>

<p>使用mm命令编译：
<code>
    xxx@ubuntu:~/Data/android/packages/apps/Mms$ mm
    ============================================
    PLATFORM_VERSION_CODENAME=REL
    PLATFORM_VERSION=4.4.3.2.1.000.000
    TARGET_PRODUCT=aosp_arm
    TARGET_BUILD_VARIANT=eng
    TARGET_BUILD_TYPE=release
    TARGET_BUILD_APPS=
    TARGET_ARCH=arm
    TARGET_2ND_ARCH=
    TARGET_ARCH_VARIANT=armv7-a
    TARGET_CPU_VARIANT=generic
    HOST_ARCH=x86
    HOST_OS=linux
    HOST_OS_EXTRA=Linux-3.13.0-24-generic-x86_64-with-Ubuntu-14.04-trusty
    HOST_BUILD_TYPE=release
    BUILD_ID=OPENMASTER
    OUT_DIR=out
    ============================================
    make:进入目录'/home/xxx/Data/android'
    target R.java/Manifest.java: Mms (out/target/common/obj/APPS/Mms_intermediates/src/R.stamp)
    warning: string 'menu_insert_smiley' has no default translation.
    target Java: Mms (out/target/common/obj/APPS/Mms_intermediates/classes)
    注: 某些输入文件使用或覆盖了已过时的 API。
    注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
    注: 某些输入文件使用了未经检查或不安全的操作。
    注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/emma_out/lib/classes-jarjar.jar
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.jar
    Proguard: out/target/common/obj/APPS/Mms_intermediates/proguard.classes.jar
    ProGuard, version 4.10
    Reading program jar [/home/xxx/Data/android/out/target/common/obj/APPS/Mms_intermediates/classes.jar]
    // ... ...
    target Dex: Mms
    Copying: out/target/common/obj/APPS/Mms_intermediates/classes.dex
    target Package: Mms (out/target/product/generic/obj/APPS/Mms_intermediates/package.apk)
    nothing matches overlay file ic_contact_picture.png, for flavor ,,,,,,,,,,,,mdpi,,,,,,,
    libpng warning: iCCP: known incorrect sRGB profile
    libpng warning: iCCP: known incorrect sRGB profile
    warning: string 'menu_insert_smiley' has no default translation.
    warning: string 'menu_insert_smiley' is missing 19 required localizations: az_AZ en_AU en_CA en_GB en_IN en_NZ en_SG en_US eo_EU hy_AM ka_GE km_KH lo_LA mn_MN ne_NP si_LK zh_CN zh_HK zh_TW
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:1082] dex2oat: out/host/linux-x86/bin/dex2oatd --runtime-arg -Xms64m --runtime-arg -Xmx64m --boot-image=out/target/product/generic/dex_bootjars/system/framework/boot.art --dex-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.apk --dex-location=/system/priv-app/Mms.apk --oat-file=out/target/product/generic/obj/APPS/Mms_intermediates/package.odex --android-root=out/target/product/generic/system --instruction-set=arm --instruction-set-features=default
    dex2oatd I 21424 21424 art/dex2oat/dex2oat.cc:252] dex2oat took 1.189425041s (threads: 8)
    Notice file: packages/apps/Mms/NOTICE -- out/target/product/generic/obj/NOTICE_FILES/src//system/priv-app/Mms.apk.txt
    Install: out/target/product/generic/system/priv-app/Mms.apk
    Install: out/target/product/generic/system/priv-app/Mms.odex
    // ... ...
    Install: out/target/product/generic/data/app/MmsTests.apk
    Install: out/target/product/generic/data/app/MmsTests.odex
    make:离开目录“/home/xxx/Data/android”
</code></p>

<p>主要是生成了两个文件：<br/>
out/target/product/generic/system/priv-app/Mms.apk<br/>
out/target/product/generic/system/priv-app/Mms.odex</p>

<h5>安装到手机</h5>

<p>因为是系统应用，为了重启有效，使用push命令把两个文件push到模拟器中对应的位置：
<code>
    // 注意现在一些核心的应用的位置由以前的system/app调整为了system/priv-app，不要push错了
    /*
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.odex /system/priv-app
    2893 KB/s (2085348 bytes in 0.703s)
    xxx@ubuntu:~/Data/android$ adb push out/target/product/generic/system/priv-app/Mms.apk /system/priv-app
    3315 KB/s (1785258 bytes in 0.525s)
</code>
看模拟器的标题被替换了。类似了，你可以修改framework，替换内核</p>

<p>在  ~/.bashrc</p>

<p>添加环境变量：
<code>
    export ANDROID_PRODUCT_OUT=~/code/android-4.2/out/target/product/generic
    export ANDROID_SWT=~/code/android-4.2/out/host/linux-x86/framework/
</code></p>

<h4>备注：</h4>

<p>执行emulator，出现如下错误：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>emulator: ERROR: You did not specify a virtual device name, and the system
</span><span class='line'>directory could not be found.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you are an Android SDK user, please use &lsquo;@&lt;name&gt;&rsquo; or &lsquo;-avd &lt;name&gt;&rsquo;
</span><span class='line'>to start a given virtual device (see -help-avd for details).
</span><span class='line'>Otherwise, follow the instructions in -help-disk-images to start the emulator</span></code></pre></td></tr></table></div></figure></p>

<p>解决：
<code>
    source build/envsetup.sh
    lunch sdk-eng
</code>
然后再执行
<code>
    emulator
</code>
可以启动模拟器</p>

<hr />

<p><a href="http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html">http://senrsl.blogspot.com/2015/03/s4shv-e300lkernelrom.html</a></p>

<h3>三星S4韩版SHV-E300L源码编译(内核Kernel+ROM)</h3>

<h4>编译ROM</h4>

<h5>①准备工作</h5>

<p>先看说明README_Platform.txt
<code>
        How to build Module for Platform
        - It is only for modules are needed to using Android build system.
        - Please check its own install information under its folder for other module.
        [Step to build]
        1. Get android open source.
            : version info - Android 4.4
            ( Download site : http://source.android.com )
        2. Copy module that you want to build - to original android open source
           If same module exist in android open source, you should replace it. (no overwrite)
            # It is possible to build all modules at once.
        3. You should add module name to 'PRODUCT_PACKAGES' in 'build\target\product\core.mk' as following case.
            case 1) e2fsprog : should add 'e2fsck' to PRODUCT_PACKAGES
            case 2) blkid : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 3) libhyphenation : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 4) KeyUtils : should add 'libkeyutils' to PRODUCT_PACKAGES
            case 5) libexifa : should add 'libexifa' to PRODUCT_PACKAGES
            case 6) libjpega : should add 'libjpega' to PRODUCT_PACKAGES
            ex.) [build\target\product\core.mk] - add all module name for case 1 ~ 5 at once
                PRODUCT_PACKAGES += \
                    e2fsck \
                    blkid \
                    libhyphenation \
                    libkeyutils \
                    libexifa \
                    libjpega \
                    ebtables
        4. excute build command
            ./build_platform.sh
        Note :
        to build SBrowser (vendor/samsung/packages/apps/SBrowser),
        please refer to Buildme.txt at the folder mentioned above.
</code></p>

<p>意思就是说分4部走，后面加了个注释。</p>

<p>分别是下载4.4的源码，把包里的要编译的模块拷进去(替换,非覆盖),增加要编译的模块到core.mk进行注册,执行编译脚本。</p>

<p>查看当前源码版本
<code>
senrsl@senrsl-ubuntu:~$ cd android/source/WORKING_DIRECTORY/
senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ repo branches
*  android-4.4.2_r2          | in all projects
    master                    | in:
                                      abi/cpp
                                      ....
</code>
所有的版本号里没有叫4.4的，只有4.4.*的。。。。</p>

<p>好吧，就用这个。</p>

<h5>②替换模块</h5>

<p>1)external目录,把这些目录剪出来
<code>
        senrsl@senrsl-ubuntu:~/android/source/test/三星替换 /external$ ll
        总用量 40
        drwxrwxr-x 10 senrsl senrsl 4096  3月 30 14:53 ./
        drwxrwxr-x  4 senrsl senrsl 4096  3月 30 15:02 ../
        drwxrwxr-x 17 senrsl senrsl 4096  3月 20 13:35 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096  3月 20 13:36 dnsmasq/
        drwxrwxr-x 19 senrsl senrsl 4096  3月 20 13:36 e2fsprogs/
        drwxrwxr-x  3 senrsl senrsl 4096  3月 20 13:36 gcc-demangle/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 hyphenation/
        drwxrwxr-x 15 senrsl senrsl 4096  3月 20 13:36 iproute2/
        drwxrwxr-x 11 senrsl senrsl 4096  3月 20 13:36 iptables/
        drwxrwxr-x  4 senrsl senrsl 4096  3月 20 13:36 junit/
</code>
把这些目录放进去
<code>
        senrsl@senrsl-ubuntu:~$ cd android/source/SHV-E300L_KK_Opensource/Platform/external/
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/external$ ll
        总用量 44
        drwxrwxr-x 11 senrsl senrsl 4096 10月 14 09:23 ./
        drwxrwxr-x  5 senrsl senrsl 4096  3月 30 13:10 ../
        drwxrwxr-x 17 senrsl senrsl 4096 10月  8 12:16 chromium/
        drwxrwxr-x  9 senrsl senrsl 4096 10月  8 09:07 dnsmasq/
        drwxrwxr-x 18 senrsl senrsl 4096 10月  8 09:07 e2fsprogs/
        drwxrwxr-x  2 senrsl senrsl 4096 10月  8 09:07 gcc-demangle/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 hyphenation/
        drwxrwxr-x 14 senrsl senrsl 4096 10月  8 09:07 iproute2/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 09:07 iptables/
        drwxrwxr-x  3 senrsl senrsl 4096 10月  8 09:07 junit/
        drwxrwxr-x 10 senrsl senrsl 4096 10月  8 12:23 webkit/
</code>
2)vendor目录，把vendor/samsung放进去</p>

<p>3)build目录，把这俩文件剪出来，把Platform里的放进去
<code>
        senrsl@senrsl-ubuntu:~/android/source/SHV-E300L_KK_Opensource/Platform/build$ tree
        .
        └── target
            ├── board
            │   └── generic
            │       └── BoardConfig.mk
            └── product
                └── core.mk
        4 directories, 2 files
</code></p>

<h5>③执行编译</h5>

<pre><code>        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></pre>

<p>报错
<code>
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Export includes file: frameworks/opt/emoji/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/export_includes
        Export includes file: external/harfbuzz/Android.mk -- out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/export_includes
        Export includes file: external/webkit/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/export_includes
        Export includes file: external/libxml2/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxml2_intermediates/export_includes
        Export includes file: external/libxslt/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libxslt_intermediates/export_includes
        Export includes file: external/hyphenation/Android.mk -- out/target/product/generic/obj/STATIC_LIBRARIES/libhyphenation_intermediates/export_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libemoji_intermediates/import_includes
        Import includes file: out/target/product/generic/obj/SHARED_LIBRARIES/libharfbuzz_intermediates/import_includes
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/DocTypeStrings.gperf
        Generating HTMLEntityTable.cpp
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/platform/ColorData.gperf
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/css/CSSGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        WebCore Yacc: libwebcore &lt;= external/webkit/Source/WebCore/xml/XPathGrammar.y
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/dom/make_names.pl
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        Can't locate Switch.pm in @INC (you may need to install the Switch module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.2 /usr/local/share/perl/5.18.2 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        BEGIN failed--compilation aborted at external/webkit/Source/WebCore/make-hash-tools.pl line 23.
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/html/DocTypeStrings.cpp] 错误 2
        make: *** 正在等待未完成的任务....
        make: *** [out/target/product/generic/obj/STATIC_LIBRARIES/libwebcore_intermediates/Source/WebCore/platform/ColorData.cpp] 错误 2
        target Generated: libwebcore &lt;= external/webkit/Source/WebCore/html/parser/HTMLEntityNames.in
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$ ./build_platform.sh
</code></p>

<p>在core.mk里把    libwebcore \删掉，再build，报错
<code>
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansKhmerUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLao-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Bold.ttf
        Install: out/target/product/generic/system/fonts/NotoSansLaoUI-Regular.ttf
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Bold.ttf
        collect2: error: ld returned 1 exit status
        Install: out/target/product/generic/system/fonts/NotoSansMalayalam-Regular.ttf
        make: *** [out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/LINKED/dnsmasq] 错误 1
        make: *** 正在等待未完成的任务....
        Install: out/target/product/generic/system/fonts/NotoSansMalayalamUI-Bold.ttf
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: error: undefined reference to 'ext2fs_test_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: error: undefined reference to 'ext2fs_mem_is_zero'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: error: undefined reference to 'ext2fs_set_bit64'
        external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: error: undefined reference to 'ext2fs_clear_bit64'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: error: undefined reference to 'ext2fs_get_bitmap_granularity'
        external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: error: undefined reference to 'ext2fs_find_first_zero_generic_bitmap'
        external/e2fsprogs/lib/ext2fs/mmp.c:57: error: undefined reference to 'ext2fs_get_dio_alignment'
        external/e2fsprogs/lib/ext2fs/mmp.c:213: error: undefined reference to 'ext2fs_alloc_block2'
        collect2: error: ld returned 1 exit status
        make: *** [out/target/product/generic/obj/SHARED_LIBRARIES/libext2fs_intermediates/LINKED/libext2fs.so] 错误 1
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code>
再把 libexifa \删掉，报错
<code>
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_find_first_zero':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:339: undefined reference to `ext2fs_test_bit64'
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:390: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:186: undefined reference to `ext2fs_test_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_test_clear_bmap_extent':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:281: undefined reference to `ext2fs_mem_is_zero'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_unmark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:178: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_mark_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:170: undefined reference to `ext2fs_set_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/blkmap64_ba.o: In function `ba_resize_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/blkmap64_ba.c:141: undefined reference to `ext2fs_clear_bit64'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_convert_subcluster_bitmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:735: undefined reference to `ext2fs_get_bitmap_granularity'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/gen_bitmap64.o: In function `ext2fs_find_first_zero_generic_bmap':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/gen_bitmap64.c:790: undefined reference to `ext2fs_find_first_zero_generic_bitmap'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_read':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        1 warning generated.
        external/openssl/ssl/s2_clnt.c:1027:38: warning: unused parameter 'type' [-Wunused-parameter]
        int ssl2_set_certificate(SSL *s, int type, int len, const unsigned char *data)
                                             ^
        1 warning generated.
        external/openssl/ssl/s2_lib.c:385:38: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:385:50: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctrl(SSL *s, int cmd, long larg, void *parg)
                                                         ^
        external/openssl/ssl/s2_lib.c:400:30: warning: unused parameter 's' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                     ^
        external/openssl/ssl/s2_lib.c:400:37: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                            ^
        external/openssl/ssl/s2_lib.c:400:49: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_callback_ctrl(SSL *s, int cmd, void (*fp)(void))
                                                        ^
        external/openssl/ssl/s2_lib.c:405:29: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                    ^
        external/openssl/ssl/s2_lib.c:405:38: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                             ^
        external/openssl/ssl/s2_lib.c:405:48: warning: unused parameter 'larg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                       ^
        external/openssl/ssl/s2_lib.c:405:60: warning: unused parameter 'parg' [-Wunused-parameter]
        long ssl2_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
                                                                   ^
        external/openssl/ssl/s2_lib.c:410:38: warning: unused parameter 'ctx' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                             ^
        external/openssl/ssl/s2_lib.c:410:47: warning: unused parameter 'cmd' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                      ^
        external/openssl/ssl/s2_lib.c:410:59: warning: unused parameter 'fp' [-Wunused-parameter]
        long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))
                                                                  ^
        12 warnings generated.
        1 warning generated.
        make: *** wait: 没有子进程。 停止。
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY$
</code></p>

<p>然后把之前的core.mk第二部分替换成README里的，报错
<code>
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:57: undefined reference to `ext2fs_get_dio_alignment'
        out/host/linux-x86/obj/SHARED_LIBRARIES/libext2fs_host_intermediates/mmp.o: In function `ext2fs_mmp_init':
        /home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'
        collect2: ld returned 1 exit status
        make: *** [out/host/linux-x86/obj/lib/libext2fs_host.so] 错误 1
        make: *** 正在等待未完成的任务....
        Processing target/product/generic/dex_bootjars/system/framework/core.jar
        Done!
</code></p>

<p>然后把core.mk里第二部分全都删掉，报的错还是上面那个。</p>

<p>恢复下core.mk重来，</p>

<p>报1：报错external/webkit/Source/WebCore/make-hash-tools.pl line 23.，core.mk砍掉 libwebcore \ 代码砍掉external/webkit.</p>

<p>报2：/home/senrsl/android/source/WORKING_DIRECTORY/external/e2fsprogs/lib/ext2fs/mmp.c:213: undefined reference to `ext2fs_alloc_block2'，external/e2fsprogs 代码换回原版。</p>

<p>报3：/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: error: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/dhcp-common.o: multiple definition of &lsquo;option_string&rsquo;
/home/senrsl/android/source/WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/../lib/gcc/arm-linux-androideabi/4.7/../../../../arm-linux-androideabi/bin/ld: out/target/product/generic/obj/EXECUTABLES/dnsmasq_intermediates/option.o: previous definition here，external/dnsmasq换回原版。</p>

<p>然后编译</p>

<p>这样竟编译成功
<code>
        Creating filesystem with parameters:
            Size: 576716800
            Block size: 4096
            Blocks per group: 32768
            Inodes per group: 7040
            Inode size: 256
            Journal blocks: 2200
            Label:
            Blocks: 140800
            Block groups: 5
            Reserved block group size: 39
        Created filesystem with 892/35200 inodes and 65272/140800 blocks
        + '[' 0 -ne 0 ']'
        Install system fs image: out/target/product/generic/system.img
        out/target/product/generic/system.img+ maxsize=588791808 blocksize=2112 total=576716800 reserve=5947392
</code></p>

<p>镜像文件输出到了/home/senrsl/android/source/WORKING_DIRECTORY/out/target /product/generic</p>

<p>4)封包</p>

<p>查看下官方提供的E300LKLUFNE4_E300LLGTFNE4_E300LKLUFNC1_HOME.tar</p>

<p>依次罗列了这几个img.</p>

<p>尝试封装
<code>
        senrsl@senrsl-ubuntu:~/android/source/WORKING_DIRECTORY/out/target/product/generic$ tar cvf p.tar cache.img ramdisk.img system.img userdata.img
        cache.img
        ramdisk.img
        system.img
        userdata.img
</code>
然后重启系统去烧。</p>

<p>//TODO 未成功，无法烧入</p>

<hr />

<h4>I9507V 的external/e2fsprogs，external/dnsmasq换回原版，就能编译成功，没试过烧进真机。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[img.ext4格式]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/03/android-img.ext4/"/>
    <updated>2015-01-03T14:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/03/android-img.ext4</id>
    <content type="html"><![CDATA[<p>工具 <a href="https://github.com/abcdxyzk/ext4_utils">https://github.com/abcdxyzk/ext4_utils</a></p>

<h4>一、转换源文件为ext4格式</h4>

<p>然后，我们可以使用./simg2img src des命令来转换system.img.ext4格式文件了
<code>
    ./simg2img system.img.ext4 system.img
</code></p>

<h4>二、挂载镜像到指定目录</h4>

<p>然后挂载此img到一个目录上
<code>
    mount -o loop system.img sysmain
</code>
成功挂载。然后你就可以进入目录了查看里面的文件了！！！！！</p>

<h4>三、修改镜像内的文件</h4>

<p>这时候可以进入挂载的目录mysys里面查看各个文件，甚至是修改了。不过这时候要注意一点，就是保持文件的原始权限。</p>

<h4>四、打包文件</h4>

<p>当你所有文件搞定后，下来需要一个命令来打包了。
<code>
    ./mkuserimg.sh -s sysmain systest.img.ext4 ext4 tmp 512M
</code>
这里需要注意，temp是我在当前目录新建立的一个目录，后面的512M是这个镜像打包后占用空间大小。如果你不知道你的镜像包应该多大，你查看你景象挂载到目录后，这个景象分区的大小。</p>

<p>恩，当你完成以上步骤，新的systest.img.ext4成功生成了，好了，你可以在fastboot模式下刷入了！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[samsung rfs、tar包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-rfs-tar/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-rfs-tar</id>
    <content type="html"><![CDATA[<p>boot.img可以按照 <a href="/blog/2014/12/22/android-img/">这里</a> 的方式编辑</p>

<p>GT-S5830分区
<code>
bml1 mibib
bml2 qcsbl
bml3 oemsbl
bml4 amms
bml5 ????????FSR_STL
bml6 ????????FSR_STL / Empty|Empty RFS Partition???
bml7 arm11boot
bml8 Boot.img
bml9 Recovery.img
bml10 Looks like kernel init?????Contains this string:"em=330M console=NULL hw=5 fbaddr=0xb0000"
bml11 Empty partion no partion table?? Whole file FF
bml12 System.rfs
bml13 Data Partition
bml14 Cache Partition
</code></p>

<p>把所有要打包进ROM的文件都复制到这个文件夹内；<br/>
比如：这些刷机文件包括：boot.img
<code>
   $ tar -cf NewRom.tar boot.img
   $ md5sum -t NewROM.tar &gt;&gt; NewROM.tar
   $ mv NewROM.tar NewROM.tar.md5
</code>
第一句是TAR打包，第二句是md5签名，第三句是改文件名，可以省略。</p>

<p>NewROM.tar.md5就是最后生成的，可供刷机用的ROM了！</p>

<h4>编辑 rfs</h4>

<p>挂载 RFS文件factoryfs.rfs 为一个磁盘：
<code>
    # su
    # mount –o loop factoryfs.rfs System
</code>
进入“磁盘”System目录，你就可以看到factoryfs.rfs解包后的所有内容。</p>

<p>修改好/System的内容后，在超级用户终端执行下面的语句卸载该“磁盘” ，这个操作等价于“打包”过程。
<code>
    # umount System
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看所有(挂载、未挂载)的分区]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/22/android-partitions/"/>
    <updated>2014-12-22T22:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/22/android-partitions</id>
    <content type="html"><![CDATA[<p>blog.chinaunix.net/uid-22731254-id-3222708.html</p>

<p>下面的例子都是围绕/system目录。</p>

<p>使用df命令查看
<code>
    # df
    df
    Filesystem Size Used Free Blksize
    /dev       197M 64K   197M 4096
    /mnt/asec  197M 0K    197M 4096
    /mnt/obb   197M 0K    197M 4096
    /system    295M 245M  50M  4096
    /data      755M 26M   728M 4096
    /cache     188M 4M    184M 4096
    /HWUserData 2G 1024K  2G   32768
    /cust      59M 14M    44M  4096
    /mnt/sdcard 7G 753M   6G   32768
    /mnt/secure/asec 7G 753M 6G 32768
</code>
看到/system分区有295MB的大小。</p>

<p>接着查看/proc下的partitions
```
    # cat /proc/partitions
    cat /proc/partitions
    major minor #blocks name</p>

<pre><code>179    0    3817472 mmcblk0
179    1    20      mmcblk0p1
179    2    300     mmcblk0p2
179    3    133120  mmcblk0p3
179    4    1       mmcblk0p4
179    5    12288   mmcblk0p5
179    6    196608  mmcblk0p6
179    7    4096    mmcblk0p7
179    8    3072    mmcblk0p8
179    9    4096    mmcblk0p9
179    10   3072    mmcblk0p10
179    11   3072    mmcblk0p11
179    12   393216  mmcblk0p12
179    13   786432  mmcblk0p13
179    14   4096    mmcblk0p14
179    15   8192    mmcblk0p15
179    16   20480   mmcblk0p16
179    17   4096    mmcblk0p17
179    18   81920   mmcblk0p18
179    19   2154496 mmcblk0p19
179    32   7761920 mmcblk1
179    33   7757824 mmcblk1p1
31     0    4096    mtdblock0
</code></pre>

<p>```</p>

<p>其实，可以在/proc/mounts下面看的更直接。。。</p>
]]></content>
  </entry>
  
</feed>
