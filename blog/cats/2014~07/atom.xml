<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-05-21T10:54:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 内核发包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/07/31/net-sendmsg/"/>
    <updated>2014-07-31T11:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/07/31/net-sendmsg</id>
    <content type="html"><![CDATA[<pre><code>    #include &lt;linux/module.h&gt;
    #include &lt;linux/kernel.h&gt;
    #include &lt;linux/init.h&gt;
    #include &lt;linux/workqueue.h&gt;
    #include &lt;linux/timer.h&gt;
    #include &lt;linux/in.h&gt;
    #include &lt;linux/inet.h&gt;
    #include &lt;linux/socket.h&gt;
    #include &lt;net/sock.h&gt;

    struct socket       *sock;

    unsigned char buffer[10]=
    { 1,2,3,4,5,6,7,8,9,0,};

    static int ker_send_udp(char* ip_addr, unsigned char * data, size_t len )
    {
        int ret;
        u32 remote_ip = in_aton(ip_addr);

        struct sockaddr_in sin = {
            .sin_family = AF_INET,
            .sin_port = htons(65530),
            .sin_addr = {.s_addr = remote_ip}
        };

        struct kvec iov = {.iov_base = (void *)data, .iov_len = len};
        struct msghdr udpmsg;

        udpmsg.msg_name = (void *)&amp;sin;
        udpmsg.msg_namelen = sizeof(sin);
        udpmsg.msg_control = NULL;
        udpmsg.msg_controllen = 0;
        udpmsg.msg_flags=0;

        ret = kernel_sendmsg(sock, &amp;udpmsg, &amp;iov, 1, len);
        printk("rets = %d\n",ret);

        return 0;
    }

    static int socket_init (void)
    {
        int ret;
        ret = sock_create_kern (PF_INET, SOCK_DGRAM,IPPROTO_UDP, &amp;sock);
        printk("retc = %d\n",ret);

        ker_send_udp("192.168.1.253", buffer, 10);
        return 0;
    }

    static void socket_exit (void)
    {   
        sock_release (sock);
    }

    module_init (socket_init);
    module_exit (socket_exit);
    MODULE_LICENSE ("GPL");
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oops打印Tainted信息]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/07/16/debug-oops/"/>
    <updated>2014-07-16T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/07/16/debug-oops</id>
    <content type="html"><![CDATA[<p>检查一下上面的Oops，看看Linux内核还有没有给我们留下其他的有用信息。
<code>
Oops: 0002 [#1]
</code>
* 这里面，0002表示Oops的错误代码（写错误，发生在内核空间），#1表示这个错误发生一次。</p>

<p>Oops的错误代码根据错误的原因会有不同的定义，本文中的例子可以参考下面的定义（如果发现自己遇到的Oops和下面无法对应的话，最好去内核代码里查找）：
<code>
 * error_code:
 *      bit 0 == 0 means no page found, 1 means protection fault
 *      bit 1 == 0 means read, 1 means write
 *      bit 2 == 0 means kernel, 1 means user-mode
 *      bit 3 == 0 means data, 1 means instruction
</code>
有时候，Oops还会打印出Tainted信息。这个信息用来指出内核是因何种原因被tainted（直译为“玷污”）。具体的定义如下：
<code>
  1: 'G' if all modules loaded have a GPL or compatible license, 'P' if any proprietary module has been loaded.  Modules without a MODULE_LICENSE or with a MODULE_LICENSE that is not recognised by insmod as GPL compatible are assumed to be proprietary.
  2: 'F' if any module was force loaded by "insmod -f", ' ' if all modules were loaded normally.
  3: 'S' if the oops occurred on an SMP kernel running on hardware that hasn't been certified as safe to run multiprocessor. Currently this occurs only on various Athlons that are not SMP capable.
  4: 'R' if a module was force unloaded by "rmmod -f", ' ' if all modules were unloaded normally.
  5: 'M' if any processor has reported a Machine Check Exception, ' ' if no Machine Check Exceptions have occurred.
  6: 'B' if a page-release function has found a bad page reference or some unexpected page flags.
  7: 'U' if a user or user application specifically requested that the Tainted flag be set, ' ' otherwise.
  8: 'D' if the kernel has died recently, i.e. there was an OOPS or BUG.
  9: 'A' if the ACPI table has been overridden.
 10: 'W' if a warning has previously been issued by the kernel. (Though some warnings may set more specific taint flags.)
 11: 'C' if a staging driver has been loaded.
 12: 'I' if the kernel is working around a severe bug in the platform firmware (BIOS or similar).
</code></p>
]]></content>
  </entry>
  
</feed>
