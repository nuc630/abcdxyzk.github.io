<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/algorithm/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-11-17T15:30:21+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树状数组]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/16/alg-bit/"/>
    <updated>2014-11-16T21:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/16/alg-bit</id>
    <content type="html"><![CDATA[<p>大体上可以分为两种:</p>

<h4>一</h4>

<p>每次修改的是一个点，所求的是关于某段区间；<br/>
这种情况最好办；比如说poj2352 stars；求每个点前面比他小的点的个数；<br/>
只用设置数组a[],先全是0，然后有某个点就依次修改，并以此统计；<br/>
这一种是最基本的向上修改，向下统计；<br/>
<code>
    int lowbit(int x) {
        return x&amp;(-x);
    }
    void update(int x,int num) {
        while(x&lt;=N) {
             d[x]+=num;
             x+=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&gt;0) {
             s+=d[x];
             x-=lowbit(x);
         }
        return s;
    }
</code></p>

<!--more-->


<h4>二</h4>

<p>每次修改的是一个区间，所求的值是关于某个点的；<br/>
代表的典型题目是HOJ1556 color the ball；<br/>
这个题是每次修改了一整个区间，最后求的是每个点修改的次数；<br/>
这个需要将上面的函数，稍加修改；<br/>
对于[s,t]，要向下修改，将它的区间[0, t]都加一遍update(t)；再向下修改，把不必要的区间[0, s)再减去update(s-1)；
<code>
    void update(int x,int num) {
        while(x&gt;0) {
             d[x]+=num;
             x-=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&lt;=N) {
             s+=d[x];
             x+=lowbit(x);
         }
        return s;
    }
</code></p>

<h5>注意</h5>

<div style="color:red">
对于一，可以用于计算统计子树；</br>
对于二，可以用于计算统计树上某个节点的所有祖先节点
</div>


<h4>poj3321</h4>

<p>这题难的不是树状数组，主要是映射到树状数组。<br/>
建树，然后dfs一次就可以算出对某个节点它的第一个下标(在树状数组中)和最后一个下标。那个更改的时候就用这两个下标就行了。<br/>
<img src="/images/alg/20141116.png" alt="" /><br/>
类似于将树向右倾斜，dfs建好树后c子树的第一个下标是4，最后一个下标是7。统计子树时只要sum(7)-sum(4-1)</p>

<h4>foj2176</h4>

<p>是poj3321加强版，一样的建树，但是节点要存k个值，然后update和sum的时候注意取和dep的差值，注意update减去val时的dep不要取错，update(le[i], dep[ri[i]], -val);</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;vector&gt;
    using namespace std;

    int n,m,mod;
    vector&lt;int&gt; tr[50009];
    int pre[50009];
    int s[50009][5];
    int dep[50009];
    int now, le[50009], ri[50009];

    int lowbit(int x)
    {
        return x&amp;(-x);
    }

    void update(int x, int de, int v)
    {
        int i;
        while (x &gt; 0) {
            i = (dep[x]-de+mod*1000000)%mod;
            s[x][i%mod] += v;
            x -= lowbit(x);
        }
    }

    int sum(int x, int de)
    {
        int i, j, val[5], ret;
        for (i=0;i&lt;mod;i++) val[i] = 0;
        while (x &lt;= now) {
            j = i = (de-dep[x]+mod*1000000)%mod;
            for (;i&lt;j+mod;i++)
                val[i%mod] += s[x][i-j];
            x += lowbit(x);
        }
        ret = 0;
        for (i=0;i&lt;mod;i++) ret += (i+1)*val[i];
        return ret;
    }

    void dfs(int k, int d)
    {
        int i;
        le[k] = now;
        for (i=0;i&lt;tr[k].size();i++)
            dfs(tr[k][i], d+1);
        now++;
        ri[k] = now;
        dep[now] = d;
    }

    int main()
    {
        int i,j,k,l,T,cas=0;
        scanf("%d", &amp;T);
        while (T--)
        {
            cas++;
            printf("Case#%d:\n", cas);
            scanf("%d %d %d", &amp;n, &amp;m, &amp;mod);
            for (i=1;i&lt;=n;i++) tr[i].clear();
            for (i=1;i&lt;n;i++) {
                scanf("%d %d", &amp;j, &amp;k);
                pre[k] = j;
                tr[j].push_back(k);
            }
            for (i=1;i&lt;=n;i++) if (pre[i] == 0) break;
            now = 0;
            dfs(i, 0);
            for (i=0;i&lt;=now;i++)
                for (j=0;j&lt;mod;j++) s[i][j] = 0;
            while (m--) {
                scanf("%d", &amp;l);
                if (l == 1) {
                    scanf("%d %d", &amp;j, &amp;k);
                    update(ri[j], dep[ri[j]], k);
                    update(le[j], dep[ri[j]], -k);
                } else {
                    scanf("%d", &amp;j);
                    k = sum(ri[j], dep[ri[j]]);
                    printf("%d\n", k);
                }
            }
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数A到数B之间的统计]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count/"/>
    <updated>2014-11-03T18:18:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/03/alg-A-to-B-count</id>
    <content type="html"><![CDATA[<p><a href="http://acm.fzu.edu.cn/problem.php?pid=1896">Problem 1896 神奇的魔法数</a>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Accept: 98    Submit: 307
</span><span class='line'>Time Limit: 1000 mSec    Memory Limit : 32768 KB&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Problem Description&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;John定义了一种“神奇的魔法数”。 不含前导零且相邻两个数字之差至少为m的正整数被称为“神奇的魔法数”。特别的，对于任意的m，数字1..9都是“神奇的魔法数”。
</span><span class='line'>John想知道，对于给定的m，在正整数a和b之间，包括a和b，总共有多少个“神奇的魔法数”？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一行一个数字T（1&lt;=T&lt;=100），表示测试数据组数。
</span><span class='line'>接下来T行，每行代表一组测试数据，包括三个整数a,b,m。（1&lt;=a&lt;=b&lt;=2,000,000,000, 0&lt;=m&lt;=9）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于每组测试数据，输出一行表示“神奇的魔法数”的个数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Input&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;7 1 10 2 1 20 3 1 100 0 10 20 4 20 30 5 1 10 9 11 100 9&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sample Output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;9 15 100 5 3 9 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Source福州大学第七届程序设计竞赛</span></code></pre></td></tr></table></div></figure></p>

<pre><code>    #include &lt;stdio.h&gt;

    int n,m,d,dp[13][13],sum[13],dn[13],dm[13];


    // DFS的时候这两个地方根据不同要求写。
    int dfs(int da[], int dep, int all)
    {
        int i,j,ret=0;
        if (dep == 0) return 1;
        for (i=0;i&lt;da[dep];i++)
        {
            if (all &gt; 0 || i &gt; 0) {
                if (all == 0 || i-da[dep+1]&gt;=d || i-da[dep+1]&lt;=-d)
                    ret += dp[dep][i];
            } else
                ret += sum[dep-1];
        }
        if (all == 0 || da[dep]-da[dep+1]&gt;=d || da[dep]-da[dep+1]&lt;=-d)
            ret += dfs(da, dep-1, all+da[dep]);
        return ret;
    }

    int main()
    {
        int i,j,k,l,T;
        scanf("%d", &amp;T);
        while (T--)
        {
            scanf("%d %d %d", &amp;m, &amp;n, &amp;d);
            for (i=0;i&lt;13;i++)
                for (j=0;j&lt;13;j++) dp[i][j] = 0;
            sum[0] = 0; sum[1] = 9;
            for (i=0;i&lt;10;i++) dp[1][i] = 1;
            for (i=2;i&lt;13;i++) {
                sum[i] = sum[i-1];
                for (j=0;j&lt;10;j++) {
                    for (k=0;k&lt;10;k++)
                        if (j-k&gt;=d || j-k&lt;=-d)
                            dp[i][j] += dp[i-1][k];
                    if (j &gt; 0)
                        sum[i] += dp[i][j];
                }
            }
    //      for (i=0;i&lt;=2;i++)
    //          for (j=0;j&lt;10;j++) printf("%d %d %d\n", i, j, dp[i][j]);
            i = 1; k = n;
            while (i &lt; 13) {
                dn[i] = k % 10; k /= 10;
                i++;
            }
            i = 1; k = m-1;
            while (i &lt; 13) {
                dm[i] = k % 10; k /= 10;
                i++;
            }
            n = dfs(dn, 11, 0);
            if (m == 1)
                m = 0;
            else
                m = dfs(dm, 11, 0);
            printf("%d\n", n-m);
        }
        return 0;
    }
</code></pre>

<h4><a href="http://poj.org/problem?id=3286">How many 0&rsquo;s?</a></h4>

<pre><code>Time Limit: 1000MS
Memory Limit: 65536KTotal Submissions: 2997
Accepted: 1603

Description

A Benedict monk No.16 writes down the decimal representations of all natural numbers between and including m and n, m ≤ n. How many 0's will he write down?

Input

Input consists of a sequence of lines. Each line contains two unsigned 32-bit integers m and n, m ≤ n. The last line of input has the value of m negative and this line should not be processed.

Output

For each line of input print one line of output with one integer number giving the number of 0's written down by the monk.

Sample Input

10 11
100 200
0 500
1234567890 2345678901
0 4294967295
-1 -1

Sample Output

1
22
92
987654304
3825876150

Source

Waterloo Local Contest, 2006.5.27
</code></pre>

<pre><code>    import java.util.*;
    import java.math.*;
    import java.io.*;

    public class Main {
        static long val,n,m,dp[][]=new long[13][13],a[]=new long[13],dn[]=new long[13], dm[]=new long[13], sum[]=new long[13];
        static long dfs(long dnm[], int dep, long all)
        {
            int i, j, k;
            long ret=0;
            if (dep == 0) return 0;
            for (i=0;i&lt;dnm[dep];i++) {
                if (all &gt; 0 || i &gt; 0)
                    ret += dp[dep][i]; // 需要计算前导0
                else
                    ret += sum[dep-1]; // 不需要计算前导0
            }
            if (all &gt; 0 &amp;&amp; dnm[dep] == 0)
                ret += val % a[dep] + 1;
            ret += dfs(dnm, dep-1, all+dnm[dep]);
            return ret;
        }

        public static void main(String[] args) {
            int i,j,k,l;
            Scanner cin = new Scanner(System.in);
            a[1] = 10;
            for (i=2;i&lt;13;i++) a[i] = a[i-1]*10;
            for (i=0;i&lt;13;i++)
                for (j=0;j&lt;13;j++) dp[i][j] = 0;
            dp[1][0] = 1;
            sum[0] = sum[1] = 0;
            for (i=2;i&lt;13;i++) {
                sum[i] = sum[i-1];
                for (j=0;j&lt;10;j++) {
                    for (k=0;k&lt;10;k++)
                        dp[i][j] += dp[i-1][k];
                    dp[i][j] += j==0 ? a[i-1] : 0;
                    if (j &gt; 0)
                        sum[i] += dp[i][j];
                }
            }
            while (true) {
                m = cin.nextLong();
                n = cin.nextLong();
                if (m == -1 || n == -1) break;
                for (i=0;i&lt;13;i++) dn[i] = dm[i] = 0;
                i = 1;
                val = n;
                while (val &gt; 0) {
                    dn[i] = val % 10;
                    val /= 10;
                    i++;
                }
                i = 1;
                val = m-1;
                while (val &gt; 0) {
                    dm[i] = val % 10;
                    val /= 10;
                    i++;
                }
                val = n;
                n = dfs(dn, 12, 0) + 1; // 0 还有一个0
                val = m-1;
                m = dfs(dm, 12, 0) + 1;
                if (val &lt; 0) m = 0;
                System.out.println(n-m);
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1.5倍空间归并排序--Knuth]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/25/alg-merge-sort/"/>
    <updated>2014-09-25T11:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/25/alg-merge-sort</id>
    <content type="html"><![CDATA[<p>divide-and-conquer algorithm, in the style
suggested by Knuth volume 3 (2nd edition),
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   |&mdash;&mdash;&mdash;&mdash;-I&mdash;&mdash;&mdash;&mdash;-|&mdash;&mdash;&mdash;&mdash;-|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;     p1            p2            ex
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p1+p2原数组，p1前半部分，p2后半部分，ex额外空间
</span><span class='line'>1、将p2用ex额外空间排到p2
</span><span class='line'>2、将p1排到ex
</span><span class='line'>3、将p2、ex合并到原数组</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TopCoder Marathon 怎么做]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/06/27/alg-tc-2/"/>
    <updated>2014-06-27T17:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/06/27/alg-tc-2</id>
    <content type="html"><![CDATA[<h5>和srm一样写个类和函数即可。</h5>

<p>以这题为例： <a href="http://community.topcoder.com/longcontest/?module=ViewProblemStatement&amp;rd=15683&amp;pm=12593">http://community.topcoder.com/longcontest/?module=ViewProblemStatement&amp;rd=15683&amp;pm=12593</a></p>

<h4>要求：</h4>

<pre><code>Definition

Class:  CirclesSeparation
Method: minimumWork
Parameters: double[], double[], double[], double[]
Returns:    double[]
Method signature:   double[] minimumWork(double[] x, double[] y, double[] r, double[] m)
(be sure your method is public)
</code></pre>

<h5>可以写个很简单的：</h5>

<pre><code>import java.util.*;
import java.io.*;
import java.math.*;
public class CirclesSeparation {
    int N, now;
    double ox[] = new double[1000], oy[] = new double[1000];
    double x[] = new double[1000], y[] = new double[1000];
    double r[] = new double[1000], m[] = new double[1000];
    boolean touch(int i,int j)
    {
        double dis = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]);
        if (dis &gt; (r[i]+r[j]) * (r[i]+r[j])) {
            return false;
        }
        return true;
    }
    void dfsMove(int ok, int j)
    {
        double px = x[j] - x[ok];
        double py = y[j] - y[ok];
        double dis = Math.sqrt((x[j]-x[ok])*(x[j]-x[ok]) + (y[j]-y[ok])*(y[j]-y[ok]));
        double dd = r[ok] + r[j] - dis + 0.001;
        x[j] += dd * px / dis;
        y[j] += dd * py / dis;
        //System.out.println(x[j] + "\t" + y[j]);
        int i;
        for (i=0;i&lt;=now;i++) {
            if (i != j &amp;&amp; touch(i, j)) {
                dfsMove(j, i);
            }
        }
    }
    public double[] minimumWork(double[] ix, double[] iy, double[] ir, double[] im) {
        int i,j,k,l;
        N = ix.length;
        for (i=0;i&lt;N;i++) {
            ox[i] = ix[i];
            oy[i] = iy[i];
            x[i] = ix[i];
            y[i] = iy[i];
            r[i] = ir[i];
            m[i] = im[i];
        }
        for (i=1;i&lt;N;i++)
        {
            now = i;
            for (j=0;j&lt;i;j++) {
                if (!touch(i, j)) continue;
                dfsMove(i, j);
            }
        }
        double ret[] = new double[N+N];
        for (i=0;i&lt;N;i++) {
            ret[i+i] = x[i];
            ret[i+i+1] = y[i];
        }
        return ret;
    }
}
</code></pre>

<p>按照格式写，然后返回结果就可以。这是最基本的。</p>

<h4>其实我们可以用他提供的工具先做调试</h4>

<p>一般每题会有available.这样一个链接， <br/>
进去后</p>

<h5>1、先下载页面顶上 CirclesSeparationVis.jar 和 一些其他的东西(如果有)</h5>

<h5>2、在这行In other words, you should implement the following pseudocode in the main method of your solution:的后面会给出一些输入输出步骤，把他们翻译成对应语言的输入输出，并且把他们写在主函数中，像这题的：</h5>

<pre><code>    N = parseInt(readLine())
    for (i=0; i &lt; N; i++)
        x[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        y[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        r[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        m[i] = parseDouble(readLine())
    ret = minimumWork(x, y, r, m)
    for (i=0; i &lt; 2*N; i++)
        printLine(ret[i])
    flush(stdout)
</code></pre>

<p>翻译成java的是：
<code>
    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in);
        double x[], y[], r[], m[], ret[];
        int N, i;
        N = cin.nextInt();
        x = new double[N];
        y = new double[N];
        r = new double[N];
        m = new double[N];
        for (i=0;i&lt;N;i++) x[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) y[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) r[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) m[i] = cin.nextDouble();
        CirclesSeparation rrr = new CirclesSeparation();
        ret = rrr.minimumWork(x, y, r, m);
        for (i=0;i&lt;N+N;i++) {
            System.out.println(ret[i]);
        }
    }
</code>
把这个函数加到最基本的当中，这样一个就形成一个完整的可执行程序，编译它生成对应目标代码。
<code>
$ javac CirclesSeparation.java
</code></p>

<h5>3、再往下可以找到一句类似于：</h5>

<pre><code>java -jar CirclesSeparationVis.jar -exec "&lt;command&gt;"
</code></pre>

<p>的语句。
<code>
java 的&lt;command&gt;是 java CirclesSeparation
</code>
所以运行:
<code>
java -jar CirclesSeparationVis.jar -exec "java CirclesSeparation"
</code>
就可以看到结果了。</p>

<p>可以用 -seed=X 来选择第几组样例，可以用 -novis 来关闭图形显示</p>

<h5>4、当用这个工具的时候System.out.println()的输出会被工具截获，要输出调试信息可以用System.err.println()</h5>

<h5>5、有时候需要改CirclesSeparationVis.jar代码，以满足我们的调试需求。可以下载CirclesSeparationVis.java，然后javac编译之，在使用的时候改用：</h5>

<pre><code>java CirclesSeparationVis -exec "java CirclesSeparation"
</code></pre>

<h5>6、用long t=System.currentTimeMillis()统计时间，是千分之一秒</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[大牛的]后缀数组总结]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/09/alg-suffix/"/>
    <updated>2014-04-09T17:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/09/alg-suffix</id>
    <content type="html"><![CDATA[<h5>双关键字的基数排序</h5>

<p>先对关键字2进行排序，然后再对关键字1进行稳定排序。 后缀数组中用到了这点。</p>

<hr />

<p><a href="http://hi.baidu.com/ahnkftravhdhkyr">大牛在这里</a></p>

<p>  后缀数组是处理字符串的有力工具。后缀数组是后缀树的一个非常精巧的替代品，它比后缀树容易编程实现，能够实现后缀树的很多功能而时间复杂度也并不逊色，而且它比后缀树所占用的内存空间小很多。可以说，后缀数组比后缀树要更为实用。自从拜读了罗穗骞大牛的WC2009论文《后缀数组——处理字符串的有力工具》后，经过若干星期的努力（中间有因某些原因而缓下来），终于把论文上面的练习题全部完成了，现在写写自己对后缀数组的理解和感悟。在看本笔记时，请不要忘记了，这是笔记，而教材是《后缀数组——处理字符串的有力工具》。</p>

<h4>一：后缀数组的实现</h4>

<ol>
<li>定义：Suffix Array数组（SA数组）用于保存从小到大排好序之后的后缀。RANK名次数组用来保存后缀S[i..n]在所有后缀中是第几小的后缀。简单来说，SA数组表示的是“排第几的是谁”，RANK数组表示的是“你的排名是多少”。</li>
<li>求SA数组以及RANK数组的方法：详细的请转到罗穗骞大牛的论文，我的学习笔记重点不是要介绍这个。</li>
<li>对DA（倍增算法）的一些个人理解：由于我只学习了倍增算法，所以我只能谈谈我对它的理解。DC3算法我没有去研究&hellip;.</li>
</ol>


<p>DA算法我是根据罗穗骞的模板写的，根据自己的理解做了些许的小优化。我们现在来看看罗穗骞大牛的模板：
<code>
    int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
    int cmp(int *r,int a,int b,int l)
    {return r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];}
    void da(int *r,int *sa,int n,int m)
    {
        int i,j,p,*x=wa,*y=wb,*t;
        for(i=0;i&lt;m;i++) ws[i]=0;
        for(i=0;i&lt;n;i++) ws[x[i]=r[i]]++;
        for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
        for(i=n-1;i&gt;=0;i--) sa[--ws[x[i]]]=i;
        for(j=1,p=1;p&lt;n;j*=2,m=p)
        {
            for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;
            for(i=0;i&lt;n;i++) if(sa[i]&gt;=j) y[p++]=sa[i]-j;
            for(i=0;i&lt;n;i++) wv[i]=x[y[i]];
            for(i=0;i&lt;m;i++) ws[i]=0;
            for(i=0;i&lt;n;i++) ws[wv[i]]++;
            for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
            for(i=n-1;i&gt;=0;i--) sa[--ws[wv[i]]]=y[i];
            for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i&lt;n;i++)
            x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
        }
        return;
    }
</code>
其实，我个人认为，对于这个算法以及代码，无需过分深入地理解，只需记忆即可，理解只是为了帮助记忆罢了。先解释变量：n为字符串长度，m为字符的取值范围，r为字符串。后面的j为每次排序时子串的长度。
<code>
    for(i=0;i&lt;m;i++) ws[i]=0;
    for(i=0;i&lt;n;i++) ws[x[i]=r[i]]++;
    for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i&gt;=0;i--) sa[--ws[x[i]]]=i;
</code>
这四行代码，进行的是对R中长度为1的子串进行基数排序。x数组在后面需要用到，所以先复制r数组的值。特别需要注意的是，第四行的for语句，初始化语句为i=n-1，如果写得不太熟练，很容易习惯性地写成i=0，我一开始就是。理解这是基数排序的最好方法，找个例子，自己推推&hellip;.
<code>
    for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;
    for(i=0;i&lt;n;i++) if(sa[i]&gt;=j) y[p++]=sa[i]-j;
</code>
这两行代码，利用了上一次基数排序的结果，对待排序的子串的第二关键字进行了一次高效地基数排序。我们可以结合下面的图来理解：</p>

<p>不难发现，除了第一次基数排序以外，之后的每次双关键字排序，设此次排序子串长度为j，则从第n-j位开始的子串，其第二关键字均为0，所以得到第一个for语句：for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;使用pascal的朋友们注意了，这里之所以是n-j位，是因为c++的字符串是从第0位开始表示的。这里，p暂时成为了一个计数变量。第二个语句的意义，分析上图也不难理解，这里留给朋友们你们自行思考啦。（不如说我懒&hellip;）
<code>
    for(i=0;i&lt;n;i++) wv[i]=x[y[i]];
    for(i=0;i&lt;m;i++) ws[i]=0;
    for(i=0;i&lt;n;i++) ws[wv[i]]++;
    for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i&gt;=0;i--) sa[--ws[wv[i]]]=y[i];
</code>
与一开始的4个for语句意义相同，基数排序。至于为什么wv[i]=x[y[i]]，这个我想了蛮久没想通&hellip;硬记算了- -哪位朋友理解的希望能告诉我一声&hellip;
<code>
    for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i&lt;n;i++)
        x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
</code>
这个for语句中的初始化语句里，完成了x数组和y数组的交换，用了指针的交换节约时间，简化代码。这里需要注意的是p和i的初始值都是1，不是0.其实如果记得后面的语句，不难看出它们的初始值不能为0，因为后面有i-1和p-1嘛。这个for语句的意义要结合cmp函数来理解。反正，你知道这里p的值表示的是此时关键字不同的串的数量就对了。当 p=n 的时候，说明所有串都已经排好序了（它们的排名都唯一确定）。所以，一开始的循环语句中，循环条件是（p&lt;n）。</p>

<p>另外，在使用倍增算法前，需要保证r数组的值均大于0。然后要在原字符串后添加一个0号字符，具体原因参见罗穗骞的论文。这时候，若原串的长度为n，则实际要进行后缀数组构建的r数组的长度应该为n+1.所以调用da函数时，对应的n应为n+1.</p>

<h4>二、后缀数组的应用&ndash;height数组</h4>

<p>在介绍后缀数组的应用前，先介绍后缀数组的一个重要附属数组：height数组。
1、height 数组：定义height[i]=suffix(sa[i-1])和suffix(sa[i])的最长公
共前缀，也就是排名相邻的两个后缀的最长公共前缀。
height数组是应用后缀数组解题是的核心，基本上使用后缀数组解决的题目都是依赖height数组完成的。</p>

<p>2、height数组的求法：具体的求法参见罗穗骞的论文。对于height数组的求法，我并没有去深刻理解，单纯地记忆了而已&hellip;有兴趣的朋友可以去钻研钻研再和我交流交流
这里给出代码：
<code>
    int rank[maxn],height[maxn];
    void calheight(int *r,int *sa,int n)
    {
        int i,j,k=0;
        for(i=1;i&lt;=n;i++) rank[sa[i]]=i;
        for(i=0;i&lt;n;height[rank[i++]]=k)
        for(k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
        return;
    }
</code>
3、一些注意事项：height数组的值应该是从height[1]开始的，而且height[1]应该是等于0的。原因是，因为我们在字符串后面添加了一个0号字符，所以它必然是最小的一个后缀。而字符串中的其他字符都应该是大于0的（前面有提到，使用倍增算法前需要确保这点），所以排名第二的字符串和0号字符的公共前缀（即height[1]）应当为0.在调用calheight函数时，要注意height数组的范围应该是[1..n]。所以调用时应该是calheight(r,sa,n)而不是calheight(r,sa,n+1)。要理解清楚这里的n的含义是什么。</p>

<p>calheight过程中，对rank数组求值的for语句的初始语句是i=1 而不是i=0 的原因，和上面说的类似，因为sa[0]总是等于那个已经失去作用的0号字符，所以没必要求出其rank值。当然你错写成for (i=0 ..)，也不会有什么问题。</p>

<h4>三、后缀数组解题总结：</h4>

<h5>1、求单个子串的不重复子串个数。SPOJ 694、SPOJ 705.</h5>

<p>  这个问题是一个特殊求值问题。要认识到这样一个事实：一个字符串中的所有子串都必然是它的后缀的前缀。（这句话稍微有点绕&hellip;）对于每一个sa[i]后缀，它的起始位置sa[i]，那么它最多能得到该后缀长度个子串（n-sa[i]个），而其中有height[i]个是与前一个后缀相同的，所以它能产生的实际后缀个数便是n-sa[i]-height[i]。遍历一次所有的后缀，将它产生的后缀数加起来便是答案。<br/>
代码及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/68f919f849748668024f56fb.html">http://hi.baidu.com/fhnstephen/blog/item/68f919f849748668024f56fb.html</a></p>

<h5>2、后缀的最长公共前缀。（记为lcp（x，y））</h5>

<p>这是height数组的最基本性质之一。具体的可以参看罗穗骞的论文。后缀i和后缀j的最长公共前缀的长度为它们在sa数组中所在排位之间的height值中的最小值。这个描述可能有点乱，正规的说，令x=rank[i],y=rank[j]，x&lt;y,那么lcp(i,j)=min(height[x+1],height[x+2]&hellip;height[y])。lcp(i,i)=n-sa[i]。解决这个问题，用RMQ的ST算法即可（我只会这个，或者用最近公共祖先那个转化的做法）。</p>

<h5>3、最长重复子串（可重叠）</h5>

<p>  要看到，任何一个重复子串，都必然是某两个后缀的最长公共前缀。因为，两个后缀的公共前缀，它出现在这两个后缀中，并且起始位置时不同的，所以这个公共前缀必然重复出现两次以上（可重叠）。而任何两个后缀的最长公共前缀为某一段height值中的最小值，所以最大为height值中的最大值（即某个lcp(sa[i],sa[i+1]））。所以只要算出height数组，然后输出最大值就可以了。<br/>
一道题目和代码：<a href="http://hi.baidu.com/fhnstephen/blog/item/4ed09dffdec0a78eb801a0ba.html">http://hi.baidu.com/fhnstephen/blog/item/4ed09dffdec0a78eb801a0ba.html</a></p>

<h5>4、最长重复不重叠子串 PKU1743</h5>

<p>  这个问题和3的唯一区别在于能否重叠。加上不能重叠这个限制后，直接求解比较困难，所以我们选择二分枚举答案，将问题转换为判定性问题。假设当时枚举的长度为k，那么要怎样判断是否存在长度为k的重复不重叠子串呢？</p>

<p>  首先，根据height数组，将后缀分成若干组，使得每组后缀中，后缀之间的height值不小于k。这样分组之后，不难看出，如果某组后缀数量大于1，那么它们之中存在一个公共前缀，其长度为它们之间的height值的最小值。而我们分组之后，每组后缀之间height值的最小值大于等于k。所以，后缀数大于1的分组中，有可能存在满足题目限制条件的长度不小于k的子串。只要判断满足题目限制条件成立，那么说明存在长度至少为k的合法子串。</p>

<p>  对于本题，限制条件是不重叠，判断的方法是，一组后缀中，起始位置最大的后缀的起始位置减去起始位置最小的后缀的起始位置>=k。满足这个条件的话，那么这两个后缀的公共前缀不但出现两次，而且出现两次的起始位置间隔大于等于k，所以不会重叠。</p>

<p>深刻理解这种height分组方法以及判断重叠与否的方法，在后面的问题中起到举足轻重的作用。<br/>
练习及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/85a25b208263794293580759.html">http://hi.baidu.com/fhnstephen/blog/item/85a25b208263794293580759.html</a></p>

<h5>5、最长的出现k次的重复（可重叠）子串。 PKU3261</h5>

<p>  使用后缀数组解题时，遇到“最长”，除了特殊情况外（如问题3），一般需要二分答案，利用height值进行分组。本题的限制条件为出现k次。只需判断，有没有哪一组后缀数量不少于k就可以了。相信有了我前面问题的分析作为基础，这个应该不难理解。注意理解“不少于k次”而不是“等于k次”的原因。如果理解不了，可以找个具体的例子来分析分析。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/be7d15133ccbe7f0c2ce79bb.html">http://hi.baidu.com/fhnstephen/blog/item/be7d15133ccbe7f0c2ce79bb.html</a></p>

<h5>6、最长回文子串 ural1297</h5>

<p>  这个问题没有很直接的方法可以解决，但可以采用枚举的方法。具体的就是枚举回文子串的中心所在位置i。注意要分回文子串的长度为奇数还是偶数两种情况分析。然后，我们要做的，是要求出以i为中心的回文子串最长为多长。利用后缀数组，可以设计出这样一种求法：求i往后的后缀与i往前的前缀的最长公共前缀。我这里的表述有些问题，不过不影响理解。</p>

<p>  要快速地求这个最长前缀，可以将原串反写之后接在原串后面。在使用后缀数组的题目中，连接两个（n个）字符串时，中间要用不可能会出现在原串中，不一样的非0号的字符将它们隔开。这样可以做到不影响后缀数组的性质。然后，问题就可以转化为求两个后缀的最长公共前缀了。具体的细节，留给大家自己思考&hellip;（懒&hellip;原谅我吧，都打这么多字了..一个多小时了啊TOT ）<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/68342f1d5f9e3cf81ad576ef.html">http://hi.baidu.com/fhnstephen/blog/item/68342f1d5f9e3cf81ad576ef.html</a></p>

<h5>7、求一个串最多由哪个串复制若干次得到 PKU2406</h5>

<p>  具体的问题描述请参考PKU2406.这个问题可以用KMP解决，而且效率比后缀数组好。
利用后缀数组直接解决本题也很困难（主要是，就算二分答案，也难以解决转变而成的判定性问题。上题也是），但可以同过枚举模板串的长度k（模板串指被复制的那个串）将问题变成一个后缀数组可以解决的判定性问题。首先判断k能否被n整除，然后只要看lcp(1,k+1)（实际在用c写程序时是lcp(0,k)）是否为n-k就可以了。</p>

<p>  为什么这样就行了呢？这要充分考虑到后缀的性质。当lcp（1，k+1）=n-k时，后缀k+1是后缀1（即整个字符串）的一个前缀。（因为后缀k+1的长度为n-k）那么，后缀1的前k个字符必然和后缀k+1的前k个字符对应相同。而后缀1的第k+1..2k个字符，又相当于后缀k+1的前k个字符，所以与后缀1的前k个字符对应相同，且和后缀k的k+1..2k又对应相同。依次类推，只要lcp(1,k+1)=n-k,那么s[1..k]就可以通过自复制n/k次得到整个字符串。找出k的最小值，就可以得到n/k的最大值了。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/5d79f2efe1c3623127979124.html">http://hi.baidu.com/fhnstephen/blog/item/5d79f2efe1c3623127979124.html</a></p>

<h5>8、求两个字符串的最长公共子串。Pku2774、Ural1517</h5>

<p>  首先区分好“最长公共子串”和“最长公共子序列”。前者的子串是连续的，后者是可以不连续的。</p>

<p>  对于两个字符串的问题，一般情况下均将它们连起来，构造height数组。然后，最长公共子串问题等价于后缀的最长公共前缀问题。只不过，并非所有的lcp值都能作为问题的答案。只有当两个后缀分属两个字符串时，它们的lcp值才能作为答案。与问题3一样，本题的答案必然是某个height值，因为lcp值是某段height值中的最小值。当区间长度为1时，lcp值等于某个height值。所以，本题只要扫描一遍后缀，找出后缀分属两个字符串的height值中的最大值就可以了。判断方法这里就不说明了，留给大家自己思考&hellip;<br/>
题目及题解：<br/>
<a href="http://hi.baidu.com/fhnstephen/blog/item/8666a400cd949d7b3812bb44.html  ">http://hi.baidu.com/fhnstephen/blog/item/8666a400cd949d7b3812bb44.html  </a>
<a href="http://hi.baidu.com/fhnstephen/blog/item/b5c7585600cadfc8b645aebe.html">http://hi.baidu.com/fhnstephen/blog/item/b5c7585600cadfc8b645aebe.html</a></p>

<h5>9、重复次数最多的重复子串 SPOJ 687，Pku3693</h5>

<p>  难度比较大的一个问题，主要是罗穗骞的论文里的题解写得有点含糊不清。题目的具体含义可以去参考Pku3693.</p>

<p>  又是一题难以通过二分枚举答案解决的问题（因为要求的是重复次数），所以选择朴素枚举的方法。先枚举重复子串的长度k，再利用后缀数组来求长度为k的子串最多重复出现多少次。注意到一点，假如一个字符串它重复出现2次（这里不讨论一次的情况，因为那是必然的），那么它必然包含s[0],s[k],s[2<em>k]&hellip;之中的相邻的两个。所以，我们可以枚举一个数i，然后判断从i</em>k这个位置起的长度为k的字符串能重复出现多少次。判断方法和8中的相似，lcp(i<em>k,(i+1)</em>k)/k+1。但是，仅仅这样会忽略点一些特殊情况，即重复子串的起点不在[i<em>k]位置上时的情况。这种情况应该怎么求解呢？<br/>
看下面这个例子：<br/>
aabababc<br/>
当k=2，i=1时，枚举到2的位置，此时的重复子串为ba(注意第一位是0),lcp(2，4)=3，所以ba重复出现了2次。但实际上，起始位置为1的字符串ab出现次数更多，为3次。我们注意到，这种情况下，lcp(2,4)=3，3不是2的整数倍。说明当前重复子串在最后没有多重复出现一次，而重复出现了部分（这里是多重复出现了一个b）。如果我这样说你没有看懂，那么更具体地：<br/>
sa[2]=bababc<br/>
sa[4]=babc<br/>
lcp=bab<br/>
现在注意到了吧，ba重复出现了两次之后，出现了一个b，而a没有出现。那么，不难想到，可以将枚举的位置往前挪一位，这样这个最后的b就能和前面的一个a构成一个重复子串了，而假如前挪的一位正好是a，那么答案可以多1。所以，我们需要求出a=lcp(i</em>k,(i+1)*k)%n，然后向前挪k-a位，再用同样的方法求其重复出现的长度。这里，令b=k-a,只需要lcp(b,b+k)>=k就可以了。实际上，lcp(b,b+k)>=k时，lcp(b,b+k)必然大于等于之前求得的lcp值，而此时答案的长度只加1。没有理解的朋友细细体会下上图吧。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/870da9ee3651404379f0555f.html">http://hi.baidu.com/fhnstephen/blog/item/870da9ee3651404379f0555f.html</a></p>

<h5>10.多个串的公共子串问题 PKU3294</h5>

<p>首先将串连接起来，然后构造height数组，然后怎么办呢？<br/>
对，二分答案再判断是否可行就行了。可行条件很直观：有一组后缀，有超过题目要求的个数个不同的字符串中的后缀存在。即，假如题目要求要出现在至少k个串中，那么就得有一组后缀，在不同字符串中的后缀数大于等于k。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/49c3b7dec79ec5e377c638f1.html">http://hi.baidu.com/fhnstephen/blog/item/49c3b7dec79ec5e377c638f1.html</a></p>

<h5>11、出现或反转后出现所有字符串中的最长子串 PKU1226</h5>

<p><a href="http://hi.baidu.com/fhnstephen/blog/item/7fead5020a16d2da267fb5c0.html">http://hi.baidu.com/fhnstephen/blog/item/7fead5020a16d2da267fb5c0.html</a></p>

<h5>12、不重叠地至少两次出现在所有字符串中的最长子串</h5>

<p>spoj220 <a href="http://hi.baidu.com/fhnstephen/blog/item/1dffe1dda1c98754cdbf1a35.html">http://hi.baidu.com/fhnstephen/blog/item/1dffe1dda1c98754cdbf1a35.html</a></p>

<p>之所以把两题一起说，因为它们大同小异，方法在前面的题目均出现过。对于多个串，连起来；反转后出现，将每个字符串反写后和原串都连起来，将反写后的串和原串看成同一个串；求最长，二分答案后height分组；出现在所有字符串中（反写后的也行），判断方法和10一样，k=n而已；不重叠见问题4，只不过这里对于每个字符串都要进行检验而已。</p>

<h5>13、两个字符串的重复子串个数。 Pku3415</h5>

<p>我个人觉得颇有难度的一个问题。具体的题目描述参看Pku3415。<br/>
大家可以移步到这：<a href="http://hi.baidu.com/fhnstephen/blog/item/bf06d001de30fc034afb51c1.html">http://hi.baidu.com/fhnstephen/blog/item/bf06d001de30fc034afb51c1.html</a></p>

<h5>14、最后的总结</h5>

<p>用后缀数组解题有着一定的规律可循，这是后缀的性质所决定的，具体归纳如下：<br/>
1、N个字符串的问题（N>1）<br/>
方法：将它们连接起来，中间用不会出现在原串中的，互不相同的，非0号字符分隔开。</p>

<p>2、无限制条件下的最长公共子串（重复子串算是后缀们的最长公共前缀）<br/>
方法：height的最大值。这里的无限制条件是对子串无限制条件。最多只能是两个串的最长公共子串，才可以直接是height的最大值。</p>

<p>3、特殊条件下的最长子串<br/>
方法：二分答案，再根据height数组进行分组，根据条件完成判定性问题。三个或以上的字符串的公共子串问题也需要二分答案。设此时要验证的串长度为len，特殊条件有：<br/>
3.1、出现在k个串中<br/>
条件：属于不同字符串的后缀个数不小于k。（在一组后缀中，下面省略）<br/>
3.2、不重叠<br/>
条件：出现在同一字符串中的后缀中，出现位置的最大值减最小值大于等于len。<br/>
3.3、可重叠出现k次<br/>
条件：出现在同一字符串中的后缀个数大于等于k。若对于每个字符串都需要满足，需要逐个字符串进行判断。</p>

<p>4、特殊计数<br/>
方法：根据后缀的性质，和题目的要求，通过自己的思考，看看用后缀数组能否实现。一般和“子串”有关的题目，用后缀数组应该是可以解决的。</p>

<p>5、重复问题<br/>
知道一点：lcp(i,i+k)可以判断，以i为起点，长度为k的一个字符串，它向后自复制的长度为多少，再根据具体题目具体分析，得出算法即可。</p>
]]></content>
  </entry>
  
</feed>
