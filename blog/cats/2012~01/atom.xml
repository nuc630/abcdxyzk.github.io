<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~01 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~01/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-23T18:01:22+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树套树 -- zju2112 - rujia Liu's Present 3 D]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/01/16/alg-bit-sbt/"/>
    <updated>2012-01-16T21:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/01/16/alg-bit-sbt</id>
    <content type="html"><![CDATA[<h5>zju2112</h5>

<p>树状数组每个点都是一个SBT
```
    #include &lt;stdio.h>
    #include <algorithm>
    #include <iostream></p>

<pre><code>#define N 2000005
using namespace std;

int tol=0;
struct SBT
{
    int left,right;
    int key;
    int size;
    void init()
    {
        left=right=0;
        size=1;
    }
}T[N];
void R_Rotate(int &amp;t)//右旋
{
    int k=T[t].left;
    T[t].left=T[k].right;
    T[k].right=t;
    T[k].size=T[t].size;
    T[t].size=T[T[t].left].size+T[T[t].right].size+1;
    t=k;
    return ;
}
void L_Rotate(int &amp;t)//左旋
{
    int k=T[t].right;
    T[t].right=T[k].left;
    T[k].left=t;
    T[k].size=T[t].size;
    T[t].size=T[T[t].left].size+T[T[t].right].size+1;
    t=k;
}
void Maintain(int &amp;t,bool flag)//维护，SBT精华之所在
{
    if(flag==false)
    {
        if(T[T[T[t].left].left].size&gt;T[T[t].right].size)
            R_Rotate(t);
        else if(T[T[T[t].left].right].size&gt;T[T[t].right].size)
        {
            L_Rotate(T[t].left);
            R_Rotate(t);
        }
        else
            return ;
    }
    else
    {
        if(T[T[T[t].right].right].size&gt;T[T[t].left].size)
            L_Rotate(t);
        else if(T[T[T[t].right].left].size&gt;T[T[t].left].size)
        {
            R_Rotate(T[t].right);
            L_Rotate(t);
        }
        else
            return ;
    }
    Maintain(T[t].left,false);
    Maintain(T[t].right,true);
    Maintain(t,false);
    Maintain(t,true);
}
void Insert(int &amp;t,int v)//插入
{
    if(t==0)
    {
        t=++tol;
        T[t].init();
        T[t].key=v;
    }
    else
    {
        T[t].size++;
        if(v&lt;T[t].key)
            Insert(T[t].left,v);
        else
            Insert(T[t].right,v);
        Maintain(t,v&gt;=T[t].key);
    }
}
int Delete(int &amp;t,int v)//删除
{
    if(!t)
        return 0;
    T[t].size--;
    if(v==T[t].key||v&lt;T[t].key&amp;&amp;!T[t].left||v&gt;T[t].key&amp;&amp;!T[t].right)
    {
        if(T[t].left&amp;&amp;T[t].right)
        {
            int p=Delete(T[t].left,v+1);
            T[t].key=T[p].key;
            return p;
        }
        else
        {
            int p=t;
            t=T[t].left+T[t].right;
            return p;
        }
    }
    else
        return Delete(v&lt;T[t].key?T[t].left:T[t].right,v);
}
int Find_k(int t,int k)//找出第k大数
{
   if(k&lt;=T[T[t].left].size)
        return Find_k(T[t].left,k);
    else if(k&gt;T[T[t].left].size+1)
        return Find_k(T[t].right,k-T[T[t].left].size-1);
    return T[t].key;
}
int Getmin(int t)//取最小值
{
    while(T[t].left)
        t=T[t].left;
    return t;
}
int Getmax(int t)//取最大值
{
    while(T[t].right)
        t=T[t].right;
    return t;
}
int Rank(int t,int key)//排名其实就是它的左子树的size+1
{
    if(t==0)
        return 0;
    if(key&lt;T[t].key)
        return Rank(T[t].left,key);
    else
        return T[T[t].left].size+1+Rank(T[t].right,key);
}
int Exist(int t,int x)//判断这个节点是否存在
{
    if(t==0)
        return 0;
    if(x&lt;T[t].key)
        return Exist(T[t].left,x);
    else if(x==T[t].key)
        return 1;
    else
        return Exist(T[t].right,x);
}
int Count(int t,int x)//统计出现次数
{
    if(!Exist(t,x))
        return 0;
    else
        return Rank(t,x+1)-Rank(t,x);
}
int Pred(int t,int v)//返回比v小的最大的数
{
    if(t==0)
        return v;
    else if(v&gt;T[t].key)
    {
        int ret=Pred(T[t].right,v);
        if(ret==v)
            return T[t].key;
        return ret;
    }
    else
        return Pred(T[t].left,v);
}
int Succ(int t,int v)//返回比v大的最小的数
{
    if(t==0)
        return v;
    else if(v&lt;T[t].key)
    {
        int ret=Succ(T[t].left,v);
        if(ret==v)
            return T[t].key;
        return ret;
    }
    else
        return Succ(T[t].right,v);
}


int n,m, C[100009], a[100009];

void Myinsert(int x, int y)
{
    while(x &lt;= n) {
        Insert(C[x], y);
        x += x&amp;(-x);
    }
}

void Mydelete(int x, int y)
{
    while(x &lt;= n) {
        Delete(C[x], y);
        x += x&amp;(-x);
    }
}

int Myrank(int x, int y)
{
    int t=0;
    while(x &gt; 0) {
        t += Rank(C[x], y);
        x -= x&amp;(-x);
    }
    return t;
}

int main()
{
    int i,j,k;
    int low,mid,up;
    int T;
    scanf("%d", &amp;T);
    while(T--)
    {
        scanf("%d %d", &amp;n, &amp;m);
        tol = 0;
        for(i=0;i&lt;=n;i++) C[i] = 0;
        for(i=1;i&lt;=n;i++)
        {
            scanf("%d", &amp;a[i]);
            Myinsert(i, a[i]);
        }
        while(m--)
        {
            char ch[5];
            scanf("%s", ch);
            if(ch[0] == 'Q')
            {
                scanf("%d %d %d", &amp;i, &amp;j, &amp;k);
                low = 0; up = 1000000000;
                while(low &lt; up)
                {
                    mid = (low+up)&gt;&gt;1;
                    int s1 = Myrank(i-1, mid);
                    int s2 = Myrank(j, mid);
                    if(s2 - s1 &lt; k)
                        low = mid+1;
                    else
                        up = mid;
                }
                printf("%d\n", (low+up)&gt;&gt;1);
            }
            else
            {
                scanf("%d %d", &amp;i, &amp;k);
                Mydelete(i, a[i]);
                Myinsert(i, k);
                a[i] = k;
            }
        }
    }
    return 0;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SBT -- poj2828]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/01/16/alg-sbt/"/>
    <updated>2012-01-16T21:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/01/16/alg-sbt</id>
    <content type="html"><![CDATA[<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;algorithm&gt;
    #include &lt;iostream&gt;

    #define N 4000005
    using namespace std;

    int tol=0;
    struct SBT
    {
        int left,right;
        int key;
        int size;
        void init()
        {
            left=right=0;
            size=1;
        }
    }T[N];

    void R_Rotate(int &amp;t)//右旋
    {
        int k=T[t].left;
        T[t].left=T[k].right;
        T[k].right=t;
        T[k].size=T[t].size;
        T[t].size=T[T[t].left].size+T[T[t].right].size+1;
        t=k;
        return ;
    }
    void L_Rotate(int &amp;t)//左旋
    {
        int k=T[t].right;
        T[t].right=T[k].left;
        T[k].left=t;
        T[k].size=T[t].size;
        T[t].size=T[T[t].left].size+T[T[t].right].size+1;
        t=k;
    }
    void Maintain(int &amp;t,bool flag)//维护，SBT精华之所在
    {
        if(flag==false)
        {
            if(T[T[T[t].left].left].size&gt;T[T[t].right].size)
                R_Rotate(t);
            else if(T[T[T[t].left].right].size&gt;T[T[t].right].size)
            {
                L_Rotate(T[t].left);
                R_Rotate(t);
            }
            else
                return ;
        }
        else
        {
            if(T[T[T[t].right].right].size&gt;T[T[t].left].size)
                L_Rotate(t);
            else if(T[T[T[t].right].left].size&gt;T[T[t].left].size)
            {
                R_Rotate(T[t].right);
                L_Rotate(t);
            }
            else
                return ;
        }
        Maintain(T[t].left,false);
        Maintain(T[t].right,true);
        Maintain(t,false);
        Maintain(t,true);
    }
    void Insert(int &amp;t,int v)//插入
    {
        if(t==0)
        {
            t=++tol;
            T[t].init();
            T[t].key=v;
        }
        else
        {
            T[t].size++;
            if(v&lt;T[t].key)
                Insert(T[t].left,v);
            else
                Insert(T[t].right,v);
            Maintain(t,v&gt;=T[t].key);
        }
    }
    int Delete(int &amp;t,int v)//删除
    {
        if(!t)
            return 0;
        T[t].size--;
        if(v==T[t].key||v&lt;T[t].key&amp;&amp;!T[t].left||v&gt;T[t].key&amp;&amp;!T[t].right)
        {
            if(T[t].left&amp;&amp;T[t].right)
            {
                int p=Delete(T[t].left,v+1);
                T[t].key=T[p].key;
                return p;
            }
            else
            {
                int p=t;
                t=T[t].left+T[t].right;
                return p;
            }
        }
        else
            return Delete(v&lt;T[t].key?T[t].left:T[t].right,v);
    }
    int Find_k(int t,int k)//找出第k大数
    {
       if(k&lt;=T[T[t].left].size)
            return Find_k(T[t].left,k);
        else if(k&gt;T[T[t].left].size+1)
            return Find_k(T[t].right,k-T[T[t].left].size-1);
        return T[t].key;
    }
    int Getmin(int t)//取最小值
    {
        while(T[t].left)
            t=T[t].left;
        return t;
    }
    int Getmax(int t)//取最大值
    {
        while(T[t].right)
            t=T[t].right;
        return t;
    }
    int Rank(int t,int key)//排名其实就是它的左子树的size+1
    {
        if(t==0)
            return 0;
        if(key&lt;=T[t].key)
            return Rank(T[t].left,key);
        else
            return T[T[t].left].size+1+Rank(T[t].right,key);
    }
    int eRank(int t,int key)//倒过来排名
    {
        if(t==0)
            return 0;
        if(key&gt;=T[t].key)
            return eRank(T[t].right,key);
        else
            return T[T[t].right].size+1+eRank(T[t].left,key);
    }

    int Exist(int t,int x)//判断这个节点是否存在
    {
        if(t==0)
            return 0;
        if(x&lt;T[t].key)
            return Exist(T[t].left,x);
        else if(x==T[t].key)
            return 1;
        else
            return Exist(T[t].right,x);
    }
    int Count(int t,int x)//统计出现次数
    {
        if(!Exist(t,x))
            return 0;
        else
            return Rank(t,x+1)-Rank(t,x);
    }
    int Pred(int t,int v)//返回比v小的最大的数
    {
        if(t==0)
            return v;
        else if(v&gt;T[t].key)
        {
            int ret=Pred(T[t].right,v);
            if(ret==v)
                return T[t].key;
            return ret;
        }
        else
            return Pred(T[t].left,v);
    }
    int Succ(int t,int v)//返回比v大的最小的数
    {
        if(t==0)
            return v;
        else if(v&lt;T[t].key)
        {
            int ret=Succ(T[t].left,v);
            if(ret==v)
                return T[t].key;
            return ret;
        }
        else
            return Succ(T[t].right,v);
    }

    ////////////////////////

    int n,m, a[200009], b[200009], c[200009];

    void dfs(int root)
    {
        if(root == 0) return;
        dfs(T[root].left);
        if(m &gt; 0) printf(" ");
        printf("%d", T[root].key);
        m++;
        dfs(T[root].right);
    }

    int main()
    {
        int i,j,k;
        int root;

        while(scanf("%d", &amp;n) != EOF)
        {
            tol = 0;
        root = 0;
            for(i=1;i&lt;=n;i++)
        {
                scanf("%d %d", &amp;a[i], &amp;b[i]);
            Insert(root, i);
        }
        for(i=n;i&gt;0;i--)
        {
            k = Find_k(root, a[i]+1);
            c[k] = b[i];
            Delete(root, k);
        }
        for(i=1;i&lt;n;i++) printf("%d ", c[i]);
        printf("%d\n", c[i]);
        m = 0;
        dfs(root);
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
