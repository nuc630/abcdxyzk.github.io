<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~centos | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~centos/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-02T12:22:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS各种设置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/04/01/centos-base/"/>
    <updated>2015-04-01T23:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/04/01/centos-base</id>
    <content type="html"><![CDATA[<p>vmware虚拟机mkinitrd提示no module ehci-hcd 错误的话，加：
<code>
 --builtin=ehci-hcd --builtin=ohci-hcd --builtin=uhci-hcd
</code></p>

<hr />

<p>CentOS6.0 下默认开selinux时出现httpd 报“SELinux policy enabled; httpd running as context unconfined_u:system”的解决方案
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install policycoreutils-python&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# To allow httpd to use nfs dirs in CentOS-6
</span><span class='line'>setsebool -P httpd_use_nfs 1
</span><span class='line'>setsebool -P httpd_enable_homedirs 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>-----------
</span><span class='line'>
</span><span class='line'>#### CentOS 关闭防火墙
</span><span class='line'>1） 永久性生效，重启后不会复原  
</span><span class='line'>开启： chkconfig iptables on  
</span><span class='line'>关闭： chkconfig iptables off  
</span><span class='line'>
</span><span class='line'>2） 即时生效，重启后复原  
</span><span class='line'>开启： service iptables start  
</span><span class='line'>关闭： service iptables stop  
</span><span class='line'>
</span><span class='line'>------------
</span><span class='line'>
</span><span class='line'>#### CentOS安装软件：/lib/ld-linux.so.2: bad ELF interpreter 解决
</span><span class='line'>是因为64位系统中安装了32位程序, 解决方法：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;yum install glibc.i686
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其他包
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;yum install libstdc++.i686
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>#### gcc, c++
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;yum install glibc
</span><span class='line'>yum install glibc-devel
</span><span class='line'>yum install gcc-c++
</span><span class='line'>yum install libstdc++
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[修改、重新生成和安装src.rpm源码包]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-10-30T09:50:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/10/30/tools-src-rpm&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;RHEL/CentOS/Fedora/Suse等Linux发行版都使用rpm包作为软件包格式。另外还有一个相关的格式srpm包（后缀是.src.rpm），它包含了源代码，可以用它重新生成rpm包。&lt;br/&gt;
</span><span class='line'>当前最新发行的RHEL/CentOS是6.X版本。目前最新版是RHEL6.5/CentOS6.5。（CentOS是RHEL的免费版本，与RHEL对应版本完全等价，除了去掉了Redhat的LOGO。）&lt;br/&gt;
</span><span class='line'>在如下地址，可以找到RHEL6的所有rpm包的源码包：&lt;em&gt;.src.rpm。&lt;br/&gt;
</span><span class='line'>&lt;a href="http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  "&gt;http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/  &lt;/a&gt;
</span><span class='line'>CentOS就是使用这些&lt;/em&gt;src.rpm源码包构建出所有RPM包，生成CentOS操作系统的。&lt;br/&gt;
</span><span class='line'>*src.rpm源码包解压出来后，可以看到有该软件的源代码压缩包和一些patch文件。&lt;br/&gt;
</span><span class='line'>如果rpm包有问题，我们可以去&lt;code&gt;http://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/&lt;/code&gt;下载对应的src.rpm包，然后把它解开后修改源代码，重新编译和生成rpm包，进行分发和安装。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;直接安装*src.rpm源码包&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有时，我们没有找到可用的rpm包，但找到了其对应的&lt;em&gt;src.rpm源码包，此时我们可以安装这个&lt;/em&gt;src.rpm源码包。步骤与直接安装rpm包很不相同。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rpm -i /tmp/mypackage-1.0.0-1.src.rpm
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>此时还没有安装完成。只是在~/rpmbuild/ 目录下准备了该src.rpm源码包的资源，可用于进一步生成rpm包。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[user@host ~]$ cd ~/rpmbuild/SPECS
</span><span class='line'>[user@host SPECS]$ rpmbuild -ba mypackage.spec
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;你也可以直接使用如下命令：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rpmbuild --rebuild /tmp/mypackage-1.0.0-1.src.rpm
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个命令一步即可在～/rpmbuild/RPMS/目录下重新生成rpm包。&lt;br/&gt;
</span><span class='line'>基于*src.rpm源码包修改代码后生成rpm包并安装&lt;br/&gt;
</span><span class='line'>rpmbuild命令基于.spec文件和源码tar.gz及patch文件生成src.rpm和rpm包。&lt;br/&gt;
</span><span class='line'>因此，我们只需要修改.spec文件，或者对应的源码和patch文件，然后再执行&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>rpmbuild -ba mypackage.spec
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>命令，就可以生成更新后的src.rpm包和rpm包。rpm包在~/rpmbuild/RPMS目录下，&lt;br/&gt;
</span><span class='line'>src.rpm包在~/rpmbuild/SRPMS目录下。注意,要修改~/rpmbuild/SOURCES/目录下的文件:&lt;br/&gt;
</span><span class='line'>1. 你可以重新打包~/rpmbuild/SOURCES/目录下的tar.gz源文件。&lt;br/&gt;
</span><span class='line'>2. 你可以修改.spec文件，增加或者减少对patch的应用。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[centos系统各种包下载]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/06/09/system-centos-packages/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-06-09T15:15:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/06/09/system-centos-packages&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;1、系统包&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;http://mirror.centos.org/centos/6.5/os/x86_64/Packages/
</span><span class='line'>国内地址
</span><span class='line'>http://isoredirect.centos.org/centos/6.5/isos/x86_64/  
</span><span class='line'>ex：
</span><span class='line'>http://mirror.symnds.com/distributions/CentOS-vault/5.5/isos/x86_64/  
</span><span class='line'>http://mirrors.stuhome.net/centos/6.5/isos/x86_64/  
</span><span class='line'>http://mirrors.neusoft.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.163.com/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.hust.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://centos.ustc.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirror.bit.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.tuna.tsinghua.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.grandcloud.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirror.neu.edu.cn/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.btte.net/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.hustunique.com/centos/6.5/isos/x86_64/
</span><span class='line'>http://mirrors.aliyun.com/centos/6.5/isos/x86_64/
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2、debuginfo包：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;http://debuginfo.centos.org/6/x86_64/
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3、src.prm包&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ftp://ftp.redhat.com/pub/redhat/linux/enterprise
</span><span class='line'>ftp://ftp.redhat.com/pub/redhat/linux/enterprise/5Client/en/os/SRPMS/kexec-tools-1.102pre-154.el5.src.rpm
</span><span class='line'>ftp://ftp.redhat.com/pub/redhat/linux/enterprise/5Client/en/os/SRPMS/kexec-tools-1.102pre-164.el5.src.rpm
</span><span class='line'>http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4、各种包&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pkgs/org
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux RPM 命令使用]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/02/18/rpm-cmd/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-02-18T15:19:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/02/18/rpm-cmd&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h5&gt;如何解压RPM包&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  有时我们需要RPM包中的某个文件，如何解压RPM包呢？RPM包括是使用cpio格式打包的，因此可以先转成cpio然后解压，如下所示：&lt;br/&gt;
</span><span class='line'>rpm2cpio xxx.rpm | cpio -div&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;rpm 命令&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  二进制包（Binary）以及源代码包（Source）两种。二进制包可以直接安装在计算机中，而源代码包将会由 RPM自动编译、安装。源代码包经常以src.rpm作为后缀名。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;常用命令组合：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;－ivh：安装显示安装进度--install--verbose--hash
</span><span class='line'>－Uvh：升级软件包--Update；
</span><span class='line'>－qpl： 列出RPM软件包内的文件信息[Query Package list]；
</span><span class='line'>－qpi：列出RPM软件包的描述信息[Query Package install package(s)]；
</span><span class='line'>－qf：查找指定文件属于哪个RPM软件包[Query File]；
</span><span class='line'>－Va：校验所有的 RPM软件包，查找丢失的文件[View Lost]；
</span><span class='line'>－e：删除包
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rpm -ivh &ndash;test gaim-1.3.0-1.fc4.i386.rpm　　　 //用来检查依赖关系；并不是真正的安装；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;常用参数：&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Install/Upgrade/Erase options:</span></code></pre></td></tr></table></div></figure>
-i, &ndash;install                     install package(s)
-v, &ndash;verbose                     provide more detailed output
-h, &ndash;hash                        print hash marks as package installs (good with -v)
-e, &ndash;erase                       erase (uninstall) package
-U, &ndash;upgrade=<packagefile>+      upgrade package(s)
－-replacepkge                    无论软件包是否已被安装，都强行安装软件包
&ndash;test                            安装测试，并不实际安装
&ndash;nodeps                          忽略软件包的依赖关系强行安装
&ndash;force                           忽略软件包及文件的冲突</p>

<p>Query options (with -q or &ndash;query):
-a, &ndash;all                         query/verify all packages
-p, &ndash;package                     query/verify a package file
-l, &ndash;list                        list files in package
-d, &ndash;docfiles                    list all documentation files
-f, &ndash;file                        query/verify package(s) owning file
```</p>

<h4>rpm 依赖</h4>

<pre><code>[root@localhost  src]# rpm -qpR awstats-6.8-1.noarch.rpm
/bin/sh
/usr/bin/perl
config(awstats)  = 6.8-1
perl &gt;= 0:5.005
perl(LWP::UserAgent)
perl(POSIX)
perl(Socket)
perl(Time::Local)
perl(strict)
perl(vars)
rpmlib(CompressedFileNames)  &lt;= 3.0.4-1
rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rpmbuild SPEC文件说明]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/02/10/rpm-rpmbuild-base/"/>
    <updated>2014-02-10T16:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/02/10/rpm-rpmbuild-base</id>
    <content type="html"><![CDATA[<p>在rpmbuild -ba时，遇到如下错误：<br/>
ERROR: No build ID note found in /home/wuyang/rpmbuild/BUILDROOT/******<br/>
error: Bad exit status from /var/tmp/rpm-tmp.BPd1OI (%install)
解决方法是在.spec文件中任意位置添加如下参数：<br/>
%define <em><em>debug_install_post %{</em>rpmconfigdir}/find-debuginfo.sh %{?</em>find_debuginfo_opts} &ldquo;%{_builddir}/%{?buildsubdir}&rdquo; %{nil}</p>

<hr />

<h5>rpmbuild源代码打包</h5>

<p>  将源代码打包，如 stardict-2.0.tar.gz，并将文件放到spec文件Source段所描述的路径下，通常为/usr/src/redhat /SOURCES/目录下（不同的Linux发布版本略有不同，如OpenSUSE为 /usr/src/packages/SOURCES/）</p>

<p><code>rpmbuild -ba ‘spec文件路径’</code><br/>
（rpmbuild常用参数： -bb 只编译二进制rpm包 -bs 只编译源码rpm包 -ba 同时编译二进制和源码rpm包）<br/>
build完后，可以在/usr/src/redhat/RPMS/下找到二进制rpm包，rpm包按照其对应的cpu体系结构分类，通常在/usr/src/redhat/RPMS/i386目录下<br/>
/usr/src/redhat/SRPMS/下找到源码rpm包，此时由于是源代码，所以无须按体系结构分类。</p>

<hr />

<h4>一、关键字</h4>

<p>spec脚本包括很多关键字，主要有：
<code>
Name: 软件包的名称，后面可使用%{name}的方式引用
Summary: 软件包的内容概要
Version: 软件的实际版本号，例如：1.0.1等，后面可使用%{version}引用
Release: 发布序列号，例如：1linuxing等，标明第几次打包，后面可使用%{release}引用
Group: 软件分组，建议使用标准分组
License: 软件授权方式，通常就是GPL
Source: 源代码包，可以带多个用Source1、Source2等源，后面也可以用%{source1}、%{source2}引用
BuildRoot: 这个是安装或编译时使用的“虚拟目录”，考虑到多用户的环境，一般定义为：
%{_tmppath}/%{name}-%{version}-%{release}-root
或
%{_tmppath}/%{name}-%{version}-%{release}-buildroot-%(%{__id_u} -n}
该参数非常重要，因为在生成rpm的过程中，执行make install时就会把软件安装到上述的路径中，在打包的时候，同样依赖“虚拟目录”为“根目录”进行操作。
后面可使用$RPM_BUILD_ROOT方式引用。
URL: 软件的主页
Vendor: 发行商或打包组织的信息，例如RedFlag Co,Ltd
Disstribution: 发行版标识
Patch: 补丁源码，可使用Patch1、Patch2等标识多个补丁，使用%patch0或%{patch0}引用
Prefix: %{_prefix} 这个主要是为了解决今后安装rpm包时，并不一定把软件安装到rpm中打包的目录的情况。这样，必须在这里定义该标识，并在编写%install脚本的时候引用，才能实现rpm安装时重新指定位置的功能
Prefix: %{_sysconfdir} 这个原因和上面的一样，但由于%{_prefix}指/usr，而对于其他的文件，例如/etc下的配置文件，则需要用%{_sysconfdir}标识
Build Arch: 指编译的目标处理器架构，noarch标识不指定，但通常都是以/usr/lib/rpm/marcros中的内容为默认值
Requires: 该rpm包所依赖的软件包名称，可以用&gt;=或&lt;=表示大于或小于某一特定版本，例如：
libpng-devel &gt;= 1.0.20 zlib
※“&gt;=”号两边需用空格隔开，而不同软件名称也用空格分开
还有例如PreReq、Requires(pre)、Requires(post)、Requires(preun)、Requires(postun)、BuildRequires等都是针对不同阶段的依赖指定
Provides: 指明本软件一些特定的功能，以便其他rpm识别
Packager: 打包者的信息
%description 软件的详细说明
</code></p>

<h4>二、spec脚本主体</h4>

<p>spec脚本的主体中也包括了很多关键字和描述。</p>

<h5>%prep 预处理脚本</h5>

<h5>%setup -n %{name}-%{version} 把源码包解压并放好</h5>

<p>通常是从/usr/src/asianux/SOURCES里的包解压到/usr/src/asianux/BUILD/%{name}-%{version}中。<br/>
一般用%setup -c就可以了，但有两种情况：一就是同时编译多个源码包，二就是源码的tar包的名称与解压出来的目录不一致，此时，就需要使用-n参数指定一下了。</p>

<pre><code>%setup 不加任何选项，仅将软件包打开。
%setup -n newdir 将软件包解压在newdir目录。
%setup -c 解压缩之前先产生目录。
%setup -b num 将第num个source文件解压缩。
%setup -T 不使用default的解压缩操作。
%setup -T -b 0 将第0个源代码文件解压缩。
%setup -c -n newdir 指定目录名称newdir，并在此目录产生rpm套件。
%patch 最简单的补丁方式，自动指定patch level。
%patch 0 使用第0个补丁文件，相当于%patch ?p 0。
%patch -s 不显示打补丁时的信息。
%patch -T 将所有打补丁时产生的输出文件删除。
</code></pre>

<h5>%patch 打补丁</h5>

<p>通常补丁都会一起在源码tar.gz包中，或放到SOURCES目录下。一般参数为：<br/>
%patch -p1 使用前面定义的Patch补丁进行，-p1是忽略patch的第一层目录<br/>
%Patch2 -p1 -b xxx.patch 打上指定的补丁，-b是指生成备份文件</p>

<h5>%configure 这个不是关键字，而是rpm定义的标准宏命令。意思是执行源代码的configure配置</h5>

<p>在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行，使用标准写法，会引用/usr/lib/rpm/marcros中定义的参数。
另一种不标准的写法是，可参考源码中的参数自定义，例如：<br/>
CFLAGS=&ldquo;$RPM_OPT_FLAGS&rdquo; CXXFLAGS=&ldquo;$RPM_OPT_FLAGS&rdquo; ./configure &ndash;prefix=%{_prefix}</p>

<h5>%build 开始构建包</h5>

<p>在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行make的工作，常见写法：<br/>
make %{?_smp_mflags} OPTIMIZE=&ldquo;%{optflags}&rdquo;</p>

<p>都是一些优化参数，定义在/usr/lib/rpm/marcros中</p>

<h5>%install 开始把软件安装到虚拟的根目录中</h5>

<p>在/usr/src/asianux/BUILD/%{name}-%{version}目录中进行make install的操作。这个很重要，因为如果这里的路径不对的话，则下面%file中寻找文件的时候就会失败。常见内容有：<br/>
%makeinstall 这不是关键字，而是rpm定义的标准宏命令。也可以使用非标准写法：<br/>
make DESTDIR=$RPM_BUILD_ROOT install<br/>
或<br/>
make prefix=$RPM_BUILD_ROOT install<br/>
需要说明的是，这里的%install主要就是为了后面的%file服务的。所以，还可以使用常规的系统命令：<br/>
install -d $RPM_BUILD_ROOT/
cp -a * $RPM_BUILD_ROOT/</p>

<h5>%clean 清理临时文件</h5>

<p>通常内容为：
[ &ldquo;$RPM_BUILD_ROOT&rdquo; != &ldquo;/&rdquo; ] &amp;&amp; rm -rf &ldquo;$RPM_BUILD_ROOT&rdquo;
rm -rf $RPM_BUILD_DIR/%{name}-%{version}</p>

<h5>※注意区分$RPM_BUILD_ROOT和$RPM_BUILD_DIR：</h5>

<p>$RPM_BUILD_ROOT是指开头定义的BuildRoot，而$RPM_BUILD_DIR通常就是指/usr/src/asianux/BUILD，其中，前面的才是%file需要的。<br/>
%pre rpm安装前执行的脚本<br/>
%post rpm安装后执行的脚本<br/>
%preun rpm卸载前执行的脚本<br/>
%postun rpm卸载后执行的脚本</p>

<h5>%preun %postun 的区别是什么呢？</h5>

<p>前者在升级的时候会执行，后者在升级rpm包的时候不会执行</p>

<h5>%files 定义那些文件或目录会放入rpm中</h5>

<p>这里会在虚拟根目录下进行，千万不要写绝对路径，而应用宏或变量表示相对路径。如果描述为目录，表示目录中除%exclude外的所有文件。<br/>
%defattr (-,root,root) 指定包装文件的属性，分别是(mode,owner,group)，-表示默认值，对文本文件是0644，可执行文件是0755<br/>
%exclude 列出不想打包到rpm中的文件<br/>
※小心，如果%exclude指定的文件不存在，也会出错的。</p>

<h5>%changelog 变更日志</h5>

<p>※特别需要注意的是：%install部分使用的是绝对路径，而%file部分使用则是相对路径，虽然其描述的是同一个地方。千万不要写错。</p>

<h4>三、其他</h4>

<h5>1. 扩展</h5>

<p>虽然上面的范例很简陋，而且缺少%build部分，但实际上只要记住两点：<br/>
a）就是%build和%install的过程中，都必须把编译和安装的文件定义到“虚拟根目录”中。<br/>
b）就是%file中必须明白，用的是相对目录</p>

<h5>2. 一些rpm相关信息</h5>

<p>rpm软件包系统的标准分组：/usr/share/doc/rpm-4.3.3/GROUPS<br/>
各种宏定义： /usr/lib/rpm/macros<br/>
已经安装的rpm包数据库： /var/lib/rpm<br/>
如果要避免生成debuginfo包：这个是默认会生成的rpm包。则可以使用下面的命令：<br/>
echo &lsquo;%debug_package %{nil}&rsquo; >> ~/.rpmmacros<br/>
如果rpm包已经做好，但在安装的时候想修改默认路径，则可以：<br/>
rpm -ivh &ndash;prefix=/opt/usr xxx.rpm<br/>
又或者同时修改多个路径：<br/>
rpm xxx.rpm &ndash;relocate=/usr=/opt/usr &ndash;relocate=/etc=/usr/etc</p>

<h5>3. 制作补丁</h5>

<p>详细看参考：[原]使用diff同patch工具</p>

<h5>4. 关于rpm中的执行脚本</h5>

<p>如果正在制作的rpm包是准备作为放到系统安装光盘中的话，则需要考虑rpm中定义的脚本是否有问题。由于系统在安装的时候只是依赖于一个小环境进行，而该环境与实际安装完的环境有很大的区别，所以，大部分的脚本在该安装环境中都是无法生效，甚至会带来麻烦的。<br/>
所以，对于这样的，需要放到安装光盘中的套件，不加入执行脚本是较佳的方法。<br/>
另外，为提供操作中可参考的信息，rpm还提供了一种信号机制：不同的操作会返回不同的信息，并放到默认变量$1中。<br/>
<span style="color:red">0代表卸载、1代表安装、2代表升级</span><br/>
可这样使用：
<code>
%postun
if [ "$1" = "0" ]; then
/sbin/ldconfig
fi
</code></p>
]]></content>
  </entry>
  
</feed>
