<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-01-12T16:14:03+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux系统时间和硬件时钟问题(date和hwclock)]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/06/system-base-time/"/>
    <updated>2016-01-06T10:48:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/06/system-base-time</id>
    <content type="html"><![CDATA[<p><a href="http://rpf413.blog.163.com/blog/static/4556376020122831444674/">http://rpf413.blog.163.com/blog/static/4556376020122831444674/</a></p>

<h4>总结一下hwclock，这个容易晕：</h4>

<p>1）/etc/sysconfig/clock 文件，只对 hwclock 命令有效，且只在系统启动和关闭的时候才有用（修改了其中的 UTC=true 到 UTC=false 的前后，执行 hwclock (<code>--utc</code>, 或 <code>--localtime</code>) 都没有变化，要重启系统后才生效）；</p>

<p>2）/etc/rc.d/rc.sysinit 文件，run once at boot time，其中有从硬件时钟同步时间到系统时间的操作；</p>

<p>3）<code>hwclock --localtime</code> 的输出，才是硬件时钟真正的时间。如果输出结果带时区（比如CST），还要看/etc/sysconfig/clock里的UTC参数，如果 UTC=false，那时区有意义；如果 UTC=true，那时区没意义，实际上是UTC时间。</p>

<p>4）在 /etc/sysconfig/clock 中 UTC=false 时，date、hwclock、<code>hwclcok --localtime</code> 输出的时间应该都一致，且此时 <code>hwclock --utc</code>是没有意义的；</p>

<p>5）在 /etc/sysconfig/clock 中 UTC=ture 时，date、hwclock 的输出是一致的，<code>hwclock --localtime</code> 的输出则是UTC时间；</p>

<p>6）如果不想在输出中带时区，则 export LANG=C ，然后再运行 hwclock 就没有什么CST了，免得时区误导你；</p>

<p>7）<code>hwclock --utc</code> 很闹腾，还是别看了，你会晕的。。。</p>

<p>8）系统关闭时会同步系统时间到硬件时钟，系统启动时会从硬件时钟读取时间更新到系统，这2个步骤都要根据 /etc/sysconfig/clock 文件中UTC的参数来设置时区转换。</p>

<h4>实际案例分析</h4>

<p>修改了 /etc/sysconfig/clock 中UTC参数但系统未正常关闭的情况</p>

<p>修改 /etc/sysconfig/clock 文件后，如果系统内核突然崩溃，然后直接按电源重启，则系统没有进行 系统时间到硬件时钟的 同步；但是 系统启动时，又根据 /etc/sysconfig/clock 中UTC的参数，来同步硬件时钟到系统，这时就会出现时间问题：</p>

<p>0）假设系统的时区为CST（UTC+8）；<br/>
1）假设原 /etc/sysconfig/clock 中 UTC=true，修改成 UTC=false；<br/>
2）如果此时系统未正常关机，系统时间未按参数 UTC=false 同步时间到硬件时钟（没有+8小时）；<br/>
3）但系统被按电源重启后，系统读取到 UTC=false，认为硬件时钟为CST时间，直接用于系统时间；<br/>
4）那么此时，系统时间将少了8小时。</p>

<hr />

<p><a href="http://hi.baidu.com/lujunqianglw/blog/item/bc2d9144d24fc48fb3b7dc1d.html">http://hi.baidu.com/lujunqianglw/blog/item/bc2d9144d24fc48fb3b7dc1d.html</a></p>

<h4>一、首先要弄清几个概念：</h4>

<h5>1. “系统时间”与“硬件时间”</h5>

<p>系统时间: 一般说来就是我们执行 date 命令看到的时间，linux系统下所有的时间调用（除了直接访问硬件时间的命令）都是使用的这个时间。</p>

<p>硬件时间: 主板上BIOS中的时间，由主板电池供电来维持运行，系统开机时要读取这个时间，并根据它来设定系统时间（注意：系统启动时根据硬件时间设定系统时间的过程可能存在时区换算，这要视具体的系统及相关设置而定）。</p>

<h5>2. “UTC时间”与“本地时间”</h5>

<p>UTC时间：Coordinated Universal 8 e2 i( H7 t0 ^/ ^Time 世界协调时间（又称世界标准时间、世界统一时间），在一般精度要求下，它与GMT（Greenwich Mean Time，格林威治标准时间）是一样的，其实也就是说 GMT≈UTC，但 UTC 是以原子钟校准的，更精确。</p>

<p>本地时间：由于处在不同的时区，本地时间一般与UTC是不同的，换算方法就是</p>

<p>本地时间 = UTC + 时区 或 UTC = 本地时间 - 时区</p>

<p>时区东为正，西为负，例如在中国，本地时间都使用北京时间，在linux上显示就是 CST（China Standard Time，中国标准时，注意美国的中部标准时Central Standard Time也缩写为CST，与这里的CST不是一回事！），时区为东八区，也就是 +8 区，所以 CST=UTC+(+8小时) 或 UTC=CST-(+8小时)。</p>

<h4>二、时间命令</h4>

<h5>1. 系统时间 date</h5>

<p>直接调用 date，得到的是本地时间。如果想得到UTC时间的话，使用 date -u。
<code>
    [12-01 19:07&gt; ~]$ date
    2009年 12月 07日 星期一 14:22:20 CST
    [12-01 19:07&gt; ~]$ date -u
    2009年 12月 07日 星期一 06:22:22 UTC
</code></p>

<h5>2. 硬件时间 /sbin/hwclock</h5>

<p>直接调用 /sbin/hwclock 显示的时间就是 BIOS 中的时间吗？未必！这要看 /etc/sysconfig/clock 中是否启用了UTC，如果启用了UTC（UTC=true），显示的其实是经过时区换算的时间而不是BIOS中真正的时间，如果加上 &ndash;localtime 选项，则得到的总是 BIOS 中实际的时间.</p>

<pre><code>    [12-01 19:07&gt; ~]# hwclock
    2009年12月07日 星期一 14时28分43秒 -0.611463 seconds
    [12-01 19:07&gt; ~]# hwclock --utc
    2009年12月07日 星期一 14时28分46秒 -0.594189 seconds
    [12-01 19:07&gt; ~]# hwclock --localtime
    2009年12月07日 星期一 06时28分50秒 -0.063875 seconds
</code></pre>

<h5>3. /etc/localtime</h5>

<p>这个文件用来设置系统的时区，将 /usr/share/zoneinfo/ 中相应文件拷贝到/etc下并重命名为 localtime 即可修改时区设置，而且这种修改对 date 命令是及时生效的。不论是 date 还是 hwclock 都会用到这个文件，会根据这个文件的时区设置来进行UTC和本地之间之间的换算。</p>

<h5>4. /etc/sysconfig/clock</h5>

<p>这个文件只对 hwclock 有效，而且似乎是只在系统启动和关闭的时候才有用，比如修改了其中的 UTC=true 到 UTC=false 的前后，执行 hwclock (<code>--utc</code>, 或 <code>--localtime</code>) 都没有变化，要重启系统后才生效。注：如果设置 UTC=false 并重启系统后,执行一些命令结果如下：</p>

<pre><code>    date 2009年 12月 07日 星期一 19:26:29 CST
    date -u 2009年 12月 07日 星期一 11:26:29 UTC
    hwclock 2009年12月07日 星期一 19时26分30秒 -0.442668 seconds
    hwclock --utc 2009年12月08日 星期二 03时26分31秒 -0.999091 seconds
    hwclock --localtime 2009年12月07日 星期一 19时26分32秒 -0.999217 seconds
</code></pre>

<p>可见，如果不使用UTC，BIOS时间（红色部分）就是系统本地时间，而且注意这时执行 <code>hwclock --utc</code> 得到的结果没有任何意义，因为这里我们已经禁用了UTC，而且也明显不符合“本地时间=UTC+时区”的关系。</p>

<h4>三、linux与windows双系统间的时间同步</h4>

<p>系统启动和关闭时，硬件时间与系统时间之间的同步有两种方式(假设在中国，用CST代表本地时间)：</p>

<p>方式A: 使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=true）</p>

<p>开机: BIOS&mdash;&mdash;->UTC（将BIOS中的时间看成是UTC）&mdash;&mdash;(时区变化)&mdash;&ndash;>CST<br/>
关机: CST &mdash;&mdash;-(时区变化)&mdash;&ndash;>UTC&mdash;&mdash;-存储到&mdash;&mdash;>BIOS</p>

<p>方式B: 不使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=false）</p>

<p>开机: BIOS&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;>CST（将BIOS中的时间看成是CST）<br/>
关机: CST &mdash;&mdash;&mdash;存储到&mdash;&mdash;>BIOS</p>

<hr />

<p>FIX:</p>

<p>方式A: 使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=true）</p>

<p>关机: CST &mdash;&mdash;-操作系统根据时区算出UTC时间&mdash;&mdash;-存储到&mdash;&mdash;>BIOS<br/>
开机: BIOS&mdash;&mdash;->BIOS中的时间是UTC&mdash;&mdash;&mdash;&ndash;操作系统根据时区计算出localtime&mdash;&mdash;&mdash;-CST</p>

<p>方式B: 不使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=false）</p>

<p>关机: CST &mdash;&mdash;&ndash;操作系统中UTC=false，直接将localtime存储到&mdash;&mdash;>BIOS<br/>
开机: BIOS&mdash;&mdash;&ndash;BIOS中的时间是localtime&mdash;&ndash;操作系统中UTC=false，BIOS时间当成localtime&mdash;&mdash;&ndash;>CST（将BIOS中的时间看成是CST）</p>

<hr />

<p>通过设定 /etc/sysconfig/clock，linux可以支持这两种方式，然而windows只支持方式B（至少是默认支持B，而我不知道怎么能让它支 持A），那么在双系统情况下，如果linux设成A方式，那么在linux与windows系统切换时一定会造成时间混乱的，解决办法就是将linux中 的UTC禁用，也设成B方式就可以了。</p>

<p>注：可以通过 <code>hwclock --hctosys</code> 来利用硬件时间来设置系统时间（注意不是简单的复制BIOS中的时间为系统时间，要看是否使用UTC，如果使用的话则要做时区换算），通过 <code>hwclock --systohc</code> 来根据系统时间设置硬件时间（也要看是否启用UTC来决定是否做时区换算）。</p>

<p>总之，不论使用 <code>--systohc</code> 还是 <code>--hctosys</code>，同步后直接运行不带参数的 hwclock 得到的时间与直接运行 date 得到的时间应该一致，这个时间是否就是BIOS中的时间（<code>hwclock --localtime</code>)那就不一定了，如果启用了UTC就不是，没启用UTC就是。</p>

<p>而且还要注意：在系统中手动使用 <code>hwclock hwclock --set --date='yyyy-mm-dd'</code> 来设置BIOS时间只在系统运行时有效，因为当系统关闭时，还会按设定好的方式根据系统时间来重设BIOS时间的，于是手动的设置便被覆盖掉了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RHEL5/CentOS5 上支持 Ext4]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext/"/>
    <updated>2015-05-29T15:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext</id>
    <content type="html"><![CDATA[<ul>
<li><p>记住，只能改数据分区，<code>/</code> 和 <code>/boot</code> 分区不要试，至少我没成功，启动参数加rootfstype=ext4也起不来。</p></li>
<li><p><code>/</code> 分区要改成ext4的话，可以直接改<code>/etc/fstab</code>文件，ext3支持以ext4形式挂载。</p></li>
<li><p>extents属性加上后去不掉，所以该不会ext3的，除非不加这个属性？？，去掉属性<code>tune4fs -O ^flex_bg /dev/sdb1</code></p></li>
</ul>


<hr />

<p><a href="http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html">http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html</a></p>

<p>根据我以前的测试 Ext4 的性能好过 Ext3,在 RHEL5 上的 2.6.18-110 也有加入 Ext4 了.但默认没有让我们使用,怎么样才能不重起,能使用这个啦.
其实我们只要加入一个包e4fsprogs 就行,它其实和 e2fsprogs 是一样的功能,这 RHEL-6 中,会变成一个默认的包的.所以我们目前还只能使用这个包来调整和设置Ext4.
<code>
    yum -y install e4fsprogs
</code>
在 RHEL 和 Centos5 中使用 Ext4 前,很多想可能想先给现有的文件系统转换成 Ext4 ,只要运行下面的命令就行了
<code>
    tune4fs -O extents,uninit_bg,dir_index,flex_bg /dev/sdb1
</code></p>

<p>记住，转换成 ext4 后必须用 fsck 扫描，否则不能 mount，-p 参数说明 “自动修复” 文件系统：
<code>
    fsck -pf /dev/sdb1 或 fsck -y /dev/sdb1
</code></p>

<h5>下面这个好像不需要</h5>

<p>在重起前,我还要让内核支持 Ext4 的文件系统,需要修改 initrd 的文件本身的内容.如下命令来生成 支持 Ext4 的 initrd.
<code>
    mkinitrd --with=ext4 --with=ext3 -f /boot/initrd-2.6.18-404.el5.img 2.6.18-404.el5
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络硬盘NFS的安装与配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs/"/>
    <updated>2015-05-29T14:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs</id>
    <content type="html"><![CDATA[<p><a href="http://www.linuxidc.com/Linux/2014-11/109637.htm">http://www.linuxidc.com/Linux/2014-11/109637.htm</a></p>

<p>NFS 是共享文件的服务的一种协议 下面给大家介绍一下这个服务器的的安装和配置。</p>

<h4>安装</h4>

<pre><code>    sudo apt-get install nfs-common nfs-kernel-server
</code></pre>

<h4>配置</h4>

<pre><code>    vim /etc/exprots
</code></pre>

<p>在正文的最下面输入一行
```
    /srv/nfs_share *(rw)</p>

<pre><code>/srv/nfs_share 表示的是我们要共享的文件目录
* 表示互联网上任何主机都可以访问 
(rw) 表示对服务器进行访问的主机可以进行的操作 也就是可读可写
</code></pre>

<pre><code>
如果我们只想让我们本地局域网上的主机对我们的服务器进行访问的话  可以这样写
</code></pre>

<pre><code>/srv/nfs_share 192.168.*.*(rw)
</code></pre>

<pre><code>
#### 访问

本机访问
</code></pre>

<pre><code>sudo mount -o rw locahost:/srv/nfs_share /mnt/nfs
</code></pre>

<pre><code>
上面的意思是把本地的目录/srv/nfs_share 挂载到 目录/mnt/nfs上 ，这时候我们体会不到挂载点发生了变化 我们可以自己用相关的命令查询，我就不多介绍了

非本地的主机
</code></pre>

<pre><code>sudo mount -o rw 域名:/srv/nfs_share /mnt/nfs
</code></pre>

<pre><code>
这个时候我们会发现NFS太简单了，所以系统管理员就麻烦了

##### 假如在共享的目录中有我们的重要的文件，怎么办？
</code></pre>

<pre><code>/srv/nfs_share/secret (noaccess)
</code></pre>

<pre><code>就是任何主机都不能访问/srv/nfs_share/secret 这个子目录


##### 如何限制root的权限
</code></pre>

<pre><code>/srv/nfs_share 192.168.*。*（rw,root-aquash）
</code></pre>

<pre><code>
##### 查看客户端挂载共享目录的状态
</code></pre>

<pre><code>$ nfsstat -c
</code></pre>

<pre><code>
##### 查看服务器的状态
</code></pre>

<pre><code>$ nfsstat -s
</code></pre>

<pre><code>
-----------------

http://stevenz.blog.hexun.com/16127677_d.html


服务器IP：172.0.0.1，主机名：p470-1, 通过NFS共享/disk1目录

在客户端使用 `mount -t nfs p470-1:/disk1 /disk1` 时出现
</code></pre>

<pre><code>mount: mount to NFS server 'p470-1' failed: RPC Error: Program not registered.
</code></pre>

<p>```
错误提示。</p>

<p>出错原因：p470-1由于网络原因nfs服务被中断，重新开启p470-1的nfs服务然后在客户端重新mount disk1即可</p>

<p>service nfs restart 或 /etc/rc.d/init.d/nfs restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[隐藏权限--无法添加用户和组等]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr/"/>
    <updated>2015-02-09T15:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr</id>
    <content type="html"><![CDATA[<p>执行命令：
<code>
    [root@localhost softwaretools]# groupadd mysql
    groupadd：无法打开组文件（groupadd: unable to open group file）
</code></p>

<p>此时就奇怪了，当前用的明明是root用户，为什么没有创建组和用户的权限呢。</p>

<p>结论：
  1，添加用户需要用到passwd和shadow这两个文件<br/>
  2，添加组需要用到shadow和gshadow这两个文件</p>

<p>使用 ls -l 命令发现权限正常。</p>

<p>最终发现问题，找到了2个命令（lsattr和chattr），是因为隐藏权限在作怪：<br/>
对这2个命令的简单做下说明：<br/>
  对于某些有特殊要求的档案(如服务器日志)还可以追加隐藏权限的设定。这些隐藏权限包括： Append only (a), compressed &copy;, no dump (d), immutable (i), data journalling (j),secure deletion (s), no tail-merging (t), undeletable (u), no atime updates (A), synchronous directory updates (D), synchronous updates (S), and top of directory hierarchy (T).  <br/>
  lsattr命令是查看隐藏权限设定情况的，chattr是变更隐藏权限的命令。</p>

<p>首先使用使用lsattr查看了一下这几个文件：
<code>
    [root@localhost ~]# lsattr /etc/passwd  
    ------------- /etc/passwd  
    [root@localhost ~]# lsattr /etc/group  
    ----i-------- /etc/group  
    [root@localhost ~]# lsattr /etc/shadow  
    ------------- /etc/shadow  
    [root@localhost ~]# lsattr /etc/gshadow  
    ----i-------- /etc/gshadow  
</code></p>

<p>可以看到文件被设置的 i 这个隐藏权限，<br/>
i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。<br/>
i参数对于文件 系统的安全设置有很大帮助。</p>

<p>既然这样只要把i权限去掉就应该好了。</p>

<p>使用命令chattr命令修改文件隐藏权限，执行如下命令：
<code>
    chattr -i /etc/gshadow
    chattr -i /etc/group
</code>
然后可以正常执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub修复]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub/"/>
    <updated>2015-01-30T09:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html">http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html</a></p>

<p>grub全称在为GRand Unified Bootloader,它的核心功能是引导内核，但是如果grub出了问题，内核无法找到，那岂不是万劫不复了，下面就介绍一下常用的修复方式。</p>

<h4>第一种情况:</h4>

<p>是由于grub中的grub.conf文件损坏，开机后直接进入到了grub>命令行模式下。下面将图解此过程</p>

<p><img src="/images/system/grub/2015-01-30-1.jpg" alt="" /></p>

<p>这时可以使用help看一下grub可支持命令有那些，以便供修复时使用。</p>

<p><img src="/images/system/grub/2015-01-30-2.jpg" alt="" /></p>

<p>第二个使用的命令是find (hd0,0)/按tab如果能补全就表示系统在此分区上。</p>

<p><img src="/images/system/grub/2015-01-30-3.jpg" alt="" /></p>

<p>各个参数说明：</p>

<p><img src="/images/system/grub/2015-01-30-4.jpg" alt="" /></p>

<p>这时要注意，当你指定内核后，但未指定内核后面的参数（ro root=(此处未指定的话)）将无法正常启动，报：请给root参数，一般情况下是系统是可以自动探测到，但这个功能并不靠谱，那么只能靠备份或你的记忆将参数补上（所以定期备份/etc/fstab、与grub.conf、是多么重要的事情，原因你懂的。）</p>

<p>如下图：</p>

<p><img src="/images/system/grub/2015-01-30-5.jpg" alt="" /></p>

<p>而这时就看到你平时的习惯了，备份相当重要</p>

<p><img src="/images/system/grub/2015-01-30-6.jpg" alt="" /></p>

<p>当正常登录系统后，将grub.conf文件重新写就可以了。（上图的完整路径是root=/dev/mapper/vg_www-lv_root，写全了就看不到了，所以在此特别说明）</p>

<p><img src="/images/system/grub/2015-01-30-7.jpg" alt="" /></p>

<p>看到title了吧</p>

<p><img src="/images/system/grub/2015-01-30-8.jpg" alt="" /></p>

<p>过了下面这张图就说明系统是可以正常启动了</p>

<p><img src="/images/system/grub/2015-01-30-9.jpg" alt="" /></p>

<p>第一种情况顺利解决!a_c</p>

<h4>第二种情况：</h4>

<p>grub损坏（最明显的提示为：Operating System not found）</p>

<p>如mbr数据损坏（注仅是bootloader损坏，分区表是好的），如果没有重新启动还可能修复，但是如果是重启后发现grub损坏，那么只能挂载光盘进入紧急救援模式。（以下将以挂载光盘说明）</p>

<p><img src="/images/system/grub/2015-01-30-10.jpg" alt="" /></p>

<p>dd执行之后的景象，是不是好惊悚a_c</p>

<p><img src="/images/system/grub/2015-01-30-11.jpg" alt="" /></p>

<p>挂载光盘进入紧急救援模式,在BIOS中将光盘设置为第一引导设备。</p>

<p><img src="/images/system/grub/2015-01-30-12.jpg" alt="" /></p>

<p>在菜单中选择"Rescue installed system"</p>

<p><img src="/images/system/grub/2015-01-30-13.jpg" alt="" /></p>

<p>之后将对：语言&mdash;-》键盘设置</p>

<p><img src="/images/system/grub/2015-01-30-14.jpg" alt="" /></p>

<p>是否启用网络（不需要，则No,如果选择了Yes将要求选择获取IP地址的方式）</p>

<p><img src="/images/system/grub/2015-01-30-15.jpg" alt="" /></p>

<p>正式进入救援模式</p>

<p><img src="/images/system/grub/2015-01-30-16.jpg" alt="" /></p>

<p>原系统己经挂载的位置，如何切换到原系统下</p>

<p><img src="/images/system/grub/2015-01-30-17.jpg" alt="" /></p>

<p>开启一个shell</p>

<p><img src="/images/system/grub/2015-01-30-18.jpg" alt="" /></p>

<p>切换到原系统</p>

<p><img src="/images/system/grub/2015-01-30-19.jpg" alt="" /></p>

<p>这时可以直接输入grub命令进入grub中（这个grub是光盘中的）</p>

<p><img src="/images/system/grub/2015-01-30-20.jpg" alt="" /></p>

<p>直接使用 help  setup会显示setup的使用方法。</p>

<p>设置root(root默认分区)如（hd0,0），此分区一定要root所在的系统分区，之后使用setup安装，命令是setup(hd0)(由于mbr并属于分区，所以将grub安装到hd0设备即可)，如果是成功了会有succeeded提示。quit退出即可</p>

<p><img src="/images/system/grub/2015-01-30-21.jpg" alt="" /></p>

<p>重启系统，取出光盘，有如下信息就表示修复完成</p>

<p><img src="/images/system/grub/2015-01-30-22.jpg" alt="" /></p>

<p>如果grub目录都损坏，无法正常启动。则可以在此模式使用grub-install &ndash;root-directory=/  /dev/sda（设备是什么就写什么）手写配置文件grub.conf即可</p>
]]></content>
  </entry>
  
</feed>
