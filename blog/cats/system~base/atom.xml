<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-24T17:14:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RHEL5/CentOS5 上支持 Ext4]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext/"/>
    <updated>2015-05-29T15:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-ext</id>
    <content type="html"><![CDATA[<ul>
<li><p>记住，只能改数据分区，<code>/</code> 和 <code>/boot</code> 分区不要试，至少我没成功，启动参数加rootfstype=ext4也起不来。</p></li>
<li><p><code>/</code> 分区要改成ext4的话，可以直接改<code>/etc/fstab</code>文件，ext3支持以ext4形式挂载。</p></li>
<li><p>extents属性加上后去不掉，所以该不会ext3的，除非不加这个属性？？，去掉属性<code>tune4fs -O ^flex_bg /dev/sdb1</code></p></li>
</ul>


<hr />

<p><a href="http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html">http://www.php-oa.com/2010/08/04/linux-rhel5-centos5-ext4.html</a></p>

<p>根据我以前的测试 Ext4 的性能好过 Ext3,在 RHEL5 上的 2.6.18-110 也有加入 Ext4 了.但默认没有让我们使用,怎么样才能不重起,能使用这个啦.
其实我们只要加入一个包e4fsprogs 就行,它其实和 e2fsprogs 是一样的功能,这 RHEL-6 中,会变成一个默认的包的.所以我们目前还只能使用这个包来调整和设置Ext4.
<code>
    yum -y install e4fsprogs
</code>
在 RHEL 和 Centos5 中使用 Ext4 前,很多想可能想先给现有的文件系统转换成 Ext4 ,只要运行下面的命令就行了
<code>
    tune4fs -O extents,uninit_bg,dir_index,flex_bg /dev/sdb1
</code></p>

<p>记住，转换成 ext4 后必须用 fsck 扫描，否则不能 mount，-p 参数说明 “自动修复” 文件系统：
<code>
    fsck -pf /dev/sdb1 或 fsck -y /dev/sdb1
</code></p>

<h5>下面这个好像不需要</h5>

<p>在重起前,我还要让内核支持 Ext4 的文件系统,需要修改 initrd 的文件本身的内容.如下命令来生成 支持 Ext4 的 initrd.
<code>
    mkinitrd --with=ext4 --with=ext3 -f /boot/initrd-2.6.18-404.el5.img 2.6.18-404.el5
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络硬盘NFS的安装与配置]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs/"/>
    <updated>2015-05-29T14:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/system-base-net-nfs</id>
    <content type="html"><![CDATA[<p><a href="http://www.linuxidc.com/Linux/2014-11/109637.htm">http://www.linuxidc.com/Linux/2014-11/109637.htm</a></p>

<p>NFS 是共享文件的服务的一种协议 下面给大家介绍一下这个服务器的的安装和配置。</p>

<h4>安装</h4>

<pre><code>    sudo apt-get install nfs-common nfs-kernel-server
</code></pre>

<h4>配置</h4>

<pre><code>    vim /etc/exprots
</code></pre>

<p>在正文的最下面输入一行
```
    /srv/nfs_share *(rw)</p>

<pre><code>/srv/nfs_share 表示的是我们要共享的文件目录
* 表示互联网上任何主机都可以访问 
(rw) 表示对服务器进行访问的主机可以进行的操作 也就是可读可写
</code></pre>

<pre><code>
如果我们只想让我们本地局域网上的主机对我们的服务器进行访问的话  可以这样写
</code></pre>

<pre><code>/srv/nfs_share 192.168.*.*(rw)
</code></pre>

<pre><code>
#### 访问

本机访问
</code></pre>

<pre><code>sudo mount -o rw locahost:/srv/nfs_share /mnt/nfs
</code></pre>

<pre><code>
上面的意思是把本地的目录/srv/nfs_share 挂载到 目录/mnt/nfs上 ，这时候我们体会不到挂载点发生了变化 我们可以自己用相关的命令查询，我就不多介绍了

非本地的主机
</code></pre>

<pre><code>sudo mount -o rw 域名:/srv/nfs_share /mnt/nfs
</code></pre>

<pre><code>
这个时候我们会发现NFS太简单了，所以系统管理员就麻烦了

##### 假如在共享的目录中有我们的重要的文件，怎么办？
</code></pre>

<pre><code>/srv/nfs_share/secret (noaccess)
</code></pre>

<pre><code>就是任何主机都不能访问/srv/nfs_share/secret 这个子目录


##### 如何限制root的权限
</code></pre>

<pre><code>/srv/nfs_share 192.168.*。*（rw,root-aquash）
</code></pre>

<pre><code>
##### 查看客户端挂载共享目录的状态
</code></pre>

<pre><code>$ nfsstat -c
</code></pre>

<pre><code>
##### 查看服务器的状态
</code></pre>

<pre><code>$ nfsstat -s
</code></pre>

<pre><code>
-----------------

http://stevenz.blog.hexun.com/16127677_d.html


服务器IP：172.0.0.1，主机名：p470-1, 通过NFS共享/disk1目录

在客户端使用 `mount -t nfs p470-1:/disk1 /disk1` 时出现
</code></pre>

<pre><code>mount: mount to NFS server 'p470-1' failed: RPC Error: Program not registered.
</code></pre>

<p>```
错误提示。</p>

<p>出错原因：p470-1由于网络原因nfs服务被中断，重新开启p470-1的nfs服务然后在客户端重新mount disk1即可</p>

<p>service nfs restart 或 /etc/rc.d/init.d/nfs restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[隐藏权限--无法添加用户和组等]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr/"/>
    <updated>2015-02-09T15:59:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/02/09/system-base-attr</id>
    <content type="html"><![CDATA[<p>执行命令：
<code>
[root@localhost softwaretools]# groupadd mysql
groupadd：无法打开组文件（groupadd: unable to open group file）
</code></p>

<p>此时就奇怪了，当前用的明明是root用户，为什么没有创建组和用户的权限呢。</p>

<p>结论：
<code>
1，添加用户需要用到passwd和shadow这两个文件
2，添加组需要用到shadow和gshadow这两个文件
</code></p>

<p>使用 ls -l 命令发现权限正常。</p>

<p>最终发现问题，找到了2个命令（lsattr和chattr），是因为隐藏权限在作怪：<br/>
对这2个命令的简单做下说明：<br/>
  对于某些有特殊要求的档案(如服务器日志)还可以追加隐藏权限的设定。这些隐藏权限包括： Append only (a), compressed &copy;, no dump (d), immutable (i), data journalling (j),secure deletion (s), no tail-merging (t), undeletable (u), no atime updates (A), synchronous directory updates (D), synchronous updates (S), and top of directory hierarchy (T).  <br/>
  lsattr命令是查看隐藏权限设定情况的，chattr是变更隐藏权限的命令。</p>

<p>首先使用使用lsattr查看了一下这几个文件：
<code>
    [root@localhost ~]# lsattr /etc/passwd  
    ------------- /etc/passwd  
    [root@localhost ~]# lsattr /etc/group  
    ----i-------- /etc/group  
    [root@localhost ~]# lsattr /etc/shadow  
    ------------- /etc/shadow  
    [root@localhost ~]# lsattr /etc/gshadow  
    ----i-------- /etc/gshadow  
</code></p>

<p>可以看到文件被设置的 i 这个隐藏权限，<br/>
i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。<br/>
i参数对于文件 系统的安全设置有很大帮助。</p>

<p>既然这样只要把i权限去掉就应该好了。</p>

<p>使用命令chattr命令修改文件隐藏权限，执行如下命令：
<code>
    chattr -i /etc/gshadow
    chattr -i /etc/group
</code>
然后可以正常执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub修复]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub/"/>
    <updated>2015-01-30T09:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html">http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html</a></p>

<p>grub全称在为GRand Unified Bootloader,它的核心功能是引导内核，但是如果grub出了问题，内核无法找到，那岂不是万劫不复了，下面就介绍一下常用的修复方式。</p>

<h4>第一种情况:</h4>

<p>是由于grub中的grub.conf文件损坏，开机后直接进入到了grub>命令行模式下。下面将图解此过程</p>

<p><img src="/images/system/grub/2015-01-30-1.jpg" alt="" /></p>

<p>这时可以使用help看一下grub可支持命令有那些，以便供修复时使用。</p>

<p><img src="/images/system/grub/2015-01-30-2.jpg" alt="" /></p>

<p>第二个使用的命令是find (hd0,0)/按tab如果能补全就表示系统在此分区上。</p>

<p><img src="/images/system/grub/2015-01-30-3.jpg" alt="" /></p>

<p>各个参数说明：</p>

<p><img src="/images/system/grub/2015-01-30-4.jpg" alt="" /></p>

<p>这时要注意，当你指定内核后，但未指定内核后面的参数（ro root=(此处未指定的话)）将无法正常启动，报：请给root参数，一般情况下是系统是可以自动探测到，但这个功能并不靠谱，那么只能靠备份或你的记忆将参数补上（所以定期备份/etc/fstab、与grub.conf、是多么重要的事情，原因你懂的。）</p>

<p>如下图：</p>

<p><img src="/images/system/grub/2015-01-30-5.jpg" alt="" /></p>

<p>而这时就看到你平时的习惯了，备份相当重要</p>

<p><img src="/images/system/grub/2015-01-30-6.jpg" alt="" /></p>

<p>当正常登录系统后，将grub.conf文件重新写就可以了。（上图的完整路径是root=/dev/mapper/vg_www-lv_root，写全了就看不到了，所以在此特别说明）</p>

<p><img src="/images/system/grub/2015-01-30-7.jpg" alt="" /></p>

<p>看到title了吧</p>

<p><img src="/images/system/grub/2015-01-30-8.jpg" alt="" /></p>

<p>过了下面这张图就说明系统是可以正常启动了</p>

<p><img src="/images/system/grub/2015-01-30-9.jpg" alt="" /></p>

<p>第一种情况顺利解决!a_c</p>

<h4>第二种情况：</h4>

<p>grub损坏（最明显的提示为：Operating System not found）</p>

<p>如mbr数据损坏（注仅是bootloader损坏，分区表是好的），如果没有重新启动还可能修复，但是如果是重启后发现grub损坏，那么只能挂载光盘进入紧急救援模式。（以下将以挂载光盘说明）</p>

<p><img src="/images/system/grub/2015-01-30-10.jpg" alt="" /></p>

<p>dd执行之后的景象，是不是好惊悚a_c</p>

<p><img src="/images/system/grub/2015-01-30-11.jpg" alt="" /></p>

<p>挂载光盘进入紧急救援模式,在BIOS中将光盘设置为第一引导设备。</p>

<p><img src="/images/system/grub/2015-01-30-12.jpg" alt="" /></p>

<p>在菜单中选择"Rescue installed system"</p>

<p><img src="/images/system/grub/2015-01-30-13.jpg" alt="" /></p>

<p>之后将对：语言&mdash;-》键盘设置</p>

<p><img src="/images/system/grub/2015-01-30-14.jpg" alt="" /></p>

<p>是否启用网络（不需要，则No,如果选择了Yes将要求选择获取IP地址的方式）</p>

<p><img src="/images/system/grub/2015-01-30-15.jpg" alt="" /></p>

<p>正式进入救援模式</p>

<p><img src="/images/system/grub/2015-01-30-16.jpg" alt="" /></p>

<p>原系统己经挂载的位置，如何切换到原系统下</p>

<p><img src="/images/system/grub/2015-01-30-17.jpg" alt="" /></p>

<p>开启一个shell</p>

<p><img src="/images/system/grub/2015-01-30-18.jpg" alt="" /></p>

<p>切换到原系统</p>

<p><img src="/images/system/grub/2015-01-30-19.jpg" alt="" /></p>

<p>这时可以直接输入grub命令进入grub中（这个grub是光盘中的）</p>

<p><img src="/images/system/grub/2015-01-30-20.jpg" alt="" /></p>

<p>直接使用 help  setup会显示setup的使用方法。</p>

<p>设置root(root默认分区)如（hd0,0），此分区一定要root所在的系统分区，之后使用setup安装，命令是setup(hd0)(由于mbr并属于分区，所以将grub安装到hd0设备即可)，如果是成功了会有succeeded提示。quit退出即可</p>

<p><img src="/images/system/grub/2015-01-30-21.jpg" alt="" /></p>

<p>重启系统，取出光盘，有如下信息就表示修复完成</p>

<p><img src="/images/system/grub/2015-01-30-22.jpg" alt="" /></p>

<p>如果grub目录都损坏，无法正常启动。则可以在此模式使用grub-install &ndash;root-directory=/  /dev/sda（设备是什么就写什么）手写配置文件grub.conf即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grubby edit centos grub args]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/24/system-grubby/"/>
    <updated>2014-10-24T15:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/24/system-grubby</id>
    <content type="html"><![CDATA[<p>In Debian/Ubuntu, grub.cfg is fully generated by scripts and any manual changes made to it will be clobbered. In RHEL/CentOS however, grub.cfg is modified by scripts but manual changes are persisted, and is actually the canonical location for certain settings.</p>

<p>The tool which manages grub.cfg is grubby, which is called by /sbin/new-kernel-pkg when kernels are installed or removed. The &ndash;copy-default parameter is passed to grubby when a new kernel is installed, which causes it to copy the kernel parameters from the current default kernel. Setting the default kernel parameters for future-installed kernels is therefore done by editing the entry for the default kernel in grub.cfg.</p>

<p>If you weren&rsquo;t automating this you could simply edit grub.cfg manually and change all the current kernel entries. However, you can use grubby to modify grub.cfg in order to avoid parsing it or writing regular expressions. For example, this will remove the rhgb and quiet parameters from the specified kernel version.</p>

<pre><code>$ grubby --update-kernel=/boot/vmlinuz-2.6.32-220.13.1.el6.x86_64 --remove-args="rhgb quiet"
</code></pre>

<p>There doesn&rsquo;t seem to be an option to list the currently configured kernels however, so you&rsquo;ll have to discover these another way. One option is to just look for vmlinuz files in /boot/:</p>

<pre><code>#!/bin/sh
for KERNEL in /boot/vmlinuz-*; do
    grubby --update-kernel="$KERNEL" --remove-args="rhgb quiet"
done
</code></pre>
]]></content>
  </entry>
  
</feed>
