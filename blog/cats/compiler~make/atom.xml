<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: compiler~make | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/compiler~make/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-02T12:22:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[binutils(含as、ld等)静态编译]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static/"/>
    <updated>2013-10-31T14:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static</id>
    <content type="html"><![CDATA[<p>binutils下载 <a href="http://ftp.gnu.org/gnu/binutils/">http://ftp.gnu.org/gnu/binutils/</a></p>

<h4>binutils静态编译：</h4>

<pre><code>    ./configure
    make LDFLAGS=-all-static
</code></pre>

<h5>原因：</h5>

<p>他们链接的时候是通过 ./libtool 完成的，在libtool里有一行提示（./libtool &ndash;help没有显示这个提示)：
<code>
    -all-static       do not do any dynamic linking at all
</code>
所以就是要libtool增加-all-static参数</p>

<h4>比较通用的静态编译方法</h4>

<pre><code>    ./configure 后加   CFLAGS=-static --enable-static LDFLAGS=-static --disable-shared
    或
    ./configure 后加   CFLAGS=-static LDFLAGS=-static
    或
    make CFLAGS=-static LDFLAGS=-static
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[--prefix]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix/"/>
    <updated>2013-10-23T10:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix</id>
    <content type="html"><![CDATA[<p>以安装supersparrow-0.0.0为例，我们打算把他安装到目录 /usr/local/supersparrow,于是在supersparrow-0.0.0目录执行带选项的脚本
<code>
./configure –prefix=/usr/local/supersparrow
</code>
执行成功后再编译、安装（make，make install）；安装完成将自动生成目录supersparrow,而且该软件任何的文档都被复制到这个目录。为什么要指定这个安装目录？是为了以后的维护方便，假如没有用这个选项，安装过程结束后，该软件所需的软件被复制到不同的系统目录下，很难弄清楚到底复制了那些文档、都复制到哪里去了—基本上是一塌糊涂。</p>

<p>用了—prefix选项的另一个好处是卸载软件或移植软件。当某个安装的软件不再需要时，只须简单的删除该安装目录，就能够把软件卸载得干干净净；移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统，不同系统用&ndash;target XXX）。</p>

<p>一个小选项有这么方便的作用，建议在实际工作中多多使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile与Shell的问题]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/21/compiler-makefile-shell/"/>
    <updated>2013-06-21T18:28:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/21/compiler-makefile-shell</id>
    <content type="html"><![CDATA[<p>  大概只要知 道Makefile的人，都知道Makefile可以调用Shell脚本。但是在实际使用时，并不那么简单，一些模棱两可的地方可能会让你抓狂。你若不信，可以先看几个例子，想象一下这些这些例子会打印什么内容，记下你想象的结果，然后在计算机上运行这些例子，对照看一下。</p>

<p>示例一：
<code>
    if [ "$(BUILD)" = "debug" ]; then
        echo "build debug";
    else
        echo "build release";
    fi
    all:
        echo "done"
</code>
示例二：<br/>
<code>
    all:
        @CC=arm-linux-gcc
        @echo $(CC)
</code>
示例三：<br/>
<code>
    CC=arm-linux-gcc
    all:
        @echo $(CC)
</code>
示例四：<br/>
<code>
    SUBDIR=src example
    all:
        @for subdir in $(SUBDIR);
        do
            echo "building " $(subdir);
        done
</code></p>

<h4>说明：</h4>

<p>1.Shell脚本在target里才有效，其它地方都被忽略掉了。所以示例一中，”build debug”之类的字符串根本打印不出来。示例一的正确写法是：
示例一：
<code>
    all:
        if [ "$(BUILD)" = "debug" ]; then
            echo "build debug";
        else
            echo "build release";
        fi
        echo "done"
</code>
2.make把每一行Shell脚本当作一个独立的单元，它们在单独的进程中运行。示例二中，两行Shell脚本在两个莫不相干的进程里运行，第一个进程把 CC设置为arm-linux-gcc，第二个进程是不知道的，所以打印的结果自然不是arm-linux-gcc了。示例二的正确写法是：<br/>
示例二：
<code>
    all:
        @CC=arm-linux-gcc; echo $(CC)
    或者：
    all:
        @CC=arm-linux-gcc;
        echo $(CC)
</code>
3.make在调用Shell之前先进行预处理，即展开所有Makefile的变量和函数。这些变量和函数都以$开头。示例三中，Shell拿的脚本实际上是echo arm-linux-gcc，所以打印结果正确。</p>

<p>4.make预处理时，所有以$开头的，它都不会放过。要想引用Shell自己的变量，应该以$$开头。另外要注意，Shell自己的变量是不需要括号的。示例四的正确写法是：<br/>
示例四：
<code>
    SUBDIR=src example
    all:
        @for subdir in $(SUBDIR);
        do
            echo "building " $$subdir;
        done
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile预定义变量、自动变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/03/compiler-makefile-vars/"/>
    <updated>2013-06-03T15:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/03/compiler-makefile-vars</id>
    <content type="html"><![CDATA[<h4>Makefile中常见自动变量</h4>

<pre><code>    命令格式        含     义
    $*      不包含扩展名的目标文件名称
    $+      所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖文件
    $&lt;      第一个依赖文件的名称
    $?      所有时间戳比目标文件晚的依赖文件，并以空格分开 
    $@      目标文件的完整名称
    $^      所有不重复的依赖文件，以空格分开
    $%      如果目标是归档成员，则该变量表示目标的归档成员名称
</code></pre>

<h4>Makefile中常见预定义变量</h4>

<pre><code>    命 令 格 式 含     义
    AR              库文件维护程序的名称，默认值为ar
    AS              汇编程序的名称，默认值为as
    CC              C编译器的名称，默认值为cc
    CPP             C预编译器的名称，默认值为$(CC) –E
    CXX             C++编译器的名称，默认值为g++
    FC              FORTRAN编译器的名称，默认值为f77
    RM              文件删除程序的名称，默认值为rm –f
    ARFLAGS         库文件维护程序的选项，无默认值
    ASFLAGS         汇编程序的选项，无默认值
    CFLAGS          C编译器的选项，无默认值
    CPPFLAGS        C预编译的选项，无默认值
    CXXFLAGS        C++编译器的选项，无默认值
    FFLAGS          FORTRAN编译器的选项，无默认值
</code></pre>

<h5>在Makefile中我们可以通过宏定义来控制源程序的编译。</h5>

<p>只要在Makefile中的CFLAGS中通过选项-D来指定你于定义的宏即可。<br/>
如:<br/>
CFLAGS += -D <strong>KK</strong><br/>
或<br/>
CFLAGS += -D <strong>KK</strong>=<strong>XX</strong></p>
]]></content>
  </entry>
  
</feed>
