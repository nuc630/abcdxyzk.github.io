<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~12 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~12/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-14T22:08:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gcc include]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/12/24/compiler-gcc-include/"/>
    <updated>2012-12-24T13:56:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/12/24/compiler-gcc-include</id>
    <content type="html"><![CDATA[<p>本文介绍在linux中头文件的搜索路径，也就是说你通过include指定的头文件，linux下的gcc编译器它是怎么找到它的呢。在此之前，先了解一个基本概念。</p>

<p>  头文件是一种文本文件，使用文本编辑器将代码编写好之后，以扩展名.h保存就行了。头文件中一般放一些重复使用的代码，例如函数声明、变量声明、常数定 义、宏的定义等等。当使用＃include语句将头文件引用时，相当于将头文件中所有内容，复制到＃include处。#include有两种写法形式， 分别是：
<code>
    #include &lt;&gt; ： 直接到系统指定的某些目录中去找某些头文件。
    #include “” ： 先到源文件所在文件夹去找，然后再到系统指定的某些目录中去找某些头文件。
</code>
<code>#include</code>文件可能会带来一个问题就是重复应用，如a.h引用的一个函数是某种实现，而b.h引用的这个函数却是另外一种实现，这样在编译的时候将会出现错误。所以，为了避免因为重复引用而导致的编译错误，头文件常具有：
<code>
    #ifndef    LABEL
    #define    LABEL
        //代码部分
    #endif
</code>
的格式。其中LABEL为一个唯一的标号，命名规则跟变量的命名规则一样。</p>

<h4>gcc寻找头文件的路径(按照1->2->3的顺序)</h4>

<h5>1.</h5>

<p>  在gcc编译源文件的时候，通过参数-I指定头文件的搜索路径，如果指定路径有多个路径时，则按照指定路径的顺序搜索头文件。命令形式如：“gcc -I  /path/where/theheadfile/in sourcefile.c“，这里源文件的路径可以是绝对路径，也可以是相对路径。eg：<br/>
设当前路径为/root/test，include_test.c如果要包含头文件“include/include_test.h“，有两种方法：<br/>
1) include_test.c中#include “include/include_test.h”或者#include &ldquo;/root/test/include/include_test.h"，然后gcc include_test.c即可<br/>
2) include_test.c中#include &lt;include_test.h>或者#include &lt;include_test.h>，然后gcc –I include include_test.c也可</p>

<h5>2.</h5>

<p>通过查找gcc的环境变量C_INCLUDE_PATH/CPLUS_INCLUDE_PATH/OBJC_INCLUDE_PATH来搜索头文件位置。</p>

<h5>3. 再找内定目录搜索，分别是</h5>

<pre><code>    /usr/include
    /usr/local/include
    /usr/lib/gcc-lib/i386-linux/2.95.2/include
</code></pre>

<p>最后一行是gcc程序的库文件地址，各个用户的系统上可能不一样。<br/>
gcc在默认情况下，都会指定到/usr/include文件夹寻找头文件。</p>

<p>gcc还有一个参数：-nostdinc，它使编译器不再系统缺省的头文件目录里面找头文件，一般和-I联合使用，明确限定头文件的位置。在编译驱动模块时，由于非凡的需求必须强制GCC不搜索系统默认路径，也就是不搜索/usr/include要用参数-nostdinc，还要自己用-I参数来指定内核 头文件路径，这个时候必须在Makefile中指定。</p>

<h5>4.</h5>

<p>当#include使用相对路径的时候，gcc最终会根据上面这些路径，来最终构建出头文件的位置。如#include &lt;sys/types.h>就是包含文件/usr/include/sys/types.h</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用汇编指令对标志位的影响]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/12/20/assembly-cmd-flags/"/>
    <updated>2012-12-20T15:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/12/20/assembly-cmd-flags</id>
    <content type="html"><![CDATA[<pre><code>加法指令 ADD (addition)
指令对标志位的影响：
                     CF=1   最高有效位向高位有进位
                     CF=0   最高有效位向高位无进位
                     OF=1   两个同符号数相加（正数+正数 或 负数+负数），结果符号与其相反。
                     OF=0   两个不同符号数相加，或同符号数相加，结果符号与其相同。

带进位加法指令 ADC (add with carry)
指令对标志位的影响：
                     CF=1   最高有效位向高位有进位
                     CF=0   最低有效位相高位无进位
                     OF=1   两个同符号数相加，结果符号与其相反，
                     OF=0   两个同符号数相加，或同符号相加，结果符号与其相同

加1指令 INC (increament)
指令对标志位的影响：
                     对CF无影响
                     OF=1   两个同符号数相加，结果符号与其相反，
                     OF=0   两个同符号数相加，或同符号相加，结果符号与其相同。

减法指令 SUB (subtract)
指令对标志位的影响：
                     CF=1 二进制减法运算中最高有效位向高位有借位（被减数小于减数，不够减的情况）
                     CF=0 二进制减法运算中最高有效为向高位无借位（被减数〉=减数，够减的情况）
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

带借位减法指令 SBB (subtract with borrow)
指令对标志位的影响：
                     CF=1 二进制减法运算中最高有效位向高位有借位（被减数小于减数，不够减的情况）
                     CF=0 二进制减法运算中最高有效为向高位无借位（被减数〉=减数，够减的情况）
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

减1指令 DEC (decrement)
指令对标志位的影响：
                     对CF无影响
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

比较指令 CMP (compare)
指令对标志位的影响：
                     CF=1 二进制减法运算中最高有效位向高位有借位（被减数小于减数，不够减的情况）
                     CF=0 二进制减法运算中最高有效为向高位无借位（被减数〉=减数，够减的情况）
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

求补指令 NEG (negate)
指令对标志位的影响：
                     CF=1 　不为0的操作数求补时
                     CF=0 　为0的操作数求补时
                     OF=1    操作数为-128（字节运算）或操作数为-32768（字运算）
                     OF=0    当求补运算的操作数不为－128（字节）或－32768（字）时

无符号乘法指令 MUL (unsigned multiple)    有符号乘法指令 IMUL(signed muliple)
指令对标志位的影响：乘法指令只影响标志位CF和OF，其他条件码位无定义。
                     MUL指令的条件码设置为：
                     CF OF=0 0 乘积的高一半为0（字节操作的（AH）或字操作的（DX））
                     CF OF=1 1 乘积的高一半不为0
                     IMUL指令的条件码设置为：
                     CF OF=0 0 乘积的高一半为低一半的符号扩展.
                     CF OF=1 1 其他情况

无符号数除法 DIV (unsigned divide)     带符号数除法 IDIV (singed divide)
指令对标志位的影响：不影响条件码。

逻辑与 AND (logic and)
指令对标志位的影响：
                     指令执行后 CF 和 OF 置零，AF无定义。
                     PF=1 结果操作数中1的个数为偶数时置1
                     PF=0 结果操作数中1的个数为奇数时置0

逻辑或 or (logic or)
指令对标志位的影响：
                     令执行后 CF 和 OF 置零，AF无定义。
                     PF=1 结果操作数中1的个数为偶数时置1
                     PF=0 结果操作数中1的个数为奇数时置0

逻辑非 NOT (logic not)
指令对标志位的影响：对标志位无影响

异或 XOR (exclusice or)
指令对标志位的影响：
                     令执行后 CF 和 OF 置零，AF无定义。
                     PF=1 结果操作数中1的个数为偶数时置1
                     PF=0 结果操作数中1的个数为奇数时置0

测试指令 TEST
指令对标志位的影响：
                     令执行后 CF 和 OF 置零，AF无定义。
                     PF=1 结果操作数中1的个数为偶数时置1
                     PF=0 结果操作数中1的个数为奇数时置0

逻辑左移 SHL (shift logical left)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

逻辑右移 SHR (shift logical right)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

算术左移 SAL (shift arithmetic left)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

算术右移 SAR (shift arithmetic right)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

循环左移 ROL (rotate left)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

循环右移 ROR (rotate right)
指令对标志位的影响：CF=移入的数值
                     OF=1 当cnt=1时，移动后最高位的值发生变化。
                     OF=0 当cnt=1时，移动时最高位的值未发生变化。

带进位的循环左移 RCL (rotate left through carry)
指令对标志位的影响：CF=移入的数值。
                     OF=1 当cnt=1时，移动后最高位的值未发生变化。
                     OF=0 当cnt=1时，移动后最高位的值发生变化。
                     SF、ZF、PF标志位不受影响。

带进位的循环右移 RCR (rotate right through carry)
指令对标志位的影响：CF=移入的数值。
                     OF=1 当cnt=1时，操作数最高位的值未发生变化。
                     OF=0 当cnt=1时，操作数最高位的值发生变化。
                     SF、ZF、PF标志位不受影响。

串传送 MOVSB / MOVSW (move string byte/word)
指令对条件码的影响：不影响条件码。

存串 STOSB / STOSW (stroe from string byte/word)
指令对条件码的影响：不影响条件码。

取串LODSB / LODSW (load from string byte/word)
指令对条件码的影响：不影响条件码。

串比较 CMPSB / CMPSW (compare string byte/word)
指令对条件码的影响：
                     CF=1 二进制减法运算中最高有效位向高位有借位（被减数小于减数，不够减的情况）
                     CF=0 二进制减法运算中最高有效为向高位无借位（被减数〉=减数，够减的情况）
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

串扫描 SCASB / SCASW (scan string byte / word)
指令对条件码的影响：
                     CF=1 二进制减法运算中最高有效位向高位有借位（被减数小于减数，不够减的情况）
                     CF=0 二进制减法运算中最高有效为向高位无借位（被减数〉=减数，够减的情况）
                     OF=1 两数符号相反（正数-负数，或负数-正数），而结果符号与减数相同。
                     OF=0 同符号数相减时，或不同符号数相减，其结果符号与减数不同。

条件转移指令
指令的汇编格式及功能    根据条件码的值转移：
49、JZ(JE) OPR        ZF=1
50、JNZ(JNE) OPR   ZF=0
51、JS OPR             SF=1
52、JNS OPR           SF=0
53、JO OPR             OF=1
54、JNO OPR          OF=0
55、JP OPR             PF=1
56、JNP OPR           PF=0
57、JC OPR             CF=1
58、JNC OPR          CF=0

比较两个无符号数，根据比较的结果转移
59、JB(JNAE,JC)   OPR   CF=1         被减数小于减数则转移
60、JNB(JAE,JNC) OPR   CF=0         被减数大于或等于减数则转移
61、JBE(JNA) OPR      CF或ZF=1      被减数小于或等于减数则转移
62、JNBE(JA) OPR      CF或ZF=0      被减数大于减数则转移

比较两个带符号数，根据比较结果转移
63、JL/JNGE OPR       SF异或OF=1           被减数小于减数则转移
64、JNL/JGE           SF异或OF=0               被减数不小于减数则转移
65、JLE/JNE           (SF异或OF)与ZF=1     被减数不大于减数则转移
66、JNLE/JG           (SF异或OF)与ZF=0     被减数大于减数则转移

根据CX寄存器的值转移
67、JCXZ              (CX)=0               CX内容为零 则转移
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c与汇编的关系]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/12/20/assembly-c-and-asse/"/>
    <updated>2012-12-20T15:25:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/12/20/assembly-c-and-asse</id>
    <content type="html"><![CDATA[<p>_start是汇编程序的入口，main是c程序的入口？<br/>
gcc 只是一个  外壳而不是真正的编译器，这真的c编译器是/usr/lib/gcc/i486-gun/4.3.2/cc1,gcc调用c编译器、汇编器和链接器完成c 代码的编译链接工作。/usr/lib/gcc/i486-linux-gun/4.3.2/collect2是链接器ld的外壳，它调用ld完成链接。</p>

<p>i main.c被cc1编译成汇编程序/tmp/ccRGDpua.s。<br/>
ii 这个汇编程序被as汇编成目标文件/tmp/ccidnZ1d.o<br/>
iii   这个目标文件连同另外几个目标文件（crt1.o,crti.o,crtbegin.o,crtend.o,crtn.o)一起链接成可执行文件 main。在链接过程中还用-l，选项指定一些库文件，有libc、libgcc、ligcc_s，其中有些库是共享库，需要动态链接，所以用 -dynamic-linker选项指定动态链接器是/lib/ld-linux.so.2<br/>
<code>
$ nm /usr/lib/crt1.o
00000000 R  _IO_stdin_used
00000000 D __data_start
                 U __libc_csu_fini
                 U __libc_csu_init
                 U __libc_start_main
00000000 R _fp_hw
00000000 T _start
00000000 W data_start
                 U main
</code>
U main 这一行表示main这个符号在crt1.o已经被引用了，但是还没有定义（Undefined），因此需要别的目标文件提供一个定义并且和crt1.o链接在一起。T_start表示在crt1.o中已定义为（text）。</p>

<p>c 程序的入口点其实是crt1.o提供的<em>start，它先做一些初始化工作（启动例程，startup  routine），然后调用我们编写的main函数。所以，main函数是程序的入口，不够准确。</em>start才是真正的入口点，而main函数是被 _start调用的。</p>

<p>U  __libc_start_main，这个符号在其他几个目标文件中也没有定义，所以链接生成可执行文件之后仍然是个未定义符号。事实上这个符号在 libc中定义，libc是一个共享库，它并不像其他目标文件一样链接到可执行文件main中，而是在运行时做动态链接：<br/>
i 操作系统在加载main这个程序时，首先看它有没有需要动态链接的未定义符号。<br/>
ii如果需要做动态链接，就查看这个程序指定了哪些共享库，以及用什么动态链接器来做动态链接。我们在链接时用-lc选项指定了共享库libc，用-dynamic-linker /lib/ld-linux.so.2 指定动态链接器，这些信息都会写到可执行文件中。<br/>
iii动态连接器加载共享库，在其中查找这些未定义符号的定义，完成链接过程。</p>

<p>c内联汇编</p>

<p>完整的内联汇编格式：
```
    <strong>asm</strong>(asembler template
            :output operands
            : input operands
            : list of clobbered registers
            );</p>

<pre><code>e.g.

#include &lt;stdio.h&gt;
int main(void)
{
    int a=10,b;
    __asm__("movl %1,%%eax\n\t"
            "movl %%eax,%0\n\t"
            :"=r"(b)    //把%0所代表的寄存器的值输出给变量b
            :"r"(a)     //告诉编译器分配一个寄存器保存变量a的值，作为汇编程序的输入，对应%1
            :"%eax"
    );
    printf("result:%d,%d\n",a,b);
    return 0;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在64位主机上编译产生32位的目标代码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/12/18/compiler-64host-32target/"/>
    <updated>2012-12-18T14:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/12/18/compiler-64host-32target</id>
    <content type="html"><![CDATA[<p>  64位平台跟32位平台有很大的不同，包括参数传递方式，指令集都有很大的变化，那怎么能够让它正常运行呢？利用 gcc的-m32参数编译产生32位的目标代码，而不是64位的目标代码，因为32位的目标代码可以运行在64位的主机上。
<code>
$ gcc -m32 manydots.s -o manydots
$ ./manydots
How many dots do you want to see? 10
..........
$ file manydots
manydots: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.8, not stripped
</code>
  可以看到，这样就okay了。<br/>
  实际上，我们还可以分步来做：先汇编，后链接。这样可以减少目标代码的大小，先看看原来的大小。
<code>
$ wc -c manydots
6495 manydots
</code>
我们分步汇编、链接：
<code>
// 这个时候是需要一个默认的_start入口的，如果不指定，会默认设置一个程序入口地址，因为这个时候没有人给我们设置一个真正的入口_start了。
$ sed -i -e "s/main/_start/g" manydots.s
$ as --32 manydots.s -o manydots.o
$ ld -m elf_i386 manydots.o -o manydots
$ wc -c manydots
1026 manydots
$ echo "6495-1026" | bc
5469
$ ./manydots
How many dots do you want to see? 10
..........
</code>
  可以发现，这样也可以正常工作，不过目标减少了5469个字节。为什么会有这样的效果呢？资料[2]给出了详细的解释，如果感兴趣，可以研究一下。<br/>
  对了，“as &ndash;32 manydots.s -o manydots.o”可以直接用“$ gcc -m32 -c manydots.s -o manydots.o” 来做，他们两个实际上做了同一个事情，你可以通过gcc的&ndash;verbose查看：<br/>
<code>
$ gcc --verbose -m32 -c manydots.s -o manydots.o
Using built-in specs.
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Debian 4.3.1-9' --with-bugurl=file:///usr/share/doc/gcc-4.3/README.Bugs --enable-languages=c,c++,fortran,objc,obj-c++ --prefix=/usr --enable-shared --with-system-zlib --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --enable-nls --with-gxx-include-dir=/usr/include/c++/4.3 --program-suffix=-4.3 --enable-clocale=gnu --enable-libstdcxx-debug --enable-objc-gc --enable-mpfr --enable-cld --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.3.1 (Debian 4.3.1-9)
COLLECT_GCC_OPTIONS='-v' '-m32' '-c' '-o' 'manydots.o' '-mtune=generic'
 as -V -Qy --32 -o manydots.o manydots.s
GNU assembler version 2.18.0 (x86_64-linux-gnu) using BFD version (GNU Binutils for Debian) 2.18.0.20080103
COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/
LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/4.3.1/32/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/32/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/../../../../lib32/:/lib/../lib32/:/usr/lib/../lib32/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/:/usr/lib/gcc/x86_64-linux-gnu/4.3.1/../../../:/lib/:/usr/lib/
COLLECT_GCC_OPTIONS='-v' '-m32' '-c' '-o' 'manydots.o' '-mtune=generic'
</code></p>

<h4>最后总结一下，在64位主机上编译产生32位目标代码的办法：</h4>

<h5>一、办法一：直接通过gcc汇编、链接</h5>

<p>1、确保不要有重复的<em>start入口，把</em>start替换成main<br/>
2、用gcc加上-m32参数进行汇编和链接</p>

<h5>二、办法二：分步汇编、链接</h5>

<p>1、汇编的时候，用gcc加上-m32参数或者用as加上&ndash;32参数。<br/>
2、在链接的时候，用ld加上-m elf_i386参数。</p>
]]></content>
  </entry>
  
</feed>
