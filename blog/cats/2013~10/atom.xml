<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-30T16:01:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[binutils(含as、ld等)静态编译]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static/"/>
    <updated>2013-10-31T14:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static</id>
    <content type="html"><![CDATA[<p>binutils下载 <a href="http://ftp.gnu.org/gnu/binutils/">http://ftp.gnu.org/gnu/binutils/</a></p>

<h4>binutils静态编译：</h4>

<pre><code>    ./configure
    make LDFLAGS=-all-static
</code></pre>

<h5>原因：</h5>

<p>他们链接的时候是通过 ./libtool 完成的，在libtool里有一行提示（./libtool &ndash;help没有显示这个提示)：
<code>
    -all-static       do not do any dynamic linking at all
</code>
所以就是要libtool增加-all-static参数</p>

<h4>比较通用的静态编译方法</h4>

<pre><code>    ./configure 后加   CFLAGS=-static --enable-static LDFLAGS=-static --disable-shared
    或
    ./configure 后加   CFLAGS=-static LDFLAGS=-static
    或
    make CFLAGS=-static LDFLAGS=-static
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[systemtap article]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article/"/>
    <updated>2013-10-28T16:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article</id>
    <content type="html"><![CDATA[<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html">http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html</a></p>

<p><a href="http://www.cnblogs.com/hazir/p/systemtap_introduction.html">http://www.cnblogs.com/hazir/p/systemtap_introduction.html</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html">http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html">http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html</a></p>

<p><a href="http://blog.yufeng.info/archives/855">http://blog.yufeng.info/archives/855</a></p>

<p><a href="http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml">http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps">https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps</a></p>

<p><a href="http://www.docin.com/p-610001474.html">http://www.docin.com/p-610001474.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-7585066-id-2048719.html">http://blog.chinaunix.net/uid-7585066-id-2048719.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-20568790-id-1632313.html">http://blog.chinaunix.net/uid-20568790-id-1632313.html</a></p>

<p>wiki翻译</p>

<p><a href="http://blog.csdn.net/linyt/article/details/5204841">http://blog.csdn.net/linyt/article/details/5204841</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc编译安装]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make/"/>
    <updated>2013-10-25T09:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make</id>
    <content type="html"><![CDATA[<h5>gcc编译安装过程</h5>

<h4>1.先安装三个库 gmp mprc mpc 这三个库的源码要到官网去下载</h4>

<h5>1）安装gmp：</h5>

<p>  首先建立源码同级目录 gmp-build,输入命令，第一次编译不通过，发现缺少一个叫m4的东西 于是就用apt-get下载了一个，继续编译，没有报错。make的时候出现大量信息并且生成一些文件在当前文件夹下，之后用make check检查一下，最后用make install安装</p>

<h5>2）安装mpfr：</h5>

<p>  首先建立源码文件夹同级目录mpfr-build<br/>
然后进入该目录输入../mpfr-2.4.2/configure &ndash;prefix=/usr/local/mpfr-2.4.2 &ndash;with-gmp=/usr/local/gmp-4.3.2<br/>
然后<br/>
 make<br/>
 make check<br/>
 make install</p>

<h5>3）安装mpc</h5>

<p>类似与上面 不过要把依赖关系包含进去具体命令如下<br/>
../mpc-0.8.1/configure &ndash;prefix=/usr/local/mpc-0.8.1 &ndash;with-gmp=/usr/local/gmp-4.3.2 &ndash;with-mpfr=/usr/local/mpfr-2.4.2
然后同样是
  make<br/>
  make check<br/>
  make install</p>

<h4>2.编译gcc</h4>

<h5>1）建立一个objdir来存放目标文件 然后进入该文件夹输入</h5>

<p> /home/wulei/sourcecode/gcc-4.6.2/configure &ndash;prefix=/usr/local/gcc-4.6.2 &ndash;enable-threads=posix &ndash;disable-checking &ndash;disable-multilib &ndash;enable-languages=c &ndash;with-gmp=/usr/local/gmp-4.3.2/ &ndash;with-mpfr=/usr/local/mpfr-2.4.2/ &ndash;with-mpc=/usr/local/mpc-0.8.1/
最终用：../gcc-4.6.2/configure &ndash;prefix=/usr/gcc-4.6.9 &ndash;enable-threads=posix &ndash;disable-checking &ndash;disable-multilib &ndash;enable-languages=c &ndash;with-gmp=/usr/gmp-4.3.2 &ndash;with-mpfr=/usr/mpfr-2.4.2 &ndash;with-mpc=/usr/mpc-0.8.1</p>

<h5>2）</h5>

<p>  make
  make check
  make install</p>

<h5>出现问题make的时候提示如下：</h5>

<pre><code>Checking for suffix of object files... configure: error: in `/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc':
configure: error: cannot compute suffix of object files: cannot compile
See `config.log' for more details.
make[2]: *** [configure-stage1-target-libgcc] 错误 1
make[2]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
make[1]: *** [stage1-bubble] 错误 2
make[1]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
make: *** [all] 错误 2
</code></pre>

<p>于是 进入/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc查看这个路径下的config.log<br/>
发现如下的错误提示：<br/>
/home/wulei/sourcecode/gcc-4.6.2/host-i686-pc-linux-gnu/gcc/cc1: error while loading shared libraries: libmpfr.so.1: cannot open shared object file: No such file or directory</p>

<h4>原因是因为linux在make的时候没有自动寻找新加入的库所以要用命令加入</h4>

<p>export LD_LIBRARY_PATH=/usr/local/mpc-0.8.1/lib:/usr/local/mpfr-2.4.2/lib:/usr/local/gmp-4.3.2/lib</p>

<h4>Makefile:161: ../.././gcc/libgcc.mvars: No such file or directory</h4>

<p>编译gcc时，需要注意一个原则：不要再gcc的源码中直接执行./configure、make、make install等命令，需要在源码目录下另外新建一个目录，在新建的目录中执行以上命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[--prefix]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix/"/>
    <updated>2013-10-23T10:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix</id>
    <content type="html"><![CDATA[<p>以安装supersparrow-0.0.0为例，我们打算把他安装到目录 /usr/local/supersparrow,于是在supersparrow-0.0.0目录执行带选项的脚本
<code>
./configure –prefix=/usr/local/supersparrow
</code>
执行成功后再编译、安装（make，make install）；安装完成将自动生成目录supersparrow,而且该软件任何的文档都被复制到这个目录。为什么要指定这个安装目录？是为了以后的维护方便，假如没有用这个选项，安装过程结束后，该软件所需的软件被复制到不同的系统目录下，很难弄清楚到底复制了那些文档、都复制到哪里去了—基本上是一塌糊涂。</p>

<p>用了—prefix选项的另一个好处是卸载软件或移植软件。当某个安装的软件不再需要时，只须简单的删除该安装目录，就能够把软件卸载得干干净净；移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统，不同系统用&ndash;target XXX）。</p>

<p>一个小选项有这么方便的作用，建议在实际工作中多多使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LD_PRELOAD环境变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD/"/>
    <updated>2013-10-22T16:08:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD</id>
    <content type="html"><![CDATA[<p>在Linux的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。</p>

<p>我们知道，Linux的用的都是glibc，有一个叫libc.so.6的文件，这是几乎所有Linux下命令的动态链接中，其中有标准C的各种函数。对于GCC而言，默认情况下，所编译的程序中对标准C函数的链接，都是通过动态链接方式来链接libc.so.6这个函数库的。</p>

<p>OK。还是让我用一个例子来看一下用LD_PRELOAD来hack别人的程序。</p>

<h5>示例一</h5>

<p>我们写下面一段例程：
<code>
    /* 文件名：verifypasswd.c */
    /* 这是一段判断用户口令的程序，其中使用到了标准C函数strcmp*/
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;
    int main(int argc, char **argv)
    {
        char passwd[] = "password";
        if (argc &lt; 2) {
            printf("usage: %s &lt;password&gt;/n", argv[0]);
            return 1;
        }
        if (!strcmp(passwd, argv[1])) {
            printf("Correct Password!/n");
            return 1;
        }
        printf("Invalid Password!/n");
        return 0;
    }
</code>
在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em&gt; 文件名：hack.c &lt;/em&gt;/
</span><span class='line'>#include &lt;stdio.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#include &lt;string.h&gt;
</span><span class='line'>int strcmp(const char *s1, const char *s2)
</span><span class='line'>{
</span><span class='line'>printf("hack function invoked. s1=&lt;%s&gt; s2=&lt;%s&gt;/n", s1, s2);
</span><span class='line'>/* 永远返回0，表示两个字符串相等 */
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;编译程序：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ gcc -o verifypasswd verifypasswd.c
</span><span class='line'>$ gcc -shared -o hack.so hack.c
</span><span class='line'>&lt;code&gt;
</span><span class='line'>测试一下程序：（得到正确结果）
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ ./verifypasswd asdf
</span><span class='line'>Invalid Password!</span></code></pre></td></tr></table></div></figure></p>

<h5>设置LD_PRELOAD变量：</h5>

<p>（使我们重写过的strcmp函数的hack.so成为优先载入链接库）
<code>
$ export LD_PRELOAD="./hack.so"
</code>
再次运行程序：
<code>
$ ./verifypasswd  asdf
hack function invoked. s1=&lt;password&gt; s2=&lt;asdf&gt;
Correct Password!
</code>
我们可以看到，<br/>
1）我们的hack.so中的strcmp被调用了。<br/>
2）主程序中运行结果被影响了。<br/>
如果这是一个系统登录程序，那么这也就意味着我们用任意口令都可以进入系统了。</p>
]]></content>
  </entry>
  
</feed>
