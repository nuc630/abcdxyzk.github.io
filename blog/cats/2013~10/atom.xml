<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-05-21T10:54:19+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[binutils(含as、ld等)静态编译]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static/"/>
    <updated>2013-10-31T14:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static</id>
    <content type="html"><![CDATA[<p>binutils下载 <a href="http://ftp.gnu.org/gnu/binutils/">http://ftp.gnu.org/gnu/binutils/</a></p>

<h4>binutils静态编译：</h4>

<pre><code>    ./configure
    make LDFLAGS=-all-static
</code></pre>

<h5>原因：</h5>

<p>他们链接的时候是通过 ./libtool 完成的，在libtool里有一行提示（./libtool &ndash;help没有显示这个提示)：
<code>
    -all-static       do not do any dynamic linking at all
</code>
所以就是要libtool增加-all-static参数</p>

<h4>比较通用的静态编译方法</h4>

<pre><code>    ./configure 后加   CFLAGS=-static --enable-static LDFLAGS=-static --disable-shared
    或
    ./configure 后加   CFLAGS=-static LDFLAGS=-static
    或
    make CFLAGS=-static LDFLAGS=-static
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[systemtap article]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article/"/>
    <updated>2013-10-28T16:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article</id>
    <content type="html"><![CDATA[<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html">http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html</a></p>

<p><a href="http://www.cnblogs.com/hazir/p/systemtap_introduction.html">http://www.cnblogs.com/hazir/p/systemtap_introduction.html</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html">http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html">http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html</a></p>

<p><a href="http://blog.yufeng.info/archives/855">http://blog.yufeng.info/archives/855</a></p>

<p><a href="http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml">http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps">https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps</a></p>

<p><a href="http://www.docin.com/p-610001474.html">http://www.docin.com/p-610001474.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-7585066-id-2048719.html">http://blog.chinaunix.net/uid-7585066-id-2048719.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-20568790-id-1632313.html">http://blog.chinaunix.net/uid-20568790-id-1632313.html</a></p>

<p>wiki翻译</p>

<p><a href="http://blog.csdn.net/linyt/article/details/5204841">http://blog.csdn.net/linyt/article/details/5204841</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc编译安装]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make/"/>
    <updated>2013-10-25T09:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/25/compiler-gcc-make</id>
    <content type="html"><![CDATA[<p><a href="ftp://ftp.gnu.org/pub/gnu/gcc/gcc-4.6.2/gcc-4.6.2.tar.gz">ftp://ftp.gnu.org/pub/gnu/gcc/gcc-4.6.2/gcc-4.6.2.tar.gz</a></p>

<p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-4.3.2.tar.bz2">ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-4.3.2.tar.bz2</a></p>

<p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-2.4.2.tar.bz2">ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-2.4.2.tar.bz2</a></p>

<p><a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-0.8.1.tar.gz">ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-0.8.1.tar.gz</a></p>

<h3>安装依赖</h3>

<pre><code>    gcc configure: error: Building GCC requires GMP 4.2+, MPFR 2.3.1+ and MPC 0.8.0+
</code></pre>

<p>从错误中可以看出：GCC编译需要GMP， MPFR， MPC这三个库（有的系统已经安装了就没有这个提示，我的没有安装），有两种安装方法（建议第二种）：</p>

<h4>手动安装</h4>

<p>我使用的版本为gmp-4.3.2，mpfr-2.4.2和mpc-0.8.1，在 <a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/">ftp://gcc.gnu.org/pub/gcc/infrastructure/</a> 下载，根据提示的顺序分别安装GMP，MPFR和MPC（mpfr依赖gmp，mpc依赖gmp和mpfr），这里全部自己指定了安装目录，如果没有指定则默认分装在在/usr/include、/usr/lib和/usr/share，管理起来不方便，比如想卸载的时候还得一个个去找：</p>

<pre><code>    安装gmp:  ./configure --prefix=/usr/local/gmp-4.3.2; make install
    安装mpfr: ./configure --prefix=/usr/local/mpfr-2.4.2 --with-gmp=/usr/local/gmp-4.3.2/; make install
    安装mpc:  ./configure --prefix=/usr/local/mpc-0.8.1 --with-gmp=/usr/local/gmp-4.3.2/ --with-mpfr=/usr/local/mpfr-2.4.2/; make install
</code></pre>

<h4>gcc自带脚本安装</h4>

<p>gcc源码包中自带了一个gcc依赖库安装脚本download_prerequisites，位置在gcc源码目录中的contrib/download_prerequisites，因此只需要进入该目录，直接运行脚本安装即可：./download_prerequisites
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MPFR=mpfr-2.4.2
</span><span class='line'>GMP=gmp-4.3.2
</span><span class='line'>MPC=mpc-0.8.1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;wget ftp://gcc.gnu.org/pub/gcc/infrastructure/$MPFR.tar.bz2 || exit 1
</span><span class='line'>tar xjf $MPFR.tar.bz2 || exit 1
</span><span class='line'>ln -sf $MPFR mpfr || exit 1
</span><span class='line'>
</span><span class='line'>wget ftp://gcc.gnu.org/pub/gcc/infrastructure/$GMP.tar.bz2 || exit 1
</span><span class='line'>tar xjf $GMP.tar.bz2  || exit 1
</span><span class='line'>ln -sf $GMP gmp || exit 1
</span><span class='line'>
</span><span class='line'>wget ftp://gcc.gnu.org/pub/gcc/infrastructure/$MPC.tar.gz || exit 1
</span><span class='line'>tar xzf $MPC.tar.gz || exit 1
</span><span class='line'>ln -sf $MPC mpc || exit 1
</span><span class='line'>
</span><span class='line'>rm $MPFR.tar.bz2 $GMP.tar.bz2 $MPC.tar.gz || exit 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 配置环境变量
</span><span class='line'>
</span><span class='line'>我这里指定了安装位置，如果没有指定则这几个库的默认位置是/usr/local/include和/usr/local/lib，不管有没有指定GCC编译时都可能会找不到这三个库，需要确认库位置是否在环境变量LD_LIBRARY_PATH中，查看环境变量内容可以用命令
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo $LD_LIBRARY_PATH
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;设置该环境变量命令如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;指定安装：export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/gmp-4.3.2/lib:/usr/local/mpfr-2.4.2/lib:/usr/local/mpc-0.8.1/lib
</span><span class='line'>
</span><span class='line'>默认安装：export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>不指定环境变量会出错：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;configure: error: cannot compute suffix of object files: cannot compile
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 2.编译gcc
</span><span class='line'>##### 1）建立一个objdir来存放目标文件 然后进入该文件夹输入
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/home/wulei/sourcecode/gcc-4.6.2/configure --prefix=/usr/local/gcc-4.6.2 --enable-threads=posix --disable-checking --disable-multilib --enable-languages=c --with-gmp=/usr/local/gmp-4.3.2/ --with-mpfr=/usr/local/mpfr-2.4.2/ --with-mpc=/usr/local/mpc-0.8.1/
</span><span class='line'>最终用：../gcc-4.6.2/configure --prefix=/usr/gcc-4.6.9 --enable-threads=posix --disable-checking --disable-multilib --enable-languages=c --with-gmp=/usr/gmp-4.3.2 --with-mpfr=/usr/mpfr-2.4.2 --with-mpc=/usr/mpc-0.8.1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### 2）
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;make
</span><span class='line'>make check
</span><span class='line'>make install
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### 错误1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/usr/bin/ld: .libs/expat_justparse_interface.o: relocation R_X86_64_32 against `a local symbol' can not be used when making a shared object; recompile with -fPIC
</span><span class='line'>.libs/expat_justparse_interface.o: could not read symbols: Bad value
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;解决
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;make CXXFLAGS=-fPIC CFLAGS=-fPIC
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### 出现问题make的时候提示如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Checking for suffix of object files... configure: error: in `/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc':
</span><span class='line'>configure: error: cannot compute suffix of object files: cannot compile
</span><span class='line'>See `config.log' for more details.
</span><span class='line'>make[2]: *** [configure-stage1-target-libgcc] 错误 1
</span><span class='line'>make[2]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
</span><span class='line'>make[1]: *** [stage1-bubble] 错误 2
</span><span class='line'>make[1]:正在离开目录 `/home/wulei/sourcecode/gcc-4.6.2'
</span><span class='line'>make: *** [all] 错误 2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;于是 进入/home/wulei/sourcecode/gcc-4.6.2/i686-pc-linux-gnu/libgcc查看这个路径下的config.log  
</span><span class='line'>发现如下的错误提示：  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/home/wulei/sourcecode/gcc-4.6.2/host-i686-pc-linux-gnu/gcc/cc1: error while loading shared libraries: libmpfr.so.1: cannot open shared object file: No such file or directory
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 原因是因为linux在make的时候没有自动寻找新加入的库所以要用命令加入  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;export LD_LIBRARY_PATH=/usr/local/mpc-0.8.1/lib:/usr/local/mpfr-2.4.2/lib:/usr/local/gmp-4.3.2/lib
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Makefile:161: ../.././gcc/libgcc.mvars: No such file or directory&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;编译gcc时，需要注意一个原则：不要再gcc的源码中直接执行./configure、make、make install等命令，需要在源码目录下另外新建一个目录，在新建的目录中执行以上命令。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[--prefix]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-10-23T10:49:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/10/23/compiler-makefile-prefix&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;以安装supersparrow-0.0.0为例，我们打算把他安装到目录 /usr/local/supersparrow,于是在supersparrow-0.0.0目录执行带选项的脚本
</span><span class='line'>&lt;code&gt;
</span><span class='line'>./configure –prefix=/usr/local/supersparrow
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>执行成功后再编译、安装（make，make install）；安装完成将自动生成目录supersparrow,而且该软件任何的文档都被复制到这个目录。为什么要指定这个安装目录？是为了以后的维护方便，假如没有用这个选项，安装过程结束后，该软件所需的软件被复制到不同的系统目录下，很难弄清楚到底复制了那些文档、都复制到哪里去了—基本上是一塌糊涂。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;用了—prefix选项的另一个好处是卸载软件或移植软件。当某个安装的软件不再需要时，只须简单的删除该安装目录，就能够把软件卸载得干干净净；移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统，不同系统用&ndash;target XXX）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;一个小选项有这么方便的作用，建议在实际工作中多多使用。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[LD_PRELOAD环境变量]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-10-22T16:08:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/10/22/tools-LD_PRELOAD&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;在Linux的动态链接库的世界中，LD_PRELOAD就是这样一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入恶意程序，从而达到那不可告人的罪恶的目的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们知道，Linux的用的都是glibc，有一个叫libc.so.6的文件，这是几乎所有Linux下命令的动态链接中，其中有标准C的各种函数。对于GCC而言，默认情况下，所编译的程序中对标准C函数的链接，都是通过动态链接方式来链接libc.so.6这个函数库的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;OK。还是让我用一个例子来看一下用LD_PRELOAD来hack别人的程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;示例一&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们写下面一段例程：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>/* 文件名：verifypasswd.c */
</span><span class='line'>/* 这是一段判断用户口令的程序，其中使用到了标准C函数strcmp*/
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>int main(int argc, char **argv)
</span><span class='line'>{
</span><span class='line'>    char passwd[] = "password";
</span><span class='line'>    if (argc &lt; 2) {
</span><span class='line'>        printf("usage: %s &lt;password&gt;/n", argv[0]);
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    if (!strcmp(passwd, argv[1])) {
</span><span class='line'>        printf("Correct Password!/n");
</span><span class='line'>        return 1;
</span><span class='line'>    }
</span><span class='line'>    printf("Invalid Password!/n");
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：</span></code></pre></td></tr></table></div></figure>
    /<em> 文件名：hack.c </em>/
    #include &lt;stdio.h></p>

<pre><code>#include &lt;string.h&gt;
int strcmp(const char *s1, const char *s2)
{
    printf("hack function invoked. s1=&lt;%s&gt; s2=&lt;%s&gt;/n", s1, s2);
    /* 永远返回0，表示两个字符串相等 */
    return 0;
}
</code></pre>

<pre><code>编译程序：
</code></pre>

<pre><code>$ gcc -o verifypasswd verifypasswd.c
$ gcc -shared -o hack.so hack.c
</code></pre>

<pre><code>测试一下程序：（得到正确结果）
</code></pre>

<pre><code>$ ./verifypasswd asdf
Invalid Password!
</code></pre>

<pre><code>##### 设置LD_PRELOAD变量：
（使我们重写过的strcmp函数的hack.so成为优先载入链接库）
</code></pre>

<pre><code>$ export LD_PRELOAD="./hack.so"
</code></pre>

<pre><code>再次运行程序：
</code></pre>

<pre><code>$ ./verifypasswd  asdf
hack function invoked. s1=&lt;password&gt; s2=&lt;asdf&gt;
Correct Password!
</code></pre>

<p>```
我们可以看到，<br/>
1）我们的hack.so中的strcmp被调用了。<br/>
2）主程序中运行结果被影响了。<br/>
如果这是一个系统登录程序，那么这也就意味着我们用任意口令都可以进入系统了。</p>
]]></content>
  </entry>
  
</feed>
