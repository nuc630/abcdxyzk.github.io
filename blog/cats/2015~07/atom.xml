<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-03-29T17:17:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cgroups介绍、使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/31/cgroup-base/"/>
    <updated>2015-07-31T14:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/31/cgroup-base</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/jesseyoung/article/details/39077829">http://blog.csdn.net/jesseyoung/article/details/39077829</a></p>

<p><a href="http://tech.meituan.com/cgroups.html">http://tech.meituan.com/cgroups.html</a></p>

<p><a href="http://www.cnblogs.com/lisperl/tag/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/">http://www.cnblogs.com/lisperl/tag/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/</a></p>

<h4>1 cgroup简介</h4>

<p>Cgroups是control groups的缩写，是Linux内核提供的一种可以限制、记录、隔离进程组（process groups）所使用的物理资源（如：cpu,memory,IO等等）的机制。最初由google的工程师提出，后来被整合进Linux内核。也是目前轻量级虚拟化技术 lxc （linux container）的基础之一。</p>

<h4>2 cgroup作用</h4>

<p>Cgroups最初的目标是为资源管理提供的一个统一的框架，既整合现有的cpuset等子系统，也为未来开发新的子系统提供接口。现在的cgroups适用于多种应用场景，从单个进程的资源控制，到实现操作系统层次的虚拟化（OS Level Virtualization）。Cgroups提供了以下功能：</p>

<p>1.限制进程组可以使用的资源数量（Resource limiting ）。比如：memory子系统可以为进程组设定一个memory使用上限，一旦进程组使用的内存达到限额再申请内存，就会出发OOM（out of memory）。</p>

<p>2.进程组的优先级控制（Prioritization ）。比如：可以使用cpu子系统为某个进程组分配特定cpu share。</p>

<p>3.记录进程组使用的资源数量（Accounting ）。比如：可以使用cpuacct子系统记录某个进程组使用的cpu时间</p>

<p>4.进程组隔离（Isolation）。比如：使用ns子系统可以使不同的进程组使用不同的namespace，以达到隔离的目的，不同的进程组有各自的进程、网络、文件系统挂载空间。</p>

<p>5.进程组控制（Control）。比如：使用freezer子系统可以将进程组挂起和恢复。</p>

<h4>3 cgroup相关概念</h4>

<h5>3.1 相关概念</h5>

<p>1.任务（task）。在cgroups中，任务就是系统的一个进程。</p>

<p>2.控制族群（control group）。控制族群就是一组按照某种标准划分的进程。Cgroups中的资源控制都是以控制族群为单位实现。一个进程可以加入到某个控制族群，也从一个进程组迁移到另一个控制族群。一个进程组的进程可以使用cgroups以控制族群为单位分配的资源，同时受到cgroups以控制族群为单位设定的限制。</p>

<p>3.层级（hierarchy）。控制族群可以组织成hierarchical的形式，既一颗控制族群树。控制族群树上的子节点控制族群是父节点控制族群的孩子，继承父控制族群的特定的属性。</p>

<p>4.子系统（subsystem）。一个子系统就是一个资源控制器，比如cpu子系统就是控制cpu时间分配的一个控制器。子系统必须附加（attach）到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群都受到这个子系统的控制。</p>

<h5>3.2 相互关系</h5>

<p>1.每次在系统中创建新层级时，该系统中的所有任务都是那个层级的默认 cgroup（我们称之为 root cgroup ，此cgroup在创建层级时自动创建，后面在该层级中创建的cgroup都是此cgroup的后代）的初始成员。</p>

<p>2.一个子系统最多只能附加到一个层级。</p>

<p>3.一个层级可以附加多个子系统</p>

<p>4.一个任务可以是多个cgroup的成员，但是这些cgroup必须在不同的层级。</p>

<p>5.系统中的进程（任务）创建子进程（任务）时，该子任务自动成为其父进程所在 cgroup 的成员。然后可根据需要将该子任务移动到不同的 cgroup 中，但开始时它总是继承其父任务的cgroup。</p>

<h4>4 cgroup子系统介绍</h4>

<pre><code>    blkio   -- 这个子系统为块设备设定输入/输出限制，比如物理设备（磁盘，固态硬盘，USB 等等）。
    cpu     -- 这个子系统使用调度程序提供对 CPU 的 cgroup 任务访问。
    cpuacct -- 这个子系统自动生成 cgroup 中任务所使用的 CPU 报告。
    cpuset  -- 这个子系统为 cgroup 中的任务分配独立 CPU（在多核系统）和内存节点。
    devices -- 这个子系统可允许或者拒绝 cgroup 中的任务访问设备。
    freezer -- 这个子系统挂起或者恢复 cgroup 中的任务。
    memory  -- 这个子系统设定 cgroup 中任务使用的内存限制，并自动生成由那些任务使用的内存资源报告。
    net_cls -- 这个子系统使用等级识别符（classid）标记网络数据包，可允许 Linux 流量控制程序（tc）识别从具体 cgroup 中生成的数据包。
    ns      -- 名称空间子系统。
</code></pre>

<h4>5 cgroup安装（centos下）</h4>

<p>若系统未安装则进行安装，若已安装则进行更新。</p>

<pre><code>    [root@localhost ~]# yum install libcgroup  
</code></pre>

<p>查看运行状态，并启动服务</p>

<pre><code>    [root@localhost ~]# service cgconfig status  
    Stopped  
    [root@localhost ~]# service cgconfig start  
    Starting cgconfig service:                                 [  OK  ]  
    [root@localhost ~]# service cgconfig status  
    Running  
</code></pre>

<h4>6 cgroup配置</h4>

<h5>6.1 配置文件介绍</h5>

<p>6.1.1 cgroup配置文件所在位置</p>

<pre><code>    /etc/cgconfig.conf  
</code></pre>

<p>6.1.2 默认配置文件内容</p>

<pre><code>    mount {  
        cpuset  = /cgroup/cpuset;  
        cpu     = /cgroup/cpu;  
        cpuacct = /cgroup/cpuacct;  
        memory  = /cgroup/memory;  
        devices = /cgroup/devices;  
        freezer = /cgroup/freezer;  
        net_cls = /cgroup/net_cls;  
        blkio   = /cgroup/blkio;  
    }  
</code></pre>

<p>相当于执行命令</p>

<pre><code>    mkdir /cgroup/cpuset  
    mount -t cgroup -o cpuset red /cgroup/cpuset  
    ……  
    mkdir /cgroup/blkio  
    mount -t cgroup -o cpuset red /cgroup/blkio  
</code></pre>

<p>6.1.3 cgroup section的语法格式如下</p>

<pre><code>    group &lt;name&gt; {  
        [&lt;permissions&gt;]  
        &lt;controller&gt; {  
            &lt;param name&gt; = &lt;param value&gt;;  
            …  
        }  
    …}  
</code></pre>

<p>name: 指定cgroup的名称<br/>
permissions：可选项，指定cgroup对应的挂载点文件系统的权限，root用户拥有所有权限。<br/>
controller： 子系统的名称<br/>
param name 和 param value：子系统的属性及其属性值</p>

<h4>7 cgroup实例分析（限制mysql资源使用）</h4>

<h5>7.1 配置对mysql实例的资源限制</h5>

<p>前提：mysql数据库已在机器上安装</p>

<p>7.1.1 修改cgconfig.conf文件</p>

<pre><code>    mount {  
        cpuset  = /cgroup/cpuset;  
        cpu = /cgroup/cpu;  
        cpuacct = /cgroup/cpuacct;  
        memory  = /cgroup/memory;  
        blkio   = /cgroup/blkio;  
    }  

    group mysql_g1 {    
        cpu {  
            cpu.cfs_quota_us = 50000;  
            cpu.cfs_period_us = 100000;  
        }  
        cpuset {    
            cpuset.cpus = "3";    
            cpuset.mems = "0";    
        }    
        cpuacct{  

        }  
        memory {    
            memory.limit_in_bytes=104857600;  
            memory.swappiness=0;  
            # memory.max_usage_in_bytes=104857600;  
            # memory.oom_control=0;  
        }   
        blkio  {  
            blkio.throttle.read_bps_device="8:0 524288";  
            blkio.throttle.write_bps_device="8:0 524288";  
        }   
    }   
</code></pre>

<p>7.1.2 配置文件的部分解释。</p>

<p>cpu：cpu使用时间限额。</p>

<p>  cpu.cfs_period_us和cpu.cfs_quota_us来限制该组中的所有进程在单位时间里可以使用的cpu时间。这里的cfs是完全公平调度器的缩写。cpu.cfs_period_us就是时间周期(微秒)，默认为100000，即百毫秒。cpu.cfs_quota_us就是在这期间内可使用的cpu时间(微秒)，默认-1，即无限制。(cfs_quota_us是cfs_period_us的两倍即可限定在双核上完全使用)。</p>

<p>cpuset：cpu绑定</p>

<p>  我们限制该组只能在0一共1个超线程上运行。cpuset.mems是用来设置内存节点的。</p>

<p>  本例限制使用超线程0上的第四个cpu线程。</p>

<p>  其实cgconfig也就是帮你把配置文件中的配置整理到/cgroup/cpuset这个目录里面，比如你需要动态设置mysql_group1/ cpuset.cpus的CPU超线程号，可以采用如下的办法。</p>

<pre><code>    [root@localhost ~]# echo "0" &gt; mysql_group1/ cpuset.cpus  
</code></pre>

<p>cpuacct：cpu资源报告</p>

<p>memory：内存限制</p>

<p>  内存限制我们主要限制了MySQL可以使用的内存最大大小memory.limit_in_bytes=256M。而设置swappiness为0是为了让操作系统不会将MySQL的内存匿名页交换出去。</p>

<p>blkio：BLOCK IO限额</p>

<p>blkio.throttle.read_bps_device=&ldquo;8:0 524288&rdquo;; #每秒读数据上限<br/>
blkio.throttle.write_bps_device=&ldquo;8:0 524288&rdquo;; #每秒写数据上限</p>

<p>其中8:0对应主设备号和副设备号，可以通过ls -l /dev/sda查看</p>

<pre><code>    [root@localhost /]# ls -l /dev/sda  
    brw-rw----. 1 root disk 8, 0 Sep 15 04:19 /dev/sda
</code></pre>

<p>7.1.4 修改cgrules.conf文件</p>

<pre><code>    [root@localhost ~]# vi /etc/cgrules.conf  
    # /etc/cgrules.conf  
    #The format of this file is described in cgrules.conf(5)  
    #manual page.  
    #  
    # Example:  
    #&lt;user&gt;         &lt;controllers&gt;   &lt;destination&gt;  
    #@student       cpu,memory      usergroup/student/  
    #peter          cpu             test1/  
    #%              memory          test2/  

    *:/usr/local/mysql/bin/mysqld * mysql_g1  
</code></pre>

<p>注：共分为3个部分，分别为需要限制的实例，限制的内容（如cpu，memory），挂载目标。</p>

<h4>7.2 使配置生效</h4>

<pre><code>    [root@localhost ~]# /etc/init.d/cgconfig restart  
    Stopping cgconfig service:                                 [  OK  ]  
    Starting cgconfig service:                                 [  OK  ]  
    [root@localhost ~]# /etc/init.d/cgred restart  
    Stopping CGroup Rules Engine Daemon...                     [  OK  ]  
    Starting CGroup Rules Engine Daemon:                       [  OK  ]  
</code></pre>

<p>注：重启顺序为cgconfig -> cgred ，更改配置文件后两个服务需要重启，且顺序不能错。</p>

<h5>7.3 启动MySQL，查看MySQL是否处于cgroup的限制中</h5>

<pre><code>    [root@localhost ~]# ps -eo pid,cgroup,cmd | grep -i mysqld  
    29871 blkio:/;net_cls:/;freezer:/;devices:/;memory:/;cpuacct:/;cpu:/;cpuset:/ /bin/sh ./bin/mysqld_safe --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/  
    30219 blkio:/;net_cls:/;freezer:/;devices:/;memory:/;cpuacct:/;cpu:/;cpuset:/mysql_g1 /usr/local/mysql/bin/mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --plugin-dir=/usr/local/mysql//lib/plugin --user=mysql --log-error=/usr/local/mysql/data//localhost.localdomain.err --pid-file=/usr/local/mysql/data//localhost.localdomain.pid --socket=/tmp/mysql.sock --port=3306  
    30311 blkio:/;net_cls:/;freezer:/;devices:/;memory:/;cpuacct:/;cpu:/;cpuset:/ grep -i mysqld  
</code></pre>

<hr />

<hr />

<h3>不改配置文件，用命令实时配置</h3>

<p>比如通过命令
<code>
    cgcreate -t sankuai:sankuai -g cpu:test
</code>
就可以在 cpu 子系统下建立一个名为 test 的节点。</p>

<p>当需要删除某一个 cgroups 节点的时候，可以使用 cgdelete 命令，比如要删除上述的 test 节点，可以使用 cgdelete -r cpu:test命令进行删除</p>

<p>然后可以通过写入需要的值到 test 下面的不同文件，来配置需要限制的资源。每个子系统下面都可以进行多种不同的配置，需要配置的参数各不相同，详细的参数设置需要参考 cgroups 手册。使用 cgset 命令也可以设置 cgroups 子系统的参数，格式为 cgset -r parameter=value path_to_cgroup。</p>

<p>把进程加入到 cgroups 子节点也有多种方法，可以直接把 pid 写入到子节点下面的 task 文件中。也可以通过 cgclassify 添加进程，格式为
<code>
    cgclassify -g subsystems:path_to_cgroup pidlist
</code>
也可以直接使用 cgexec 在某一个 cgroups 下启动进程，格式为
<code>
    gexec -g subsystems:path_to_cgroup1 -g subsystems:path_to_cgroup2 command arguments.
</code></p>

<h4>把任务的cpu资源使用率限制在了50%。</h4>

<p>首先在 cpu 子系统下面创建了一个 halfapi 的子节点：
<code>
    cgcreate abc:abc -g cpu:halfapi
</code></p>

<p>然后在配置文件中写入配置数据：
<code>
    echo 50000 &gt; /cgroup/cpu/halfapi/cpu.cfs_quota_us
</code>
cpu.cfs_quota_us中的默认值是100000，写入50000表示只能使用50%的 cpu 运行时间。</p>

<p>最后在这个cgroups中启动这个任务：
<code>
    cgexec -g "cpu:/halfapi" php halfapi.php half &gt;/dev/null 2&gt;&amp;1
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux RCU机制详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/31/kernel-sched-rcu/"/>
    <updated>2015-07-31T10:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/31/kernel-sched-rcu</id>
    <content type="html"><![CDATA[<p><a href="http://wenku.baidu.com/link?url=bzayVU6qmUlc6UO9WGdgdxGDzrRBVWCiwjysigFxYuJToiZgtaXF5ss01GENBv4l4xxfyedZtm2Ehz7StlFSIECo65pdZHI3kZxuPv5zzwO">http://wenku.baidu.com/link?url=bzayVU6qmUlc6UO9WGdgdxGDzrRBVWCiwjysigFxYuJToiZgtaXF5ss01GENBv4l4xxfyedZtm2Ehz7StlFSIECo65pdZHI3kZxuPv5zzwO</a></p>

<p><a href="http://blog.csdn.net/lili20082008/article/details/17675093">http://blog.csdn.net/lili20082008/article/details/17675093</a></p>

<p><a href="http://blog.csdn.net/junguo/article/details/8244530">http://blog.csdn.net/junguo/article/details/8244530</a></p>

<h4>一:前言</h4>

<p>  RCU机制出现的比较早,只是在linux kernel中一直到2.5版本的时候才被采用.关于RCU机制,这里就不做过多的介绍了,网上有很多有关RCU介绍和使用的文档.请自行查阅.本文主要是从linux kernel源代码的角度.来分析RCU的实现.</p>

<p>在讨论RCU的实现之前.有必要重申以下几点:</p>

<p>1:RCU使用在读者多而写者少的情况.RCU和读写锁相似.但RCU的读者占锁没有任何的系统开销.写者与写写者之间必须要保持同步,且写者必须要等它之前的读者全部都退出之后才能释放之前的资源.</p>

<p>2:RCU保护的是指针.这一点尤其重要.因为指针赋值是一条单指令.也就是说是一个原子操作.因它更改指针指向没必要考虑它的同步.只需要考虑cache的影响.</p>

<p>3:读者是可以嵌套的.也就是说rcu_read_lock()可以嵌套调用.</p>

<p>4:读者在持有rcu_read_lock()的时候,不能发生进程上下文切换.否则,因为写者需要要等待读者完成,写者进程也会一直被阻塞.</p>

<p>以下的代码是基于linux kernel 2.6.26</p>

<h4>二:使用RCU的实例</h4>

<p>Linux kernel中自己附带有详细的文档来介绍RCU,这些文档位于linux-2.6.26.3/Documentation/RCU. 这些文档值得多花点时间去仔细研读一下.</p>

<p>下面以whatisRCU.txt中的例子作为今天分析的起点:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct foo {
</span><span class='line'>    int a;
</span><span class='line'>    char b;
</span><span class='line'>    long c;
</span><span class='line'>};
</span><span class='line'>DEFINE_SPINLOCK(foo_mutex);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct foo *gbl_foo;
</span><span class='line'>void foo_update_a(int new_a)
</span><span class='line'>{
</span><span class='line'>struct foo *new_fp;
</span><span class='line'>struct foo *old_fp;
</span><span class='line'>
</span><span class='line'>new_fp = kmalloc(sizeof(*new_fp), GFP_KERNEL);
</span><span class='line'>spin_lock(&amp;foo_mutex);
</span><span class='line'>old_fp = gbl_foo;
</span><span class='line'>*new_fp = *old_fp;
</span><span class='line'>new_fp-&gt;a = new_a;
</span><span class='line'>rcu_assign_pointer(gbl_foo, new_fp);
</span><span class='line'>spin_unlock(&amp;foo_mutex);
</span><span class='line'>synchronize_rcu();
</span><span class='line'>kfree(old_fp);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int foo_get_a(void)
</span><span class='line'>{
</span><span class='line'>int retval;
</span><span class='line'>
</span><span class='line'>rcu_read_lock();
</span><span class='line'>retval = rcu_dereference(gbl_foo)-&gt;a;
</span><span class='line'>rcu_read_unlock();
</span><span class='line'>return retval;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>如上代码所示,RCU被用来保护全局指针struct foo *gbl_foo. foo_get_a()用来从RCU保护的结构中取得gbl_foo的值.而foo_update_a()用来更新被RCU保护的gbl_foo的值.
</span><span class='line'>
</span><span class='line'>另外,我们思考一下,为什么要在foo_update_a()中使用自旋锁foo_mutex呢?
</span><span class='line'>
</span><span class='line'>假设中间没有使用自旋锁.那foo_update_a()的代码如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void foo_update_a(int new_a)
</span><span class='line'>{
</span><span class='line'>struct foo *new_fp;
</span><span class='line'>struct foo *old_fp;
</span><span class='line'>
</span><span class='line'>new_fp = kmalloc(sizeof(*new_fp), GFP_KERNEL);
</span><span class='line'>
</span><span class='line'>old_fp = gbl_foo;
</span><span class='line'>1:-------------------------     
</span><span class='line'>*new_fp = *old_fp;
</span><span class='line'>new_fp-&gt;a = new_a;
</span><span class='line'>rcu_assign_pointer(gbl_foo, new_fp);
</span><span class='line'>
</span><span class='line'>synchronize_rcu();
</span><span class='line'>kfree(old_fp);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;假设A进程在上图----标识处被B进程抢点.B进程也执行了goo_ipdate_a().等B执行完后，再切换回A进程.此时,A进程所持的old_fd实际上已经被B进程给释放掉了.此后A进程对old_fd的操作都是非法的.
</span><span class='line'>
</span><span class='line'>另外,我们在上面也看到了几个有关RCU的核心API.它们为别是:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rcu_read_lock()
</span><span class='line'>rcu_read_unlock()
</span><span class='line'>synchronize_rcu()
</span><span class='line'>rcu_assign_pointer()
</span><span class='line'>rcu_dereference()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;其中,rcu_read_lock()和rcu_read_unlock()用来保持一个读者的RCU临界区.在该临界区内不允许发生上下文切换.
</span><span class='line'>
</span><span class='line'>rcu_dereference():读者调用它来获得一个被RCU保护的指针.
</span><span class='line'>
</span><span class='line'>Rcu_assign_pointer():写者使用该函数来为被RCU保护的指针分配一个新的值.这样是为了安全从写者到读者更改其值.这个函数会返回一个新值
</span><span class='line'>
</span><span class='line'>#### 三:RCU API实现分析
</span><span class='line'>
</span><span class='line'>Rcu_read_lock()和rcu_read_unlock()的实现如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define rcu_read_lock() __rcu_read_lock()
</span><span class='line'>#define rcu_read_unlock() __rcu_read_unlock()
</span><span class='line'>
</span><span class='line'>#define __rcu_read_lock() \
</span><span class='line'>do { \
</span><span class='line'>    preempt_disable(); \
</span><span class='line'>    __acquire(RCU); \
</span><span class='line'>    rcu_read_acquire(); \
</span><span class='line'>} while (0)
</span><span class='line'>#define __rcu_read_unlock() \
</span><span class='line'>do { \
</span><span class='line'>    rcu_read_release(); \
</span><span class='line'>    __release(RCU); \
</span><span class='line'>    preempt_enable(); \
</span><span class='line'>} while (0)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其中__acquire(),rcu_read_read_acquire(),rcu_read_release(),rcu_read_release()都是一些选择编译函数,可以忽略不可看.因此可以得知.rcu_read_lock(),rcu_read_unlock()只是禁止和启用抢占.因为在读者临界区,不允许发生上下文切换.
</span><span class='line'>
</span><span class='line'>rcu_dereference()和rcu_assign_pointer()的实现如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define rcu_dereference(p)     ({ \
</span><span class='line'>            typeof(p) _________p1 = ACCESS_ONCE(p); \
</span><span class='line'>            smp_read_barrier_depends(); \
</span><span class='line'>            (_________p1); \
</span><span class='line'>            })
</span><span class='line'>#define rcu_assign_pointer(p, v) \
</span><span class='line'>({ \
</span><span class='line'>    if (!__builtin_constant_p(v) || \
</span><span class='line'>        ((v) != NULL)) \
</span><span class='line'>        smp_wmb(); \
</span><span class='line'>    (p) = (v); \
</span><span class='line'>})
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>它们的实现也很简单.因为它们本身都是原子操作.因为只是为了cache一致性,插上了内存屏障.可以让其它的读者/写者可以看到保护指针的最新值.
</span><span class='line'>
</span><span class='line'>synchronize_rcu()在RCU中是一个最核心的函数,它用来等待之前的读者全部退出.我们后面的大部份分析也是围绕着它而进行.实现如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void synchronize_rcu(void)
</span><span class='line'>{
</span><span class='line'>struct rcu_synchronize rcu;
</span><span class='line'>
</span><span class='line'>init_completion(&amp;rcu.completion);
</span><span class='line'>/* Will wake me after RCU finished */
</span><span class='line'>call_rcu(&amp;rcu.head, wakeme_after_rcu);
</span><span class='line'>
</span><span class='line'>/* Wait for it */
</span><span class='line'>wait_for_completion(&amp;rcu.completion);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>我们可以看到,它初始化了一个本地变量,它的类型为struct rcu_synchronize.调用call_rcu()之后.一直等待条件变量rcu.competion的满足.
</span><span class='line'>
</span><span class='line'>在这里看到了RCU的另一个核心API,它就是call_run().它的定义如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void call_rcu(struct rcu_head *head,
</span><span class='line'>            void (*func)(struct rcu_head *rcu))
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>它用来等待之前的读者操作完成之后,就会调用函数func.
</span><span class='line'>
</span><span class='line'>我们也可以看到,在synchronize_rcu()中,读者操作完了要调用的函数就是wakeme_after_rcu().
</span><span class='line'>
</span><span class='line'>另外,call_rcu()用在不可睡眠的条件中,如果中断环境,禁止抢占环境等.而synchronize_rcu()用在可睡眠的环境下.先跟踪看一下wakeme_after_rcu():
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void wakeme_after_rcu(struct rcu_head  *head)
</span><span class='line'>{
</span><span class='line'>struct rcu_synchronize *rcu;
</span><span class='line'>
</span><span class='line'>rcu = container_of(head, struct rcu_synchronize, head);
</span><span class='line'>complete(&amp;rcu-&gt;completion);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>我们可以看到,该函数将条件变量置真,然后唤醒了在条件变量上等待的进程.
</span><span class='line'>
</span><span class='line'>看下call_rcu():
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void call_rcu(struct rcu_head *head,
</span><span class='line'>            void (*func)(struct rcu_head *rcu))
</span><span class='line'>{
</span><span class='line'>unsigned long flags;
</span><span class='line'>struct rcu_data *rdp;
</span><span class='line'>
</span><span class='line'>head-&gt;func = func;
</span><span class='line'>head-&gt;next = NULL;
</span><span class='line'>local_irq_save(flags);
</span><span class='line'>rdp = &amp;__get_cpu_var(rcu_data);
</span><span class='line'>*rdp-&gt;nxttail = head;
</span><span class='line'>rdp-&gt;nxttail = &amp;head-&gt;next;
</span><span class='line'>if (unlikely(++rdp-&gt;qlen &gt; qhimark)) {
</span><span class='line'>    rdp-&gt;blimit = INT_MAX;
</span><span class='line'>    force_quiescent_state(rdp, &amp;rcu_ctrlblk);
</span><span class='line'>}
</span><span class='line'>local_irq_restore(flags);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>该函数也很简单,就是将head加在了per_cpu变量rcu_data的tail链表上.
</span><span class='line'>
</span><span class='line'>Rcu_data定义如下:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEFINE_PER_CPU(struct rcu_data, rcu_data) = { 0L };</span></code></pre></td></tr></table></div></figure>
由此,我们可以得知,每一个CPU都有一个rcu_data.每个调用call_rcu()/synchronize_rcu()进程所代表的head都会挂到rcu_data的tail链表上.</p>

<p>那究竟怎么去判断当前的写者已经操作完了呢?我们在之前看到,不是读者在调用rcu_read_lock()的时候要禁止抢占么?因此,我们只需要判断如有的CPU都进过了一次上下文切换,就说明所有读者已经退出了.</p>

<blockquote><blockquote><p><a href="http://www.ibm.com/developerworks/cn/linux/l-rcu/">http://www.ibm.com/developerworks/cn/linux/l-rcu/</a>  中有关这个过程的描述:</p>

<p>“等待适当时机的这一时期称为grace period，而CPU发生了上下文切换称为经历一个quiescent state，grace period就是所有CPU都经历一次quiescent state所需要的等待的时间。垃圾收集器就是在grace period之后调用写者注册的回调函数来完成真正的数据修改或数据释放操作的”</p></blockquote></blockquote>

<p>要彻底弄清楚这个问题,我们得从RCU的初始化说起.</p>

<h4>四:从RCU的初始化说起</h4>

<p>RCU的初始化位于start_kernel()àrcu_init().代码如下:</p>

<pre><code>    void __init rcu_init(void)
    {
        __rcu_init();
    }

    void __init __rcu_init(void)
    {
        rcu_cpu_notify(&amp;rcu_nb, CPU_UP_PREPARE,
                (void *)(long)smp_processor_id());
        /* Register notifier for non-boot CPUs */
        register_cpu_notifier(&amp;rcu_nb);
    }
</code></pre>

<p>Reqister_cpu_notifier()是关于通知链表的操作,可以忽略不看.</p>

<p>跟进rcu_cpu_notify():</p>

<pre><code>    static int __cpuinit rcu_cpu_notify(struct notifier_block *self,
                unsigned long action, void *hcpu)
    {
        long cpu = (long)hcpu;

        switch (action) {
        case CPU_UP_PREPARE:
        case CPU_UP_PREPARE_FROZEN:
            rcu_online_cpu(cpu);
            break;
        case CPU_DEAD:
        case CPU_DEAD_FROZEN:
            rcu_offline_cpu(cpu);
            break;
        default:
            break;
        }
        return NOTIFY_OK;
    }
</code></pre>

<p>注意到,在__rcu_init()中是以CPU_UP_PREPARE为参数调用此函数,对应流程转入rcu_online_cpu中:</p>

<pre><code>    static void __cpuinit rcu_online_cpu(int cpu)
    {
        struct rcu_data *rdp = &amp;per_cpu(rcu_data, cpu);
        struct rcu_data *bh_rdp = &amp;per_cpu(rcu_bh_data, cpu);

        rcu_init_percpu_data(cpu, &amp;rcu_ctrlblk, rdp);
        rcu_init_percpu_data(cpu, &amp;rcu_bh_ctrlblk, bh_rdp);
        open_softirq(RCU_SOFTIRQ, rcu_process_callbacks, NULL);
    }
</code></pre>

<p>我们从这里又看到了另一个per_cpu变量,rcu_bh_data.有关bh的部份之后再来分析.在这里略过这些部份.</p>

<p>Rcu_init_percpu_data()如下:</p>

<pre><code>    static void rcu_init_percpu_data(int cpu, struct rcu_ctrlblk *rcp,
                            struct rcu_data *rdp)
    {
        memset(rdp, 0, sizeof(*rdp));
        rdp-&gt;curtail = &amp;rdp-&gt;curlist;
        rdp-&gt;nxttail = &amp;rdp-&gt;nxtlist;
        rdp-&gt;donetail = &amp;rdp-&gt;donelist;
        rdp-&gt;quiescbatch = rcp-&gt;completed;
        rdp-&gt;qs_pending = 0;
        rdp-&gt;cpu = cpu;
        rdp-&gt;blimit = blimit;
    }
</code></pre>

<p>调用这个函数的第二个参数是一个全局变量rcu_ctlblk.定义如下:</p>

<pre><code>    static struct rcu_ctrlblk rcu_ctrlblk = {
        .cur = -300,
        .completed = -300,
        .lock = __SPIN_LOCK_UNLOCKED(&amp;rcu_ctrlblk.lock),
        .cpumask = CPU_MASK_NONE,
    };
    static struct rcu_ctrlblk rcu_bh_ctrlblk = {
        .cur = -300,
        .completed = -300,
        .lock = __SPIN_LOCK_UNLOCKED(&amp;rcu_bh_ctrlblk.lock),
        .cpumask = CPU_MASK_NONE,
    };
</code></pre>

<p>在rcu_init_percpu_data中,初始化了三个链表,分别是taillist,curlist和donelist.另外, 将rdp->quiescbatch 赋值为 rcp->completed.这个是一个很重要的操作.</p>

<p>Rdp-> quiescbatch表示rcu_data已经完成的grace period序号(在代码中也被称为了batch),rcp->completed表示全部变量rcu_ctrlblk计数已经完成的grace period序号.将rdp->quiescbatch = rcp->completed;,表示不需要等待grace period.</p>

<p>回到rcu_online_cpu()中:
<code>
    open_softirq(RCU_SOFTIRQ, rcu_process_callbacks, NULL);
</code></p>

<p>初始化了RCU_SOFTIRQ类型的软中断.但这个软中断什么时候被打开,还需要之后来分析.</p>

<p>之后,每个CPU的初始化都会经过start_kernel()->rcu_init().相应的,也为每个CPU初始化了RCU的相关结构.</p>

<h4>五:等待RCU读者操作完成</h4>

<p>之前,我们看完了RCU的初始化,现在可以来看一下RCU如何来判断当前的RCU读者已经退出了.</p>

<p>在每一次进程切换的时候,都会调用rcu_qsctr_inc().如下代码片段如示:</p>

<pre><code>    asmlinkage void __sched schedule(void)
    {
        ．．．．．．
        ．．．．．．
        rcu_qsctr_inc(cpu);
        ......
    }
</code></pre>

<p>Rcu_qsctr_inc()代码如下:</p>

<pre><code>    static inline void rcu_qsctr_inc(int cpu)
    {
        struct rcu_data *rdp = &amp;per_cpu(rcu_data, cpu);
        rdp-&gt;passed_quiesc = 1;
    }
</code></pre>

<p>该函数将对应CPU上的rcu_data的passed_quiesc成员设为了1.</p>

<p>或许你已经发现了,这个过程就标识该CPU经过了一次quiescent state.没错:-)</p>

<p>另外,在时钟中断中,会进行以下操作:
```
    void update_process_times(int user_tick)
    {
        ．．．．．．
        ．．．．．．</p>

<pre><code>    if (rcu_pending(cpu))
        rcu_check_callbacks(cpu, user_tick);
    ．．．．．．
    ．．．．．．
}
</code></pre>

<pre><code>在每一次时钟中断,都会检查是否有需要更新的RCU需要处理,如果有,就会为其调用rcu_check_callbacks().

Rcu_pending()的代码如下:
</code></pre>

<pre><code>int rcu_pending(int cpu)
{
    return __rcu_pending(&amp;rcu_ctrlblk, &amp;per_cpu(rcu_data, cpu)) ||
        __rcu_pending(&amp;rcu_bh_ctrlblk, &amp;per_cpu(rcu_bh_data, cpu));
}
</code></pre>

<pre><code>
同上面一样,忽略bh的部份.
</code></pre>

<pre><code>static int __rcu_pending(struct rcu_ctrlblk *rcp, struct rcu_data *rdp)
{
    /* This cpu has pending rcu entries and the grace period
     * for them has completed.
     */
    if (rdp-&gt;curlist &amp;&amp; !rcu_batch_before(rcp-&gt;completed, rdp-&gt;batch))
        return 1;

    /* This cpu has no pending entries, but there are new entries */
    if (!rdp-&gt;curlist &amp;&amp; rdp-&gt;nxtlist)
        return 1;

    /* This cpu has finished callbacks to invoke */
    if (rdp-&gt;donelist)
        return 1;

    /* The rcu core waits for a quiescent state from the cpu */
    if (rdp-&gt;quiescbatch != rcp-&gt;cur || rdp-&gt;qs_pending)
        return 1;

    /* nothing to do */
    return 0;
}
</code></pre>

<pre><code>
上面有四种情况会返回1,分别对应:

1:该CPU上有等待处理的回调函数,且已经经过了一个batch(grace period).rdp-&gt;datch表示rdp在等待的batch序号

2:上一个等待已经处理完了,又有了新注册的回调函数.

3:等待已经完成,但尚末调用该次等待的回调函数.

4:在等待quiescent state.

关于rcp和rdp结构中成员的含义,我们等用到的时候再来分析.

如果rcu_pending返回1,就会进入到rcu_check_callbacks().代码如下:
</code></pre>

<pre><code>void rcu_check_callbacks(int cpu, int user)
{
    if (user ||
        (idle_cpu(cpu) &amp;&amp; !in_softirq() &amp;&amp;
                hardirq_count() 
        rcu_qsctr_inc(cpu);
        rcu_bh_qsctr_inc(cpu);
    } else if (!in_softirq())
        rcu_bh_qsctr_inc(cpu);
    raise_rcu_softirq();
}
</code></pre>

<pre><code>如果已经CPU中运行的进程是用户空间进程或者是CPU空闲且不处于中断环境,那么,它也已经进过了一次切换.注意,RCU只能在内核空间使用.

最后调用raise_rcu_softirq()打开了软中断处理.相应的,也就调用RCU的软中断处理函数.结合上面分析的初始化流程,软中断的处理函数为rcu_process_callbacks().

代码如下:
</code></pre>

<pre><code>static void rcu_process_callbacks(struct softirq_action *unused)
{
    __rcu_process_callbacks(&amp;rcu_ctrlblk, &amp;__get_cpu_var(rcu_data));
    __rcu_process_callbacks(&amp;rcu_bh_ctrlblk, &amp;__get_cpu_var(rcu_bh_data));
}
</code></pre>

<pre><code>在阅读__rcu_process_callbacks()之前,先来了解一下rdp中几个链表的含义:

每次新注册的回调函数,都会链入到rdp-&gt;taillist.

当前等待grace period完成的函数都会链入到rdp-&gt;curlist上.

到等待的grace period已经到来,就会将curlist上的链表移到donelist上.

当一个grace period过了之后,就会将taillist上的数据移到rdp-&gt;curlist上.之后加册的回调函数又会将其加到rdp-&gt;taillist上.

__rcu_process_callbacks()代码分段分析如下:
</code></pre>

<pre><code>static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp,
                    struct rcu_data *rdp)
{
    if (rdp-&gt;curlist &amp;&amp; !rcu_batch_before(rcp-&gt;completed, rdp-&gt;batch)) {
        *rdp-&gt;donetail = rdp-&gt;curlist;
        rdp-&gt;donetail = rdp-&gt;curtail;
        rdp-&gt;curlist = NULL;
        rdp-&gt;curtail = &amp;rdp-&gt;curlist;
    }

    如果有需要处理的回调函数,且已经经过了一次grace period.就将curlist上的数据移到donetlist上.
其中,crp-&gt;completed表示已经完成的grace period.rdp-&gt;batch表示该CPU正在等待的grace period序号.

    if (rdp-&gt;nxtlist &amp;&amp; !rdp-&gt;curlist) {
        local_irq_disable();
        rdp-&gt;curlist = rdp-&gt;nxtlist;
        rdp-&gt;curtail = rdp-&gt;nxttail;
        rdp-&gt;nxtlist = NULL;
        rdp-&gt;nxttail = &amp;rdp-&gt;nxtlist;
        local_irq_enable();

        /*
         * start the next batch of callbacks
         */

        /* determine batch number */
        rdp-&gt;batch = rcp-&gt;cur + 1;
        /* see the comment and corresponding wmb() in
         * the rcu_start_batch()
         */
        smp_rmb();

        if (!rcp-&gt;next_pending) {
            /* and start it/schedule start if it's a new batch */
            spin_lock(&amp;rcp-&gt;lock);
            rcp-&gt;next_pending = 1;
            rcu_start_batch(rcp);
            spin_unlock(&amp;rcp-&gt;lock);
        }
    }
如果上一个等待的回调函数处理完了,而且又有了新注册的回调函数.就将taillist上的数据移动到curlist上.并开启新的grace period等待.
注意里面几个变量的赋值: 
rdp-&gt;batch = rcp-&gt;cur + 1表示该CPU等待的grace period置为当前已发生grace period序号的下一个.
每次启动一个新的grace period等待之后,就会将rcp-&gt;next_pending.在启动的过程中,也就是rcu_start_batch()的过程中,会将rcp-&gt;next_pending置为1.设置这个变量主要是防止多个写者竞争的情况

    //更新相关信息
    rcu_check_quiescent_state(rcp, rdp);
    //处理等待完成的回调函数
    if (rdp-&gt;donelist)
        rcu_do_batch(rdp);
}
</code></pre>

<pre><code>
接着,更新相关的信息,例如,判断当前CPU是否进行了quiescent state.或者grace period是否已经完成.

最后再处理挂在rdp-&gt;donelist上的链表.

这里面有几个子函数值得好好分析,分别分析如下:

第一个要分析的是rcu_start_batch():
</code></pre>

<pre><code>static void rcu_start_batch(struct rcu_ctrlblk *rcp)
{
    if (rcp-&gt;next_pending &amp;&amp;
            rcp-&gt;completed == rcp-&gt;cur) {
        rcp-&gt;next_pending = 0;
        smp_wmb();
        rcp-&gt;cur++;
        smp_mb();
        cpus_andnot(rcp-&gt;cpumask, cpu_online_map, nohz_cpu_mask);

        rcp-&gt;signaled = 0;
    }
}
</code></pre>

<pre><code>
这个函数的代码虽然很简单,但隐藏了很多玄机.

每次启动一个新的grace period等待的时候就将rcp-&gt;cur加1,将rcp-&gt;cpumask中,将存在的CPU的位置1.

其中,if判断必须要满足二个条件:

第一:rcp-&gt;next_pending必须为1.我们把这个函数放到__rcu_process_callbacks()这个大环境中看一下:
</code></pre>

<pre><code>static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp,
                    struct rcu_data *rdp)
{
    ．．．．．．
    ．．．．．．
    if (rdp-&gt;nxtlist &amp;&amp; !rdp-&gt;curlist) {
        ．．．．．．
        if (!rcp-&gt;next_pending) {
            /* and start it/schedule start if it's a new batch */
            spin_lock(&amp;rcp-&gt;lock);
            rcp-&gt;next_pending = 1;
            rcu_start_batch(rcp);
            spin_unlock(&amp;rcp-&gt;lock);
        }
    }
}
</code></pre>

<pre><code>
首先，rcp-&gt;next_pending为0才会调用rcu_start_batch()启动一个新的进程．然后，将rcp-&gt;next_pending置为1,再调用rcu_start_batch().在这里要注意中间的自旋锁.然后在rcu_start_batch()中,再次判断rcp-&gt;next_pending为1后,再进行后续操作,并将rcp-&gt;next_pending置为0.

为什么这里需要这样的判断呢? 如果其它CPU正在开启一个新的grace period等待,那就用不着再次开启一个新的等待了,直接返回即可.

第二: rcu_start_batch()中if要满足的第二个条件为rcp-&gt;completed == rcp-&gt;cur.也就是说前面的grace period全部都完成了.每次开启新等待的时候都会将rcp-&gt;cur加1.每一个等待完成之后,都会将rc-&gt; completed等于rcp-&gt;cur.

第二个要分析的函数是rcu_check_quiescent_state().代码如下:
</code></pre>

<pre><code>static void rcu_check_quiescent_state(struct rcu_ctrlblk *rcp,
                    struct rcu_data *rdp)
{
    if (rdp-&gt;quiescbatch != rcp-&gt;cur) {
        /* start new grace period: */
        rdp-&gt;qs_pending = 1;
        rdp-&gt;passed_quiesc = 0;
        rdp-&gt;quiescbatch = rcp-&gt;cur;
        return;
    }

    /* Grace period already completed for this cpu?
     * qs_pending is checked instead of the actual bitmap to avoid
     * cacheline trashing.
     */
    if (!rdp-&gt;qs_pending)
        return;

    /*
     * Was there a quiescent state since the beginning of the grace
     * period? If no, then exit and wait for the next call.
     */
    if (!rdp-&gt;passed_quiesc)
        return;
    rdp-&gt;qs_pending = 0;

    spin_lock(&amp;rcp-&gt;lock);
    /*
     * rdp-&gt;quiescbatch/rcp-&gt;cur and the cpu bitmap can come out of sync
     * during cpu startup. Ignore the quiescent state.
     */
    if (likely(rdp-&gt;quiescbatch == rcp-&gt;cur))
        cpu_quiet(rdp-&gt;cpu, rcp);

    spin_unlock(&amp;rcp-&gt;lock);
}
</code></pre>

<pre><code>
首先,如果rdp-&gt;quiescbatch != rcp-&gt;cur.则说明又开启了一个新的等待,因此需要重新处理这个等待,首先将rdp-&gt;quiescbatch 更新为rcp-&gt;cur.然后,使rdp-&gt;qs_pending为1.表示有等待需要处理. passed_quiesc也被清成了0.

然后,再判断rdp-&gt;passed_quiesc是否为真,记得我们在之前分析过,在每次进程切换或者进程切换的时候,都会调用rcu_qsctr_inc().该函数会将rdp-&gt;passed_quiesc置为1.
因此,在这里判断这个值是为了检测该CPU上是否发生了上下文切换.

之后,就是一段被rcp-&gt;lock保护的一段区域.如果还是等待没有发生改变,就会调用cpu_quiet(rdp-&gt;cpu, rcp)将该CPU位清零.如果是一个新的等待了,就用不着清了,因为需要重新判断该CPU上是否发生了上下文切换.

cpu_quiet()函数代码如下:
</code></pre>

<pre><code>static void cpu_quiet(int cpu, struct rcu_ctrlblk *rcp)
{
    cpu_clear(cpu, rcp-&gt;cpumask);
    if (cpus_empty(rcp-&gt;cpumask)) {
        /* batch completed ! */
        rcp-&gt;completed = rcp-&gt;cur;
        rcu_start_batch(rcp);
    }
}
</code></pre>

<pre><code>
它清除当前CPU对应的位,如果CPMMASK为空,对应所有的CPU都发生了进程切换,就会将rcp-&gt;completed = rcp-&gt;cur.并且根据需要是否开始一个grace period等待.

最后一个要分析的函数是rcu_do_batch().它进行的是清尾的工作.如果等待完成了,那就必须要处理donelist链表上挂载的数据了.代码如下:
</code></pre>

<pre><code>static void rcu_do_batch(struct rcu_data *rdp)
{
    struct rcu_head *next, *list;
    int count = 0;

    list = rdp-&gt;donelist;
    while (list) {
        next = list-&gt;next;
        prefetch(next);
        list-&gt;func(list);
        list = next;
        if (++count &gt;= rdp-&gt;blimit)
            break;
    }
    rdp-&gt;donelist = list;

    local_irq_disable();
    rdp-&gt;qlen -= count;
    local_irq_enable();
    if (rdp-&gt;blimit == INT_MAX &amp;&amp; rdp-&gt;qlen 
        rdp-&gt;blimit = blimit;

    if (!rdp-&gt;donelist)
        rdp-&gt;donetail = &amp;rdp-&gt;donelist;
    else
        raise_rcu_softirq();
}
</code></pre>

<pre><code>
它遍历处理挂在链表上的回调函数.在这里,注意每次调用的回调函数有最大值限制.这样做主要是防止一次调用过多的回调函数而产生不必要系统负载.如果donelist中还有没处理完的数据,打开RCU软中断,在下次软中断到来的时候接着处理.

#### 五:几种RCU情况分析

1:如果CPU 1上有进程调用rcu_read_lock进入临界区,之后退出来,发生了进程切换,新进程又通过rcu_read&amp;shy;_lock进入临界区.由于RCU软中断中只判断一次上下文切换,因此,在调用回调函数的时候,仍然有进程处于RCU的读临界区,这样会不会有问题呢?

这样是不会有问题的.还是上面的例子:
</code></pre>

<pre><code>    spin_lock(&amp;foo_mutex);
    old_fp = gbl_foo;
    *new_fp = *old_fp;
    new_fp-&gt;a = new_a;
    rcu_assign_pointer(gbl_foo, new_fp);
    spin_unlock(&amp;foo_mutex);
    synchronize_rcu();
    kfree(old_fp);
</code></pre>

<pre><code>使用synchronize_rcu ()只是为了等待持有old_fd(也就是调用rcu_assign_pointer ()更新之前的gbl_foo)的进程退出.而不需要等待所有的读者全部退出.这是因为,在rcu_assign_pointer ()之后的读取取得的保护指针,已经是更新好的新值了.

2:上面分析的似乎是针对有挂载链表的CPU而言的,那对于只调用rcu_read_lock()的CPU,它们是怎么处理的呢?

首先,每次启动一次等待,肯定是会更新rcp-&gt;cur的.因此,在rcu_pending()的判断中,下面语句会被满足:
</code></pre>

<pre><code>if (rdp-&gt;quiescbatch != rcp-&gt;cur || rdp-&gt;qs_pending)
    return 1;
</code></pre>

<pre><code>
因此会进入到RCU的软中断.在软中断处理中:

rcu_process_callbacks() -&gt; __rcu_process_callbacks() -&gt; rcu_check_quiescent_state()

中,如果该CPU上有进程切换,就会各新rcp中的CPU 掩码数组.

3:如果一个CPU连续调用synchronize_rcu()或者call_rcu()它们会有什么影响呢?

如果当前有请求在等待,就会新请提交的回调函数挂到taillist上,一直到前一个等待完成,再将taillist的数据移到curlist,并开启一个新的等待,因此,也就是说,在前一个等待期间提交的请求,都会放到一起处理.也就是说,他们会共同等待所有CPU切换完成.

举例说明如下:  
假设grace period时间是12ms.在12ms内,先后有A,B,C进程提交请求.  
那系统在等待处理完后,交A,B,C移到curlist中,开始一个新的等待.  

#### 六:有关rcu_read_lock_bh()/rcu_read_unlock_bh()/call_rcu_bh().

在上面的代码分析的时候,经常看到带有bh的RCU代码.现在来看一下这些带bh的RCU是什么样的.
</code></pre>

<pre><code>#define rcu_read_lock_bh() __rcu_read_lock_bh()
#define rcu_read_unlock_bh() __rcu_read_unlock_bh()

#define __rcu_read_lock_bh() \
    do { \
        local_bh_disable(); \
        __acquire(RCU_BH); \
        rcu_read_acquire(); \
    } while (0)
#define __rcu_read_unlock_bh() \
    do { \
        rcu_read_release(); \
        __release(RCU_BH); \
        local_bh_enable(); \
    } while (0)
</code></pre>

<pre><code>
根据上面的分析:bh RCU跟普通的RCU相比不同的是,普通RCU是禁止内核抢占,而bh RCU是禁止下半部.

其实,带bh的RCU一般在软中断使用,不过计算quiescent state并不是发生一次上下文切换.而是发生一次softirq.我们在后面的分析中可得到印证.

Call_rcu_bh()代码如下:
</code></pre>

<pre><code>void call_rcu_bh(struct rcu_head *head,
                void (*func)(struct rcu_head *rcu))
{
    unsigned long flags;
    struct rcu_data *rdp;

    head-&gt;func = func;
    head-&gt;next = NULL;
    local_irq_save(flags);
    rdp = &amp;__get_cpu_var(rcu_bh_data);
    *rdp-&gt;nxttail = head;
    rdp-&gt;nxttail = &amp;head-&gt;next;

    if (unlikely(++rdp-&gt;qlen &gt; qhimark)) {
        rdp-&gt;blimit = INT_MAX;
        force_quiescent_state(rdp, &amp;rcu_bh_ctrlblk);
    }

    local_irq_restore(flags);
}
</code></pre>

<pre><code>
它跟call_rcu()不相同的是,rcu是取per_cpu变量rcu__data和全局变量rcu_ctrlblk.而bh RCU是取rcu_bh_data,rcu_bh_ctrlblk.他们的类型都是一样的,这样做只是为了区分BH和普通RCU的等待.

对于rcu_bh_qsctr_inc
</code></pre>

<pre><code>static inline void rcu_bh_qsctr_inc(int cpu)
{
    struct rcu_data *rdp = &amp;per_cpu(rcu_bh_data, cpu);
    rdp-&gt;passed_quiesc = 1;
}
</code></pre>

<pre><code>
它跟rcu_qsctr_inc()机同,也是更改对应成员.

所不同的是,调用rcu_bh_qsctr_inc()的地方发生了变化.
</code></pre>

<pre><code>asmlinkage void __do_softirq(void)
{
    ．．．．．．
        do {
        if (pending &amp; 1) {
            h-&gt;action(h);
            rcu_bh_qsctr_inc(cpu);
        }
        h++;
        pending &gt;&gt;= 1;
    } while (pending);
    ．．．．．．
}
</code></pre>

<p>```</p>

<p>也就是说，在发生软中断的时候，才会认为是经过了一次quiescent state.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAProxy 研究笔记 -- epoll 事件的处理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src6/"/>
    <updated>2015-07-29T16:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src6</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-10167808-id-3825388.html">http://blog.chinaunix.net/uid-10167808-id-3825388.html</a></p>

<p> 本文介绍 HAProxy 中 epoll 事件的处理机制，版本为 1.5-dev17。</p>

<pre><code>    1. 背景知识
        1.1. fd 更新列表
        1.2. fdtab 数据结构
        1.3. fd event 的设置
    2. _do_poll() 代码分析
        2.1. 检测 fd 更新列表
        2.2. 获取活动的 fd
        2.3. 处理活动的 fd
</code></pre>

<p>HAProxy 支持多种异步机制，有 select，poll，epoll，kqueue 等。本文介绍 epoll 的 相关实现，epoll 的代码在源文件 ev_epoll.c 中。epoll 的关键处理逻辑集中在函数 _do_poll() 中，下面会详细的分析该函数。</p>

<h4>1. 背景知识</h4>

<p>在分析 _do_poll() 实现之前，有一些关联的设计需要简单介绍一下，以便于理解该函数中 的一些代码。</p>

<h5>1.1. fd 更新列表</h5>

<p>见 fd.c 中的全局变量：
<code>
    /* FD status is defined by the poller's status and by the speculative I/O list */
    int fd_nbupdt = 0;             // number of updates in the list
    unsigned int *fd_updt = NULL;  // FD updates list
</code></p>

<p>这两个全局变量用来记录状态需要更新的 fd 的数量及具体的 fd。_do_poll() 中会根据 这些信息修改对应 fd 的 epoll 设置。</p>

<h5>1.2. fdtab 数据结构</h5>

<p>struct fdtab 数据结构在 include/types/fd.h 中定义，内容如下：</p>

<pre><code>    /* info about one given fd */
    struct fdtab {
        int (*iocb)(int fd);                 /* I/O handler, returns FD_WAIT_* */
        void *owner;                         /* the connection or listener associated with this fd, NULL if closed */
        unsigned int  spec_p;                /* speculative polling: position in spec list+1. 0=not in list. */
        unsigned char spec_e;                /* speculative polling: read and write events status. 4 bits */
        unsigned char ev;                    /* event seen in return of poll() : FD_POLL_* */
        unsigned char new:1;                 /* 1 if this fd has just been created */
        unsigned char updated:1;             /* 1 if this fd is already in the update list */
    };
</code></pre>

<p>该结构的成员基本上都有注释，除了前两个成员，其余的都是和 fd IO 处理相关的。后面 分析代码的时候再具体的解释。</p>

<p>src/fd.c 中还有一个全局变量：</p>

<pre><code>    struct fdtab *fdtab = NULL;     /* array of all the file descriptors */
</code></pre>

<p>fdtab[] 记录了 HAProxy 所有 fd 的信息，数组的每个成员都是一个 struct fdtab， 而且成员的 index 正是 fd 的值，这样相当于 hash，可以高效的定位到某个 fd 对应的 信息。</p>

<h5>1.3. fd event 的设置</h5>

<p>include/proto/fd.h 中定义了一些设置 fd event 的函数：</p>

<pre><code>    /* event manipulation primitives for use by I/O callbacks */
    static inline void fd_want_recv(int fd)
    static inline void fd_stop_recv(int fd)
    static inline void fd_want_send(int fd)
    static inline void fd_stop_send(int fd)
    static inline void fd_stop_both(int fd)
</code></pre>

<p>这些函数见名知义，就是用来设置 fd 启动或停止接收以及发送的。这些函数底层调用的 是一系列 fd_ev_XXX() 的函数真正的设置 fd。这里简单介绍一下 fd_ev_set() 的代码：</p>

<pre><code>    static inline void fd_ev_set(int fd, int dir)
    {
        unsigned int i = ((unsigned int)fdtab[fd].spec_e) &amp; (FD_EV_STATUS &lt;&lt; dir);
        ...
        if (i &amp; (FD_EV_ACTIVE &lt;&lt; dir))
            return; /* already in desired state */
        fdtab[fd].spec_e |= (FD_EV_ACTIVE &lt;&lt; dir);
        updt_fd(fd); /* need an update entry to change the state */
    }
</code></pre>

<p>该函数会判断一下 fd 的对应 event 是否已经设置了。没有设置的话，才重新设置。设置 的结果记录在 struct fdtab 结构的 spec_e 成员上，而且只是低 4 位上。然后调用 updt_fd() 将该 fd 放到 update list 中：</p>

<pre><code>    static inline void updt_fd(const int fd)
    {
        if (fdtab[fd].updated)
            /* already scheduled for update */
            return;
        fdtab[fd].updated = 1;
        fd_updt[fd_nbupdt++] = fd;
    }
</code></pre>

<p>从上面代码可以看出， struct fdtab 中的 updated 成员用来标记当前 fd 是否已经被放 到 update list 中了。没有的话，则更新设置 updated 成员，并且记录到 fd_updt[] 中， 并且增加需要跟新的 fd 的计数 fd_nbupdt。</p>

<p>至此，用于分析 _do_poll() 的一些背景知识介绍完毕。</p>

<h4>2. _do_poll() 代码分析</h4>

<p>这里将会重点的分析 _do_poll() 的实现。该函数可以粗略分为三部分：</p>

<pre><code>    检查 fd 更新列表，获取各个 fd event 的变化情况，并作 epoll 的设置
    计算 epoll_wait 的 delay 时间，并调用 epoll_wait，获取活动的 fd
    逐一处理所有有 IO 事件的 fd
</code></pre>

<p>以下将按顺序介绍这三部分的代码。</p>

<h5>2.1. 检测 fd 更新列表</h5>

<p>代码如下，后面会按行分析：</p>

<pre><code>     43 /*
     44  * speculative epoll() poller
     45  */
     46 REGPRM2 static void _do_poll(struct poller *p, int exp)
     47 {
     ..     ..
     53 
     54     /* first, scan the update list to find changes */
     55     for (updt_idx = 0; updt_idx &lt; fd_nbupdt; updt_idx++) {
     56         fd = fd_updt[updt_idx];
     57         en = fdtab[fd].spec_e &amp; 15;  /* new events */
     58         eo = fdtab[fd].spec_e &gt;&gt; 4;  /* previous events */
     59 
     60         if (fdtab[fd].owner &amp;&amp; (eo ^ en)) {
     61             if ((eo ^ en) &amp; FD_EV_POLLED_RW) {
     62                 /* poll status changed */
     63                 if ((en &amp; FD_EV_POLLED_RW) == 0) {
     64                     /* fd removed from poll list */
     65                     opcode = EPOLL_CTL_DEL;
     66                 }
     67                 else if ((eo &amp; FD_EV_POLLED_RW) == 0) {
     68                     /* new fd in the poll list */
     69                     opcode = EPOLL_CTL_ADD;
     70                 }
     71                 else {
     72                     /* fd status changed */
     73                     opcode = EPOLL_CTL_MOD;     
     74                 }
     75 
     76                 /* construct the epoll events based on new state */
     77                 ev.events = 0;
     78                 if (en &amp; FD_EV_POLLED_R)
     79                     ev.events |= EPOLLIN;
     80 
     81                 if (en &amp; FD_EV_POLLED_W)
     82                     ev.events |= EPOLLOUT;
     83 
     84                 ev.data.fd = fd;
     85                 epoll_ctl(epoll_fd, opcode, fd, &amp;ev);
     86             }
     87 
     88             fdtab[fd].spec_e = (en &lt;&lt; 4) + en;  /* save new events */
     89 
     90             if (!(en &amp; FD_EV_ACTIVE_RW)) {
     91                 /* This fd doesn't use any active entry anymore, we can
     92                  * kill its entry.
     93                  */
     94                 release_spec_entry(fd);
     95             }
     96             else if ((en &amp; ~eo) &amp; FD_EV_ACTIVE_RW) {
     97                 /* we need a new spec entry now */
     98                 alloc_spec_entry(fd);
     99             }
    100                                                             
    101         }
    102         fdtab[fd].updated = 0;
    103         fdtab[fd].new = 0;
    104     }
    105     fd_nbupdt = 0;
</code></pre>

<p>haproxy 就是一个大的循环。每一轮循环，都顺序执行几个不同的功能。其中调用当前 poller 的 poll 方法便是其中一个环节。</p>

<p>55 - 56 行： 获取 fd 更新列表中的每一个 fd。 fd_updt[] 就是前面背景知识中介绍 的。haproxy 运行的不同阶段，都有可能通过调用背景知识中介绍的一些 fd event 设置函数 来更改 fd 的状态，最终会更新 fd_updt[] 和 fd_nbupdt。这里集中处理一下所有需要更新 的 fd。</p>

<p>57 - 58 行： 获取当前 fd 的最新事件，以及保存的上一次的事件。前面提到了，fd 的事 设置仅用 4 个 bit 就可以了。sturct fdtab 的 spec_e 成员是 unsigned char, 8 bit， 低 4 bit 保存 fd 当前最新的事件，高 4 bit 保存上一次的事件。这个做法就是为了判断 fd 的哪些事件上前面的处理中发生了变化，以便于更新。至于 fd 前一次的事件是什么时 后保存的，看后面的分析就知道了。</p>

<p>60 行： 主要判断 fd 记录的事件是否发生了变化。如果没有变化，就直接到 102-103 行 的处理了。这里有个小疑问，还没来及深入分析，就是哪些情况会使 fd 处于更新列表中， 但是 fd 上的事件有没有任何变化。</p>

<p>63 - 74 行：检测 fd 的 epoll operation 是否需要更改，比如ADD/DEL/MOD 等操作。</p>

<p>77 - 85 行：检测 fd 的 epoll events 的设置，并调用 epoll_ctl 设置 op 和 event</p>

<p>88 行：这里就是记录下 fd events 设置的最新状态。高低 4 位记录的结果相同。而在 程序运行过程中，仅修改低 4 位，这样和高 4 位一比较，就知道发生了哪些变化。</p>

<p>90 - 99 行：这里主要根据 fd 的新旧状态，更新 speculative I/O list。这个地方在 haproxy 的大循环中有独立的处理流程，这里不作分析。</p>

<p>102 - 103 行：清除 fd 的 new 和 updated 状态。new 状态通常是在新建一个 fd 时调 用 fd_insert 设置的，这里已经完成了 fd 状态的更新，因此两个成员均清零。</p>

<p>105 行： 整个 update list 都处理完了，fd_nbupdt 清零。haproxy 的其他处理流程会 继续更新 update list。下一次调用 _do_poll() 的时候继续处理。当然，这么说也说是 不全面的，因为接下来的处理流程也会有可能处理 fd 的 update list。但主要的处理还 是这里分析的代码块。</p>

<p>至此，fd 更新列表中的所有 fd 都处理完毕，该设置的也都设置了。下面就需要调用 epoll_wait 获得所有活动的 fd 了。
2.2. 获取活动的 fd</p>

<p>代码如下：</p>

<pre><code>    107     /* compute the epoll_wait() timeout */
    108 
    109     if (fd_nbspec || run_queue || signal_queue_len) {
    ...         ...
    115         wait_time = 0;
    116     }
    117     else {
    118         if (!exp)
    119             wait_time = MAX_DELAY_MS;
    120         else if (tick_is_expired(exp, now_ms))
    121             wait_time = 0;
    122         else {
    123             wait_time = TICKS_TO_MS(tick_remain(now_ms, exp)) + 1;
    124             if (wait_time &gt; MAX_DELAY_MS)
    125                 wait_time = MAX_DELAY_MS;
    126         }
    127     }
    128 
    129     /* now let's wait for polled events */
    130 
    131     fd = MIN(maxfd, global.tune.maxpollevents);
    132     gettimeofday(&amp;before_poll, NULL);
    133     status = epoll_wait(epoll_fd, epoll_events, fd, wait_time);
    134     tv_update_date(wait_time, status);
    135     measure_idle();
</code></pre>

<p>107 - 127 行：主要是用来计算调用 epoll_wait 时的 timeout 参数。如果 fd_nbspec 不为 0，或 run_queue 中有任务需要运行，或者信号处理 queue 中有需要处理的，都设置 timeout 为 0，目的是希望 epoll_wait 尽快返回，程序好及时处理其他的任务。</p>

<p>131 - 135 行： 计算当前最多可以处理的 event 数目。这个数目也是可配置的。然后调用 epoll_wait, 所有活动 fd 的信息都保存在 epoll_events[] 数组中。</p>

<p>这部分代码逻辑比较简单，接下来就是处理所有活动的 fd 了。
2.3. 处理活动的 fd</p>

<p>逐一处理活动的 fd。这段代码也可以划分为若干个小代码，分别介绍如下：</p>

<pre><code>    139     for (count = 0; count &lt; status; count++) {
    140         unsigned char n;
    141         unsigned char e = epoll_events[count].events;
    142         fd = epoll_events[count].data.fd;
    143 
    144         if (!fdtab[fd].owner)
    145             continue;
    146 
    147         /* it looks complicated but gcc can optimize it away when constants
    148          * have same values... In fact it depends on gcc :-(
    149          */
    150         fdtab[fd].ev &amp;= FD_POLL_STICKY;
    151         if (EPOLLIN == FD_POLL_IN &amp;&amp; EPOLLOUT == FD_POLL_OUT &amp;&amp;
    152             EPOLLPRI == FD_POLL_PRI &amp;&amp; EPOLLERR == FD_POLL_ERR &amp;&amp;
    153             EPOLLHUP == FD_POLL_HUP) {
    154             n = e &amp; (EPOLLIN|EPOLLOUT|EPOLLPRI|EPOLLERR|EPOLLHUP);
    155         }
    156         else {
    157             n = ((e &amp; EPOLLIN ) ? FD_POLL_IN  : 0) |
    158                 ((e &amp; EPOLLPRI) ? FD_POLL_PRI : 0) |
    159                 ((e &amp; EPOLLOUT) ? FD_POLL_OUT : 0) |
    160                 ((e &amp; EPOLLERR) ? FD_POLL_ERR : 0) |
    161                 ((e &amp; EPOLLHUP) ? FD_POLL_HUP : 0);
    162         }
    163 
    164         if (!n)
    165             continue;
    166 
    167         fdtab[fd].ev |= n;    
    168
</code></pre>

<p>139 - 142 行： 从 epoll_events[] 中取出一个活动 fd 及其对应的 event。</p>

<p>150 行： fdtab[fd].ev 仅保留 FD_POLL_STICKY 设置，即 FD_POLL_ERR | FD_POLL_HUP， 代表仅保留 fd 原先 events 设置中的错误以及 hang up 的标记位，不管 epoll_wait 中 是否设置了该 fd 的这两个 events。</p>

<p>151 - 162 行： 这段代码的功能主要就是根据 epoll_wait 返回的 fd 的 events 设置情 况，正确的设置 fdtab[fd].ev。之所以代码还要加上条件判断，是因为 haproxy 自己也 用了一套标记 fd 的 events 的宏定义 FD_POLL_XXX，而 epoll_wait 返回的则是系统中 的 EPOLLXXX。因此，这里就涉及到系统标准的 events 转换到 haproxy 自定义 events 的过程。其中，151-154 行代表 haproxy 自定义的关于 fd 的 events 和系统标准的 完全一致，157-161 行代表 haproxy 自定义的和系统标准的不一致，因此需要一个一个 标记位判断，然后转换成 haproxy 自定义的。</p>

<p>167 行： 将转换后的 events 记录到 fdtab[fd].ev。因此，haproxy 中对于 fd events 的记录，始终是采用 haproxy 自定义的。</p>

<pre><code>    169         if (fdtab[fd].iocb) {
    170             int new_updt, old_updt;
    171 
    172             /* Mark the events as speculative before processing
    173              * them so that if nothing can be done we don't need
    174              * to poll again.
    175              */
    176             if (fdtab[fd].ev &amp; FD_POLL_IN)
    177                 fd_ev_set(fd, DIR_RD);
    178 
    179             if (fdtab[fd].ev &amp; FD_POLL_OUT)
    180                 fd_ev_set(fd, DIR_WR);
    181 
    182             if (fdtab[fd].spec_p) {
    183                 /* This fd was already scheduled for being called as a speculative I/O */
    184                 continue;
    185             }
    186 
    187             /* Save number of updates to detect creation of new FDs. */
    188             old_updt = fd_nbupdt;
    189             fdtab[fd].iocb(fd);
</code></pre>

<p>169 行： 正常情况下， fdtab[fd] 的 iocb 方法指向 conn_fd_handler，该函数负责处 理 fd 上的 IO 事件。</p>

<p>176 - 180 行： 根据前面设置的 fd 的 events，通过调用 fd_ev_set() 更新 fdtab 结构 的 spec_e 成员。也就是说，在调用 fd_ev_clr() 清理对应 event 之前，就不需要再次设 置 fd 的 event。因为 haproxy 认为仍然需要处理 fd 的 IO。fdtab 的 ev 成员是从 epoll_wait 返回的 events 转换后的结果，而 spec_e 成员则是 haproxy 加入了一些对 fd IO 事件可能性判断的结果。</p>

<p>188 - 189 行： 保存一下当前的 fd update list 的数目，接着调用 fd 的 iocb 方法， 也就是 conn_fd_handler()。之所以要保存当前的 fd update list 数目，是因为 conn_fd_handler() 执行时，如果接受了新的连接，则会有新的 fd 生成，这时也会更新 fd_nbupdt。记录下旧值，就是为了方便知道在 conn_fd_handler 执行之后，有哪些 fd 是新生成的。</p>

<pre><code>    ...             ...
    200             for (new_updt = fd_nbupdt; new_updt &gt; old_updt; new_updt--) {
    201                 fd = fd_updt[new_updt - 1];
    202                 if (!fdtab[fd].new)
    203                     continue;
    204 
    205                 fdtab[fd].new = 0;
    206                 fdtab[fd].ev &amp;= FD_POLL_STICKY;
    207 
    208                 if ((fdtab[fd].spec_e &amp; FD_EV_STATUS_R) == FD_EV_ACTIVE_R)
    209                     fdtab[fd].ev |= FD_POLL_IN;
    210 
    211                 if ((fdtab[fd].spec_e &amp; FD_EV_STATUS_W) == FD_EV_ACTIVE_W)
    212                     fdtab[fd].ev |= FD_POLL_OUT;
    213 
    214                 if (fdtab[fd].ev &amp;&amp; fdtab[fd].iocb &amp;&amp; fdtab[fd].owner)
    215                     fdtab[fd].iocb(fd);
    216 
    217                 /* we can remove this update entry if it's the last one and is
    218                  * unused, otherwise we don't touch anything.
    219                  */
    220                 if (new_updt == fd_nbupdt &amp;&amp; fdtab[fd].spec_e == 0) {
    221                     fdtab[fd].updated = 0;
    222                     fd_nbupdt--;
    223                 }
    224             }
    225         }
    226     }
    227 
    228     /* the caller will take care of speculative events */
    229 }  
</code></pre>

<p>上面这段代码就是执行完毕当前活动 fd 的 iocb 之后，发现有若干个新的 fd 生成，通常 发生在接收新建连接的情况。这种情况，haproxy 认为有必要立即执行这些新的 fd 的 iocb 方法。因为通常一旦客户端新建连接的话，都会尽快发送数据的。这么做就不必等到 下次 epoll_wait 返回之后才处理新的 fd，提高了效率。</p>

<p>至此，haproxy epoll 的事件处理机制粗略分析完毕。这里还有一个 speculative events 的逻辑，本文分析中全都跳过了，随后再完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAProxy 研究笔记 -- HTTP请求处理-2-解析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src5/"/>
    <updated>2015-07-29T16:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src5</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-10167808-id-3819702.html">http://blog.chinaunix.net/uid-10167808-id-3819702.html</a></p>

<p> 本文继续分析 1.5-dev17 中接收到 client 数据之后的处理。</p>

<p>haproxy-1.5-dev17 中接收 client 发送的请求数据流程见文档： HTTP请求处理-1-接收</p>

<h4>1. haproxy 主循环的处理流程</h4>

<p>主循环处理流程见文档 主循环简介</p>

<p>请求数据的解析工作在主循环 process_runnable_tasks() 中执行。</p>

<h4>2. 执行 run queue 中的任务</h4>

<p> HTTP请求处理-1-接收 中分析到 session 建立之后，一来会将 session 的 task 放入 runqueue，该 task 会 在下一轮遍历可以运行的 task 中出现，并得到执行。二是立即调用 conn_fd_handler 去 接收 client 发送的数据。</p>

<p>数据接收流程结束后（注意，这并不代表接收到了完整的 client 请求，因为也可能暂时 读取不到 client 的数据退出接收），haproxy 调度执行下一轮循环，调用 process_runnable_tasks() 处理所有在 runqueue 中的 task：</p>

<pre><code>    void process_runnable_tasks(int *next)
    {
        ...
        eb = eb32_lookup_ge(&amp;rqueue, rqueue_ticks - TIMER_LOOK_BACK);
        while (max_processed--) {
            ...
            t = eb32_entry(eb, struct task, rq);
            eb = eb32_next(eb);
            __task_unlink_rq(t);

            t-&gt;state |= TASK_RUNNING;
            /* This is an optimisation to help the processor's branch
             * predictor take this most common call.
             */
            t-&gt;calls++;
            if (likely(t-&gt;process == process_session))
                t = process_session(t);
            else
                t = t-&gt;process(t);
            ...
        }
    }
</code></pre>

<p>大多数情况下，task 的 proecss 都指向 process_session() 函数。该函数就是负责解析 已接收到的数据，选择 backend server，以及 session 状态的变化等等。</p>

<h4>3. session 的处理：process_session()</h4>

<p>下面介绍 process_session() 函数的实现。该函数代码比较庞大，超过一千行，这里仅 介绍与 HTTP 请求处理的逻辑，采用代码块的逻辑介绍。</p>

<p>处理 HTTP 请求的逻辑代码集中在 label resync_request 处。</p>

<pre><code>    struct task *process_session(struct task *t)
    {
        ...
     resync_request:
        /* Analyse request */
        if (((s-&gt;req-&gt;flags &amp; ~rqf_last) &amp; CF_MASK_ANALYSER) ||
            ((s-&gt;req-&gt;flags ^ rqf_last) &amp; CF_MASK_STATIC) ||
            s-&gt;si[0].state != rq_prod_last ||
            s-&gt;si[1].state != rq_cons_last) {
            unsigned int flags = s-&gt;req-&gt;flags;

            if (s-&gt;req-&gt;prod-&gt;state &gt;= SI_ST_EST) {
                ana_list = ana_back = s-&gt;req-&gt;analysers;
                while (ana_list &amp;&amp; max_loops--) {
                    /* 这段代码中逐一的列举出了所有的 analysers 对应的处理函数
                     * 这里不一一列出，等待下文具体分析
                     */
                    ...
                }
            }
            rq_prod_last = s-&gt;si[0].state;
            rq_cons_last = s-&gt;si[1].state;
            s-&gt;req-&gt;flags &amp;= ~CF_WAKE_ONCE;
            rqf_last = s-&gt;req-&gt;flags;

            if ((s-&gt;req-&gt;flags ^ flags) &amp; CF_MASK_STATIC)
                goto resync_request;
        }
</code></pre>

<p>首先要判断 s->req->prod->state 的状态是否已经完成建连，根据之前的初始化动作， se->req->prod 指向 s->si[0]，即标识与 client 端连接的相关信息。正确建连成功之 后，会更改 si 的状态的，具体代码在 session_complete() 中：</p>

<pre><code>    s-&gt;si[0].state     = s-&gt;si[0].prev_state = SI_ST_EST;
    ...
    s-&gt;req-&gt;prod = &amp;s-&gt;si[0];
    s-&gt;req-&gt;cons = &amp;s-&gt;si[1];
</code></pre>

<p>只有 frontend 连接建立成功，才具备处理 client 发送请求数据的基础。上一篇文章中 已经接收到了 client 发送的数据。这里就是需要根据 s->req->analysers 的值，确定 while 循环中哪些函数处理当前的数据。</p>

<p>补充介绍一下 s->req->analysers 的赋值。 同样是在 session_complete 中初始化的</p>

<pre><code>    /* activate default analysers enabled for this listener */
    s-&gt;req-&gt;analysers = l-&gt;analysers;
</code></pre>

<p>可见，其直接使用 session 所在的 listener 的 analyser。 listener 中该数值的初始化 是在 check_config_validity() 中完成的：
<code>
            listener-&gt;analysers |= curproxy-&gt;fe_req_ana;
</code>
而归根结蒂还是来源于 listener 所在的 proxy 上的 fe_req_ana， proxy 上的 fe_req_ana 的初始化同样是在 check_config_validity()，且是在给 listener->analysers 赋值之前</p>

<pre><code>        if (curproxy-&gt;cap &amp; PR_CAP_FE) {
            if (!curproxy-&gt;accept)
                curproxy-&gt;accept = frontend_accept;

            if (curproxy-&gt;tcp_req.inspect_delay ||
                !LIST_ISEMPTY(&amp;curproxy-&gt;tcp_req.inspect_rules))
                curproxy-&gt;fe_req_ana |= AN_REQ_INSPECT_FE;

            if (curproxy-&gt;mode == PR_MODE_HTTP) {
                curproxy-&gt;fe_req_ana |= AN_REQ_WAIT_HTTP | AN_REQ_HTTP_PROCESS_FE;
                curproxy-&gt;fe_rsp_ana |= AN_RES_WAIT_HTTP | AN_RES_HTTP_PROCESS_FE;
            }

            /* both TCP and HTTP must check switching rules */
            curproxy-&gt;fe_req_ana |= AN_REQ_SWITCHING_RULES;
        }
</code></pre>

<p>从上面代码可以看出，一个 HTTP 模式的 proxy，至少有三个标记位会被置位： AN_REQ_WAIT_HTTP, AN_REQ_HTTP_PROCESS_FE, AN_REQ_SWITCHING_RULES。也就是说， s->req->analysers 由以上三个标记置位。那么随后处理 HTTP REQ 的循环中，就要经过 这三个标记位对应的 analyser 的处理。</p>

<p>接着回到 resync_request 标签下的那个 while 循环，就是逐个判断 analysers 的设置， 并调用对应的函数处理。需要启用那些 analysers，是和 haproxy 的配置相对应的。本文 使用最简单的配置，下面仅列出配置所用到的几个处理函数：</p>

<pre><code>            while (ana_list &amp;&amp; max_loops--) {
                /* Warning! ensure that analysers are always placed in ascending order! */

                if (ana_list &amp; AN_REQ_INSPECT_FE) {
                    if (!tcp_inspect_request(s, s-&gt;req, AN_REQ_INSPECT_FE))
                        break;
                    UPDATE_ANALYSERS(s-&gt;req-&gt;analysers, ana_list, ana_back, AN_REQ_INSPECT_FE);
                }

                if (ana_list &amp; AN_REQ_WAIT_HTTP) {
                    if (!http_wait_for_request(s, s-&gt;req, AN_REQ_WAIT_HTTP))
                        break;
                    UPDATE_ANALYSERS(s-&gt;req-&gt;analysers, ana_list, ana_back, AN_REQ_WAIT_HTTP);
                }

                if (ana_list &amp; AN_REQ_HTTP_PROCESS_FE) {
                    if (!http_process_req_common(s, s-&gt;req, AN_REQ_HTTP_PROCESS_FE, s-&gt;fe))
                        break;
                    UPDATE_ANALYSERS(s-&gt;req-&gt;analysers, ana_list, ana_back, AN_REQ_HTTP_PROCESS_FE);
                }

                if (ana_list &amp; AN_REQ_SWITCHING_RULES) {
                    if (!process_switching_rules(s, s-&gt;req, AN_REQ_SWITCHING_RULES))
                        break;
                    UPDATE_ANALYSERS(s-&gt;req-&gt;analysers, ana_list, ana_back, AN_REQ_SWITCHING_RULES);
                }
                ...
            }
</code></pre>

<p>analysers 的处理也是有顺序的。其中处理请求的第一个函数是 tcp_inspect_request()。 该函数主要是在于如果配置了这里先介绍 http_wait_for_request() 函数的实现。 顾名思义，该函数主要是配置中启用 inspect_rules 时，会调用到该函数。否则的话， 处理 HTTP Req 的第一个函数就是 http_wait_for_request().</p>

<p>顾名思义，http_wait_for_request() 该函数分析所解析的 HTTP Requset 不一定是一个 完整的请求。上篇文章分析读取 client 请求数据的实现中，已经提到，只要不能从 socket 读到更多的数据，就会结束数据的接收。一个请求完全完全有可能因为一些异常原因，或者 请求长度本身就比较大而被拆分到不同的 IP 报文中，一次 read 系统调用可能只读取到其 中的一部分内容。因此，该函数会同时分析已经接收到的数据，并确认是否已经接收到了 完整的 HTTP 请求。只有接收到了完整的 HTTP 请求，该函数处理完，才会交给下一个 analyser 处理，否则只能结束请求的处理，等待接收跟多的数据，解析出一个完成的 HTTP 请求才行。</p>

<h4>4. 解析接收到的 http 请求数据： http_wait_for_request()</h4>

<p>以下是 http_wait_for_request() 的简要分析：</p>

<p>1.调用 http_msg_analyzer，解析 s->req->buf 中新读取到的数据。该函数会按照 HTTP 协议， 解析 HTTP request 和 response 的头部数据，并记录到数据结构 struct http_msg 中。</p>

<p>2.如果开启了 debug，并且已经完整的解析了 header，则 header 内容打印出来</p>

<p>3.尚未读取到完整的 request 的处理，分作以下几种情形处理：</p>

<pre><code>    if (unlikely(msg-&gt;msg_state &lt; HTTP_MSG_BODY)) {
        /*
         * First, let's catch bad requests.
         */

    解析到 header 内容中有不符合 HTTP 协议的情形 HTTP_MSG_ERROR，应答 400 bad request 处理
    req-&gt;buf 满了，甚至加入 maxrewrite 的空间仍然不够用，应答 400 bad request
    读取错误 CF_READ_ERROR 发生，比如 client 发送 RST 断开连接， 应答 400 bad request
    读取超时，client 超时未发送完整的请求，应答 408 Request Timeout
    client 主动关闭，发送 FIN 包，实际上是所谓的 half-close，同样应答 400 bad request
    如果以上情况都不满足，则意味着还可以继续尝试读取新数据，设置一下超时

        /* just set the request timeout once at the beginning of the request */
        if (!tick_isset(req-&gt;analyse_exp)) {
            if ((msg-&gt;msg_state == HTTP_MSG_RQBEFORE) &amp;&amp;
                (txn-&gt;flags &amp; TX_WAIT_NEXT_RQ) &amp;&amp;
                tick_isset(s-&gt;be-&gt;timeout.httpka))
                req-&gt;analyse_exp = tick_add(now_ms, s-&gt;be-&gt;timeout.httpka);
            else
                req-&gt;analyse_exp = tick_add_ifset(now_ms, s-&gt;be-&gt;timeout.httpreq);
        }
</code></pre>

<p>根据以上代码，在等待 http request 期间，有两种 timeout 可以设置： 当是http 连接 Keep-Alive 时，并且处理完了头一个请求之后，等待第二个请求期间，设置 httpka 的超 时，超过设定时间不发送新的请求，将会超时；否则，将设置 http 的 request timeout。</p>

<p>因此，在不启用 http ka timeout 时，http request 同时承担起 http ka timeout 的 功能。在有 http ka timeout 时，这两者各自作用的时间段没有重叠。</p>

<p>满足该环节的请求都终止处理，不再继续了。</p>

<h5>4.2. 处理完整的 http request</h5>

<p>这里处理的都是已经解析到完整 http request header 的情况，并且所有 header 都被 索引化了，便于快速查找。根据已经得到的 header 的信息，设置 session 和 txn 的 相关成员，相当于汇总一下 header 的摘要信息，便于随后处理之用。流程如下：</p>

<pre><code>    更新 session 和 proxy 的统计计数
    删除 http ka timeout 的超时处理。可能在上一个请求处理完之后，设置了 http ka 的 timeout，因为这里已经得到完整的请求，因此需要停止该 timeout 的处理逻辑
    确认 METHOD，并设置 session 的标记位 s-&gt;flags |= SN_REDIRECTABLE，只有 GET 和 HEAD 请求可以被重定向
    检测 URI 是否是配置的要做 monitor 的 URI，是的话，则执行对应 ACL，并设置应答
    检测如果开启 log 功能的话，要给 txn-&gt;uri 分配内存，用于记录 URI
    检测 HTTP version
        将 0.9 版本的升级为 1.0
        1.1 及其以上的版本都当做 1.1 处理
    初始化用于标识 Connection header 的标记位
    如果启用了 capture header 配置，调用 capture_headers() 记录下对应的 header
    处理 Transfer-Encoding/Content-Length 等 header
    最后一步，清理 req-&gt;analysers 的标记位 AN_REQ_WAIT_HTTP，因为本函数已经成功处理完毕，可以进行下一个 analyser 的处理了。
</code></pre>

<p>至此，http_wait_for_request() 的处理已经结束。</p>

<h4>5. 其他对 HTTP 请求的处理逻辑</h4>

<p>按照我们前面分析的，随后应该还有两个 analyser 要处理，简单介绍一下：</p>

<pre><code>    AN_REQ_HTTP_PROCESS_FE 对应的 http_process_req_common()
        对 frontend 中 req 配置的常见处理，比如 block ACLs, filter, reqadd 等
        设置 Connection mode， 主要是 haproxy 到 server 采用什么连接方式，tunnel 或者 按照 transcation 处理的短连接
    AN_REQ_SWITCHING_RULES 对应的 process_switching_rules()
        如果配置了选择 backend 的 rules，比如用 use_backend，则查询规则为 session 分配一个 backend
        处理 persist_rules，一旦设置了 force-persist, 则不管 server 是否 down，都要保证 session 分配给 persistence 中记录的 server。
</code></pre>

<p>以上两个函数，不再具体分析。待以后需要时再完善。</p>

<p>至此，client 端 http 请求已经完成解析和相关设置，并且给 session 指定了将来选择 server 所属的 backend。</p>

<p>下一篇文章就分析选择 server 的流程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAProxy 研究笔记 -- 主循环处理流程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src4/"/>
    <updated>2015-07-29T16:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/29/tools-haproxy_src4</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-10167808-id-3807412.html">http://blog.chinaunix.net/uid-10167808-id-3807412.html</a></p>

<p>本文简单介绍 HAProxy 主循环的处理逻辑，版本为 1.5-dev17.</p>

<h4>0. 主循环 run_poll_loop</h4>

<p>HAproxy 的主循环在 haproxy.c 中的 run_poll_loop() 函数，代码如下：</p>

<pre><code>    /* Runs the polling loop */
    void run_poll_loop()
    {
        int next;

        tv_update_date(0,1);
        while (1) {
            /* check if we caught some signals and process them */
            signal_process_queue();

            /* Check if we can expire some tasks */
            wake_expired_tasks(&amp;next);

            /* Process a few tasks */
            process_runnable_tasks(&amp;next);

            /* stop when there's nothing left to do */
            if (jobs == 0)
                break;

            /* The poller will ensure it returns around  */
            cur_poller.poll(&amp;cur_poller, next);
            fd_process_spec_events();
        }
    }
</code></pre>

<p>主循环的结构比较清晰，就是循环的调用几个函数，并在适当的时候结束循环并退出：</p>

<pre><code>    1. 处理信号队列
    2. 超时任务
    3. 处理可运行的任务
    4. 检测是否可以结束循环
    5. 执行 poll 处理 fd 的 IO 事件
    6. 处理可能仍有 IO 事件的 fd
</code></pre>

<h4>1. signal_process_queue - 处理信号队对列</h4>

<p>haproxy 实现了自己的信号处理机制。接受到信号之后，将该信号放到信号队列中。在程序 运行到 signal_process_queue() 时处理所有位于信号队列中的信号。</p>

<h4>2. wake_expired_tasks - 唤醒超时任务</h4>

<p>haproxy 的顶层处理逻辑是 task，task 上存储着要处理的任务的全部信息。task 的管理 是采用队列方式，同时分为 wait queue 和 run queue。顾名思义，wait queue 是需要等 待一定时间的 task 的集合，而 run queue 则代表需要立即执行的 task 的集合。</p>

<p>该函数就是检查 wait queue 中那些超时的任务，并将其放到 run queue 中。haproxy 在 执行的过程中，会因为一些情况导致需要将当前的任务通过调用 task_queue 等接口放到 wait queue 中。</p>

<h4>3. process_runnable_tasks - 处理可运行的任务</h4>

<p>处理位于 run queue 中的任务。</p>

<p>前面提到，wake_expired_tasks 可能将一些超时的任务放到 run queue 中。此外，haproxy 执行的过程中，还有可能通过调用 task_wakeup 直接讲某个 task 放到 run queue 中，这代表程序希望该任务下次尽可能快的被执行。</p>

<p>对于 TCP 或者 HTTP 业务流量的处理，该函数最终通过调用 process_session 来完成，包括解析已经接收到的数据， 并执行一系列 load balance 的特性，但不负责从 socket 收发数据。</p>

<h4>4. jobs == 0 - 无任务可执行，结束循环</h4>

<p>haproxy 中用 jobs 记录当前要处理的任务总数，一个 listener 也会被计算在内。因此， 如果 jobs 为 0 的话，通常意味着 haproxy 要退出了，因为连 listener 都要释放了。 jobs 的数值通常在 process_session 时更新。因此，是否可以退出循环，就放在了所有 任务的 process_session 执行之后。</p>

<h4>5. cur_poller.poll() - 执行 poll 处理 fd 的 IO 事件</h4>

<p>haproxy 启动阶段，会检测当前系统可以启用那种异步处理的机制，比如 select、poll、 epoll、kqueue 等，并注册对应 poller 的 poll 方法。epoll 的相关函数接口在 ev_epoll.c 中。</p>

<p>这里就是执行已经注册的 poller 的 poll 方法，主要功能就是获取所有活动的 fd，并 调用对应的 handler，完成接受新建连接、数据收发等功能。</p>

<h4>6. 处理可能仍有 IO 事件的 fd</h4>

<p>poller 的 poll 方法执行时，程序会将某些符合条件以便再次执行 IO 处理的的 fd 放到 fd_spec list[] 中，fd_process_spec_events() 函数会再次执行这些 fd 的 io handler。</p>
]]></content>
  </entry>
  
</feed>
