<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-07T14:44:12+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ubuntu安装kvm虚拟机]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/07/ubuntu-kvm/"/>
    <updated>2015-07-07T14:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/07/ubuntu-kvm</id>
    <content type="html"><![CDATA[<pre><code>    sudo apt-get install qemu-kvm libvirt-bin virt-manager
</code></pre>

<p>用 virt-manager</p>

<p>参考 <a href="http://nmszh.blog.51cto.com/4609205/1539502">http://nmszh.blog.51cto.com/4609205/1539502</a></p>

<hr />

<p><a href="http://www.sysstem.at/category/linux/">http://www.sysstem.at/category/linux/</a></p>

<h4>问题一：</h4>

<pre><code>    ERROR internal error: Process exited while reading console log output: char device redirected to /dev/pts/45 (label charserial0)
    ioctl(KVM_CREATE_VM) failed: 16 Device or resource busy
    failed to initialize KVM: Device or resource busy
</code></pre>

<p>  This is mostly because you have either VirtualBox or VMware running on the same machine. The reason (at least that’s what I think) is that the kernel module of VirtualBox or VMware and KVM can’t take Advantage of Intel VT-x or AMD-V at the same time.</p>

<p>关闭virtualbox等其他虚拟机就好</p>

<hr />

<p><a href="http://ask.xmodulo.com/hda-duplex-not-supported-in-this-qemu-binary.html">http://ask.xmodulo.com/hda-duplex-not-supported-in-this-qemu-binary.html</a></p>

<h4>问题二：</h4>

<pre><code>    Unable to complete install: 'unsupported configuration: hda-duplex not supported in this QEMU library
</code></pre>

<h5>Solution One: Virt-Manager</h5>

<p>On virt-manager, open the VM&rsquo;s virtual hardware details menu, go to sound device section, and change the device model from default to ac97.</p>

<p>Click on &ldquo;Apply&rdquo; button to save the change. See if you can start the VM now.</p>

<p>也就是 最后一步 “勾选安装之前配置“，完成，然后将声卡改成ac97即可</p>

<h5>Solution Two: Virsh</h5>

<p>If you are using virsh, not virt-manager, you can edit the VM&rsquo;s XML file accordingly. Look for sound section inside <device> section, and change the sound model to ac97 as follows.
<code>
      &lt;devices&gt;
        . . .
        &lt;sound model='ac97'&gt;
          &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/&gt;
        &lt;/sound&gt;
        . . .
      &lt;/device&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos安装kvm虚拟机]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/07/centos-kvm/"/>
    <updated>2015-07-07T14:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/07/centos-kvm</id>
    <content type="html"><![CDATA[<ul>
<li><p>最好在centos6装</p></li>
<li><p>TODO 虚拟机网桥连接没试</p></li>
</ul>


<p><a href="http://docs.openstack.org/zh_CN/image-guide/content/virt-install.html">http://docs.openstack.org/zh_CN/image-guide/content/virt-install.html</a></p>

<h4>安装</h4>

<pre><code>    yum install qemu-kvm libvirt virt-manager
</code></pre>

<h4>管理界面</h4>

<pre><code>    virt-manager
</code></pre>

<p>图形化安装过程见： <a href="http://nmszh.blog.51cto.com/4609205/1539502">http://nmszh.blog.51cto.com/4609205/1539502</a></p>

<h4>命令行创建安装</h4>

<pre><code>    qemu-img create -f qcow2 ttt.img 10G
</code></pre>

<pre><code>    virt-install --virt-type kvm --name centos-6.4 --ram 1024 \
    --cdrom=/data/CentOS-6.4-x86_64-netinstall.iso \
    --disk path=/data/centos-6.4.qcow2,size=10,format=qcow2 \
    --network network=default \
    --graphics vnc,listen=0.0.0.0 --noautoconsole \
    --os-type=linux --os-variant=rhel6

    Starting install...
    Creating
    domain...  |    0 B     00:00
    Domain installation still in progress. You can reconnect to
    the console to complete the installation process.
</code></pre>

<p>  KVM 虚拟化使用 centos-6.4 名称，1024MB内存启动虚拟机。虚拟机还有一个关联文件/data/CentOS-6.4-x86_64-netinstall.iso 的虚拟的 CD-ROM，并拥有 10GB 的qcow2格式的硬盘，硬盘文件位置在 /data/centos-6.4.qcow2。虚拟机配置了网络使用 libvirt 的默认网络。且 VNC 服务监听所有的网卡，并且 libvirt 不会自动启动 VNC 客户端也不会显示字符界面控制台（&ndash;no-autoconsole）。最后，libvirt 将尝试以RHEL 6.x 发行版来优化虚拟机配置。</p>

<p>  运行
<code>
    virt-install --os-variant list
</code>
命令查看 <code>--os-variant</code> 允许的选项范围。</p>

<p>  使用命令获取 VNC 端口号。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virsh vncdisplay vm-name&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  # virsh vncdisplay centos-6.4
</span><span class='line'>  :1</span></code></pre></td></tr></table></div></figure></p>

<p>在上面的示例中，虚拟机 centos-6.4 使用 VNC 显示器 :1，对应的 TCP 端口是 5901。你应该使用本地 VNC 客户端连接到远程服务器的 ：1 显示器并且完成安装步骤。</p>

<p>用vncviewer连接虚拟机完成安装
<code>
    vncviewer IP:5901
</code></p>

<ul>
<li>装好后会生成 /etc/libvirt/qemu/ttt.xml 配置文件，可以修改</li>
</ul>


<hr />

<p><a href="http://os.51cto.com/art/201404/435193.htm">http://os.51cto.com/art/201404/435193.htm</a></p>

<p><a href="http://tianhao936.blog.51cto.com/1043670/1343767">http://tianhao936.blog.51cto.com/1043670/1343767</a></p>

<h4>虚拟机操作</h4>

<p>常用virsh指令
<code>
    1）virsh list               列出当前虚拟机列表，不包括未启动的
    2）virsh list --all         列出所有虚拟机，包括所有已经定义的虚拟机
    3）virsh start vm-name      启动虚拟机
    4）virsh destroy vm-name    关闭虚拟机    
    5）virsh undefine vm-name   删除虚拟机
    6）virsh shutdown vm-name   停止虚拟机
    7）virsh reboot vm-name     重启虚拟机
    8）virsh edit vm-name       编辑虚拟机xml文件
    9）virsh autostart vm-name  虚拟机随宿主机启动
</code></p>

<hr />

<p><a href="http://blog.csdn.net/justlinux2010/article/details/8977705">http://blog.csdn.net/justlinux2010/article/details/8977705</a></p>

<p><a href="http://www.centoscn.com/image-text/config/2014/0801/3407.html">http://www.centoscn.com/image-text/config/2014/0801/3407.html</a></p>

<hr />

<p>错误
<code>
    Could not initialize SDL(No available video device) - exiting
</code></p>

<p>需要在桌面环境运行qemu-kvm</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vnc远程连接，远程登录服务器或者虚拟机]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/06/centos-vnc/"/>
    <updated>2015-07-06T18:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/06/centos-vnc</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/gg296231363/article/details/6899655">http://blog.csdn.net/gg296231363/article/details/6899655</a></p>

<h3>服务器端</h3>

<p>1 安装
<code>
    yum install vnc* tigervnc tigervnc-server pixman pixman-devel libXfont
</code></p>

<p>2
<code>
    vi /etc/sysconfig/vncservers
</code>
  修改成
<code>
    VNCSERVERS="2:root"
    VNCSERVERARGS[2]="-geometry 800x600"
</code></p>

<p>3 设置登录密码
<code>
    vncpasswd
</code></p>

<p>4
<code>
    service vncserver start
    service iptables stop
</code></p>

<h3>客户机端</h3>

<pre><code>    vncviewer IP:PORT
</code></pre>

<p>centos5 有可能出现的错误
```
    $ vncviewer 127.0.0.1:5900</p>

<pre><code>VNC Viewer Free Edition 4.1.2 for X - built Apr 20 2011 12:04:25
Copyright (C) 2002-2005 RealVNC Ltd.
See http://www.realvnc.com for information on VNC.

Mon Jul  6 14:16:43 2015
 CConn:       connected to host 127.0.0.1 port 5900
 CConnection: Server supports RFB protocol version 3.8 
 CConnection: Using RFB protocol version 3.8 
 TXImage:     Using default colormap and visual, TrueColor, depth 24. 
 CConn:       Using pixel format depth 6 (8bpp) rgb222
 CConn:       Using ZRLE encoding

Mon Jul  6 14:16:44 2015
 CConn:       Throughput 20000 kbit/s - changing to hextile encoding
 CConn:       Throughput 20000 kbit/s - changing to full colour
 CConn:       Using pixel format depth 24 (32bpp) little-endian rgb888
 CConn:       Using hextile encoding
unknown message type 98
 main:        unknown message type
</code></pre>

<pre><code>加上 -FullColor 选项就好
</code></pre>

<pre><code>$ vncviewer -FullColor 127.0.0.1:5900
</code></pre>

<pre><code>
-----------

#### 不是必需
5
</code></pre>

<pre><code>vi ~/.vnc/xstartup
gnome-session &amp;   //添加gnome，使用gnome图形界面登录
#twm &amp;            //注销默认的窗口管理器 简陋而且很多图形显示不了

service vncserver restart
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash kmem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem/"/>
    <updated>2015-07-02T10:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem</id>
    <content type="html"><![CDATA[<h4>一、kmem -s 查看slab</h4>

<pre><code>    crash&gt; kmem -s
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ...
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    ffff8808135e1400 sock_inode_cache         704        298       470     94     4k
    ...
</code></pre>

<h4>二、kmem -S 查看slab中详细内容</h4>

<pre><code>    crash&gt; kmem -S request_sock_TCP
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    SLAB              MEMORY            TOTAL  ALLOCATED  FREE
    ffff88078b9c6000  ffff88078b9c60c0     30          2    28
    FREE / [ALLOCATED]
       ffff88078b9c60c0
       ffff88078b9c6140
       ffff88078b9c61c0
       ffff88078b9c6240
       ffff88078b9c62c0
       ffff88078b9c6340
       ffff88078b9c63c0
       ffff88078b9c6440
       ffff88078b9c64c0
       ffff88078b9c6540
       ffff88078b9c65c0
       ffff88078b9c6640
       ffff88078b9c66c0
      [ffff88078b9c6740]
      [ffff88078b9c67c0]
       ffff88078b9c6840
       ffff88078b9c68c0
       ffff88078b9c6940
       ffff88078b9c69c0
    ...
</code></pre>

<p>request_sock_TCP 是 struct request_sock 类型，所以对于已分配的地址可以直接查看</p>

<pre><code>    crash&gt; struct request_sock 0xffff88078b9c6740
    struct request_sock {
      dl_next = 0x0, 
      mss = 1460, 
      retrans = 0 '\000', 
      cookie_ts = 0 '\000', 
      window_clamp = 8388480, 
      rcv_wnd = 14600, 
      ts_recent = 0, 
      expires = 4302901768, 
      rsk_ops = 0xffffffff81c0e840 &lt;tcp_request_sock_ops&gt;, 
      sk = 0xffff880771dad800, 
      secid = 3039208612, 
      peer_secid = 3672081930
    }
</code></pre>

<p><a href="http://blog.csdn.net/u011279649/article/details/17529315">http://blog.csdn.net/u011279649/article/details/17529315</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看所有tcp连接]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info/"/>
    <updated>2015-07-02T10:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info</id>
    <content type="html"><![CDATA[<p><a href="http://roclinux.cn/?p=2418">http://roclinux.cn/?p=2418</a></p>

<p><a href="http://blog.csdn.net/justlinux2010/article/details/21028797">http://blog.csdn.net/justlinux2010/article/details/21028797</a></p>

<h4>一、查看连接</h4>

<pre><code>    netstat -an
</code></pre>

<p>或
<code>
    ss
</code></p>

<h4>二、查看连接详细信息</h4>

<p>上面的命令也是从<code>/proc/net/tcp</code>和<code>/proc/net/tcp6</code>中读取的</p>

<p>/proc/net/tcp中的内容由tcp4_seq_show()函数打印，该函数中有三种打印形式，我们这里这只列出状态是TCP_SEQ_STATE_LISTENING或TCP_SEQ_STATE_ESTABLISHED的情况，如下所示：</p>

<p><img src="/images/kernel/2015-07-02.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
