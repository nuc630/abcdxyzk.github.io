<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-02T12:22:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[crash kmem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem/"/>
    <updated>2015-07-02T10:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem</id>
    <content type="html"><![CDATA[<h4>一、kmem -s 查看slab</h4>

<pre><code>    crash&gt; kmem -s
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ...
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    ffff8808135e1400 sock_inode_cache         704        298       470     94     4k
    ...
</code></pre>

<h4>二、kmem -S 查看slab中详细内容</h4>

<pre><code>    crash&gt; kmem -S request_sock_TCP
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    SLAB              MEMORY            TOTAL  ALLOCATED  FREE
    ffff88078b9c6000  ffff88078b9c60c0     30          2    28
    FREE / [ALLOCATED]
       ffff88078b9c60c0
       ffff88078b9c6140
       ffff88078b9c61c0
       ffff88078b9c6240
       ffff88078b9c62c0
       ffff88078b9c6340
       ffff88078b9c63c0
       ffff88078b9c6440
       ffff88078b9c64c0
       ffff88078b9c6540
       ffff88078b9c65c0
       ffff88078b9c6640
       ffff88078b9c66c0
      [ffff88078b9c6740]
      [ffff88078b9c67c0]
       ffff88078b9c6840
       ffff88078b9c68c0
       ffff88078b9c6940
       ffff88078b9c69c0
    ...
</code></pre>

<p>request_sock_TCP 是 struct request_sock 类型，所以对于已分配的地址可以直接查看</p>

<pre><code>    crash&gt; struct request_sock 0xffff88078b9c6740
    struct request_sock {
      dl_next = 0x0, 
      mss = 1460, 
      retrans = 0 '\000', 
      cookie_ts = 0 '\000', 
      window_clamp = 8388480, 
      rcv_wnd = 14600, 
      ts_recent = 0, 
      expires = 4302901768, 
      rsk_ops = 0xffffffff81c0e840 &lt;tcp_request_sock_ops&gt;, 
      sk = 0xffff880771dad800, 
      secid = 3039208612, 
      peer_secid = 3672081930
    }
</code></pre>

<p><a href="http://blog.csdn.net/u011279649/article/details/17529315">http://blog.csdn.net/u011279649/article/details/17529315</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看所有tcp连接]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info/"/>
    <updated>2015-07-02T10:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/kernel-net-info</id>
    <content type="html"><![CDATA[<p><a href="http://roclinux.cn/?p=2418">http://roclinux.cn/?p=2418</a></p>

<p><a href="http://blog.csdn.net/justlinux2010/article/details/21028797">http://blog.csdn.net/justlinux2010/article/details/21028797</a></p>

<h4>一、查看连接</h4>

<pre><code>    netstat -an
</code></pre>

<p>或
<code>
    ss
</code></p>

<h4>二、查看连接详细信息</h4>

<p>上面的命令也是从<code>/proc/net/tcp</code>和<code>/proc/net/tcp6</code>中读取的</p>

<p>/proc/net/tcp中的内容由tcp4_seq_show()函数打印，该函数中有三种打印形式，我们这里这只列出状态是TCP_SEQ_STATE_LISTENING或TCP_SEQ_STATE_ESTABLISHED的情况，如下所示：</p>

<p><img src="/images/kernel/2015-07-02.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
