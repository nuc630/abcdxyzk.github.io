<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~07 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~07/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-24T17:14:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[haproxy splice]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/24/tools-haproxy-splice/"/>
    <updated>2015-07-24T16:45:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/24/tools-haproxy-splice</id>
    <content type="html"><![CDATA[<p>www.haproxy.org/download/1.5/doc/configuration.txt 或 <a href="/download/tools/haproxy-1.5-configuration.txt">configuration.txt</a></p>

<p>旧版编译加
<code>
    USE_TCPSPLICE=1
</code></p>

<p>比较新的加
<code>
    USE_LINUX_SPLICE=1
</code>
默认编译会加入</p>

<p>编译加入了也要在配置文件中开启才有效
<code>
    option splice-auto
    option splice-request
    option splice-response
</code></p>

<p>在global中关闭splice功能
<code>
    nosplice
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[haproxy log]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/24/tools-haproxy-log/"/>
    <updated>2015-07-24T16:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/24/tools-haproxy-log</id>
    <content type="html"><![CDATA[<p><a href="http://sharadchhetri.com/2013/10/16/how-to-enable-logging-of-haproxy-in-rsyslog/">http://sharadchhetri.com/2013/10/16/how-to-enable-logging-of-haproxy-in-rsyslog/</a></p>

<p>  After installing the HAproxy 1.4 in CentOS 6.4 bydefault logging of haproxy was not enable.To enable the logging of HAProxy you have to enable it in rsyslog(In CentOS 6.4 minimal installation,rsyslog version 5.2 is shipped).
To setup logging in HAproxy,follow the given below steps</p>

<h4>Step 1:</h4>

<p>In Global Section of haproxy.cfg put the value log 127.0.0.1 local0 .Like given below
<code>
    global
        log 127.0.0.1   local0
</code></p>

<h4>Step 2:</h4>

<p>Create new haproxy configuration file in /etc/rsyslog.d . Here we are keeping the log in localhost or in other words we should say HAproxy server</p>

<h4>Note:</h4>

<p>local0.=info -/var/log/haproxy.log defines the http log will be saved in haproxy.log</p>

<p>local0.notice -/var/log/haproxy-status.log defines the Server status like start,stop,restart,down,up etc. will be saved in haproxy-status.log</p>

<p>UDPServerRun 514 means opening UDP port no. 514 to listen haproxy messages</p>

<pre><code>    vi /etc/rsyslog.d/haproxy.conf

    $ModLoad imudp
    $UDPServerRun 514 
    $template Haproxy,"%msg%\n"
    local0.=info -/var/log/haproxy.log;Haproxy
    local0.notice -/var/log/haproxy-status.log;Haproxy
    ### keep logs in localhost ##
    local0.* ~ 
</code></pre>

<h4>Step 3:</h4>

<p>Now restart the HAproxy service
<code>
    /etc/init.d/haproxy restart
</code>
After restarting the haproxy service two logs will be created itself i.e haproxy.log and haproxy-status.log</p>

<h4>Step 4:</h4>

<p>Check your logrotae file for haproxy also so that logs keep on rotating and compress itself. If bydefault it is not present in /etc/logrotate.d directory then create a new file called haproxy and paste the given below code.</p>

<p>Here I am keeping the logs upto 120 days hence rotate 120 and daily is written in file.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /etc/logrotate.d/haproxy&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/var/log/haproxy.log {
</span><span class='line'>missingok
</span><span class='line'>notifempty
</span><span class='line'>sharedscripts
</span><span class='line'>rotate 120
</span><span class='line'>daily
</span><span class='line'>compress
</span><span class='line'>postrotate
</span><span class='line'>    reload rsyslog &gt;/dev/null 2&gt;&amp;1 || true
</span><span class='line'>endscript
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[haproxy安装配置]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/23/tools-haproxy/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-23T15:47:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/23/tools-haproxy&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中，同时可以保护你的web服务器不被暴露到网络上.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;haproxy 配置中分成五部分内容，分别如下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、global：参数是进程级的，通常是和操作系统相关。这些参数一般只设置一次，如果配置无误，就不需要再次进行修改&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2、defaults：配置默认参数，这些参数可以被用到frontend，backend，Listen组件&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3、frontend：接收请求的前端虚拟节点，Frontend可以更加规则直接指定具体使用后端的backend&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4、backend：后端服务集群的配置，是真实服务器，一个Backend对应一个或者多个实体服务器&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;5、Listen Fronted和backend的组合体&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、安装HAProxy&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1.下载最新haproxy安装包&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;官网：&lt;a href="http://www.haproxy.org"&gt;http://www.haproxy.org&lt;/a&gt; ,如果不能访问，可以使用在线代理访问下载。下载：&lt;a href="http://fossies.org/linux/misc/haproxy-1.5.14.tar.gz"&gt;http://fossies.org/linux/misc/haproxy-1.5.14.tar.gz&lt;/a&gt; 或 &lt;a href="/download/tools/haproxy-1.5.14.tar.gz"&gt;haproxy-1.5.14.tar.gz&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2.上传到linux的haproxy用户根目录下，并解压：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    tar -zxvf haproxy-1.5.14.tar.gz 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;创建目录/home/haproxy/haproxy&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3.安装&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CentOS5编译新的haproxy需要在Makefile中禁掉USE_ACCEPT4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    cd haproxy-1.5.14
</span><span class='line'>make  TARGET=linux26 ARCH=x86_64 PREFIX=/home/haproxy/haproxy   #将haproxy安装到/home/haproxy/haproxy ,TARGET是指定内核版本
</span><span class='line'>make install PREFIX=/home/haproxy/haproxy  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进入/home/haproxy/haproxy  目录创建/home/haproxy/haproxy/conf目录，复制配置examples
</span><span class='line'>&lt;code&gt;
</span><span class='line'>cp  /home/haproxy/haproxy-1.5.14/examples/haproxy.cfg  /home/haproxy/haproxy/conf/
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4.修改配置&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;配置说明如下：(参考:&lt;a href="http://freehat.blog.51cto.com/1239536/1347882"&gt;http://freehat.blog.51cto.com/1239536/1347882&lt;/a&gt;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ###########全局配置#########
</span><span class='line'>global
</span><span class='line'>    log 127.0.0.1   local0          #[日志输出配置，所有日志都记录在本机，通过local0输出]
</span><span class='line'>    log 127.0.0.1   local1 notice   #定义haproxy 日志级别[error warringinfo debug]
</span><span class='line'>    daemon                          #以后台形式运行harpoxy
</span><span class='line'>    nbproc    1                     #设置进程数量
</span><span class='line'>    maxconn   4096                  #默认最大连接数,需考虑ulimit-n限制
</span><span class='line'>    #pidfile  /var/run/haproxy.pid  #haproxy 进程PID文件
</span><span class='line'>    #ulimit-n 819200                #ulimit 的数量限制
</span><span class='line'>    #chroot   /usr/share/haproxy    #chroot运行路径
</span><span class='line'>    #debug                          #haproxy 调试级别，建议只在开启单进程的时候调试
</span><span class='line'>    #quiet
</span><span class='line'>
</span><span class='line'>########默认配置############
</span><span class='line'>defaults
</span><span class='line'>    log      global
</span><span class='line'>    mode     http                  #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK
</span><span class='line'>    option   httplog               #日志类别,采用httplog
</span><span class='line'>    option   dontlognull           #不记录健康检查日志信息
</span><span class='line'>    retries  2                     #两次连接失败就认为是服务器不可用，也可以通过后面设置
</span><span class='line'>    option   forwardfor            #如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip
</span><span class='line'>    option   httpclose             #每次请求完毕后主动关闭http通道,haproxy不支持keep-alive,只能模拟这种模式的实现
</span><span class='line'>    #option  redispatch            #当serverId对应的服务器挂掉后，强制定向到其他健康的服务器，以后将不支持
</span><span class='line'>    option   abortonclose          #当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接
</span><span class='line'>    maxconn  4096                  #默认的最大连接数
</span><span class='line'>    timeout  connect  5000ms       #连接超时
</span><span class='line'>    timeout  client 30000ms        #客户端超时
</span><span class='line'>    timeout  server 30000ms        #服务器超时
</span><span class='line'>    #timeout check 2000            #心跳检测超时
</span><span class='line'>    #timeout http-keep-alive10s    #默认持久连接超时时间
</span><span class='line'>    #timeout http-request   10s    #默认http请求超时时间
</span><span class='line'>    #timeout queue          1m     #默认队列超时时间
</span><span class='line'>    balance  roundrobin            #设置默认负载均衡方式，轮询方式
</span><span class='line'>    #balance source                #设置默认负载均衡方式，类似于nginx的ip_hash
</span><span class='line'>    #balnace leastconn             #设置默认负载均衡方式，最小连接数
</span><span class='line'>
</span><span class='line'>########统计页面配置########
</span><span class='line'>listen admin_stats
</span><span class='line'>    bind 0.0.0.0:1080               #设置Frontend和Backend的组合体，监控组的名称，按需要自定义名称
</span><span class='line'>    mode http                       #http的7层模式
</span><span class='line'>    option httplog                  #采用http日志格式
</span><span class='line'>    #log 127.0.0.1 local0 err       #错误日志记录
</span><span class='line'>    maxconn 10                      #默认的最大连接数
</span><span class='line'>    stats refresh 30s               #统计页面自动刷新时间
</span><span class='line'>    stats uri /stats                #统计页面url
</span><span class='line'>    stats realm XingCloud\ Haproxy  #统计页面密码框上提示文本
</span><span class='line'>    stats auth admin:admin          #设置监控页面的用户和密码:admin,可以设置多个用户名
</span><span class='line'>    stats auth  Frank:Frank         #设置监控页面的用户和密码：Frank
</span><span class='line'>    stats hide-version              #隐藏统计页面上HAProxy的版本信息
</span><span class='line'>    stats  admin if TRUE            #设置手工启动/禁用，后端服务器(haproxy-1.4.9以后版本)
</span><span class='line'>
</span><span class='line'>########设置haproxy 错误页面#####
</span><span class='line'>errorfile 403 /home/haproxy/haproxy/errorfiles/403.http
</span><span class='line'>errorfile 500 /home/haproxy/haproxy/errorfiles/500.http
</span><span class='line'>errorfile 502 /home/haproxy/haproxy/errorfiles/502.http
</span><span class='line'>errorfile 503 /home/haproxy/haproxy/errorfiles/503.http
</span><span class='line'>errorfile 504 /home/haproxy/haproxy/errorfiles/504.http
</span><span class='line'>
</span><span class='line'>########frontend前端配置##############
</span><span class='line'>bind *:80         #这里建议使用bind *:80的方式，要不然做集群高可用的时候有问题，vip切换到其他机器就不能访问了。
</span><span class='line'>    acl web hdr(host) -i www.abc.com  #acl后面是规则名称，-i是要访问的域名，如果访问www.abc.com这个域名就分发到下面的webserver 的作用域。
</span><span class='line'>    acl img hdr(host) -i img.abc.com  #如果访问img.abc.com.cn就分发到imgserver这个作用域。
</span><span class='line'>    use_backend webserver if web
</span><span class='line'>    use_backend imgserver if img
</span><span class='line'>
</span><span class='line'>########backend后端配置##############
</span><span class='line'>backend webserver             #webserver作用域
</span><span class='line'>    mode http
</span><span class='line'>    balance   roundrobin                  #balance roundrobin 轮询，balance source 保存session值，支持static-rr，leastconn，first，uri等参数
</span><span class='line'>    option  httpchk /index.html HTTP/1.0  #健康检查, 检测文件，如果分发到后台index.html访问不到就不再分发给它
</span><span class='line'>    server  web1 10.16.0.9:8085  cookie 1 weight 5 check inter 2000 rise 2 fall 3
</span><span class='line'>    server  web2 10.16.0.10:8085 cookie 2 weight 3 check inter 2000 rise 2 fall 3
</span><span class='line'>    #cookie 1表示serverid为1，check inter 1500 是检测心跳频率  
</span><span class='line'>    #rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重
</span><span class='line'>backend imgserver
</span><span class='line'>    mode http
</span><span class='line'>    option  httpchk /index.php
</span><span class='line'>    balance     roundrobin                          
</span><span class='line'>    server      img01 192.168.137.101:80  check inter 2000 fall 3
</span><span class='line'>    server      img02 192.168.137.102:80  check inter 2000 fall 3
</span><span class='line'>listen tcptest  
</span><span class='line'>    bind 0.0.0.0:5222  
</span><span class='line'>    mode tcp  
</span><span class='line'>    option tcplog                  #采用tcp日志格式  
</span><span class='line'>    balance source  
</span><span class='line'>    #log 127.0.0.1 local0 debug  
</span><span class='line'>    server s1 192.168.100.204:7222    weight 1  
</span><span class='line'>    server s2 192.168.100.208:7222    weight 1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5.加上日志支持&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # vim /etc/syslog.conf
</span><span class='line'>在最下边增加
</span><span class='line'>local1.*        /home/haproxy/haproxy/logs/haproxy.log
</span><span class='line'>local0.*        /home/haproxy/haproxy/logs/haproxy.log
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # vim /etc/sysconfig/syslog
</span><span class='line'>修改： SYSLOGD_OPTIONS="-r -m 0"
</span><span class='line'>重启日志服务 service syslog restart
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;6.启动服务&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;启动服务：
</span><span class='line'>&lt;code&gt;
</span><span class='line'># /home/haproxy/haproxy/sbin/haproxy -f /home/haproxy/haproxy/conf/haproxy.cfg
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>重启服务：
</span><span class='line'>&lt;code&gt;
</span><span class='line'># /home/haproxy/haproxy/sbin/haproxy -f /home/haproxy/haproxy/conf/haproxy.cfg -st `cat /home/haproxy/haproxy/conf/haproxy.pid`
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>停止服务：
</span><span class='line'>&lt;code&gt;
</span><span class='line'># killall haproxy
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;7.监控&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;访问：&lt;a href="http://192.168.101.125:1080/stats"&gt;http://192.168.101.125:1080/stats&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[同时运行多个squid]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/23/tools-squid-muti/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-23T15:32:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/23/tools-squid-muti&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://wenku.baidu.com/link?url=UXFXZVxSsQMyXVzoTA5y3Oal6s5zknpozLhfodYZ7d43R_XpziB08h28ynXZy3Sq8r-XH1tdXGvxD_X2Pa_aI4f6pFTBgGXMm0QRaRbEYmq"&gt;http://wenku.baidu.com/link?url=UXFXZVxSsQMyXVzoTA5y3Oal6s5zknpozLhfodYZ7d43R_XpziB08h28ynXZy3Sq8r-XH1tdXGvxD_X2Pa_aI4f6pFTBgGXMm0QRaRbEYmq&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;多代理（SQUID）同时运行的配置方法 &lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;作成日期：2012/8/24 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;多代理用途： &lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、HTTP反向加速； 
</span><span class='line'>2、权限控制部分客户端，而权限控制选项是全局设置时； &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;总之，一般的代理服务器运行一个即可，当有特殊要求的时候，才有此需要，HTTP反向代理本文没有涉及，仅是为了权限控制，一台机器同一网卡运行了2个Squid，对于HTTP反向代理，有兴趣者可自行研究配置。  &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;环境： &lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、 Cent OS 5 
</span><span class='line'>2、 Squid （Version 2.6.STABLE21） &lt;br/&gt;
</span><span class='line'>3、 DELL R710  &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;配置： &lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在配置多Squid同时运行时，我的服务器已经安装配置好的Squid，并正常运行，如果你的服务器还不具备此条件，请先配置好Squid，并确保可以正确运行。 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、 复制一份Squid .conf配置文件 &lt;br/&gt;
</span><span class='line'>2、 编辑新文件，配置如下的选项与第一个Squid区分开 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;table&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>    &lt;th&gt;项目&lt;/th&gt;
</span><span class='line'>    &lt;th&gt;参数&lt;/th&gt;
</span><span class='line'>    &lt;th&gt;备注&lt;/th&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>    &lt;td&gt;端口&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;8080&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;端口可自定，但要注意两个问题，与原有的Squid 默认的3128区分开，并且与系统已经存在的服务占用端口区分开，避免冲突发生。&lt;/td&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>    &lt;td&gt;缓存目录&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;指定一个新目录与第一个Squid区分开&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;TAG: cache_dir， 注意，新的目录必须将权限设定为777。&lt;/td&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>    &lt;td&gt;系统日志&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;指定一个新目录与第一个Squid区分开&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;TAG: access_log TAG: cache_log TAG: cache_store_log 以上日志存放地点可自定与第一个Squid区分开即可，注意，新的目录必须将权限设定为777。&lt;/td&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;tr&gt;
</span><span class='line'>    &lt;td&gt;PID文件&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;指定一个新目录与第一个Squid区分开&lt;/td&gt;
</span><span class='line'>    &lt;td&gt;TAG: pid_filename 第1个Suqid的PID文件默认存放地点是/VAR/RUN 重新指定新的目录，避免与第1个Squid文件冲突。&lt;/td&gt;
</span><span class='line'>&lt;/tr&gt;
</span><span class='line'>&lt;/table&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3、初始化缓存目录 &lt;br/&gt;
</span><span class='line'>命令如下：&lt;code&gt;squid -z -f 新的配置文件&lt;/code&gt; 
</span><span class='line'>注意，"-f"参数后面一定要写上新配置文件，一般设定2个Squid同时运行时，都是这一步没有处理或者处理错误，比如没有加"-f"参数的话，就会初始化原有的Squid缓存目录 而不是新squid缓存目录。 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4、运行第2个代理服务器 &lt;br/&gt;
</span><span class='line'>命令如下：&lt;code&gt;squid -D -f 新的配置文件&lt;/code&gt;  &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; var script = document.createElement(&lsquo;script&rsquo;); script.src = &lsquo;&lt;a href="http://static.pay.baidu.com/resource/baichuan/ns.js"&gt;http://static.pay.baidu.com/resource/baichuan/ns.js&lt;/a&gt;&rsquo;; document.body.appendChild(script);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt; 维护： &lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;至此，服务器上已经运行两个代理服务器，使用不同的端口，就会通过不同代理服务器进行网络连接，设定配置文件，可为客户端设定不同的网络权限。   &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、关于配置文件的更新后Reload 
</span><span class='line'>如更新第1个代理，使用默认系统命令：squid -k reconfigure      如更新第2个代理，squid -k reconfigure -f 新的配置文件   &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2、第2个代理的自动启动 &lt;br/&gt;
</span><span class='line'>当系统重新时，想第2个代理随机启动，请参照以下脚本（第1个代理启动，可以在系统中设定）： &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    #! /bin/sh 
</span><span class='line'>echo "Start special squid”             #输出一些提示信息 
</span><span class='line'>squid -D -f /etc/squid/squidnew.conf   #我的新配置文件在/etc/squid下面 
</span><span class='line'>echo "Please wait ...."                #输出一些提示信息 
</span><span class='line'>sleep 5                             #等待5秒，给Squid启动时间，实际可能不需要怎么久 
</span><span class='line'>cd /var/cache/squidnew/             #进入缓存目录，我的PID文件放在这里 
</span><span class='line'>if [ -s squid.pid ];                #判断PID文件是否存在，存在squid启动成功，否则失败      
</span><span class='line'>then                                              
</span><span class='line'>    echo "Squid start success"      
</span><span class='line'>else 
</span><span class='line'>    echo "Squid start failed" 
</span><span class='line'>fi
</span><span class='line'>exit 0 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;将该脚本放置到启动目录，自行启动即可，另外我不是自行启动，因有时候不运行，如自行启动，可将判断的部分删除，因为系统启动，可能看不到脚本提示信息。 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;关于关闭Squid，请使用多次的 squid -k shutdown 命令关闭服务， 同时使用ps -ef |grep squid 判断代理服务是否全部关闭完成。 &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;调试过程如有问题，使用tail -f /var/log/messages 排错也是个不错的办法。  &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;备注： &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;另外，系统究竟可以运行多少个Squid？没有测试，猜测如CPU足够快、内存足够大，应该可以运行很多副本。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb break/watch/catch]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-21T15:49:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://sourceware.org/gdb/current/onlinedocs/gdb"&gt;http://sourceware.org/gdb/current/onlinedocs/gdb&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://blog.csdn.net/yangzhongxuan/article/details/6897968"&gt;gdb break 断点设置（一）&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://blog.csdn.net/yangzhongxuan/article/details/6899186"&gt;gdb watch 断点设置（二）&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://blog.csdn.net/yangzhongxuan/article/details/6901440"&gt;gdb catch 断点设置（三）&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>&lt;a href="http://blog.csdn.net/yangzhongxuan/article/details/6901477"&gt;gdb 断点删除（四）&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;二、断点设置&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;gdb断点分类：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;以设置断点的命令分类：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;breakpoint 可以根据行号、函数、条件生成断点。
</span><span class='line'>watchpoint 监测变量或者表达式的值发生变化时产生断点。
</span><span class='line'>catchpoint 监测信号的产生。例如c++的throw，或者加载库的时候。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gdb中的变量从1开始标号，不同的断点采用变量标号同一管理，可以 用enable、disable等命令管理，同时支持断点范围的操作，比如有些命令接受断点范围作为参数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;1、break及break变种详解：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;相关命令有break，tbreak，rbreak,hbreak，thbreak，后两种是基于硬件的，先不介绍。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;break 与 tbeak&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;break，tbreak可以根据行号、函数、条件生成断点。tbreak设置方法与break相同，只不过tbreak只在断点停一次，过后会自动将断点删除，break需要手动控制断点的删除和使能。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;break 可带如下参数：&lt;br/&gt;
</span><span class='line'>  linenum            本地行号，即list命令可见的行号&lt;br/&gt;
</span><span class='line'>  filename:linenum   制定个文件的行号&lt;br/&gt;
</span><span class='line'>  function           函数，可以是自定义函数也可是库函数，如open&lt;br/&gt;
</span><span class='line'>  filename:function  制定文件中的函数&lt;br/&gt;
</span><span class='line'>  condtion           条件&lt;br/&gt;
</span><span class='line'>  *address           地址，可是函数，变量的地址，此地址可以通过info add命令得到。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;例如：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>break 10    
</span><span class='line'>break test.c:10
</span><span class='line'>break main
</span><span class='line'>break test.c:main
</span><span class='line'>break system
</span><span class='line'>break open
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果想在指定的地址设置断点，比如在main函数的地址出设断点。可用info add main 获得main的地址如0x80484624，然后用break *0x80484624.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;条件断点&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;就是在如上述指定断点的同时指定进入断点的条件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;例如：（假如有int 类型变量 index）
</span><span class='line'>&lt;code&gt;
</span><span class='line'>break 10 if index == 3
</span><span class='line'>tbreak 12 if index == 5
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;rbreak&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rbreak 可以跟一个规则表达式。rbreak + 表达式的用法与grep + 表达式相似。即在所有与表达式匹配的函数入口都设置断点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rbreak list&lt;em&gt;* 即在所有以 list&lt;/em&gt; 为开头字符的函数地方都设置断点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rbreak ^list_ 功能与上同。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;查看断点信息&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    info break [break num ]
</span><span class='line'>info break 可列出所有断点信息，info break 后也可设置要查看的break num如：
</span><span class='line'>info break 1 列出断点号是1的断点信息
</span><span class='line'>
</span><span class='line'>Num        Type                    Disp Enb  Address      What
</span><span class='line'> 1       breakpoint                keep y    &lt;MULTIPLE&gt;
</span><span class='line'>     stop only if i==1
</span><span class='line'>     breakpoint already hit 1 time
</span><span class='line'> 1.1                                    y    0x080486a2 in void foo&lt;int&gt;() at t.cc:8
</span><span class='line'> 1.2                                    y    0x080486ca in void foo&lt;double&gt;() at t.cc:8
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2、watch&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    watch [-l|-location] expr [thread threadnum] [mask maskvalue]
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-l 与 mask没有仔细研究，thread threadnum 是在多线程的程序中限定只有被线程号是threadnum的线程修改值后进入断点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;经常用到的如下命令：
</span><span class='line'>watch &lt;expr&gt;&lt;br/&gt;
</span><span class='line'>为表达式（变量）expr设置一个观察点。变量量表达式值有变化时，马上停住程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表达式可以是一个变量, 例如：watch value_a&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表达式可以是一个地址, 例如：watch &lt;em&gt;(int &lt;/em&gt;)0x12345678 可以检测4个字节的内存是否变化。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表达式可以是一个复杂的语句表达式, 例如：watch a*b + c/d&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;watch 在有些操作系统支持硬件观测点，硬件观测点的运行速度比软件观测点的快。如果系统支持硬件观测的话，当设置观测点是会打印如下信息：&lt;code&gt;Hardware watchpoint num: expr&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果不想用硬件观测点的话可如下设置：&lt;code&gt;set can-use-hw-watchpoints&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;watch两个变种 rwatch，awatch，这两个命令只支持硬件观测点如果系统不支持硬件观测点会答应出不支持这两个命令的信息:，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rwatch &lt;expr&gt;&lt;br/&gt;
</span><span class='line'>当表达式（变量）expr被读时，停住程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;awatch &lt;expr&gt;&lt;br/&gt;
</span><span class='line'>当表达式（变量）的值被读或被写时，停住程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;info watchpoints&lt;br/&gt;
</span><span class='line'>列出当前所设置了的所有观察点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;watch 所设置的断点也可以用控制断点的命令来控制。如 disable、enable、delete等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以为停止点设定运行命令
</span><span class='line'>&lt;code&gt;
</span><span class='line'>commands [bnum]
</span><span class='line'>... command-list ...
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;例如：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>break foo if x&gt;0
</span><span class='line'>commands
</span><span class='line'>printf "x is %d/n",x
</span><span class='line'>continue
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;断点设置在函数foo中，断点条件是x&gt;0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意：watch 设置也是断点，如果调试的时候设置的断点（任何种类的断点）过多的时候，watch断点会被忽略，有时候没有任何提示，这是我在测试的时候发现的，只有把多余的断点删除后才可用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在调试的时候通常用catchpoints来捕获事件，如c++的异常等。捕获点的设置通过catch与tcatch两个命令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tcatch所设置的断点停止一次后自动删除，设置断点的方法与catch相同。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;用法：catch event&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这些event事件如下：</span></code></pre></td></tr></table></div></figure>
    throw
        The throwing of a C++ exception.
    catch
        The catching of a C++ exception.
    exception</p>

<pre><code>exception unhandled
    An exception that was raised but is not handled by the program.
assert
    Ada 语言 assert断言失败时，断点被踩到。
exec
    调用exec时断点被踩到。
syscall
syscall [name | number] ...
    通过系统函数的名称和系统号，来设置捕获点，当所设定的系统调用时，断点被踩到。
    因为经常在linux用c语言，所以主要用到的event是最后四个，其他的没有仔细研究。
</code></pre>

<pre><code>
例如：
</code></pre>

<pre><code>catch syscall open
catch syscall 5
</code></pre>

<pre><code>这两个捕获断点一样。

--------------

断点的删除与断点的设置同样的重要。删除断点的命令有两个: delete, clear

##### delete
用法：  
delete [breakpoints num] [range...]

delete可删除单个断点，也可删除一个断点的集合，这个集合用连续的断点号来描述。

例如：
</code></pre>

<pre><code>delete 5
delete 1-10
</code></pre>

<pre><code>
##### clear
用法:  
clear  
删除所在行的多有断点。

clear location  
clear 删除所选定的环境中所有的断点  
clear location location描述具体的断点。  

例如：
</code></pre>

<pre><code>clear list_insert         //删除函数的所有断点
clear list.c:list_delet   //删除文件：函数的所有断点
clear 12                  //删除行号的所有断点
clear list.c:12           //删除文件：行号的所有断点
</code></pre>

<p>```</p>

<p>clear 删除断点是基于行的，不是把所有的断点都删除。</p>
]]></content>
  </entry>
  
</feed>
