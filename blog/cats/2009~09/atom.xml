<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2009~09 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2009~09/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-24T17:14:37+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java 常用数据结构]]></title>
    <link href="http://abcdxyzk.github.io/blog/2009/09/20/lang-java-3/"/>
    <updated>2009-09-20T20:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2009/09/20/lang-java-3</id>
    <content type="html"><![CDATA[<h4>Java class 的排序</h4>

<pre><code>    import java.util.*;

    class Node implements Comparable
    {
        int x,y;
        public int compareTo(Object obj){
            Node oo=(Node)obj;
            if(oo.x &lt; this.x || oo.x == this.x &amp;&amp; oo.y &lt;this.y)return 1;
            return -1;
        }
    }

    public class Main {
        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(System.in);
            Node a[]=new Node[11];
            int i,j,k,l;
            for(i=1;i&lt;=10;i++) {
                a[i]=new Node();
                a[i].x=Math.abs(5-i); a[i].y=10-Math.abs(7-i);
            }
            Arrays.sort(a, 1, 11);
            for(i=1;i&lt;=10;i++)System.out.println(a[i].x+" "+a[i].y);
        }
    }
</code></pre>

<h4>Java Vector 的使用</h4>

<pre><code>    import java.util.*;

    public class Main {
        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(System.in);
            Vector V=new Vector();
            V.add(1); V.add(1.234); V.add('a'); V.add("abcd");
            System.out.println((Integer)V.get(0));
            System.out.println((Double)V.get(1));
            System.out.println((Character)V.get(2));
            System.out.println((String)V.get(3));
        }
    }
</code></pre>

<h4>Java 队列的使用</h4>

<pre><code>    import java.util.*;

    public class Main {
        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(System.in);
            Queue Q=new LinkedList&lt;Integer&gt;();
            int i,j,k,l;
            while(!Q.isEmpty())Q.poll(); // 清空队列
            for(i=1;i&lt;=10;i++)Q.offer(i);
            for(i=1;i&lt;=10;i++){
                k=(Integer)Q.poll();
                System.out.println(k);
            }
        }
    }
</code></pre>

<h4>Java 优先队列的使用</h4>

<pre><code>    import java.util.*;

    public class Main {
        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(System.in);
            PriorityQueue&lt;Integer&gt; Q = new PriorityQueue&lt;Integer&gt;(30,
                new Comparator&lt;Integer&gt;(){
                    public int compare(Integer aa, Integer bb) {
                        if(aa &lt; bb)return 1;
                        return -1;
                    }
                });
            int i,j,k,l;

            Q.clear();
            for(i=1;i&lt;=10;i++)Q.offer(i);
            while(!Q.isEmpty()) {
                k=(Integer)Q.poll();
                System.out.println(k);
            }
        }
    }
</code></pre>

<p>Java Collection 的使用
```
    import java.util.*;</p>

<pre><code>public class Main {
    public static void main(String[] args) throws Exception {
        Scanner cin = new Scanner(System.in);
        Collection set=new HashSet();
        Collection set1=new ArrayList();
        Collection set2=new LinkedList();

        ArrayList LI=new ArrayList();
        LinkedList LD=new LinkedList();

        int i,j,k,l;

        set.clear();            // set1 set2 LI LD 用法类似
        set.add(1); set.add(1.234); set.add('a'); set.add("abcd");
        System.out.println(set.toString());
        set.remove(1); set.remove(3);
        System.out.println(set.toString());
    }
}
</code></pre>

<pre><code>Java HashMap（很好用） TreeMap
</code></pre>

<pre><code>import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner cin = new Scanner(System.in);
        Map map=new HashMap();
        int i,j,k,l;
        map.clear();
        for(i=1;i&lt;=10;i++)map.put(Math.pow(10,i), i);
        for(i=1;i&lt;=10;i++)System.out.println((Integer)map.get(Math.pow(10,i)));
        System.out.println();

        Map tree=new TreeMap();
        tree.clear();
        for(i=1;i&lt;=10;i++)tree.put(i,10-i);
        for(i=1;i&lt;=10;i++)
        {
            k=(Integer)tree.get(i);
            System.out.println(k);
        }
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java I/O]]></title>
    <link href="http://abcdxyzk.github.io/blog/2009/09/20/lang-java-2/"/>
    <updated>2009-09-20T19:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2009/09/20/lang-java-2</id>
    <content type="html"><![CDATA[<h4>Java 最简单输入就是用 Scanner 类 但是很慢</h4>

<pre><code>    import java.util.*;
    import java.io.*;

    public class Main {
        public static void main(String[] args) {
            Scanner cin = new Scanner(System.in);
            int a,b;
            while(cin.hasNext())
            {
                a=cin.nextInt(); b=cin.nextInt();
                System.out.println(a+b);
            }
        }
    }
</code></pre>

<h4>输入用 StreamTokenizer ，输出用 PrintWriter 就 很快</h4>

<pre><code>    import java.io.*;public class Main
    {
        public static void main(String[] args) throws IOException
        {
            StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
            PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
            int a, b;
            while(in.nextToken() != StreamTokenizer.TT_EOF)
            {
                a = (int)in.nval;
                in.nextToken();
                b = (int)in.nval;
                out.println(a + b);
            }
            out.flush();
        }
    }
</code></pre>

<h4>但是 StreamTokenizer 有所局限， 用 StringTokenizer 能很好解决</h4>

<pre><code>    import java.util.*;
    import java.io.*;
    import java.math.*;public class Main {
        public static void main(String[] args) throws Exception {
            BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
            StringTokenizer st;
            int a,b;
            BigInteger c,d;
            String line;
            while((line=in.readLine())!=null)
            {
                st=new StringTokenizer(line);
                a=Integer.parseInt(st.nextToken());
                b=Integer.parseInt(st.nextToken());
                System.out.println(a+b);

                line=in.readLine();
                st=new StringTokenizer(line);
                c=new BigInteger(st.nextToken().trim());
                d=new BigInteger(st.nextToken().trim());
                System.out.println(c.add(d));
            }
        }
    }
</code></pre>

<h4>Java 还可以 直接用 BufferedReader 类来输入</h4>

<pre><code>    import java.util.*;
    import java.io.*;
    import java.math.*;public class Main {
        public static void main(String[] args) throws Exception {
            BufferedReader read=new BufferedReader(new InputStreamReader(System.in));
            int a,b,rr,t;
            while(true)
            {
                while((rr=read.read())==10 || rr==13 || rr==32);
                if(rr&lt;0)break;
                if(rr=='-'){ t=1; a=0; } else { a=rr-48; t=0; }
                while((rr=read.read())!=32 &amp;&amp; rr!=13 &amp;&amp; rr!=10)a=a*10+rr-48;
                if(t==1)a=-a;
                while((rr=read.read())==10 || rr==13 || rr==32);
                if(rr=='-'){ t=1; b=0; } else { b=rr-48; t=0; }
                while((rr=read.read())!=10 &amp;&amp; rr!=13 &amp;&amp; rr!=10)b=b*10+rr-48;
                if(t==1)b=-b;
                System.out.println(a + b);
            }
        }
    }
</code></pre>

<h4>Java 文件输入 输出</h4>

<pre><code>    import java.util.*;
    import java.io.*;public class Main {
        public static void main(String[] args) throws Exception {
            Scanner cin = new Scanner(new FileInputStream("in.txt"));
            PrintWriter out=new PrintWriter(new OutputStreamWriter(new FileOutputStream("out.txt")));
            int a,b;
            while(cin.hasNext())
            {
                a=cin.nextInt(); b=cin.nextInt();
                out.println(a + b);
            }
            out.flush();
        }
    } 
</code></pre>

<h4>Java 向文件中加入数据</h4>

<pre><code>PrintWriter out=new PrintWriter(new OutputStreamWriter(new FileOutputStream("out.txt")), false);
</code></pre>
]]></content>
  </entry>
  
</feed>
