<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~09 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~09/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-22T11:40:38+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内核tcp的定时器管理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/09/27/kernel-net-tcp-timer/"/>
    <updated>2013-09-27T16:11:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/09/27/kernel-net-tcp-timer</id>
    <content type="html"><![CDATA[<h5>在内核中tcp协议栈有6种类型的定时器：</h5>

<pre><code>1 重传定时器。
2 delayed ack定时器
3 零窗口探测定时器
上面三种定时器都是作为tcp状态机的一部分来实现的。
4 keep-alive 定时器 主要是管理established状态的连接。
5 time_wait定时器 主要是用来客户端关闭时的time_wait状态用到。
6 syn-ack定时器(主要是用在listening socket) 管理新的连接请求时所用到。
</code></pre>

<h5>而在内核中，tcp协议栈管理定时器主要有下面4个函数：</h5>

<pre><code>inet_csk_reset_xmit_timer   这个函数是用来重启定时器
inet_csk_clear_xmit_timer   这个函数用来删除定时器。
上面两个函数都是针对状态机里面的定时器。
tcp_set_keepalive   这个函数是用来管理keepalive 定时器的接口。
tcp_synack_timer    这个函数是用来管理syn_ack定时器的接口。
</code></pre>

<h5>先来看定时器的初始化。</h5>

<p>首先是在tcp_v4_init_sock中对定时器的初始化，它会调用tcp_init_xmit_timers，我们就先来看这个函数：
<code>
    void tcp_init_xmit_timers(struct sock *sk)
    {
        inet_csk_init_xmit_timers(sk, &amp;tcp_write_timer, &amp;tcp_delack_timer, &amp;tcp_keepalive_timer);
    }
</code>
可以看到这个函数很简单，就是调用inet_csk_init_xmit_timers,然后把3个定时器的回掉函数传递进去，下面我们来看inet_csk_init_xmit_timers。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void inet_csk_init_xmit_timers(struct sock &lt;em&gt;sk,
</span><span class='line'>                    void (&lt;/em&gt;retransmit_handler)(unsigned long),
</span><span class='line'>                    void (&lt;em&gt;delack_handler)(unsigned long),
</span><span class='line'>                    void (&lt;/em&gt;keepalive_handler)(unsigned long))
</span><span class='line'>{
</span><span class='line'>    struct inet_connection_sock *icsk = inet_csk(sk);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    //安装定时器，设置定时器的回掉函数。
</span><span class='line'>setup_timer(&amp;icsk-&gt;icsk_retransmit_timer, retransmit_handler, (unsigned long)sk);
</span><span class='line'>setup_timer(&amp;icsk-&gt;icsk_delack_timer, delack_handler, (unsigned long)sk);
</span><span class='line'>setup_timer(&amp;sk-&gt;sk_timer, keepalive_handler, (unsigned long)sk);
</span><span class='line'>icsk-&gt;icsk_pending = icsk-&gt;icsk_ack.pending = 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我 们可以看到icsk-&gt;icsk_retransmit_timer定时器，也就是重传定时器的回调函数是tcp_write_timer,而 icsk-&gt;icsk_delack_timer定时器也就是delayed-ack 定时器的回调函数是tcp_delack_timer,最后sk-&gt;sk_timer也就是keepalive定时器的回掉函数是 tcp_keepalive_timer.  
</span><span class='line'>这里还有一个要注意的，tcp_write_timer还会处理0窗口定时器。  
</span><span class='line'>这里有关内核定时器的一些基础的东西我就不介绍了，想了解的可以去看下ldd第三版。  
</span><span class='line'>接下来我们就来一个个的分析这6个定时器，首先是重传定时器。  
</span><span class='line'>我们知道4层最终调用tcp_xmit_write来讲数据发送到3层，并且tcp是字节流的，因此每次他总是发送一段数据到3层，而每次当它发送完毕(返回正确),则它就会启动重传定时器，我们来看代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
</span><span class='line'>          int push_one, gfp_t gfp)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>struct sk_buff *skb;
</span><span class='line'>unsigned int tso_segs, sent_pkts;
</span><span class='line'>int cwnd_quota;
</span><span class='line'>int result;
</span><span class='line'>
</span><span class='line'>.............................................
</span><span class='line'>
</span><span class='line'>while ((skb = tcp_send_head(sk))) {
</span><span class='line'>..................................................
</span><span class='line'>
</span><span class='line'>    //可以看到只有当传输成功，我们才会走到下面的函数。
</span><span class='line'>    if (unlikely(tcp_transmit_skb(sk, skb, 1, gfp)))
</span><span class='line'>        break;
</span><span class='line'>
</span><span class='line'>    /* Advance the send_head.  This one is sent out.
</span><span class='line'>     * This call will increment packets_out.
</span><span class='line'>     */
</span><span class='line'>    //最终在这个函数中启动重传定时器。
</span><span class='line'>    tcp_event_new_data_sent(sk, skb);
</span><span class='line'>
</span><span class='line'>    tcp_minshall_update(tp, mss_now, skb);
</span><span class='line'>    sent_pkts++;
</span><span class='line'>
</span><span class='line'>    if (push_one)
</span><span class='line'>        break;
</span><span class='line'>}
</span><span class='line'>...........................
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;现在我们来看tcp_event_new_data_sent,如何启动定时器的.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_event_new_data_sent(struct sock *sk, struct sk_buff *skb)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>unsigned int prior_packets = tp-&gt;packets_out;
</span><span class='line'>
</span><span class='line'>tcp_advance_send_head(sk, skb);
</span><span class='line'>tp-&gt;snd_nxt = TCP_SKB_CB(skb)-&gt;end_seq;
</span><span class='line'>
</span><span class='line'>/* Don't override Nagle indefinately with F-RTO */
</span><span class='line'>if (tp-&gt;frto_counter == 2)
</span><span class='line'>    tp-&gt;frto_counter = 3;
</span><span class='line'>//关键在这里.
</span><span class='line'>tp-&gt;packets_out += tcp_skb_pcount(skb);
</span><span class='line'>if (!prior_packets)
</span><span class='line'>    inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS, inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;可以看到只有当prior_packets为0时才会重启定时器,而prior_packets则是发送未确认的段的个数,也就是说如果发送了很多段,如果前面的段没有确认,那么后面发送的时候不会重启这个定时器.  
</span><span class='line'>我们要知道，定时器的间隔是通过rtt来得到的，具体的算法，可以看下tcp/ip详解。  
</span><span class='line'>当 启动了重传定时器，我们就会等待ack的到来，如果超时还没到来，那么就调用重传定时器的回调函数，否则最终会调用tcp_rearm_rto来删除或者 重启定时器，这个函数是在tcp_ack()-&gt;tcp_clean_rtx_queue()中被调用的。tcp_ack是专门用来处理ack。  
</span><span class='line'>这个函数很简单，就是通过判断packets_out，这个值表示当前还未确认的段的个数。然后来进行相关操作。  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_rearm_rto(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>
</span><span class='line'>//为0说明所有的传输的段都已经acked。此时remove定时器。否则重启定时器。
</span><span class='line'>if (!tp-&gt;packets_out) {
</span><span class='line'>    inet_csk_clear_xmit_timer(sk, ICSK_TIME_RETRANS);
</span><span class='line'>} else {
</span><span class='line'>    inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
</span><span class='line'>                  inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  接下来来看tcp_write_timer的实现。这个函数主要是通过icsk-&gt;icsk_pending来判断是那个定时器导致超时，这里只有两 种，一种是ICSK_TIME_RETRANS，也就是重传定时器，另一种是ICSK_TIME_PROBE0也就是0窗口定时器。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define ICSK_TIME_RETRANS   1   /* Retransmit timer */
</span><span class='line'>#define ICSK_TIME_PROBE0    3   /* Zero window probe timer */
</span><span class='line'>static void tcp_write_timer(unsigned long data)
</span><span class='line'>{
</span><span class='line'>struct sock *sk = (struct sock *)data;
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>int event;
</span><span class='line'>
</span><span class='line'>//首先加锁。
</span><span class='line'>bh_lock_sock(sk);
</span><span class='line'>//如果是进程空间则什么也不做。
</span><span class='line'>if (sock_owned_by_user(sk)) {
</span><span class='line'>    /* Try again later */
</span><span class='line'>    sk_reset_timer(sk, &amp;icsk-&gt;icsk_retransmit_timer, jiffies + (HZ / 20));
</span><span class='line'>    goto out_unlock;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//如果状态为close或者icsk_pending为空，则什么也不做。
</span><span class='line'>if (sk-&gt;sk_state == TCP_CLOSE || !icsk-&gt;icsk_pending)
</span><span class='line'>    goto out;
</span><span class='line'>//如果超时时间已经过了，则重启定时器。
</span><span class='line'>
</span><span class='line'>if (time_after(icsk-&gt;icsk_timeout, jiffies)) {
</span><span class='line'>    sk_reset_timer(sk, &amp;icsk-&gt;icsk_retransmit_timer, icsk-&gt;icsk_timeout);
</span><span class='line'>    goto out;
</span><span class='line'>}
</span><span class='line'>//取出定时器类型。
</span><span class='line'>event = icsk-&gt;icsk_pending;
</span><span class='line'>icsk-&gt;icsk_pending = 0;
</span><span class='line'>
</span><span class='line'>//通过判断event来确定进入那个函数进行处理。
</span><span class='line'>switch (event) {
</span><span class='line'>case ICSK_TIME_RETRANS:
</span><span class='line'>    tcp_retransmit_timer(sk);
</span><span class='line'>    break;
</span><span class='line'>case ICSK_TIME_PROBE0:
</span><span class='line'>    tcp_probe_timer(sk);
</span><span class='line'>    break;
</span><span class='line'>}
</span><span class='line'>TCP_CHECK_TIMER(sk);
</span><span class='line'>
</span><span class='line'>out:
</span><span class='line'>sk_mem_reclaim(sk);
</span><span class='line'>out_unlock:
</span><span class='line'>bh_unlock_sock(sk);
</span><span class='line'>sock_put(sk);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我们这里只看重传定时器，0窗口定时器后面紧接着会介绍。  
</span><span class='line'>tcp_retransmit_timer,这个函数用来处理数据段的重传。  
</span><span class='line'>这里要注意，重传的时候为了防止确认二义性，使用karn算法，也就是定时器退避策略。下面的代码最后部分会修改定时器的值，这里是增加一倍。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_retransmit_timer(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>
</span><span class='line'>//如果没有需要确认的段，则什么也不做。
</span><span class='line'>if (!tp-&gt;packets_out)
</span><span class='line'>    goto out;
</span><span class='line'>
</span><span class='line'>WARN_ON(tcp_write_queue_empty(sk));
</span><span class='line'>
</span><span class='line'>/**首先进行一些合法性判断，其中:
</span><span class='line'> * snd_wnd为窗口大小。
</span><span class='line'> * sock_flag用来判断sock的状态。
</span><span class='line'> * 最后一个判断是当前的连接状态不能处于syn_sent和syn_recv状态,也就是连接还未建
</span><span class='line'> * 立状态.
</span><span class='line'>if (!tp-&gt;snd_wnd &amp;&amp; !sock_flag(sk, SOCK_DEAD) &amp;&amp;
</span><span class='line'>    !((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV))) {
</span><span class='line'>    //tcp_time_stamp也就是jifes，而rcv_tstamp表示最后一个ack接收的时间，也就是最后一次对端确认的时间。因此这两个时间之差不能大于tcp_rto_max,因为tcp_rto_max为我们重传定时器的间隔时间的最大值。
</span><span class='line'>    if (tcp_time_stamp - tp-&gt;rcv_tstamp &gt; TCP_RTO_MAX) {
</span><span class='line'>        tcp_write_err(sk);
</span><span class='line'>        goto out;
</span><span class='line'>    }
</span><span class='line'>    //这个函数用来进入loss状态，也就是进行一些拥塞以及流量的控制。
</span><span class='line'>    tcp_enter_loss(sk, 0);
</span><span class='line'>    //现在开始重传skb。
</span><span class='line'>    tcp_retransmit_skb(sk, tcp_write_queue_head(sk));
</span><span class='line'>    __sk_dst_reset(sk);
</span><span class='line'>    //然后重启定时器，继续等待ack的到来。
</span><span class='line'>    goto out_reset_timer;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//程序到达这里说明上面的校验失败，因此下面这个函数用来判断我们重传需要的次数。如果超过了重传次数，直接跳转到out。
</span><span class='line'>if (tcp_write_timeout(sk))
</span><span class='line'>    goto out;
</span><span class='line'>
</span><span class='line'>//到达这里说明我们重传的次数还没到。icsk-&gt;icsk_retransmits表示重传的次数。
</span><span class='line'>if (icsk-&gt;icsk_retransmits == 0) {
</span><span class='line'>    //这里其实也就是收集一些统计信息。
</span><span class='line'>    int mib_idx;
</span><span class='line'>
</span><span class='line'>    if (icsk-&gt;icsk_ca_state == TCP_CA_Disorder) {
</span><span class='line'>        if (tcp_is_sack(tp))
</span><span class='line'>            mib_idx = LINUX_MIB_TCPSACKFAILURES;
</span><span class='line'>        else
</span><span class='line'>            mib_idx = LINUX_MIB_TCPRENOFAILURES;
</span><span class='line'>    } else if (icsk-&gt;icsk_ca_state == TCP_CA_Recovery) {
</span><span class='line'>        if (tcp_is_sack(tp))
</span><span class='line'>            mib_idx = LINUX_MIB_TCPSACKRECOVERYFAIL;
</span><span class='line'>        else
</span><span class='line'>            mib_idx = LINUX_MIB_TCPRENORECOVERYFAIL;
</span><span class='line'>    } else if (icsk-&gt;icsk_ca_state == TCP_CA_Loss) {
</span><span class='line'>        mib_idx = LINUX_MIB_TCPLOSSFAILURES;
</span><span class='line'>    } else {
</span><span class='line'>        mib_idx = LINUX_MIB_TCPTIMEOUTS;
</span><span class='line'>    }
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), mib_idx);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//是否使用f-rto算法。
</span><span class='line'>if (tcp_use_frto(sk)) {
</span><span class='line'>    tcp_enter_frto(sk);
</span><span class='line'>} else {
</span><span class='line'>    //否则处理sack.
</span><span class='line'>    tcp_enter_loss(sk, 0);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 再次尝试重传队列的第一个段。
</span><span class='line'>if (tcp_retransmit_skb(sk, tcp_write_queue_head(sk)) &gt; 0) {
</span><span class='line'>    //重传失败。
</span><span class='line'>    if (!icsk-&gt;icsk_retransmits)
</span><span class='line'>        icsk-&gt;icsk_retransmits = 1;
</span><span class='line'>    inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
</span><span class='line'>                  min(icsk-&gt;icsk_rto, TCP_RESOURCE_PROBE_INTERVAL),
</span><span class='line'>                  TCP_RTO_MAX);
</span><span class='line'>    goto out;
</span><span class='line'>}
</span><span class='line'>//icsk-&gt;icsk_backoff主要用在零窗口定时器。
</span><span class='line'>icsk-&gt;icsk_backoff++;
</span><span class='line'>//icsk_retransmits也就是重试次数。
</span><span class='line'>icsk-&gt;icsk_retransmits++;
</span><span class='line'>
</span><span class='line'>out_reset_timer:
</span><span class='line'>//计算rto，并重启定时器，这里使用karn算法，也就是下次超时时间增加一倍/
</span><span class='line'>icsk-&gt;icsk_rto = min(icsk-&gt;icsk_rto &lt;&lt; 1, TCP_RTO_MAX);
</span><span class='line'>//重启定时器，可以看到超时时间就是我们上面的icsk_rto.
</span><span class='line'>inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS, icsk-&gt;icsk_rto, TCP_RTO_MAX);
</span><span class='line'>if (icsk-&gt;icsk_retransmits &gt; sysctl_tcp_retries1)
</span><span class='line'>    __sk_dst_reset(sk);
</span><span class='line'>
</span><span class='line'>out:;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;下面我们来看tcp_write_timeout，它用来判断重传次数是否已经到了。这里主要分为两个分支，一个是状态为syn_sent或者syn_recv状态，一个是另外的状态。而这里系统设置的重传次数一共有4种。  
</span><span class='line'>1 sysctl_tcp_syn_retries，它表示syn分节的重传次数。  
</span><span class='line'>2 sysctl_tcp_retries1 它表示的是最大的重试次数，当超过了这个值，我们就需要检测路由表了。  
</span><span class='line'>3 sysctl_tcp_retries2 这个值也是表示重试最大次数，只不过这个值一般要比上面的值大。和上面那个不同的是，当重试次数超过这个值，我们就必须放弃重试了。  
</span><span class='line'>4 sysctl_tcp_orphan_retries 主要是针对孤立的socket(也就是已经从进程上下文中删除了，可是还有一些清理工作没有完成).对于这种socket，我们重试的最大的次数就是它。  
</span><span class='line'>下面来看代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_write_timeout(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>//retry_untry表示我们需要重传的最大次数。
</span><span class='line'>int retry_until;
</span><span class='line'>
</span><span class='line'>//判断socket状态。
</span><span class='line'>if ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
</span><span class='line'>    if (icsk-&gt;icsk_retransmits)
</span><span class='line'>        dst_negative_advice(&amp;sk-&gt;sk_dst_cache);
</span><span class='line'>    //设置重传最大值
</span><span class='line'>    retry_until = icsk-&gt;icsk_syn_retries ? : sysctl_tcp_syn_retries;
</span><span class='line'>} else {
</span><span class='line'>    //是否需要检测路由表。
</span><span class='line'>    if (icsk-&gt;icsk_retransmits &gt;= sysctl_tcp_retries1) {
</span><span class='line'>        /* Black hole detection */
</span><span class='line'>        tcp_mtu_probing(icsk, sk);
</span><span class='line'>
</span><span class='line'>        dst_negative_advice(&amp;sk-&gt;sk_dst_cache);
</span><span class='line'>    }
</span><span class='line'>    //设置重传最大次数为sysctl_tcp_retries2
</span><span class='line'>    retry_until = sysctl_tcp_retries2;
</span><span class='line'>    if (sock_flag(sk, SOCK_DEAD)) {
</span><span class='line'>        //表示是一个孤立的socket。
</span><span class='line'>        const int alive = (icsk-&gt;icsk_rto &lt; TCP_RTO_MAX);
</span><span class='line'>
</span><span class='line'>        //从tcp_orphan_retries(这个函数中会通过sysctl_tcp_orphan_retries来进行计算)中取得重传最大次数。
</span><span class='line'>        retry_until = tcp_orphan_retries(sk, alive);
</span><span class='line'>
</span><span class='line'>        if (tcp_out_of_resources(sk, alive || icsk-&gt;icsk_retransmits &lt; retry_until))
</span><span class='line'>            return 1;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//最终进行判断，如果重传次数已到则返回1,否则为0.
</span><span class='line'>if (icsk-&gt;icsk_retransmits &gt;= retry_until) {
</span><span class='line'>    /* Has it gone just too far? */
</span><span class='line'>    tcp_write_err(sk);
</span><span class='line'>    return 1;
</span><span class='line'>}
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;下面来介绍下tcp_enter_loss，这个函数主要用来标记丢失的段(也就是没有acked的段),然后通过执行slow start来降低传输速率.  
</span><span class='line'>有关slow start以及Congestion avoidance算法描述可以看rfc2001:  
</span><span class='line'>http://www.faqs.org/rfcs/rfc2001.html
</span><span class='line'>
</span><span class='line'>下面4个算法主要是用来对拥塞进行控制的，这四个算法其实都是彼此相连的。slow start和Congestion avoidance使用了相同的机制，他们都涉及到了拥塞窗口的定义。其中拥塞窗口限制着传输的长度，它的大小根据拥塞程度上升或者下降。  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Slow start
</span><span class='line'>Congestion avoidance
</span><span class='line'>Fast re-transmit
</span><span class='line'>Fast recovery
</span><span class='line'>&lt;code&gt;
</span><span class='line'>然后下面主要是介绍了slow start和Congestion avoidance的一些实现细节。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>CWND - Sender side limit
</span><span class='line'>RWND - Receiver side limit
</span><span class='line'>Slow start threshold ( SSTHRESH ) - Used to determine whether slow start is used or congestion avoidance
</span><span class='line'>When starting, probe slowly - IW &lt;= 2 * SMSS
</span><span class='line'>Initial size of SSTHRESH can be arbitrarily high, as high as the RWND
</span><span class='line'>Use slow start when SSTHRESH &gt; CWND. Else, use Congestion avoidance
</span><span class='line'>Slow start - CWND is increased by an amount less than or equal to the SMSS for every ACK
</span><span class='line'>Congestion avoidance - CWND += SMSS&lt;em&gt;SMSS/CWND
</span><span class='line'>When loss is detected - SSTHRESH = max( FlightSize/2, 2&lt;/em&gt;SMSS )</span></code></pre></td></tr></table></div></figure>
这里要注意在slow start中，窗口的大小是指数级的增长的。并且当cwnd(拥塞窗口)小于等于ssthresh，就是slow start模式，否则就执行Congestion avoidance。</p>

<h5>现在我们来看tcp_enter_loss的实现。</h5>

<p>首先来介绍下下面要用到的几个关键域的含义。<br/>
1 icsk->icsk_ca_state 这个域表示拥塞控制的状态。<br/>
2 tp->snd_una 这个域表示tcp滑动窗口中的发送未确认的第一个字节的序列号。<br/>
3 tp->prior_ssthresh 这个域表示前一个snd_ssthresh得大小，也就是说每次改变snd_ssthresh前都要保存老的snd_ssthresh到这个域。<br/>
4 tp->snd_ssthresh  slow start开始时的threshold大小<br/>
5 tp->snd_cwnd_cnt 这个域表示拥塞窗口的大小。<br/>
6 TCP_SKB_CB(skb)->sacked tcp数据中的sack标记。<br/>
7 tp->high_seq 拥塞开始时，snd_nxt的大小。<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void tcp_enter_loss(struct sock &lt;em&gt;sk, int how)
</span><span class='line'>{
</span><span class='line'>    const struct inet_connection_sock &lt;/em&gt;icsk = inet_csk(sk);
</span><span class='line'>    struct tcp_sock &lt;em&gt;tp = tcp_sk(sk);
</span><span class='line'>    struct sk_buff &lt;/em&gt;skb;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* 1 拥塞控制状态小于TCP_CA_Disorder
</span><span class='line'> * 2 发送未确认的序列号等于拥塞开始时的下一个将要发送的序列号
</span><span class='line'> * 3 状态为TCP_CA_Loss，并且还未重新传输过。
</span><span class='line'> * 如果有一个满足说明有数据丢失,因此降低threshold。
</span><span class='line'> */
</span><span class='line'>if (icsk-&gt;icsk_ca_state &lt;= TCP_CA_Disorder || tp-&gt;snd_una == tp-&gt;high_seq ||
</span><span class='line'>    (icsk-&gt;icsk_ca_state == TCP_CA_Loss &amp;&amp; !icsk-&gt;icsk_retransmits)) {
</span><span class='line'>    //保存老的snd_ssthresh。
</span><span class='line'>    tp-&gt;prior_ssthresh = tcp_current_ssthresh(sk);
</span><span class='line'>    //减小snd_ssthresh
</span><span class='line'>    tp-&gt;snd_ssthresh = icsk-&gt;icsk_ca_ops-&gt;ssthresh(sk);
</span><span class='line'>    //设置拥塞状态。
</span><span class='line'>    tcp_ca_event(sk, CA_EVENT_LOSS);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//设置拥塞窗口大小
</span><span class='line'>tp-&gt;snd_cwnd    = 1;
</span><span class='line'>tp-&gt;snd_cwnd_cnt   = 0;
</span><span class='line'>//设置时间
</span><span class='line'>tp-&gt;snd_cwnd_stamp = tcp_time_stamp;
</span><span class='line'>
</span><span class='line'>tp-&gt;bytes_acked = 0;
</span><span class='line'>//清空所有相关的计数器。
</span><span class='line'>tcp_clear_retrans_partial(tp);
</span><span class='line'>
</span><span class='line'>if (tcp_is_reno(tp))
</span><span class='line'>    tcp_reset_reno_sack(tp);
</span><span class='line'>
</span><span class='line'>if (!how) {
</span><span class='line'>    /* Push undo marker, if it was plain RTO and nothing
</span><span class='line'>     * was retransmitted. */
</span><span class='line'>    tp-&gt;undo_marker = tp-&gt;snd_una;
</span><span class='line'>} else {
</span><span class='line'>    tp-&gt;sacked_out = 0;
</span><span class='line'>    tp-&gt;fackets_out = 0;
</span><span class='line'>}
</span><span class='line'>tcp_clear_all_retrans_hints(tp);
</span><span class='line'>
</span><span class='line'>//遍历sock的write队列。
</span><span class='line'>tcp_for_write_queue(skb, sk) {
</span><span class='line'>    if (skb == tcp_send_head(sk))
</span><span class='line'>        break;
</span><span class='line'>    //判断sack段。
</span><span class='line'>    if (TCP_SKB_CB(skb)-&gt;sacked &amp; TCPCB_RETRANS)
</span><span class='line'>        tp-&gt;undo_marker = 0;
</span><span class='line'>    TCP_SKB_CB(skb)-&gt;sacked &amp;= (~TCPCB_TAGBITS)|TCPCB_SACKED_ACKED;
</span><span class='line'>
</span><span class='line'>    //如果how为1,则说明不管sack段，此时标记所有的段为丢失(sack的意思去看tcp/ip详解).
</span><span class='line'>    if (!(TCP_SKB_CB(skb)-&gt;sacked&amp;TCPCB_SACKED_ACKED) || how) {
</span><span class='line'>        //设置sack段。
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;sacked &amp;= ~TCPCB_SACKED_ACKED;
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;sacked |= TCPCB_LOST;
</span><span class='line'>        //update 相关的域。
</span><span class='line'>        tp-&gt;lost_out += tcp_skb_pcount(skb);
</span><span class='line'>        tp-&gt;retransmit_high = TCP_SKB_CB(skb)-&gt;end_seq;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>tcp_verify_left_out(tp);
</span><span class='line'>//设置当前的reordering的长度
</span><span class='line'>tp-&gt;reordering = min_t(unsigned int, tp-&gt;reordering,
</span><span class='line'>               sysctl_tcp_reordering);
</span><span class='line'>//设置拥塞状态。
</span><span class='line'>tcp_set_ca_state(sk, TCP_CA_Loss);
</span><span class='line'>tp-&gt;high_seq = tp-&gt;snd_nxt;
</span><span class='line'>//由于我们修改了拥塞窗口，因此设置ecn状态。
</span><span class='line'>TCP_ECN_queue_cwr(tp);
</span><span class='line'>/* Abort F-RTO algorithm if one is in progress */
</span><span class='line'>tp-&gt;frto_counter = 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;接 下来来看零窗口探测定时器。至于为什么会出现零窗口，这里就不阐述了，详细的可以去看tcp/ip详解。我们知道当0窗口之后,客户机会等待服务器端的窗 口打开报文，可是由于ip是不可靠的，有可能这个报文会丢失，因此就需要客户机发送一个探测段，用来提醒服务器及时汇报当前的窗口大小。这里我们知道当对 端接收窗口关闭后，我们这边的发送窗口也会关闭，此时不能发送任何一般的数据，除了探测段。  
</span><span class='line'>在内核中是通过tcp_ack_probe来控制零窗口的定时器的。也就是说接收到对端的窗口报告数据后，会进入这个函数。我们来看实现：  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_ack_probe(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>const struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//首先判断是否对端的接收窗口是否已经有空间。
</span><span class='line'>if (!after(TCP_SKB_CB(tcp_send_head(sk))-&gt;end_seq, tcp_wnd_end(tp))) {
</span><span class='line'>    //如果有空间则删除零窗口探测定时器。
</span><span class='line'>    icsk-&gt;icsk_backoff = 0;
</span><span class='line'>    inet_csk_clear_xmit_timer(sk, ICSK_TIME_PROBE0);
</span><span class='line'>    /* Socket must be waked up by subsequent tcp_data_snd_check().
</span><span class='line'>     * This function is not for random using!
</span><span class='line'>     */
</span><span class='line'>} else {
</span><span class='line'>    //否则启动定时器。
</span><span class='line'>    inet_csk_reset_xmit_timer(sk, ICSK_TIME_PROBE0,
</span><span class='line'>                  min(icsk-&gt;icsk_rto &lt;&lt; icsk-&gt;icsk_backoff, TCP_RTO_MAX),
</span><span class='line'>                  TCP_RTO_MAX);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我们知道零窗口定时器和重传的定时器是一个定时器，只不过在回调函数中，进行event判断，从而进入不同的处理。而它调用的是tcp_probe_timer函数。  
</span><span class='line'>这个函数主要就是用来发送探测包，我们来看它的实现：  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_probe_timer(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>int max_probes;
</span><span class='line'>/* 1 tp-&gt;packets_out不为0说明，当定时器被安装之后，对端的接收窗口已经被打开。这* 时就不需要传输探测包。
</span><span class='line'> * 2 tcp_send_head用来检测是否有新的段被传输。
</span><span class='line'> * 如果上面有一个满足，则不需要发送探测包，并直接返回。
</span><span class='line'> */
</span><span class='line'>if (tp-&gt;packets_out || !tcp_send_head(sk)) {
</span><span class='line'>    icsk-&gt;icsk_probes_out = 0;
</span><span class='line'>    return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//设置最大的重试次数。
</span><span class='line'>max_probes = sysctl_tcp_retries2;
</span><span class='line'>
</span><span class='line'>//这里的处理和上面的tcp_write_timeout很类似。
</span><span class='line'>if (sock_flag(sk, SOCK_DEAD)) {
</span><span class='line'>    const int alive = ((icsk-&gt;icsk_rto &lt;&lt; icsk-&gt;icsk_backoff) &lt; TCP_RTO_MAX);
</span><span class='line'>
</span><span class='line'>    max_probes = tcp_orphan_retries(sk, alive);
</span><span class='line'>
</span><span class='line'>    if (tcp_out_of_resources(sk, alive || icsk-&gt;icsk_probes_out &lt;= max_probes))
</span><span class='line'>        return;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//如果重试次数大于最大的重试次数，则报错。
</span><span class='line'>if (icsk-&gt;icsk_probes_out &gt; max_probes) {
</span><span class='line'>    tcp_write_err(sk);
</span><span class='line'>} else {
</span><span class='line'>    /* Only send another probe if we didn't close things up. */
</span><span class='line'>//否则发送探测包。这个函数里面会发送探测包，并重启定时器。
</span><span class='line'>    tcp_send_probe0(sk);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;然 后来看delay ack定时器。所谓的delay ack也就是ack不会马上发送，而是等待一段时间和数据一起发送，这样就减少了一个数据包的发送。这里一般是将ack包含在tcp option中发送的。这里的定时器就是用来控制这段时间，如果定时器到期，都没有数据要发送给对端，此时单独发送这个ack。如果在定时器时间内，有数 据要发送，此时这个ack和数据一起发送给对端。  
</span><span class='line'>前面我们知道delay ack定时器的回调函数是tcp_delack_timer。在分析这个函数之前，我们先来看下这个定时器是什么时候被启动的。  
</span><span class='line'>首先我们知道内核接收数据都是在tcp_rcv_eastablished实现的，当我们接收完数据后，此时进入是否进行delay ack.  
</span><span class='line'>在tcp_rcv_eastablished最终会调用__tcp_ack_snd_check进行判断。  
</span><span class='line'>可以看到这个函数很简单，就是判断是否需要发送delay ack，如果是则tcp_send_delayed_ack，否则直接发送ack恢复给对端。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void __tcp_ack_snd_check(struct sock *sk, int ofo_possible)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>
</span><span class='line'>/* 1 第一个判断表示多于一个的段在等待ack，并且我们的receive buf有足够的空间，
</span><span class='line'> *   这是因为这种情况，表明应用程序读取比较快，而对端的发送速度依赖于ack的到达时间，* 因此我们不希望对端减慢速度。
</span><span class='line'> * 2 这个sock处在quickack 模式
</span><span class='line'> * 3 我们有 out-of-order数据,此时必须马上给对端以确认。
</span><span class='line'> *   当上面的任意一个为真，则立即发送ack。
</span><span class='line'>**/
</span><span class='line'>if (((tp-&gt;rcv_nxt - tp-&gt;rcv_wup) &gt; inet_csk(sk)-&gt;icsk_ack.rcv_mss
</span><span class='line'>     /* ... and right edge of window advances far enough.
</span><span class='line'>      * (tcp_recvmsg() will send ACK otherwise). Or...
</span><span class='line'>      */
</span><span class='line'>     &amp;&amp; __tcp_select_window(sk) &gt;= tp-&gt;rcv_wnd) ||
</span><span class='line'>    /* We ACK each frame or... */
</span><span class='line'>    tcp_in_quickack_mode(sk) ||
</span><span class='line'>    /* We have out of order data. */
</span><span class='line'>    (ofo_possible &amp;&amp; skb_peek(&amp;tp-&gt;out_of_order_queue))) {
</span><span class='line'>    /* Then ack it now */
</span><span class='line'>    tcp_send_ack(sk);
</span><span class='line'>} else {
</span><span class='line'>    /* Else, send delayed ack. */
</span><span class='line'>    //在这里启动定时器。
</span><span class='line'>    tcp_send_delayed_ack(sk);
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;上面还有一个tcp_in_quickack_mode，这个函数我们说了，它是用来判断是否处在quickack 模式。  
</span><span class='line'>来看这个函数：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline int tcp_in_quickack_mode(const struct sock *sk)
</span><span class='line'>{
</span><span class='line'>const struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>return icsk-&gt;icsk_ack.quick &amp;&amp; !icsk-&gt;icsk_ack.pingpong;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;其中icsk-&gt;icsk_ack.pingpong域被设置的情况只有当tcp连接是交互式的，比如telnet等等。icsk-&gt;icsk_ack.quick表示能够 quickack的数量。
</span><span class='line'>然后我们来看tcp_delack_timer的实现。  
</span><span class='line'>在看之前，我们要知道icsk-&gt;icsk_ack.pending表示的是当前的ack的状态。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void tcp_delack_timer(unsigned long data)
</span><span class='line'>{
</span><span class='line'>struct sock *sk = (struct sock *)data;
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>struct inet_connection_sock *icsk = inet_csk(sk);
</span><span class='line'>
</span><span class='line'>bh_lock_sock(sk);
</span><span class='line'>//用户进程正在使用，则等会再尝试。
</span><span class='line'>if (sock_owned_by_user(sk)) {
</span><span class='line'>    /* Try again later. */
</span><span class='line'>    icsk-&gt;icsk_ack.blocked = 1;
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKLOCKED);
</span><span class='line'>    sk_reset_timer(sk, &amp;icsk-&gt;icsk_delack_timer, jiffies + TCP_DELACK_MIN);
</span><span class='line'>    goto out_unlock;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>sk_mem_reclaim_partial(sk);
</span><span class='line'>
</span><span class='line'>//判断sock状态 以及ack的状态。如果是close或者已经处在ICSK_ACK_TIMER，则直接跳出。
</span><span class='line'>if (sk-&gt;sk_state == TCP_CLOSE || !(icsk-&gt;icsk_ack.pending &amp; ICSK_ACK_TIMER))
</span><span class='line'>    goto out;
</span><span class='line'>
</span><span class='line'>//如果已经超时，则重启定时器，并退出。
</span><span class='line'>if (time_after(icsk-&gt;icsk_ack.timeout, jiffies)) {
</span><span class='line'>    sk_reset_timer(sk, &amp;icsk-&gt;icsk_delack_timer, icsk-&gt;icsk_ack.timeout);
</span><span class='line'>    goto out;
</span><span class='line'>}
</span><span class='line'>//清除ack状态。
</span><span class='line'>icsk-&gt;icsk_ack.pending &amp;= ~ICSK_ACK_TIMER;
</span><span class='line'>
</span><span class='line'>//开始遍历prequeue。此时主要的目的是为了调用tcp_rcv_eastablished.这里会调用tcp_ack_snd_check来发送ack。
</span><span class='line'>if (!skb_queue_empty(&amp;tp-&gt;ucopy.prequeue)) {
</span><span class='line'>    struct sk_buff *skb;
</span><span class='line'>
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPSCHEDULERFAILED);
</span><span class='line'>
</span><span class='line'>    //遍历prequeue队列，发送未发送的ack。
</span><span class='line'>    while ((skb = __skb_dequeue(&amp;tp-&gt;ucopy.prequeue)) != NULL)
</span><span class='line'>        sk_backlog_rcv(sk, skb);
</span><span class='line'>
</span><span class='line'>    tp-&gt;ucopy.memory = 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//检测是否有ack还需要被发送。也就是处于ICSK_ACK_SCHED状态的ack
</span><span class='line'>if (inet_csk_ack_scheduled(sk)) {
</span><span class='line'>
</span><span class='line'>    if (!icsk-&gt;icsk_ack.pingpong) {
</span><span class='line'>        /* Delayed ACK missed: inflate ATO. */
</span><span class='line'>        icsk-&gt;icsk_ack.ato = min(icsk-&gt;icsk_ack.ato &lt;&lt; 1, icsk-&gt;icsk_rto);
</span><span class='line'>    } else {
</span><span class='line'>        //到这里说明已经长时间没有通信，并且处于交互模式。这个时候我们需要关闭pingpong模式。
</span><span class='line'>        icsk-&gt;icsk_ack.pingpong = 0;
</span><span class='line'>        icsk-&gt;icsk_ack.ato      = TCP_ATO_MIN;
</span><span class='line'>    }
</span><span class='line'>    //立即发送ack。
</span><span class='line'>    tcp_send_ack(sk);
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_DELAYEDACKS);
</span><span class='line'>}
</span><span class='line'>TCP_CHECK_TIMER(sk);
</span><span class='line'>
</span><span class='line'>out:
</span><span class='line'>if (tcp_memory_pressure)
</span><span class='line'>    sk_mem_reclaim(sk);
</span><span class='line'>out_unlock:
</span><span class='line'>bh_unlock_sock(sk);
</span><span class='line'>sock_put(sk);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[ubuntu dota2]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/09/21/ubuntu-dota2/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-09-21T23:51:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/09/21/ubuntu-dota2&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;ERROR- You are missing the following 32-bit libraries, and Steam may not run:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>sudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;无法输入：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>export LC_CTYPE="en_US.UTF-8" &amp;&amp; steam
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、集显&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  ubuntu下，如果是intel的核心显卡，mesa低于9.2版本的话，会出现看不见树和看不见英雄的情况
</span><span class='line'>  这时候就要更新mesa到9.2，mesa9.2支持3.6之后的内核版本，如果内核低于3.6，就要先更新内核
</span><span class='line'>  ubuntu的解决办法:
</span><span class='line'>  查看当前mesa版本：glxinfo |grep -i opengl
</span><span class='line'>  查看当前内核版本：uname -a&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  sudo add-apt-repository ppa:xorg-edgers/ppa
</span><span class='line'>  sudo apt-get update
</span><span class='line'>  sudo apt-get install linux-generic-lts-raring  (更新内核)
</span><span class='line'>  sudo apt-get dist-upgrade mesa                 (更新mesa)
</span><span class='line'>  然后就是重启系统&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;二、独显&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ubuntu 装独显 &lt;a href="/blog/2013/03/26/ubuntu-use-nvidia/"&gt;ubuntu 12.04 N卡双显卡&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果你想用独显玩dota2, 那么你需要用optirun steam来启动steam客户端，然后再启动游戏，这样游戏就是通过独显来渲染的。你也可以用普通的steam命令来启动steam，然后在dota2 游戏的属性中，加入启动方式optirun %command。 这样只有在启动游戏之后独显才会工作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;用optirun -b primus %command%(记得要装primus)，效果更好。 // 用%command%在启动时画面会显示不全，但是好像用%command好像又不会用独显了&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;primus默认是有垂直同步的，帧数当然会低，加个vblank_mode=0绝对秒杀virtualgl&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;不能用vblank_mode=0 optirun -b primus programme做桥接启动程序，这样会拉低许多显卡性能，
</span><span class='line'>使用vblank_mode=0 primusrun programme，性能就上来了，我这里确实比optirun提高30%左右&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1打开启动选项输入框&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2 输入所选命令（使用多个命令是中间用空格隔开，例如 -novid -international -console  ）&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;-novid （去除开始动画）&lt;br/&gt;
</span><span class='line'>-console（命令面板）&lt;br/&gt;
</span><span class='line'>-high （使dota2 的cpu和内存使用级为最高,也就是说让dota2 可以优先其他程序使用内存）&lt;br/&gt;
</span><span class='line'>-windowed （窗口模式）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;dota 2 console 命令&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;1首先开启命令面板&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2输入常用命令&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    net_graph 1 （ 网络状况显示）
</span><span class='line'>    再来就是改变位置，有些人不喜欢显示在左边，这个时候可以输入：
</span><span class='line'>    net_graphpos 1
</span><span class='line'>    这样显示的数据就会变到右边
</span><span class='line'>
</span><span class='line'>    net_graphpos 2
</span><span class='line'>    这样会变成中间
</span><span class='line'>
</span><span class='line'>    net_graphpos 3
</span><span class='line'>    这样会变成左边
</span><span class='line'>
</span><span class='line'>dota_minimap_hero_size 650 （英雄在小地图上的大小 650 为正常值，可自行更改）
</span><span class='line'>dota_force_right_click_attack 1 (英雄可以右键直接反补）
</span><span class='line'>dota_hud_healthbars 1 （去掉生命条上的分隔）
</span><span class='line'>dota_health_per_vertical_marker 250 （更改每一个分隔代表的血量 默认为250）
</span><span class='line'>dota_disable_range_finder 0  （随时显示你的施法距离）（很有用）
</span><span class='line'>dota_camera_accelerate 49 （任意调整观看视角）（没用过）
</span><span class='line'>
</span><span class='line'>dota2 一共有数百种命令，包括血的颜色，屏蔽某种声音等等，但是比较实际的就是这几种，其他的就不列举了。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Dota2 录像下载失败&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;无法打开录像文件,请确保没有其他进程已打开此文件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在XXX\Steam\SteamApps\common\dota 2 beta\dota目录下新建一个名为replays的文件夹即可&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    net_graphheight "64"
</span><span class='line'>这个等于是设置高度位置 大家如果分屏率不同 可以修改数字来决定位置 数字越小 会往下移动 
</span><span class='line'>
</span><span class='line'>net_graphinsetbottom "437"
</span><span class='line'>这个等于是设置地步位置 大家如果分屏率不同 可以修改数字来决定位置 数字越小 会往上移动 
</span><span class='line'>
</span><span class='line'>net_graphinsetleft "0"
</span><span class='line'>因为已经设置右边 这个保持0就OK 但是也记得输入一次 以防万一 
</span><span class='line'>
</span><span class='line'>net_graphinsetright "-83"
</span><span class='line'>设置右边距离 记住这里是"-83" 不是83 负数越高 越往右 大家可以根据自己的需要改变数字 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>net_graphproportionalfont "0"
</span><span class='line'>这个是关键 字体比例问题 默认是1 设定为0以后 就会变成我图中那样的小字 
</span><span class='line'>
</span><span class='line'>net_graphtext "1"
</span><span class='line'>这个没什么大问题 字体样式
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[接收包的主流程]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/09/09/kernel-net-rx/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-09-09T18:10:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/09/09/kernel-net-rx&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    int tcp_v4_rcv(struct sk_buff *skb)    linux/net/ipv4/tcp_ipv4.c #1611
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  //tcp刚刚收到从ipv4发上来的包&lt;br/&gt;
</span><span class='line'>  （struct tcphdr: 定义在/include/net/tcp.h中，即包的tcp首部，不包括options部分）&lt;br/&gt;
</span><span class='line'>  （struct sock ：定义在/include/net/sock.h中，即表示socket）&lt;br/&gt;
</span><span class='line'>  检查skb-&gt;pkt_type != PACKET_HOST 则丢弃&lt;br/&gt;
</span><span class='line'>  检查th-&gt;doff &lt; sizeof(struct tcphdr) / 4，即首部大小不合理，则丢弃&lt;br/&gt;
</span><span class='line'>  检查checksum&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  （TCP_SKB_CB(skb)：定义在tcp.h是获取一个实际指向skb-&gt;cb[0]的tcp_skb_cb类型指针；将到达的首部剥离后，从中拷贝一些信息到这个变量，供tcp控制功能使用；tcp_skb_cb是在tcp刚收到时填写在包中的）&lt;br/&gt;
</span><span class='line'>  注意：&lt;br/&gt;
</span><span class='line'>    1. tcp_skb_cb-&gt;end_seq = seq + th-&gt;fin + th-&gt;fin + len-doff*4&lt;br/&gt;
</span><span class='line'>    2. when 和 sacked 没有被赋值&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  sk = __inet_lookup(&hellip;) 从一个hash表中获取该收包对应的sock结构，根据源IP地址+端口，目的IP地址+端口，inet_iif检查sk-&gt;sk_state == TCP_TIME_WAIT，TCP在该状态下则丢弃任何接收到的包并转入后续的特殊处理（未看，和关闭连接的状态迁移有关需要后续来看$），马上准备进入CLOSED状态了；&lt;br/&gt;
</span><span class='line'>  检查sk_filter(sk,skb)，则被过滤器阻拦，丢弃&lt;br/&gt;
</span><span class='line'>  检查!sock_owned_by_user(sk)，不明白sock-&gt;sk_lock的意义是什么，只有检查满足才能进入接收，否则 sk_add_backlog(sk, skb)将该sk_buff记录进sk_backlog队列；（注意这部操作加锁了！）&lt;br/&gt;
</span><span class='line'>（struct tcp_sock *tp = tcp_sk(sk)：tcp_sock定义在tcp.h中，通过tcp_sk直接将sock指针转换为tcp_sock型）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  ret = tcp_v4_do_rcv(sk, skb) 进入进一步接收处理！&lt;br/&gt;
</span><span class='line'>（之后的异常操作未看）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int tcp_v4_do_rcv(struct sock *sk, struct sk_buff *skb)    linux/net/ipv4/tcp_ipv4.c #1542
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  //在正常状态下由tcp_v4_rcv调用，进一步进行针对接收包的处理&lt;br/&gt;
</span><span class='line'>  检查sk-&gt;sk_state == TCP_ESTABLISHED&lt;br/&gt;
</span><span class='line'>则tcp_rcv_established(sk, skb, skb-&gt;h.th, skb-&gt;len)，连接已经建立，则进入进一步接收处理！&lt;br/&gt;
</span><span class='line'>  检查sk-&gt;sk_state == TCP_LISTEN，&lt;br/&gt;
</span><span class='line'>则struct sock *nsk = tcp_v4_hnd_req(sk, skb);    //该函数中判断能否找到已有的连接请求，如果有则说明接收到的是一个ack并在其中创建一个新的sock即nsk；如果没有则说明接收到的是 syn，nsk即为sk；&lt;br/&gt;
</span><span class='line'>  if(nsk!=sk) tcp_child_process(sk,nsk,skb)    //当nsk==sk时，接收的是SYN，不进行此步直接进入tcp_rcv_state_process；否则是ack说明已经创建好了的nsk，在 tcp_child_process对nsk进行tcp_rcv_state_process状态转移处理；&lt;br/&gt;
</span><span class='line'>  tcp_rcv_state_process(sk, skb, skb-&gt;h.th, skb-&gt;len); 非常重要函数！处理tcp的状态转移&lt;br/&gt;
</span><span class='line'>  reset: tcp_v4_send_reset(rsk, skb);    reset，未看$&lt;br/&gt;
</span><span class='line'>  discard: kfree_skb(skb);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int tcp_rcv_established(struct sock *sk, struct sk_buff *skb,struct tcphdr *th, unsigned len)    linux/net/ipv4/tcp_input.c #3881
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Header Prediction：基于效率的考虑，将包的处理后续阶段分为fast path和slow path两种，前者用于普通的包，后者用于特殊的包；该header prediction即用于区分两种包的流向。&lt;br/&gt;
</span><span class='line'>1.(tcp_flag_word(th) &amp; TCP_HP_BITS) == tp-&gt;pred_flags 判断标志位是不是正常情况；tcp_flag_word返回指向tcphdr的第三个32位基址（即length前面），而TCP_HP_BITS是把 PSH标志位给屏蔽掉即该位值不影响流向；所以总的来说pred_flag应该等于0xS?10 &lt;&lt; 16 + snd_wnd（那么pred_flag是在tcp_fast_path_check或tcp_fast_path_on中更新值的）&lt;br/&gt;
</span><span class='line'>2.TCP_SKB_CB(skb)-&gt;seq == tp-&gt;rcv_nxt 判断所收包是否为我们正想要接收的，非乱序包&lt;br/&gt;
</span><span class='line'>3.*ptr != htonl((TCPOPT_NOP &lt;&lt; 24) | (TCPOPT_NOP &lt;&lt; 16) | (TCPOPT_TIMESTAMP &lt;&lt; 8) | TCPOLEN_TIMESTAMP) 若包中没有正常的timestamp选项则转入slow path
</span><span class='line'> timestamp选项处理： 从包中的ts选项中获取数据，以此刷新tp-&gt;rx_opt的saw_tstamp,rcv_tsval,rcv_tsecr域；ts选项含三个 32bit，其中后两个分别记录着tsval和tsecr；（注意，ts_recent并不在此处更新，在后面的tcp_store_ts_recent 中更新）&lt;br/&gt;
</span><span class='line'>  struct tcp_options_received: 定义在tcp.h中，其中saw_tstamp表明timestamp选项是否有效，ts_recent_stamp是我们最近一次更新 ts_recent的时间，ts_recent是下一次回显的时戳一般等于下次发包中的rcv_tsecr；rcv_tsval是该data从发端发出时的时戳值，rcv_tsecr是回显时间戳（即该ack对应的data或者该data对应的上次ack中的ts_tsval值），（注意两端时钟无需同步；当ack被收端推迟时，所回复的ack中的timestamp指向所回复包群中的第一个确认包 “When an incoming segment belongs to the current window, but arrives out of order (which implies that an earlier segment was lost), the timestamp of the earlier segment is returned as soon as it arrives, rather than the timestamp of the segment that arrived out of order.”这条细节未看明白$）从包中的时间戳选项中记录这两个值&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4.PAWS check：(s32)(tp-&gt;rx_opt.rcv_tsval - tp-&gt;rx_opt.ts_recent) &lt; 0，则转入slow path&lt;br/&gt;
</span><span class='line'>  （PAWS:Protection Against Wrapped Sequence Numbers, SeqNo有可能会有回环交叠（因为它最大只有32bit），两个相同序号的包实际上是不同的两个包，此时判断tsval是否小于ts_recent即判断该包是否是一个过去时间的一个多余的包，然后将其作为一个重复包丢弃）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;Fast Path：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  1.当len == tcp_header_len，即这是一个纯ack（区别于piggyback），注意这是个纯ack，所以它通过长度来进行判断而不是标识！&lt;br/&gt;
</span><span class='line'>tcp_store_ts_recent(tp): tp-&gt;rx_opt.ts_recent = tp-&gt;rx_opt.rcv_tsval;&lt;br/&gt;
</span><span class='line'>tcp_ack(sk, skb, 0) 处理ack，进一步处理，未看！&lt;br/&gt;
</span><span class='line'>&lt;code&gt;__kfree_skb(skb)&lt;/code&gt; 释放该包&lt;br/&gt;
</span><span class='line'> tcp_data_snd_check(sk,tp) 检查有无更进一步的data包处理&lt;br/&gt;
</span><span class='line'>  2.当len &lt; tcp_header_len，说明该包的首部太小，清除之；&lt;br/&gt;
</span><span class='line'>  3.当len &gt; tcp_header_len，它是一个data包，tcp_copy_to_iovec函数未看，它决定该payload是否可以直接拷贝给用户空间：&lt;br/&gt;
</span><span class='line'>可，tcp_store_ts_recent(tp);&lt;br/&gt;
</span><span class='line'>  tcp_rcv_rtt_measure_ts(sk,skb); //计算RTT&lt;br/&gt;
</span><span class='line'>  &lt;code&gt;__skb_pull(skb, tcp_header_len);&lt;/code&gt; //剥tcp首部&lt;br/&gt;
</span><span class='line'>   tp-&gt;rcv_nxt = TCP_SKB_CB(skb)-&gt;end_seq; //更新rcv_next&lt;br/&gt;
</span><span class='line'>($ 那么将data拷贝到用户空间的操作在何处体现？难道是在tcp_copy_to_iovec中？)&lt;br/&gt;
</span><span class='line'>不可，除了以上的操作之外，还要&lt;br/&gt;
</span><span class='line'>  &lt;code&gt;__skb_queue_tail(&amp;sk-&gt;sk_receive_queue, skb);&lt;/code&gt; //将该包加入到接收sk_buff队列尾部&lt;br/&gt;
</span><span class='line'>tcp_event_data_recv()：management tasks处理&lt;br/&gt;
</span><span class='line'>若TCP_SKB_CB(skb)-&gt;ack_seq != tp-&gt;snd_una，说明这是一个有效的ack包&lt;br/&gt;
</span><span class='line'>  tcp_ack(sk, skb, FLAG_DATA); //FLAG_DATA说明这是一个背在data上的ack&lt;br/&gt;
</span><span class='line'>  tcp_data_snd_check(sk, tp); //该函数调用tcp_push_pending_frames函数，如果sk-&gt;sk_send_head存在则最终调用 tcp_write_xmit函数发包&lt;br/&gt;
</span><span class='line'>  &lt;code&gt;__tcp_ack_snd_check(sk, 0);&lt;/code&gt; //检查基于该收包事件，有无进一步的ack包处理（Delayed ACK，Quick ACK）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;Slow Path：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  tcp_checksum_complete_user(sk, skb)：checksum检查&lt;br/&gt;
</span><span class='line'>  tcp_fast_parse_options(skb, th, tp)：timestamp选项检查；tcp_paws_discard(sk, skb)：PAWS检查&lt;br/&gt;
</span><span class='line'>  tcp_sequence(tp, TCP_SKB_CB(skb)-&gt;seq, TCP_SKB_CB(skb)-&gt;end_seq)：检查是否乱序，并在其中激活QuickACK模式&lt;br/&gt;
</span><span class='line'>上面两行中，都会再检查RST标志，若没激活则tcp_send_dupack，作用不明，貌似是针对该错包回复一个冗余的ack&lt;br/&gt;
</span><span class='line'>  检查RST标志，tcp_reset(sk) 该函数没什么操作，填写一些错误信息后进入tcp_done函数(该函数进行一些关闭tcp连接的收尾操作)&lt;br/&gt;
</span><span class='line'>  tcp_replace_ts_recent(tp, TCP_SKB_CB(skb)-&gt;seq)：更新timestamp信息&lt;br/&gt;
</span><span class='line'>  检查SYN标志，在连接已建立的状态下，收到SYN是错误的，因此tcp_reset(sk)&lt;br/&gt;
</span><span class='line'>  检查ACK标志，tcp_ack(sk, skb, FLAG_SLOWPATH)&lt;br/&gt;
</span><span class='line'>  tcp_rcv_rtt_measure_ts(sk, skb)：更新RTT&lt;br/&gt;
</span><span class='line'>  tcp_urg(sk, skb, th)：处理URG标志&lt;br/&gt;
</span><span class='line'>  tcp_data_queue(sk, skb)：处理接收包所含数据，未看&lt;br/&gt;
</span><span class='line'>  tcp_data_snd_check(sk, tp) &amp; tcp_ack_snd_check(sk)：检查有无进一步的data或ack发送&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    static void tcp_event_data_recv(struct sock *sk, struct tcp_sock *tp, struct sk_buff *skb)    linux/net/ipv4/tcp_input.c #502
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  //
</span><span class='line'>  inet_csk_schedule_ack(sk)：将icsk_pending置为ICSK_ACK_SCHED，但具体意义不明&lt;br/&gt;
</span><span class='line'>  （struct inet_connection_sock：/linux/include/net/inet_connection_sock，面向INET连接的 socket结构，记录着和tcp连接有关的很多变量，比如本函数要处理的ATO（Acknowledgement timeout）信息；tcp_sock是其上的拓展，它的具体意义尚待发掘）&lt;br/&gt;
</span><span class='line'>  tcp_measure_rcv_mss(sk, skb)：更新rcv_mss，说是与delayed ACK有关，但是具体是怎么运作的？&lt;br/&gt;
</span><span class='line'>  tcp_rcv_rtt_measure(tp)：更新RTT，为什么又更新一遍$&lt;br/&gt;
</span><span class='line'>  接下来的一些列操作是更新inet_connection_sock中的ATO信息，具体操作代码中有注释，但这些信息的运作方式还不明&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_ack(struct sock *sk, struct sk_buff *skb, int flag)    /linux/net/ipv4/tcp_input.c #2491
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  //处理接受到的ack，内容非常复杂
</span><span class='line'>  首先介绍一下ack可以携带的各个FLAG：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>FLAG_DATA：              Incoming frame contained data.
</span><span class='line'>FLAG_WIN_UPDATE：        Incoming ACK was a window update
</span><span class='line'>FLAG_DATA_ACKED：        This ACK acknowledged new data.
</span><span class='line'>FLAG_RETRANS_DATA_ACKED：Some of which was retransmitted.
</span><span class='line'>FLAG_SYN_ACKED：         This ACK acknowledged SYN.
</span><span class='line'>FLAG_DATA_SACKED：       New SACK.
</span><span class='line'>FLAG_ECE：               ECE in this ACK.
</span><span class='line'>FLAG_DATA_LOST：         SACK detected data lossage.
</span><span class='line'>FLAG_SLOWPATH：          Do not skip RFC checks for window update.
</span><span class='line'>FLAG_ACKED：             (FLAG_DATA_ACKED|FLAG_SYN_ACKED)
</span><span class='line'>FLAG_NOT_DUP：           (FLAG_DATA|FLAG_WIN_UPDATE|FLAG_ACKED)
</span><span class='line'>FLAG_CA_ALERT：          (FLAG_DATA_SACKED|FLAG_ECE)
</span><span class='line'>FLAG_FORWARD_PROGRESS： (FLAG_ACKED|FLAG_DATA_SACKED)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  prior_snd_una = tp-&gt;snd_una;ack_seq = TCP_SKB_CB(skb)-&gt;seq; ack = TCP_SKB_CB(skb)-&gt;ack_seq;&lt;br/&gt;
</span><span class='line'>  //1记录着上一次被确认的data序号；2记录着所收ack包的序号；3记录着所收ack包确认对象的data序号；&lt;br/&gt;
</span><span class='line'>  首先判断若ack在tp-&gt;snd_nxt之后或者在prio_snd_una之前，则说明该ack非法或者过时（在过时的情况下，若sacked打开则还需tcp_sacktag_write_queue处理） 24</span></code></pre></td></tr></table></div></figure>
    if (!(flag&amp;FLAG_SLOWPATH) &amp;&amp; after(ack, prior_snd_una))
        tcp_update_wl（即tp->snd_wl1 = ack_seq）; tp->snd_una=ack; //为什么此种情况下并不更新窗口？
    else
        flag |= tcp_ack_update_window(sk, tp, skb, ack, ack_seq);
        //nwin = ntohs(skb->h.th->window)从ack中记录通告窗口
        如果检查需要更新发送窗口，则tp->snd_wl1 = ack_seq; tp->snd_wnd = nwin;
        tp->snd_una = ack;
        if (TCP_SKB_CB(skb)->sacked) flag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una); //该函数未看</p>

<pre><code>    tp-&gt;rcv_tstamp = tcp_time_stamp; //rcv_tstamp记录着最近一次收到ack的时戳
    prior_in_flight = tcp_packets_in_flight(tp);
    if(!tp-&gt;packets_out) icsk-&gt;icsk_prbes_out = 0;
    if (sk-&gt;sk_send_head) tcp_ack_probe(sk);    //若此时网络中没有data，直接进入zero-window probe的ack处理;通告窗口的数据已经得到处理，所以tcp_ack_probe中仅仅是重置probe计时器，即 icsk-&gt;icsk_retransmit_timer

    flag |= tcp_clean_rtx_queue(sk, &amp;seq_rtt);   //从重传队列中移除被确认的data包

    if (tcp_ack_is_dubious(sk, flag)) { //该函数判断此ack是否可疑，判真情况下具体是flag不为FLAG_NOT_DUP，或flag是FLAG_CA_ALERT，或 icsk_ca_state不为TCP_CA_OPEN状态
    if ((flag &amp; FLAG_DATA_ACKED) &amp;&amp; tcp_may_raise_cwnd(sk, flag))
    //如果这个包是一个对新数据包的ack，那么通过tcp_may_raise_cwnd函数来判断是否要进行窗口操作，判真情况下具体是flag不是 FLAG_ECE或snd_cwnd&lt;snd_ssthresh（慢启动？）且icsk_ca_state不为TCP_CA_RECOVERY和 TCP_CA_CWR状态（所以，为什么TCP_CA_LOSS状态可以增窗呢？）
        tcp_cong_avoid(sk, ack, seq_rtt, prior_in_flight, 0);  
    //该函数会调用icsk-&gt;icsk_ca_ops-&gt;cong_avoid(sk, ack, rtt, in_flight, good)， 这是个函数指针；另外会更新snd_cwnd_stamp
    tcp_fastretrans_alert(sk, prior_snd_una, prior_packets, flag); //未看，极其重要的函数
}else{
    if ((flag &amp; FLAG_DATA_ACKED)) tcp_cong_avoid(sk, ack, seq_rtt, prior_in_flight, 1);
}
</code></pre>

<pre><code>tcp_ack中有很多新的内容，都还未涉及，要注意！！！！！！

---------
</code></pre>

<pre><code>static void tcp_data_queue(struct sock *sk, struct sk_buff *skb)    /linux/net/ipv4/tcp_input.c #3139
</code></pre>

<p>```
  //将数据拷贝至用户空间<br/>
若TCP_SKB_CB(skb)->seq == TCP_SKB_CB(skb)->end_seq 则空包丢弃<br/>
__skb_pull(skb, th->doff*4) //剥离tcp首部</p>

<h5>1.若TCP_SKB_CB(skb)->seq == tp->rcv_nxt且tcp_receive_window(tp)!=0，非乱序且处于接受窗口中，正常的情况</h5>

<p>若tp->ucopy.task == current, tp->copied_seq == tp->rcv_nxt, tp->ucopy.len等条件满足，则可以拷贝至用户空间<br/>
  //current是什么不明？ucopy.len貌似是用户最先设定的数据包的量，每次收包之后减小直至零<br/>
    skb_copy_datagram_iovec(skb, 0, tp->ucopy.iov, chunk) //向ucopy.iov拷贝数据<br/>
    tcp_rcv_space_adjust(sk) //计算TCP接受buffer空间大小，拷贝完<br/>
tp->rcv_nxt = TCP_SKB_CB(skb)->end_seq;<br/>
if(th->fin) tcp_fin(skb, sk, th); //原来fin的处理在这里！<br/>
若!skb_queue_empty(&amp;tp->out_of_order_queue)<br/>
    tcp_ofo_queue(sk); //看out_of_order_queue中有没有可以移到receive_queue中<br/>
    tcp_sack_remove(tp) //RCV.NXT advances, some SACKs should be eaten<br/>
    tcp_fast_path_check(sk,tp)   //tp->pred_flag值的更新<br/>
  清除skb并return</p>

<h5>2.若!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt) 说明这是一个重传的包</h5>

<p>  tcp_dsack_set(tp, TCP_SKB_CB(skb)->seq, TCP_SKB_CB(skb)->end_seq);   //在其中打开并填写dsack信息,在dyokucate_sack[0]中从seq到end_seq，修改dsack和eff_sacks值<br/>
  tcp_enter_quickack_mode(sk); //进入quick ack模式<br/>
  清除skb并return<br/>
若!before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt + tcp_receive_window(tp))<br/>
  清除skb并return<br/>
若before(TCP_SKB_CB(skb)->seq, tp->rcv_nxt) 说明这是一个Partial包，即seq&lt;rcv_next&lt;end_seq<br/>
  tcp_dsack_set(tp, TCP_SKB_CB(skb)->seq, tp->rcv_nxt); //填写dsack信息，从seq到rcv_nxt</p>

<h5>3. 其他情况，说明收到了一个乱序包</h5>

<p>若out_of_order_queue为空，则<br/>
（注：out_of_order_queue是一个sk_buff_head结构，它的prev/next指针分别指向最后一个和第一个sk_buff结构，块的排放顺序对应其序号的大小顺序）<br/>
  初始化sack相关域，num_sacks/eff_sacks为1，dsack为0，selective_acks[0]从seq到end_seq；<br/>
  <code>__skb_queue_head(&amp;tp-&gt;out_of_order_queue,skb);</code> //将收包加入out_of_order_queue的头部</p>

<p>若out_of_order_queue不为空，则首先获取skb1 = tp->out_of_order_queue.prev即最新的一个乱序块<br/>
  若seq == TCP_SKB_CB(skb1)->end_seq，说明收包能够接在最新乱序块的右边<br/>
    <code>__skb_append(skb1, skb, &amp;tp-&gt;out_of_order_queue);</code><br/>
    tp->selective_acks[0].end_seq = end_seq; //将新收包接在skb1的右边，看来第一个selective_acks块对应的是最新的乱序序列<br/>
  循环执行skb1=skb1->prev，直到找到!after(TCP_SKB_CB(skb1)->seq, seq)表明需要将收包插在此块之后，或skb1=(struct sk_buff<em>)&amp;tp->out_of_order_queue表明收包比队列中的所与块的序列都要小<br/>
    循环内需要找到收包与队列已有包中的重复部分，然后tcp_dsack_set设置该部分为dsack内容<br/>
  <code>__skb_insert(skb, skb1, skb1-&gt;next, &amp;tp-&gt;out_of_order_queue);</code> //将收包对应的块插入到队列中<br/>
  再次循环执行skb1=skb1->next，直到找到!after(end_seq, TCP_SKB_CB(skb1)->seq)表明需要将从收包到该包之间的所有包全部从队列中移除，或者skb1=(struct sk_buff</em>)&amp;tp->out_of_order_queue表明需要将收包之后的所有包都移出<br/>
    循环内需要将当前的队列包与收包的交叠部分设置为dsack值（当然随着循环的推进，dsack处于不断更新的状况），还要通过 <code>__skb_unlink(skb1, &amp;tp-&gt;out_of_order_queue)，__kfree_skb(skb1);</code>将当前的队列包移除<br/>
  （该处的两部循环，旨在通过比较队列中块的序号和所收包的序号范围，将队列中的包连续化，即消除孔洞）</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内核tcp协议栈SACK的处理tcp_sacktag_write_queue]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/09/06/kernel-net-sack/"/>
    <updated>2013-09-06T15:41:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/09/06/kernel-net-sack</id>
    <content type="html"><![CDATA[<p><a href="http://simohayha.iteye.com/blog/578744">http://simohayha.iteye.com/blog/578744</a></p>

<p>  上一篇处理ack的blog中我们知道当我们接收到ack的时候，我们会判断sack段，如果包含sack段的话，我们就要进行处理。这篇blog就主要来介绍内核如何处理sack段。</p>

<p>  SACK是包含在tcp的option中的，由于tcp的头的长度的限制，因此SACK也就是最多包含4个段，也就是32个字节。我们先来看tcp中的SACK段的表示：
<code>
    struct tcp_sack_block {
        u32 start_seq; //起始序列号
        u32 end_seq;   //结束序列号
    };
</code>
可以看到很简单，就是一个段的起始序列号和一个结束序列号。</p>

<p>前一篇blog我们知道tcp_skb_cb的sacked域也就是sack option的偏移值，而在tcp的option它的组成是由3部分组成的，第一部分为option类型，第二部分为当前option的长度，第三部分才是数据段，因此我们如果要取得SACK的段，就必须这样计算。</p>

<p>这里ack_skb也就是我们要处理的skbuffer。</p>

<pre><code>    //首先得到sack option的起始指针。
    unsigned char *ptr = (skb_transport_header(ack_skb) +
                  TCP_SKB_CB(ack_skb)-&gt;sacked);
    //加2的意思也就是加上类型和长度，这里刚好是2个字节。最终结果也就是sack option的数据段。
    struct tcp_sack_block_wire *sp_wire = (struct tcp_sack_block_wire *)(ptr+2);
</code></pre>

<p>这里很奇怪，内核还有一个tcp_sack_block_wire类型的结构，它和tcp_sack_block是完全一样的。</p>

<p>而我们如果要得到当前的SACK段的个数我们要这样做:
<code>
    #define TCPOLEN_SACK_BASE       2
    int num_sacks = min(TCP_NUM_SACKS, (ptr[1] - TCPOLEN_SACK_BASE) &gt;&gt; 3);
</code>
这里ptr1也就是sack option的长度(字节数),而TCPOLEN_SACK_BASE为类型和长度字段的长度，因此这两个值的差也就是sack段的总长度，而这里每个段都是8个字节，因此我们右移3位就得到了它的个数，最后sack的段的长度不能大于4,因此我们要取一个最小值。</p>

<p>上面的结构下面这张图非常清晰的展示了，这几个域的关系：</p>

<p><img src="/images/kernel/2013-09-06.jpeg" alt="" /></p>

<p>然后我们来看SACK的处理，在内核中SACK的处理是通过tcp_sacktag_write_queue来实现的，这个函数比较长，因此这里我们分段来看。</p>

<p>先来看函数的原型
<code>
    static int
    tcp_sacktag_write_queue(struct sock *sk, struct sk_buff *ack_skb,
                u32 prior_snd_una)
</code>
第一个参数是当前的sock，第二个参数是要处理的skb，第三个参数是接受ack的时候的snd_una.</p>

<p>在看之前这里有几个重要的域要再要说明下。<br/>
1 tcp socket的sacked_out域，这个域保存了所有被sack的段的个数。<br/>
2 还有一个就是tcp_sacktag_state结构，这个结构保存了当前skb的一些信息。<br/>
<code>
    struct tcp_sacktag_state {
        int reord;
        int fack_count;
        int flag;
    };
</code></p>

<p>3 tcp socket的highest_sack域，这个域也就是被sack确认的最大序列号的skb。</p>

<p>先来看第一部分，这部分的代码主要功能是初始化一些用到的值，比如sack的指针，当前有多少sack段等等，以及一些合法性校验。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//sack段的最大个数
</span><span class='line'>#define TCP_NUM_SACKS 4
</span><span class='line'>&hellip;&hellip;
</span><span class='line'>&hellip;&hellip;
</span><span class='line'>    const struct inet_connection_sock &lt;em&gt;icsk = inet_csk(sk);
</span><span class='line'>    struct tcp_sock &lt;/em&gt;tp = tcp_sk(sk);
</span><span class='line'>    //下面两句代码，前面已经分析过了，也就是取得sack的指针以及sack 数据段的指针。
</span><span class='line'>    unsigned char &lt;em&gt;ptr = (skb_transport_header(ack_skb) +
</span><span class='line'>                  TCP_SKB_CB(ack_skb)-&gt;sacked);
</span><span class='line'>    struct tcp_sack_block_wire &lt;/em&gt;sp_wire = (struct tcp_sack_block_wire &lt;em&gt;)(ptr+2);
</span><span class='line'>    //这个数组最终会用来保存所有的SACK段。
</span><span class='line'>    struct tcp_sack_block sp[TCP_NUM_SACKS];
</span><span class='line'>    struct tcp_sack_block &lt;/em&gt;cache;
</span><span class='line'>    struct tcp_sacktag_state state;
</span><span class='line'>    struct sk_buff *skb;
</span><span class='line'>    //这里得到当前的sack段的个数，这段代码前面也介绍过了。
</span><span class='line'>    int num_sacks = min(TCP_NUM_SACKS, (ptr[1] - TCPOLEN_SACK_BASE) &gt;&gt; 3);
</span><span class='line'>    int used_sacks;
</span><span class='line'>    //重复的sack的个数。
</span><span class='line'>    int found_dup_sack = 0;
</span><span class='line'>    int i, j;
</span><span class='line'>    int first_sack_index;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    state.flag = 0;
</span><span class='line'>state.reord = tp-&gt;packets_out;
</span><span class='line'>//如果sack的个数为0,则我们要更新相关的域。
</span><span class='line'>if (!tp-&gt;sacked_out) {
</span><span class='line'>    if (WARN_ON(tp-&gt;fackets_out))
</span><span class='line'>        tp-&gt;fackets_out = 0;
</span><span class='line'>//这个函数主要更新highest_sack域。
</span><span class='line'>    tcp_highest_sack_reset(sk);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//开始检测是否有重复的sack。这个函数紧接着会详细分析。
</span><span class='line'>found_dup_sack = tcp_check_dsack(sk, ack_skb, sp_wire,
</span><span class='line'>                 num_sacks, prior_snd_una);
</span><span class='line'>//如果有发现，则设置flag。
</span><span class='line'>if (found_dup_sack)
</span><span class='line'>    state.flag |= FLAG_DSACKING_ACK;
</span><span class='line'>
</span><span class='line'>//再次判断ack的序列号是否太老。
</span><span class='line'>if (before(TCP_SKB_CB(ack_skb)-&gt;ack_seq, prior_snd_una - tp-&gt;max_window))
</span><span class='line'>    return 0;
</span><span class='line'>//如果packets_out为0,则说明我们没有发送还没有确认的段，此时进入out，也就是错误处理。
</span><span class='line'>if (!tp-&gt;packets_out)
</span><span class='line'>    goto out;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;在看接下来的部分之前我们先来看tcp_highest_sack_reset和tcp_check_dsack函数，先是tcp_highest_sack_reset函数。  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void tcp_highest_sack_reset(struct sock *sk)
</span><span class='line'>{
</span><span class='line'>//设置highest_sack为写队列的头。
</span><span class='line'>tcp_sk(sk)-&gt;highest_sack = tcp_write_queue_head(sk);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这里原因很简单，因为当sacked_out为0,则说明没有通过sack确认的段，此时highest_sack自然就指向写队列的头。  
</span><span class='line'>第二个是tcp_check_dsack函数，这个函数比较复杂，他主要是为了检测D-SACK,也就是重复的sack。  
</span><span class='line'>有关dsack的概念可以去看RFC 2883和3708.  
</span><span class='line'>我这里简要的提一下dsack的功能，D-SACK的功能主要是使接受者能够通过sack的块来报道接收到的重复的段，从而使发送者更好的进行拥塞控制。  
</span><span class='line'>这里D-SACK的判断是通过RFC2883中所描述的进行的。如果是下面两种情况，则说明收到了一个D-SACK。  
</span><span class='line'>1 如果SACK的第一个段所ack的区域被当前skb的ack所确认的段覆盖了一部分，则说明我们收到了一个d-sack,而代码中也就是sack第一个段的起始序列号小于snd_una。下面的图描述了这种情况：  
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2013-09-06-2.jpeg)  
</span><span class='line'>
</span><span class='line'>2 如果sack的第二个段完全包含了第二个段，则说明我们收到了重复的sack，下面这张图描述了这种关系。  
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2013-09-06-3.jpeg)  
</span><span class='line'>
</span><span class='line'>最后要注意的是，这里收到D-SACK后，我们需要打开当前sock d-sack的option。并设置dsack的flag。 
</span><span class='line'>
</span><span class='line'>然后我们还需要判断dsack的数据是否已经被ack完全确认过了，如果确认过了，我们就需要更新undo_retrans域，这个域表示重传的数据段的个数。 
</span><span class='line'>
</span><span class='line'>来看代码： 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int tcp_check_dsack(struct sock *sk, struct sk_buff *ack_skb,
</span><span class='line'>           struct tcp_sack_block_wire *sp, int num_sacks,
</span><span class='line'>           u32 prior_snd_una)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>//首先取得sack的第一个段的起始和结束序列号
</span><span class='line'>u32 start_seq_0 = get_unaligned_be32(&amp;sp[0].start_seq);
</span><span class='line'>u32 end_seq_0 = get_unaligned_be32(&amp;sp[0].end_seq);
</span><span class='line'>int dup_sack = 0;
</span><span class='line'>
</span><span class='line'>//判断D-sack,首先判断第一个条件，也就是起始序列号小于ack的序列号
</span><span class='line'>if (before(start_seq_0, TCP_SKB_CB(ack_skb)-&gt;ack_seq)) {
</span><span class='line'>    //设置dsack标记。
</span><span class='line'>    dup_sack = 1;
</span><span class='line'>    //这里更新tcp的option的sack_ok域。
</span><span class='line'>    tcp_dsack_seen(tp);
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPDSACKRECV);
</span><span class='line'>} else if (num_sacks &gt; 1) {
</span><span class='line'>    //然后执行第二个判断，取得第二个段的起始和结束序列号。
</span><span class='line'>    u32 end_seq_1 = get_unaligned_be32(&amp;sp[1].end_seq);
</span><span class='line'>    u32 start_seq_1 = get_unaligned_be32(&amp;sp[1].start_seq);
</span><span class='line'>    //执行第二个判断，也就是第二个段完全包含第一个段。
</span><span class='line'>    if (!after(end_seq_0, end_seq_1) &amp;&amp;
</span><span class='line'>        !before(start_seq_0, start_seq_1)) {
</span><span class='line'>        dup_sack = 1;
</span><span class='line'>        tcp_dsack_seen(tp);
</span><span class='line'>        NET_INC_STATS_BH(sock_net(sk),
</span><span class='line'>                LINUX_MIB_TCPDSACKOFORECV);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//判断是否dsack的数据段完全被ack所确认。
</span><span class='line'>if (dup_sack &amp;&amp;
</span><span class='line'>    !after(end_seq_0, prior_snd_una) &amp;&amp;
</span><span class='line'>    after(end_seq_0, tp-&gt;undo_marker))
</span><span class='line'>    //更新重传段的个数。
</span><span class='line'>    tp-&gt;undo_retrans--;
</span><span class='line'>
</span><span class='line'>return dup_sack;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后回到tcp_sacktag_write_queue，接下来这部分很简单，主要是提取sack的段到sp中，并校验每个段的合法性，然后统计一些信息。 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;//开始遍历，这里num_sacks也就是我们前面计算的sack段的个数
</span><span class='line'>for (i = 0; i &lt; num_sacks; i++) {
</span><span class='line'>int dup_sack = !i &amp;&amp; found_dup_sack;
</span><span class='line'>
</span><span class='line'>//赋值。
</span><span class='line'>sp[used_sacks].start_seq = get_unaligned_be32(&amp;sp_wire[i].start_seq);
</span><span class='line'>sp[used_sacks].end_seq = get_unaligned_be32(&amp;sp_wire[i].end_seq);
</span><span class='line'>
</span><span class='line'>//检测段的合法性。
</span><span class='line'>if (!tcp_is_sackblock_valid(tp, dup_sack,
</span><span class='line'>                sp[used_sacks].start_seq,
</span><span class='line'>                sp[used_sacks].end_seq)) {
</span><span class='line'>    int mib_idx;
</span><span class='line'>
</span><span class='line'>    if (dup_sack) {
</span><span class='line'>        if (!tp-&gt;undo_marker)
</span><span class='line'>            mib_idx = LINUX_MIB_TCPDSACKIGNOREDNOUNDO;
</span><span class='line'>        else
</span><span class='line'>            mib_idx = LINUX_MIB_TCPDSACKIGNOREDOLD;
</span><span class='line'>    } else {
</span><span class='line'>        /* Don't count olds caused by ACK reordering */
</span><span class='line'>        if ((TCP_SKB_CB(ack_skb)-&gt;ack_seq != tp-&gt;snd_una) &amp;&amp;
</span><span class='line'>            !after(sp[used_sacks].end_seq, tp-&gt;snd_una))
</span><span class='line'>            continue;
</span><span class='line'>        mib_idx = LINUX_MIB_TCPSACKDISCARD;
</span><span class='line'>    }
</span><span class='line'>    //更新统计信息。
</span><span class='line'>    NET_INC_STATS_BH(sock_net(sk), mib_idx);
</span><span class='line'>    if (i == 0)
</span><span class='line'>        first_sack_index = -1;
</span><span class='line'>    continue;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//忽略已经确认过的段。
</span><span class='line'>if (!after(sp[used_sacks].end_seq, prior_snd_una))
</span><span class='line'>    continue;
</span><span class='line'>//这个值表示我们要使用的sack的段的个数。
</span><span class='line'>used_sacks++;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后接下来的代码就是排序sack的段，也就是按照序列号的大小来排序： 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for (i = used_sacks - 1; i &gt; 0; i--) {
</span><span class='line'>for (j = 0; j &lt; i; j++) {
</span><span class='line'>    //可以看到这里通过比较起始序列号来排序。
</span><span class='line'>    if (after(sp[j].start_seq, sp[j + 1].start_seq)) {
</span><span class='line'>        //交换对应的值。
</span><span class='line'>        swap(sp[j], sp[j + 1]);
</span><span class='line'>
</span><span class='line'>        /* Track where the first SACK block goes to */
</span><span class='line'>        if (j == first_sack_index)
</span><span class='line'>            first_sack_index = j + 1;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后就是cache的初始化，这里的tcp socket的recv_sack_cache域要注意，这个域保存了上一次处理的sack的段的序列号。可以看到这个域类型也是tcp_sack_block，而且大小也是4, 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;//如果sack的数据段的个数为0,则说明我们要忽略调cache，此时可以看到cache指向recv_sack_cache的末尾。
</span><span class='line'>if (!tp-&gt;sacked_out) {
</span><span class='line'>/* It's already past, so skip checking against it */
</span><span class='line'>cache = tp-&gt;recv_sack_cache + ARRAY_SIZE(tp-&gt;recv_sack_cache);
</span><span class='line'>} else {
</span><span class='line'>//否则取出cache，然后跳过空的块。
</span><span class='line'>cache = tp-&gt;recv_sack_cache;
</span><span class='line'>/* Skip empty blocks in at head of the cache */
</span><span class='line'>while (tcp_sack_cache_ok(tp, cache) &amp;&amp; !cache-&gt;start_seq &amp;&amp;
</span><span class='line'>       !cache-&gt;end_seq)
</span><span class='line'>    //跳过空的块。
</span><span class='line'>    cache++;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后就是开始真正处理重传队列中的skb了。 
</span><span class='line'>
</span><span class='line'>我们要知道重传队列中的skb有三种类型，分别是SACKED(S), RETRANS(R) 和LOST(L)，而每种类型所处理的数据包的个数分别保存在sacked_out, retrans_out 和lost_out中。 
</span><span class='line'>
</span><span class='line'>而处于重传队列的skb也就是会处于下面6中状态： 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; * Tag  InFlight    Description
</span><span class='line'> * 0       1        - orig segment is in flight.
</span><span class='line'> * S       0        - nothing flies, orig reached receiver.
</span><span class='line'> * L       0        - nothing flies, orig lost by net.
</span><span class='line'> * R       2        - both orig and retransmit are in flight.
</span><span class='line'> * L|R     1        - orig is lost, retransmit is in flight.
</span><span class='line'> * S|R     1        - orig reached receiver, retrans is still in flight.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这里Tag也就是上面所说的三种类型，而InFlight也就是表示还在网络中的段的个数。 
</span><span class='line'>
</span><span class='line'>然后重传队列中的skb的状态变迁是通过下面这几种事件来触发的： 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; 1. New ACK (+SACK) arrives. (tcp_sacktag_write_queue())
</span><span class='line'> * 2. Retransmission. (tcp_retransmit_skb(), tcp_xmit_retransmit_queue())
</span><span class='line'> * 3. Loss detection event of one of three flavors:
</span><span class='line'> *  A. Scoreboard estimator decided the packet is lost.
</span><span class='line'> *     A'. Reno "three dupacks" marks head of queue lost.
</span><span class='line'> *     A''. Its FACK modfication, head until snd.fack is lost.
</span><span class='line'> *  B. SACK arrives sacking data transmitted after never retransmitted
</span><span class='line'> *     hole was sent out.
</span><span class='line'> *  C. SACK arrives sacking SND.NXT at the moment, when the
</span><span class='line'> *     segment was retransmitted.
</span><span class='line'> * 4. D-SACK added new rule: D-SACK changes any tag to S.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;在进入这段代码分析之前，我们先来看几个重要的域。 
</span><span class='line'>
</span><span class='line'>tcp socket的high_seq域，这个域是我们进入拥塞控制的时候最大的发送序列号，也就是snd_nxt. 
</span><span class='line'>
</span><span class='line'>然后这里还有FACK的概念，FACK算法也就是收到的不同的SACK块之间的hole，他就认为是这些段丢失掉了。因此这里tcp socket有一个fackets_out域，这个域表示了 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    //首先取得写队列的头，以便与下面的遍历。
</span><span class='line'>skb = tcp_write_queue_head(sk);
</span><span class='line'>state.fack_count = 0;
</span><span class='line'>i = 0;
</span><span class='line'>
</span><span class='line'>//这里used_sacks表示我们需要处理的sack段的个数。
</span><span class='line'>while (i &lt; used_sacks) {
</span><span class='line'>    u32 start_seq = sp[i].start_seq;
</span><span class='line'>    u32 end_seq = sp[i].end_seq;
</span><span class='line'>    //得到是否是重复的sack
</span><span class='line'>    int dup_sack = (found_dup_sack &amp;&amp; (i == first_sack_index));
</span><span class='line'>    struct tcp_sack_block *next_dup = NULL;
</span><span class='line'>
</span><span class='line'>    if (found_dup_sack &amp;&amp; ((i + 1) == first_sack_index))
</span><span class='line'>        next_dup = &amp;sp[i + 1];
</span><span class='line'>
</span><span class='line'>    //如果sack段的结束序列号大于将要发送的最大序列号，这个情况说明我们可能有数据丢失。因此设置丢失标记。这里可以看到也就是上面所说的事件B到达。
</span><span class='line'>    if (after(end_seq, tp-&gt;high_seq))
</span><span class='line'>        state.flag |= FLAG_DATA_LOST;
</span><span class='line'>
</span><span class='line'>    //跳过一些太老的cache
</span><span class='line'>    while (tcp_sack_cache_ok(tp, cache) &amp;&amp;
</span><span class='line'>           !before(start_seq, cache-&gt;end_seq))
</span><span class='line'>        cache++;
</span><span class='line'>
</span><span class='line'>    //如果有cache，就先处理cache的sack块。
</span><span class='line'>    if (tcp_sack_cache_ok(tp, cache) &amp;&amp; !dup_sack &amp;&amp;
</span><span class='line'>        after(end_seq, cache-&gt;start_seq)) {
</span><span class='line'>
</span><span class='line'>        //如果当前的段的起始序列号小于cache的起始序列号(这个说明他们之间有交叉)，则我们处理他们之间的段。
</span><span class='line'>        if (before(start_seq, cache-&gt;start_seq)) {
</span><span class='line'>            skb = tcp_sacktag_skip(skb, sk, &amp;state,
</span><span class='line'>                           start_seq);
</span><span class='line'>            skb = tcp_sacktag_walk(skb, sk, next_dup,
</span><span class='line'>                           &amp;state,
</span><span class='line'>                           start_seq,
</span><span class='line'>                           cache-&gt;start_seq,
</span><span class='line'>                           dup_sack);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        //处理剩下的块，也就是cache-&gt;end_seq和ned_seq之间的段。
</span><span class='line'>        if (!after(end_seq, cache-&gt;end_seq))
</span><span class='line'>            goto advance_sp;
</span><span class='line'>        //是否有需要跳过处理的skb
</span><span class='line'>        skb = tcp_maybe_skipping_dsack(skb, sk, next_dup,
</span><span class='line'>                           &amp;state,
</span><span class='line'>                           cache-&gt;end_seq);
</span><span class='line'>
</span><span class='line'>        /* ...tail remains todo... */
</span><span class='line'>        //如果刚好等于sack处理的最大序列号，则我们需要处理这个段。
</span><span class='line'>        if (tcp_highest_sack_seq(tp) == cache-&gt;end_seq) {
</span><span class='line'>            /* ...but better entrypoint exists! */
</span><span class='line'>            skb = tcp_highest_sack(sk);
</span><span class='line'>            if (skb == NULL)
</span><span class='line'>                break;
</span><span class='line'>            state.fack_count = tp-&gt;fackets_out;
</span><span class='line'>            cache++;
</span><span class='line'>            goto walk;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        //再次检测是否有需要skip的段。
</span><span class='line'>        skb = tcp_sacktag_skip(skb, sk, &amp;state, cache-&gt;end_seq);
</span><span class='line'>
</span><span class='line'>        //紧接着处理下一个cache。
</span><span class='line'>        cache++;
</span><span class='line'>        continue;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //然后处理这次新的sack段。
</span><span class='line'>    if (!before(start_seq, tcp_highest_sack_seq(tp))) {
</span><span class='line'>        skb = tcp_highest_sack(sk);
</span><span class='line'>        if (skb == NULL)
</span><span class='line'>            break;
</span><span class='line'>        state.fack_count = tp-&gt;fackets_out;
</span><span class='line'>    }
</span><span class='line'>    skb = tcp_sacktag_skip(skb, sk, &amp;state, start_seq);
</span><span class='line'>
</span><span class='line'>walk:
</span><span class='line'>    //处理sack的段，主要是tag赋值。
</span><span class='line'>    skb = tcp_sacktag_walk(skb, sk, next_dup, &amp;state,
</span><span class='line'>                   start_seq, end_seq, dup_sack);
</span><span class='line'>
</span><span class='line'>advance_sp:
</span><span class='line'>    /* SACK enhanced FRTO (RFC4138, Appendix B): Clearing correct
</span><span class='line'>     * due to in-order walk
</span><span class='line'>     */
</span><span class='line'>    if (after(end_seq, tp-&gt;frto_highmark))
</span><span class='line'>        state.flag &amp;= ~FLAG_ONLY_ORIG_SACKED;
</span><span class='line'>
</span><span class='line'>    i++;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>上面的代码并不复杂，这里主要有两个函数，我们需要详细的来分析，一个是tcp_sacktag_skip，一个是tcp_sacktag_walk。 
</span><span class='line'>
</span><span class='line'>先来看tcp_sacktag_skip，我们给重传队列的skb的tag赋值时，我们需要遍历整个队列，可是由于我们有序列号，因此我们可以先确认起始的skb，然后从这个skb开始遍历，这里这个函数就是用来确认起始skb的，这里确认的步骤主要是通过start_seq来确认的。 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static struct sk_buff *tcp_sacktag_skip(struct sk_buff *skb, struct sock *sk,
</span><span class='line'>                struct tcp_sacktag_state *state,
</span><span class='line'>                u32 skip_to_seq)
</span><span class='line'>{
</span><span class='line'>//开始遍历重传队列。
</span><span class='line'>tcp_for_write_queue_from(skb, sk) {
</span><span class='line'>    //如果当前的skb刚好等于发送队列的头，则说明我们这个是第一个数据包，则我们直接跳出循环。
</span><span class='line'>    if (skb == tcp_send_head(sk))
</span><span class='line'>        break;
</span><span class='line'>
</span><span class='line'>    //如果skb的结束序列号大于我们传递进来的序列号，则说明这个skb包含了我们sack确认的段，因此我们退出循环。
</span><span class='line'>    if (after(TCP_SKB_CB(skb)-&gt;end_seq, skip_to_seq))
</span><span class='line'>        break;
</span><span class='line'>    //更新fack的计数。
</span><span class='line'>    state-&gt;fack_count += tcp_skb_pcount(skb);
</span><span class='line'>}
</span><span class='line'>//返回skb
</span><span class='line'>return skb;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后是最关键的一个函数tcp_sacktag_walk，这个函数主要是遍历重传队列，找到对应需要设置的段，然后设置tcp_cb的sacked域为TCPCB_SACKED_ACKED，这里要注意，还有一种情况就是sack确认了多个skb，这个时候我们就需要合并这些skb，然后再处理。 
</span><span class='line'>
</span><span class='line'>然后来看代码。 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static struct sk_buff *tcp_sacktag_walk(struct sk_buff *skb, struct sock *sk,
</span><span class='line'>                struct tcp_sack_block *next_dup,
</span><span class='line'>                struct tcp_sacktag_state *state,
</span><span class='line'>                u32 start_seq, u32 end_seq,
</span><span class='line'>                int dup_sack_in)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>struct sk_buff *tmp;
</span><span class='line'>
</span><span class='line'>//开始遍历skb队列。
</span><span class='line'>tcp_for_write_queue_from(skb, sk) {
</span><span class='line'>    //in_sack不为0的话表示当前的skb就是我们要设置标记的skb。
</span><span class='line'>    int in_sack = 0;
</span><span class='line'>    int dup_sack = dup_sack_in;
</span><span class='line'>
</span><span class='line'>    if (skb == tcp_send_head(sk))
</span><span class='line'>        break;
</span><span class='line'>
</span><span class='line'>    //由于skb是有序的，因此如果某个skb的序列号大于sack段的结束序列号，我们就退出循环。
</span><span class='line'>    if (!before(TCP_SKB_CB(skb)-&gt;seq, end_seq))
</span><span class='line'>        break;
</span><span class='line'>    //如果存在next_dup,则判断是否需要进入处理。这里就是skb的序列号小于dup的结束序列号
</span><span class='line'>    if ((next_dup != NULL) &amp;&amp;
</span><span class='line'>        before(TCP_SKB_CB(skb)-&gt;seq, next_dup-&gt;end_seq)) {
</span><span class='line'>        //返回值付给in_sack,也就是这个函数会返回当前skb是否能够被sack的段确认。
</span><span class='line'>        in_sack = tcp_match_skb_to_sack(sk, skb,
</span><span class='line'>                        next_dup-&gt;start_seq,
</span><span class='line'>                        next_dup-&gt;end_seq);
</span><span class='line'>        if (in_sack &gt; 0)
</span><span class='line'>            dup_sack = 1;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //如果小于等于0,则尝试着合并多个skb段(主要是由于可能一个sack段确认了多个skb，这样我们尝试着合并他们)
</span><span class='line'>    if (in_sack &lt;= 0) {
</span><span class='line'>        tmp = tcp_shift_skb_data(sk, skb, state,
</span><span class='line'>                     start_seq, end_seq, dup_sack);
</span><span class='line'>        //这里tmp就为我们合并成功的skb。
</span><span class='line'>        if (tmp != NULL) {
</span><span class='line'>            //如果不等，则我们从合并成功的skb重新开始处理。
</span><span class='line'>            if (tmp != skb) {
</span><span class='line'>                skb = tmp;
</span><span class='line'>                continue;
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            in_sack = 0;
</span><span class='line'>        } else {
</span><span class='line'>            //否则我们单独处理这个skb
</span><span class='line'>            in_sack = tcp_match_skb_to_sack(sk, skb,
</span><span class='line'>                            start_seq,
</span><span class='line'>                            end_seq);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (unlikely(in_sack &lt; 0))
</span><span class='line'>        break;
</span><span class='line'>    //如果in_sack大于0,则说明我们需要处理这个skb了。
</span><span class='line'>    if (in_sack) {
</span><span class='line'>        //开始处理skb，紧接着我们会分析这个函数。
</span><span class='line'>        TCP_SKB_CB(skb)-&gt;sacked = tcp_sacktag_one(skb, sk,
</span><span class='line'>                              state,
</span><span class='line'>                              dup_sack,
</span><span class='line'>                              tcp_skb_pcount(skb));
</span><span class='line'>        //是否需要更新sack处理的那个最大的skb。
</span><span class='line'>        if (!before(TCP_SKB_CB(skb)-&gt;seq,
</span><span class='line'>                tcp_highest_sack_seq(tp)))
</span><span class='line'>            tcp_advance_highest_sack(sk, skb);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    state-&gt;fack_count += tcp_skb_pcount(skb);
</span><span class='line'>}
</span><span class='line'>return skb;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>然后我们来看tcp_sacktag_one函数，这个函数用来设置对应的tag，这里所要设置的也就是tcp_cb的sacked域。我们再来回顾一下它的值：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define TCPCB_SACKED_ACKED      0x01    /* SKB ACK'd by a SACK block    */
</span><span class='line'>#define TCPCB_SACKED_RETRANS    0x02    /* SKB retransmitted        */
</span><span class='line'>#define TCPCB_LOST              0x04    /* SKB is lost          */
</span><span class='line'>#define TCPCB_TAGBITS           0x07    /* All tag bits         */
</span><span class='line'>#define TCPCB_EVER_RETRANS      0x80    /* Ever retransmitted frame */
</span><span class='line'>#define TCPCB_RETRANS     (TCPCB_SACKED_RETRANS|TCPCB_EVER_RETRANS)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>如果一切都正常的话，我们最终就会设置skb的这个域为TCPCB_SACKED_ACKED，也就是已经被sack过了。 
</span><span class='line'>
</span><span class='line'>这个函数处理比较简单，主要就是通过序列号以及sacked本身的值最终来确认sacked要被设置的值。 
</span><span class='line'>
</span><span class='line'>这里我们还记得，一开始sacked是被初始化为sack option的偏移(如果是正确的sack)的. 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static u8 tcp_sacktag_one(struct sk_buff *skb, struct sock *sk,
</span><span class='line'>          struct tcp_sacktag_state *state,
</span><span class='line'>          int dup_sack, int pcount)
</span><span class='line'>{
</span><span class='line'>struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>u8 sacked = TCP_SKB_CB(skb)-&gt;sacked;
</span><span class='line'>int fack_count = state-&gt;fack_count;
</span><span class='line'>
</span><span class='line'>......
</span><span class='line'>
</span><span class='line'>//如果skb的结束序列号小于发送未确认的，则说明这个帧应当被丢弃。
</span><span class='line'>if (!after(TCP_SKB_CB(skb)-&gt;end_seq, tp-&gt;snd_una))
</span><span class='line'>    return sacked;
</span><span class='line'>//如果当前的skb还未被sack确认过，则我们才会进入处理。
</span><span class='line'>if (!(sacked &amp; TCPCB_SACKED_ACKED)) {
</span><span class='line'>    //如果是重传被sack确认的。
</span><span class='line'>    if (sacked &amp; TCPCB_SACKED_RETRANS) {
</span><span class='line'>        //如果设置了lost，则我们需要修改它的tag。
</span><span class='line'>        if (sacked &amp; TCPCB_LOST) {
</span><span class='line'>            sacked &amp;= ~(TCPCB_LOST|TCPCB_SACKED_RETRANS);
</span><span class='line'>            //更新lost的数据包
</span><span class='line'>            tp-&gt;lost_out -= pcount;
</span><span class='line'>            tp-&gt;retrans_out -= pcount;
</span><span class='line'>        }
</span><span class='line'>    } else {
</span><span class='line'>        .......
</span><span class='line'>    }
</span><span class='line'>    //开始修改sacked，设置flag。
</span><span class='line'>    sacked |= TCPCB_SACKED_ACKED;
</span><span class='line'>    state-&gt;flag |= FLAG_DATA_SACKED;
</span><span class='line'>    //增加sack确认的包的个数/
</span><span class='line'>    tp-&gt;sacked_out += pcount;
</span><span class='line'>
</span><span class='line'>    fack_count += pcount;
</span><span class='line'>
</span><span class='line'>    //处理fack
</span><span class='line'>    if (!tcp_is_fack(tp) &amp;&amp; (tp-&gt;lost_skb_hint != NULL) &amp;&amp;
</span><span class='line'>        before(TCP_SKB_CB(skb)-&gt;seq,
</span><span class='line'>           TCP_SKB_CB(tp-&gt;lost_skb_hint)-&gt;seq))
</span><span class='line'>        tp-&gt;lost_cnt_hint += pcount;
</span><span class='line'>
</span><span class='line'>    if (fack_count &gt; tp-&gt;fackets_out)
</span><span class='line'>        tp-&gt;fackets_out = fack_count;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/* D-SACK. We can detect redundant retransmission in S|R and plain R
</span><span class='line'> * frames and clear it. undo_retrans is decreased above, L|R frames
</span><span class='line'> * are accounted above as well.
</span><span class='line'> */
</span><span class='line'>if (dup_sack &amp;&amp; (sacked &amp; TCPCB_SACKED_RETRANS)) {
</span><span class='line'>    sacked &amp;= ~TCPCB_SACKED_RETRANS;
</span><span class='line'>    tp-&gt;retrans_out -= pcount;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return sacked;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;最后我们来看tcp_sacktag_write_queue的最后一部分，也就是更新cache的部分。 
</span><span class='line'>
</span><span class='line'>它也就是将处理过的sack清0,没处理过的保存到cache中。 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;//开始遍历，可以看到这里将将我们未处理的sack段的序列号清0.
</span><span class='line'>for (i = 0; i &lt; ARRAY_SIZE(tp-&gt;recv_sack_cache) - used_sacks; i++) {
</span><span class='line'>    tp-&gt;recv_sack_cache[i].start_seq = 0;
</span><span class='line'>    tp-&gt;recv_sack_cache[i].end_seq = 0;
</span><span class='line'>}
</span><span class='line'>//然后保存这次处理了的段。
</span><span class='line'>for (j = 0; j &lt; used_sacks; j++)
</span><span class='line'>    tp-&gt;recv_sack_cache[i++] = sp[j];
</span><span class='line'>
</span><span class='line'>//标记丢失的段。
</span><span class='line'>tcp_mark_lost_retrans(sk);
</span><span class='line'>
</span><span class='line'>tcp_verify_left_out(tp);
</span><span class='line'>
</span><span class='line'>if ((state.reord &lt; tp-&gt;fackets_out) &amp;&amp;
</span><span class='line'>    ((icsk-&gt;icsk_ca_state != TCP_CA_Loss) || tp-&gt;undo_marker) &amp;&amp;
</span><span class='line'>    (!tp-&gt;frto_highmark || after(tp-&gt;snd_una, tp-&gt;frto_highmark)))
</span><span class='line'>    tcp_update_reordering(sk, tp-&gt;fackets_out - state.reord, 0);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[内核tcp的ack的处理tcp_ack]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/09/06/kernel-net-ack/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-09-06T15:40:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/09/06/kernel-net-ack&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://simohayha.iteye.com/blog/572505"&gt;http://simohayha.iteye.com/blog/572505&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们来看tcp输入对于ack，段的处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;先是ack的处理，在内核中，处理ack段是通过tcp_ack来进行的。&lt;br/&gt;
</span><span class='line'>这个函数主要功能是：&lt;/li&gt;
</span><span class='line'>&lt;li&gt;update重传队列，并基于sack来设置skb的相关buf。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;update发送窗口。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;基于sack的信息或者重复ack来决定是否进入拥塞模式。&lt;br/&gt;
</span><span class='line'>在看之前我们要知道tcp是累积确认的。为了解决带来的缺点，我们才需要sack的。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  然后我们来看几个很重要的数据结构，先是tcp_skb_cb，它其实就是表示skb中所保存的tcp的控制信息。而他是保存在skb的cb中的(这个域可以看我前面的blog）。所以这里我们经常会用TCP_SKB_CB来存取这个结构。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define TCP_SKB_CB(__skb)   ((struct tcp_skb_cb *)&amp;((__skb)-&gt;cb[0]))
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>这里还有一个inet_skb_parm，这个结构保存了ipoption的一些信息。</span></code></pre></td></tr></table></div></figure>
    struct inet_skb_parm
    {
        struct ip_options   opt;        /<em> Compiled IP options      </em>/
        unsigned char       flags;</p>

<pre><code>    #define IPSKB_FORWARDED         1
    #define IPSKB_XFRM_TUNNEL_SIZE  2
    #define IPSKB_XFRM_TRANSFORMED  4
    #define IPSKB_FRAG_COMPLETE     8
    #define IPSKB_REROUTED          16
};
</code></pre>

<pre><code>然后来看tcp_skb_cb：
</code></pre>

<pre><code>struct tcp_skb_cb {
    union {
        struct inet_skb_parm    h4;
#if defined(CONFIG_IPV6) || defined (CONFIG_IPV6_MODULE)
        struct inet6_skb_parm   h6;
#endif
    } header;   /* For incoming frames      */
//这个表示当前tcp包的序列号
    __u32       seq;
//这个表示结束序列号，也就是SEQ + FIN + SYN + datalen。
    __u32       end_seq;
//主要用来计算rtt
    __u32       when;
//tcp头的flag（比如syn，fin等)，它能取的值，我们下面会介绍。
    __u8        flags;

//SACK/FACK的状态flag或者是sack option的偏移(相对于tcp头的)。我们下面会介绍
    __u8        sacked;
//ack的序列号。
    __u32       ack_seq;
};
</code></pre>

<pre><code>下面就是flags所能取的值，可以看到也就是tcp头的控制位。
</code></pre>

<pre><code>#define TCPCB_FLAG_FIN      0x01
#define TCPCB_FLAG_SYN      0x02
#define TCPCB_FLAG_RST      0x04
#define TCPCB_FLAG_PSH      0x08
#define TCPCB_FLAG_ACK      0x10
#define TCPCB_FLAG_URG      0x20
#define TCPCB_FLAG_ECE      0x40
#define TCPCB_FLAG_CWR      0x80
</code></pre>

<pre><code>然后是sack/fack的状态标记：
</code></pre>

<pre><code>//有这个域说明当前的tcpcb是被sack块确认的。
#define TCPCB_SACKED_ACKED  0x01
//表示重传的帧
#define TCPCB_SACKED_RETRANS    0x02
//丢失
#define TCPCB_LOST      0x04
#define TCPCB_TAGBITS       0x07
//重传的帧。
#define TCPCB_EVER_RETRANS  0x80
#define TCPCB_RETRANS       (TCPCB_SACKED_RETRANS|TCPCB_EVER_RETRANS)
</code></pre>

<pre><code>  这里要注意，当我们接收到正确的SACK后，这个域就会被初始化为sack所在的相对偏移(也就是相对于tcp头的偏移值，这样我们就能很容易得到sack option的位置).
然后是tcp_sock，这个结构保存了我们整个tcp层所需要得所有必要的信息（也就是从sock中提取出来).我们分两个部分来看这个结构，这里只看我们关注的两部分，第一部分是窗口相关的一些域。第二部分是拥塞控制的一些相关域。
先来看窗口相关的：
</code></pre>

<pre><code>//我们期待从另一台设备接收的下一个数据字节的序列号。
u32 rcv_nxt;
//还没有被读取的数据的序列号。
u32 copied_seq;
//当最后一次窗口update被发送之前我们的rcv_nxt.
u32 rcv_wup;
//将要发送给另一台设备的下一个数据字节的序列号。
u32 snd_nxt;
//已经发送但尚未被确认的第一个数据字节的序列号。
u32 snd_una;
//
u32 snd_sml;
//最后一次接收到ack的时间戳，主要用于keepalive
u32 rcv_tstamp;
//最后一次发送数据包的时间戳。
u32 lsndtime;
//发送窗口长度
u32 snd_wnd;
//接收窗口长度。
u32 rcv_wnd
//发送未确认的数据包的个数（或者字节数？）
u32 packets_out;
//重传的数据包的个数
u32 retrans_out;
</code></pre>

<pre><code>然后是拥塞部分，看这里之前还是需要取熟悉一下tcp拥塞控制的相关概念。
</code></pre>

<pre><code>//慢开始的阀值，也就是超过这个我们就要进入拥塞避免的阶段
u32  snd_ssthresh;
//发送的拥塞窗口
u32 snd_cwnd;
//这个应该是拥塞状态下所发松的数据字节数
u32 snd_cwnd_cnt;
//这里也就是cwnd的最大值
u32 snd_cwnd_clamp;
//这两个值不太理解什么意思。
u32 snd_cwnd_used;
u32 snd_cwnd_stamp;

//接收窗口打消
u32 rcv_wnd;
//tcp的发送buf数据的尾部序列号。
u32 write_seq;
//最后一次push的数据的序列号
u32 pushed_seq;
//丢失的数据包字节数
u32 lost_out;
//sack的数据包的字节数
u32 sacked_out;
//fack处理的数据包的字节数
u32 fackets_out;
u32 tso_deferred;
//计数
u32 bytes_acked;
</code></pre>

<pre><code>分析完相关的数据结构我们来看函数的实现。  
来看tcp_ack的代码,函数比较大，因此我们分段来看，先来看一开始的一些校验部分。  
这里有一个tcp_abc也就是proc下面的可以设置的东西，这个主要是看要不要每个ack都要进行拥塞控制。  

&gt; Controls Appropriate Byte Count defined in RFC3465. If set to 0 then does congestion avoid once per ACK. 1 is conservative value, and 2 is more aggressive. The default value is 1.
</code></pre>

<pre><code>struct inet_connection_sock *icsk = inet_csk(sk);
struct tcp_sock *tp = tcp_sk(sk);
//等待ack，也就是发送未确认的序列号。
u32 prior_snd_una = tp-&gt;snd_una;
u32 ack_seq = TCP_SKB_CB(skb)-&gt;seq;
//得到ack的序列号。
u32 ack = TCP_SKB_CB(skb)-&gt;ack_seq;
u32 prior_in_flight;
u32 prior_fackets;
int prior_packets;
int frto_cwnd = 0;

//如果ack的序列号小于发送未确认的，也就是说可能这个ack只是重传老的ack，因此我们忽略它。
if (before(ack, prior_snd_una))
    goto old_ack;

//如果ack大于snd_nxt,也就是它确认了我们还没发送的数据段，因此我们discard这个段。
if (after(ack, tp-&gt;snd_nxt))
    goto invalid_ack;
//如果ack大于发送未确认，则设置flag
if (after(ack, prior_snd_una))
    flag |= FLAG_SND_UNA_ADVANCED;

//是否设置tcp_abc，有设置的话，说明我们不需要每个ack都要拥塞避免，因此我们需要计算已经ack的字节数。
if (sysctl_tcp_abc) {
    if (icsk-&gt;icsk_ca_state &lt; TCP_CA_CWR)
        tp-&gt;bytes_acked += ack - prior_snd_una;
    else if (icsk-&gt;icsk_ca_state == TCP_CA_Loss)
         tp-&gt;bytes_acked += min(ack - prior_snd_una,qtp-&gt;mss_cache);
}

//得到fack的数据包的字节数
prior_fackets = tp-&gt;fackets_out;
//计算还在传输的数据段的字节数,下面会详细分析这个函数。
prior_in_flight = tcp_packets_in_flight(tp);
</code></pre>

<pre><code>packets_out这个表示已经发送还没有ack的数据段的字节数(这个值不会重复加的，比如重传的话不会增加这个值）。  
sakced_out :sack了的字节数。  
lost_out:丢失了的字节数。  
retrans_out:重传的字节数。  
现在我们就对这个函数的返回值很清楚了，它也就是包含了还没有到达对方的数据段的字节数。
</code></pre>

<pre><code>static inline unsigned int tcp_left_out(const struct tcp_sock *tp)
{
    return tp-&gt;sacked_out + tp-&gt;lost_out;
}

static inline unsigned int tcp_packets_in_flight(const struct tcp_sock *tp)
{
    return tp-&gt;packets_out - tcp_left_out(tp) + tp-&gt;retrans_out;
}
</code></pre>

<pre><code>接下来这一段主要是通过判断flag(slow还是fast)来进行一些窗口的操作。有关slow_path和fast_path的区别，可以看我前面的blog。  
fast_path的话很简单，我们就更新相关的域以及snd_wl1(这个域主要是用于update窗口的时候).它这里会被赋值为我们这次的数据包的序列号。然后进行拥塞控制的操作。  
snd_wl1是只要我们需要更新发送窗口的话，这个值是都会被更新的。  
slow_path的话，我们就需要判断要不要update窗口的大小了。以及是否要处理sack等。  
在看下面的代码之前，我们先来看传递进tcp_ack这个函数中的第三个参数flag，这里我们在函数中也还会修改这个值，这个flag也就是当前的skb的类型信息。看了注释后就清楚了。可疑看到好几个都是ack的类型。
</code></pre>

<pre><code>//这个说明当前的输入帧包含有数据。
#define FLAG_DATA       0x01
//这个说明当前的ack是一个窗口更新的ack
#define FLAG_WIN_UPDATE     0x02
//这个ack确认了一些数据
#define FLAG_DATA_ACKED     0x04
//这个表示ack确认了一些我们重传的段。
#define FLAG_RETRANS_DATA_ACKED 0x08
//这个表示这个ack是对syn的回复。
#define FLAG_SYN_ACKED      0x10
//新的sack
#define FLAG_DATA_SACKED    0x20
//ack中包含ECE
#define FLAG_ECE        0x40
//sack检测到了数据丢失。
#define FLAG_DATA_LOST      0x80
//当更新窗口的时候不跳过RFC的检测。
#define FLAG_SLOWPATH       0x100

#define FLAG_ONLY_ORIG_SACKED   0x200
//snd_una被改变了。也就是更新了。
#define FLAG_SND_UNA_ADVANCED   0x400
//包含D-sack
#define FLAG_DSACKING_ACK   0x800
//这个不太理解什么意思。
#define FLAG_NONHEAD_RETRANS_ACKED  0x1000
//
#define FLAG_SACK_RENEGING  0x2000

//下面也就是一些组合。
#define FLAG_ACKED  (FLAG_DATA_ACKED|FLAG_SYN_ACKED)
#define FLAG_NOT_DUP (FLAG_DATA|FLAG_WIN_UPDATE|FLAG_ACKED)
#define FLAG_CA_ALERT       (FLAG_DATA_SACKED|FLAG_ECE)
#define FLAG_FORWARD_PROGRESS   (FLAG_ACKED|FLAG_DATA_SACKED)
#define FLAG_ANY_PROGRESS   (FLAG_FORWARD_PROGRESS|FLAG_SND_UNA_ADVANCED)
</code></pre>

<pre><code>然后我们来看代码，下面的代码会设置flag，也就是用上面的宏。  
这里有一个很大的不同就是slow_path中，我们需要update窗口的大小，而在fast模式中，我们不需要，这个详细去看我前面的blog介绍的fast和slow的区别。fast就是最理想的情况，因此我们不需要update窗口。
</code></pre>

<pre><code>//如果不是slowpath并且ack确实是正确的序列号(必须大于snd_una).
    if (!(flag &amp; FLAG_SLOWPATH) &amp;&amp; after(ack, prior_snd_una)) {
//更新snd_wl1域为ack_seq;
        tcp_update_wl(tp, ack_seq);
//snd_una更新为ack也就是确认的序列号
        tp-&gt;snd_una = ack;
//更新flag域。
        flag |= FLAG_WIN_UPDATE;
//进入拥塞的操作。
        tcp_ca_event(sk, CA_EVENT_FAST_ACK);
................................
    } else {
//这个判断主要是为了判断是否输入帧包含数据。也就是ack还包含了数据，如果有的话，我们设置标记然后后面会处理。
        if (ack_seq != TCP_SKB_CB(skb)-&gt;end_seq)
            flag |= FLAG_DATA;
        else
.....................................

//然后进入更新窗口的操作。
        flag |= tcp_ack_update_window(sk, skb, ack, ack_seq);
//然后判断是否有sack段，有的话，我们进入sack段的处理。
        if (TCP_SKB_CB(skb)-&gt;sacked)
            flag |= tcp_sacktag_write_queue(sk, skb, prior_snd_una);
//判断是否有ecn标记，如果有的话，设置ecn标记。
        if (TCP_ECN_rcv_ecn_echo(tp, tcp_hdr(skb)))
            flag |= FLAG_ECE;
//进入拥塞的处理。
        tcp_ca_event(sk, CA_EVENT_SLOW_ACK);
    }
</code></pre>

<pre><code>接下来这段主要工作是：  
1 清理重传队列中的已经ack的段。  
2 处理F-RTO。  
3 判断是否是零窗口探测的回复ack。  
4 检测是否要进入拥塞处理。  
</code></pre>

<pre><code>sk-&gt;sk_err_soft = 0;
icsk-&gt;icsk_probes_out = 0;
tp-&gt;rcv_tstamp = tcp_time_stamp;
//如果发送并且没有ack的数据段的值为0,则说明这个有可能是0窗口探测的回复，因此我们进入no_queue的处理，这个我们紧接着会详细介绍。
prior_packets = tp-&gt;packets_out;
if (!prior_packets)
    goto no_queue;
//清理重传队列中的已经ack的数据段。
flag |= tcp_clean_rtx_queue(sk, prior_fackets, prior_snd_una);

//处理F-RTO
if (tp-&gt;frto_counter)
    frto_cwnd = tcp_process_frto(sk, flag);

if (before(tp-&gt;frto_highmark, tp-&gt;snd_una))
    tp-&gt;frto_highmark = 0;
//判断ack是否是可疑的。它主要是检测我们是否进入拥塞状态，或者已经处于拥塞状态。
if (tcp_ack_is_dubious(sk, flag)) {
//检测flag以及是否需要update拥塞窗口的大小。
if ((flag &amp; FLAG_DATA_ACKED) &amp;&amp; !frto_cwnd &amp;&amp;
    tcp_may_raise_cwnd(sk, flag))
//如果都为真，则更新拥塞窗口。
    tcp_cong_avoid(sk, ack, prior_in_flight);
//这里进入拥塞状态的处理(这个函数是一个非常关键的函数,等到后面详细分析拥塞的时候，会分析到)。
    tcp_fastretrans_alert(sk, prior_packets - tp-&gt;packets_out,flag);
} else {
//这里可以看到和上面相比，没有tcp_may_raise_cwnd这个，我们紧接着就会分析到。
    if ((flag &amp; FLAG_DATA_ACKED) &amp;&amp; !frto_cwnd)
        tcp_cong_avoid(sk, ack, prior_in_flight);
}
//是否更新neigh子系统。
if ((flag &amp; FLAG_FORWARD_PROGRESS) || !(flag &amp; FLAG_NOT_DUP))
    dst_confirm(sk-&gt;sk_dst_cache);

return 1;

no_queue:
//这里判断发送缓冲区是否为空，如果不为空，则我们进入判断需要重启keepalive定时器还是关闭定时器
    if (tcp_send_head(sk))
        tcp_ack_probe(sk);
    return 1;
</code></pre>

<pre><code>ok，，接着来看上面略过的几个函数，先来看tcp_ack_is_dubious，这里的条件我们一个个来看  
1 说明flag不能是 FLAG_NOT_DUP的， FLAG_NOT_DUP表示我们的ack不是重复的。  
2 是flag是CA_ALERT,它的意思是我们是否在我们进入拥塞状态时被alert。  
3 拥塞状态不能为TCP_CA_OPEN不为这个，就说明我们已经进入了拥塞状态。  
可以看下面这几个宏的定义，就比较清楚了。
</code></pre>

<pre><code>#define FLAG_ACKED  (FLAG_DATA_ACKED|FLAG_SYN_ACKED)
#define FLAG_NOT_DUP (FLAG_DATA|FLAG_WIN_UPDATE|FLAG_ACKED)

//收到sack则说明可能有的段丢失了。而ECE则是路由器提示我们有拥塞了。我们必须处理。
#define FLAG_CA_ALERT       (FLAG_DATA_SACKED|FLAG_ECE)
</code></pre>

<pre><code>上面的任意一个为真。就说明ack是可疑的。这里起始也可以说我们就必须进入拥塞的处理了(tcp_fastretrans_alert)
</code></pre>

<pre><code>static inline int tcp_ack_is_dubious(const struct sock *sk, const int flag)
{
    return (!(flag &amp; FLAG_NOT_DUP) || (flag &amp; FLAG_CA_ALERT) ||inet_csk(sk)-&gt;icsk_ca_state != TCP_CA_Open);
}
</code></pre>

<pre><code>然后是 tcp_may_raise_cwnd，这个函数用来判断是否需要增大拥塞窗口。  
1 不能有ECE flag或者发送的拥塞窗口不能大于slow start的阀值。  
3 拥塞状态为RECO或者CWR.  
</code></pre>

<pre><code>static inline int tcp_may_raise_cwnd(const struct sock *sk, const int flag)
{
    const struct tcp_sock *tp = tcp_sk(sk);
    return (!(flag &amp; FLAG_ECE) || tp-&gt;snd_cwnd &lt; tp-&gt;snd_ssthresh) &amp;&amp;!((1 &lt;&lt; inet_csk(sk)-&gt;icsk_ca_state) &amp; (TCPF_CA_Recovery | TCPF_CA_CWR));
}
</code></pre>

<pre><code>在看tcp_ack_update_window函数之前，我们先来看tcp_may_update_window，这个函数用来判断是否需要更新发送窗口。  
1 新的数据已经被ack了。  
2 当前的数据包的序列号大于当窗口更新的时候那个数据包的序列号。  
3 当前的数据包的序列号等于窗口更新时的序列号并且新的窗口大小大于当前的发送窗口大小。这个说明对端可能已经增加了窗口的大小
</code></pre>

<pre><code>static inline int tcp_may_update_window(const struct tcp_sock *tp,const u32 ack, const u32 ack_seq,const u32 nwin)
{
    return (after(ack, tp-&gt;snd_una) ||
        after(ack_seq, tp-&gt;snd_wl1) ||
        (ack_seq == tp-&gt;snd_wl1 &amp;&amp; nwin &gt; tp-&gt;snd_wnd));
}
</code></pre>

<pre><code>然后是tcp_ack_update_window函数，这个主要用来更新发送窗口的大小。
</code></pre>

<pre><code>static int tcp_ack_update_window(struct sock *sk, struct sk_buff *skb, u32 ack, u32 ack_seq)
{
    struct tcp_sock *tp = tcp_sk(sk);
    int flag = 0;
    //得到窗口的大小。
    u32 nwin = ntohs(tcp_hdr(skb)-&gt;window);

    if (likely(!tcp_hdr(skb)-&gt;syn))
        nwin &lt;&lt;= tp-&gt;rx_opt.snd_wscale;

    //判断是否需要update窗口。
    if (tcp_may_update_window(tp, ack, ack_seq, nwin)) {
        flag |= FLAG_WIN_UPDATE;
    //更新snd_wl1
        tcp_update_wl(tp, ack_seq);
    //如果不等于，则说明我们需要更新窗口。
        if (tp-&gt;snd_wnd != nwin) {
            tp-&gt;snd_wnd = nwin;
    ...................................
        }
    }

    tp-&gt;snd_una = ack;
    return flag;
}
</code></pre>

<pre><code>然后是tcp_cong_avoid函数，这个函数用来实现慢开始和快重传的拥塞算法。
</code></pre>

<pre><code>static void tcp_cong_avoid(struct sock *sk, u32 ack, u32 in_flight)
{
    const struct inet_connection_sock *icsk = inet_csk(sk);
    icsk-&gt;icsk_ca_ops-&gt;cong_avoid(sk, ack, in_flight);
    tcp_sk(sk)-&gt;snd_cwnd_stamp = tcp_time_stamp;
}
</code></pre>

<pre><code>可以看到它主要是调用cong_avoid回调函数，而这个函数被初始化为tcp_reno_cong_avoid，我们来看这个函数，在看这个函数之前我们要知道一些慢开始和快回复的概念。这些东西随便介绍tcp的书上都有介绍的。
</code></pre>

<pre><code>void tcp_reno_cong_avoid(struct sock *sk, u32 ack, u32 in_flight)
{
    struct tcp_sock *tp = tcp_sk(sk);
    //是否已经到达拥塞窗口的限制。
    if (!tcp_is_cwnd_limited(sk, in_flight))
        return;
    //如果拥塞窗口还没有到达慢开始的阈值，我们就进入慢开始处理。
    if (tp-&gt;snd_cwnd &lt;= tp-&gt;snd_ssthresh)
        tcp_slow_start(tp);

    //否则我们就要进入拥塞避免阶段。
    else if (sysctl_tcp_abc) {
    //RFC3465,只有当当前的拥塞窗口的所有段都被ack了，窗口才被允许增加。
    if (tp-&gt;bytes_acked &gt;= tp-&gt;snd_cwnd*tp-&gt;mss_cache) {
        tp-&gt;bytes_acked -= tp-&gt;snd_cwnd*tp-&gt;mss_cache;
            if (tp-&gt;snd_cwnd &lt; tp-&gt;snd_cwnd_clamp)
                tp-&gt;snd_cwnd++;
        }
    } else {
    //和上面处理方式类似。
        tcp_cong_avoid_ai(tp, tp-&gt;snd_cwnd);
    }
}
</code></pre>

<pre><code>最后我们来看tcp_clean_rtx_queue函数，这个函数主要用于清理发送队列中已经被ack的数据段。函数比较大，我们来分段看。  
这里有使用karn算法，也就是如果重传的段，则计算rto的话，不采样这次的值。  
还有就是要判断是syn的ack回复，还是数据的ack回复。以及sack的判断。  
首先是遍历部分：
</code></pre>

<pre><code>while ((skb = tcp_write_queue_head(sk)) &amp;&amp; skb != tcp_send_head(sk)) {
    struct tcp_skb_cb *scb = TCP_SKB_CB(skb);
    u32 acked_pcount;
    u8 sacked = scb-&gt;sacked;
    //这个说明当前的数据已经在发送未确认的段里面了。
    if (after(scb-&gt;end_seq, tp-&gt;snd_una)) {
        //这边不是很懂。
        if (tcp_skb_pcount(skb) == 1 ||
            !after(tp-&gt;snd_una, scb-&gt;seq))
            break;
        acked_pcount = tcp_tso_acked(sk, skb);
        if (!acked_pcount)
            break;
        fully_acked = 0;
    } else {
        acked_pcount = tcp_skb_pcount(skb);
    }
    //如果sack的状态有被设置重传，则我们会使用karn算法。
    if (sacked &amp; TCPCB_RETRANS) {
        //如果标记为sack了重传段，则更新重传的计数。
        if (sacked &amp; TCPCB_SACKED_RETRANS)
            tp-&gt;retrans_out -= acked_pcount;
        flag |= FLAG_RETRANS_DATA_ACKED;

        //都为-1，也就是后面计算rtt，不会采样这次值。
        ca_seq_rtt = -1;
        seq_rtt = -1;
            if ((flag &amp; FLAG_DATA_ACKED) || (acked_pcount &gt; 1))
        flag |= FLAG_NONHEAD_RETRANS_ACKED;
    } else {
        //否则根据时间戳得到对应的rtt
        ca_seq_rtt = now - scb-&gt;when;
        last_ackt = skb-&gt;tstamp;
        if (seq_rtt &lt; 0) {
            seq_rtt = ca_seq_rtt;
        }
        if (!(sacked &amp; TCPCB_SACKED_ACKED))
            reord = min(pkts_acked, reord);
    }
    //如果有sack的数据包被ack确认了，则我们需要减小sack的计数
    if (sacked &amp; TCPCB_SACKED_ACKED)
        tp-&gt;sacked_out -= acked_pcount;
    if (sacked &amp; TCPCB_LOST)
        tp-&gt;lost_out -= acked_pcount;
    //总得发送为ack的数据字节计数更新。
    tp-&gt;packets_out -= acked_pcount;
    pkts_acked += acked_pcount;
    //判断是否为syn的ack。
    if (!(scb-&gt;flags &amp; TCPCB_FLAG_SYN)) {
        flag |= FLAG_DATA_ACKED;
    } else {
        //如果是设置标记
        flag |= FLAG_SYN_ACKED;
        tp-&gt;retrans_stamp = 0;
    }

    if (!fully_acked)
        break;
    //从写buf，unlink掉。
    tcp_unlink_write_queue(skb, sk);
    //释放内存。
    sk_wmem_free_skb(sk, skb);
    tp-&gt;scoreboard_skb_hint = NULL;
    if (skb == tp-&gt;retransmit_skb_hint)
        tp-&gt;retransmit_skb_hint = NULL;
    if (skb == tp-&gt;lost_skb_hint)
        tp-&gt;lost_skb_hint = NULL;
}
</code></pre>

<p>```
剩下的部分就是计算rtt的部分，这里就不介绍了。</p>
]]></content>
  </entry>
  
</feed>
