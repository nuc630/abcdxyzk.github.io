<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: language | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/language/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-07T14:44:12+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[css 二级菜单]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/13/lang-css-menu/"/>
    <updated>2014-11-13T14:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/13/lang-css-menu</id>
    <content type="html"><![CDATA[<pre><code>    &lt;style type="text/css"&gt;

    .divclass
    {
        display:none;
        font-size:12px;
        position:relative;
        left:0px;
        top:0px;
        padding:5px 10px 0px 10px;
        width:320px;
    }
    &lt;/style&gt;
    &lt;script language="javascript" type="text/javascript"&gt;

    function showDiv(divName)
    {
        if (document.getElementById(divName).style.display == "block")
            document.getElementById(divName).style.display = "none"; //隐藏层
        else
            document.getElementById(divName).style.display = "block"; //显示层
    }
    &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;div id="menu"&gt;
    &lt;ul&gt;
    &lt;li&gt;&lt;a href="#" onmousedown="showDiv('div1')"&gt;菜单一&lt;/a&gt;&lt;/li&gt;
        &lt;div id="div1" class=divclass&gt;
        &lt;a href="#" onmousedown="showDiv('div2')"&gt;子菜单一&lt;/a&gt;
            &lt;div id="div2" class=divclass&gt;
            &lt;ul&gt;
            &lt;li&gt;&lt;a href="#"&gt;子菜单一&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#"&gt;子菜单二&lt;/a&gt;&lt;/li&gt;
            &lt;ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;li&gt;&lt;a href="#" onmousedown="showDiv('div3')"&gt;菜单三&lt;/a&gt;&lt;/li&gt;
    &lt;div id="div3" class=divclass&gt;
    &lt;ul&gt;
    &lt;ul&gt;
    &lt;/div&gt;
    &lt;li&gt;&lt;a href="#" onmousedown="showDiv('div4')"&gt;菜单四&lt;/a&gt;&lt;/li&gt;
    &lt;div id="div4" class=divclass&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href="#"&gt;子菜单一&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href="#"&gt;子菜单二&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
    &lt;/div&gt;
    &lt;/ul&gt;
    &lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
    &lt;script language="javascript" type="text/javascript"&gt;
    showDiv('div1');
    &lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extern关键字详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/16/lang-c-extern/"/>
    <updated>2014-10-16T00:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/16/lang-c-extern</id>
    <content type="html"><![CDATA[<h4>1 基本解释</h4>

<p>  extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。</p>

<p>  也就是说extern有两个作用，第一个,当它与"C"一起连用时，如: extern &ldquo;C&rdquo; void fun(int a,  int  b);则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目 全非，可能是fun@aBc_int_int#%$也可能是别的，这要看编译器的"脾气"了(不同的编译器采用的方法不一样)，为什么这么做呢，因为 C++支持函数的重载啊，在这里不去过多的论述这个问题，如果你有兴趣可以去网上搜索，相信你可以得到满意的解释!</p>

<p>  第二，当extern不与"C"在一起修饰变量或函数时，如在头文件中: extern int  g_Int; 它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块活其他模块中使用，记住它是一个声明不是定义!也就是 说B模块(编译单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可,在编译阶段，模块B虽然找不到该函数或变量， 但它不会报错，它会在连接时从模块A生成的目标代码中找到此函数。</p>

<h4>2 问题：extern 变量</h4>

<p>  在一个源文件里定义了一个数组：char a[6];<br/>
  在另外一个文件里用下列语句进行了声明：extern char *a；<br/>
  请问，这样可以吗？</p>

<h5>答案与分析：</h5>

<p>　　1)、不可以，程序运行时会告诉你非法访问。原因在于，指向类型T的指针并不等价于类型T的数组。extern char <em>a声明的是一个指针变量而不是字符数组，因此与实际的定义不同，从而造成运行时非法访问。应该将声明改为extern char a[ ]。<br/>
　　2)、例子分析如下，如果a[] = &ldquo;abcd&rdquo;,则外部变量a=0x61626364 (abcd的ASCII码值)，</em>a显然没有意义<br/>
      显然a指向的空间（0x61626364）没有意义，易出现非法内存访问。<br/>
　　3)、这提示我们，在使用extern时候要严格对应声明时的格式，在实际编程中，这样的错误屡见不鲜。<br/>
　　4)、extern用在变量声明中常常有这样一个作用，你在<em>.c文件中声明了一个全局的变量，这个全局的变量如果要被引用，就放在</em>.h中并用extern来声明。</p>

<h4>3 问题：当方面修改extern 函数原型</h4>

<p>  当函数提供方单方面修改函数原型时，如果使用方不知情继续沿用原来的extern申明，这样编译时编译器不会报错。但是在运行过程中，因为少了或者多了输入参数，往往会照成系统错误，这种情况应该如何解决？</p>

<h5>答案与分析：</h5>

<p>  目前业界针对这种情况的处理没有一个很完美的方案，通常的做法是提供方在自己的xxx_pub.h中提供对外部接口的声明，然后调用方include该头文件，从而省去extern这一步。以避免这种错误。<br/>
  宝剑有双锋，对extern的应用，不同的场合应该选择不同的做法。</p>

<h4>4 问题：extern “C”</h4>

<p>  在C++环境下使用C函数的时候，常常会出现编译器无法找到obj模块中的C函数定义，从而导致链接失败的情况，应该如何解决这种情况呢？</p>

<h5>答案与分析：</h5>

<p>　　C++语言在编译的时候为了解决函数的多态问题，会将函数名和参数联合起来生成一个中间的函数名称，而C语言则不会，因此会造成链接时找不到对应函数的情况，此时C函数就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间函数名。</p>

<p>下面是一个标准的写法：
<code>
    //在.h文件的头上
    #ifdef __cplusplus
    #if __cplusplus
    extern "C"{
        #endif
        #endif /* __cplusplus */
        …
        …
        //.h文件结束的地方
        #ifdef __cplusplus
        #if __cplusplus
    }
    #endif
    #endif /* __cplusplus */
</code></p>

<h4>5 问题：extern 函数声明</h4>

<p>  常常见extern放在函数的前面成为函数声明的一部分，那么，C语言的关键字extern在函数的声明中起什么作用？</p>

<h5>答案与分析：</h5>

<p>  如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。即下述两个函数声明没有明显的区别：<br/>
extern int f(); 和int f();<br/>
  当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。关于这样做的原因和利弊可见下面的这个例子：“用extern修饰的全局变量”</p>

<p>(1) 在test1.h中有下列声明:
<code>
    #ifndef TEST1H
    #define TEST1H
    extern char g_str[]; // 声明全局变量g_str
    void fun1();
    #endif
</code>
(2) 在test1.cpp中
<code>
    #include "test1.h"
    char g_str[] = "123456"; // 定义全局变量g_str
    void fun1() { cout &lt;&lt; g_str &lt;&lt; endl; }
</code>
(3) 以上是test1模块， 它的编译和连接都可以通过,如果我们还有test2模块也想使用g_str,只需要在原文件中引用就可以了
```
    #include &ldquo;test1.h&rdquo;</p>

<pre><code>void fun2()
{
    cout &lt;&lt; g_str &lt;&lt; endl;
}
</code></pre>

<pre><code>  以上test1和test2可以同时编译连接通过，如果你感兴趣的话可以用ultraEdit打开test1.obj,你可以在里面找到"123456" 这个字符串,但是你却不能在test2.obj里面找到，这是因为g_str是整个工程的全局变量，在内存中只存在一份,test2.obj这个编译单元 不需要再有一份了，不然会在连接时报告重复定义这个错误!

(4) 有些人喜欢把全局变量的声明和定义放在一起，这样可以防止忘记了定义，如把上面test1.h改为  
extern char g_str[] = "123456"; // 这个时候相当于没有extern  
  然后把test1.cpp中的g_str的定义去掉,这个时候再编译连接test1和test2两个模块时，会报连接错误， 这是因为你把全局变量g_str的定义放在了头文件之后，test1.cpp这个模块包含了test1.h所以定义了一次g_str,而 test2.cpp也包含了test1.h所以再一次定义了g_str,这个时候连接器在连接test1和test2时发现两个g_str。如果你非要把g_str的定义放在test1.h中的话，那么就把test2的代码中#include "test1.h"去掉 换成:  
extern char g_str[];  
void fun2()   {  cout &lt;&lt; g_str &lt;&lt; endl;   }  
  这个时候编译器就知道g_str是引自于外部的一个编译模块了，不会在本模块中再重复定义一个出来，但是我想说这样做非常糟糕，因为你由于无法在test2.cpp中使用#include "test1.h",那么test1.h中声明的其他函数你也无法使用了，除非也用都用extern修饰，这样的话你光声明的函数就要一大串，而且头文件的作用就是要给外部提供接口使用的，所以 请记住， 只在头文件中做声明，真理总是这么简单。

#### 6. extern 和 static
 (1) extern 表明该变量在别的地方已经定义过了,在这里要使用那个变量.  
 (2) static 表示静态的变量，分配内存的时候, 存储在静态区,不存储在栈上面.  
  static 作用范围是内部连接的关系,  和extern有点相反.它和对象本身是分开存储的,extern也是分开存储的,但是extern可以被其他的对象用extern  引用,而static 不可以,只允许对象本身用它. 具体差别首先，static与extern是一对“水火不容”的家伙，也就是说extern和static不能同时修饰一个变量；其次，static修饰的全局变量声明与定义同时进行，也就是说当你在头文件中使用static声明了全局变量后，它也同时被定义了；最后，static修饰全局变量的作用域只能是本身的编译单元，也就是说它的“全局”只对本编译单元有效，其他编译单元则看不到它,如:  
(1) test1.h:
</code></pre>

<pre><code>#ifndef TEST1H
#define TEST1H
static char g_str[] = "123456"; 
void fun1();
#endif
</code></pre>

<pre><code>(2) test1.cpp:
</code></pre>

<pre><code>#include "test1.h"
void fun1()  {   cout &lt;&lt; g_str &lt;&lt; endl;  }
</code></pre>

<pre><code>(3) test2.cpp
</code></pre>

<pre><code>#include "test1.h"
void fun2()  {   cout &lt;&lt; g_str &lt;&lt; endl;  }
</code></pre>

<pre><code>  以上两个编译单元可以连接成功, 当你打开test1.obj时，你可以在它里面找到字符串"123456",同时你也可以在test2.obj中找到它们，它们之所以可以连接成功而没有报重复定义的错误是因为虽然它们有相同的内容，但是存储的物理地址并不一样， 就像是两个不同变量赋了相同的值一样，而这两个变量分别作用于它们各自的编译单元。  也许你比较较真，自己偷偷的跟踪调试上面的代码,结果你发现两个编译单元（test1,test2）的g_str的内存地址相同，于是你下结论 static修饰的变量也可以作用于其他模块，但是我要告诉你，那是你的编译器在欺骗你，大多数编译器都对代码都有优化功能，以达到生成的目标程序更节省 内存，执行效率更高，当编译器在连接各个编译单元的时候，它会把相同内容的内存只拷贝一份，比如上面的"123456",  位于两个编译单元中的变量都是同样的内容，那么在连接的时候它在内存中就只会存在一份了，如果你把上面的代码改成下面的样子，你马上就可以拆穿编译器的谎 言:  
(1) test1.cpp:
</code></pre>

<pre><code>#include "test1.h"
void fun1()
{
    g_str[0] = ''a'';
    cout &lt;&lt; g_str &lt;&lt; endl;
}
</code></pre>

<pre><code>(2) test2.cpp
</code></pre>

<pre><code>#include "test1.h"
void fun2() {  cout &lt;&lt; g_str &lt;&lt; endl;  }
</code></pre>

<pre><code>(3)
</code></pre>

<pre><code>void main() {
    fun1(); // a23456
    fun2(); // 123456
}
</code></pre>

<p>```
  这个时候你在跟踪代码时，就会发现两个编译单元中的g_str地址并不相同，因为你在一处修改了它，所以编译器被强行的恢复内存的原貌，在内存中存在了两份拷贝给两个模块中的变量使用。正是因为static有以上的特性，所以一般定义static全局变量时，都把它放在原文件中而不是头文件，这样就不会给其他模块造成不必要的信息污染，同样记住这个原则吧！</p>

<h4>7. extern 和const</h4>

<p>  C++中const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，但是const可以与extern连用来声明该常量可以作用于其他编译模块中, 如extern const char g_str[];<br/>
  然后在原文件中别忘了定义:     const char g_str[] = &ldquo;123456&rdquo;; <br/>
  所以当const单独使用时它就与static相同，而当与extern一起合作的时候，它的特性就跟extern的一样了！所以对const我没有什么 可以过多的描述，我只是想提醒你，const char<em> g_str = &ldquo;123456&rdquo; 与 const char g_str[]  =&ldquo;123465"是不同的， 前面那个const 修饰的是char  </em>而不是g_str,它的g_str并不是常量，它被看做是一个定义了的全局变量（可以被其他编译单元使用），  所以如果你像让char<em>g_str遵守const的全局常量的规则，最好这么定义const char</em> const g_str="123456&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[强制内联和强制不内联]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/11/lang-c-inline-noinline/"/>
    <updated>2014-09-11T09:34:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/11/lang-c-inline-noinline</id>
    <content type="html"><![CDATA[<h4>1.强制不内联</h4>

<p>一个函数，如果代码量比较少的话，用 -O3优化开关的话，gcc有可能将这个函数强制内联(inline)即使，你在函数前没有写inline助记符。<br/>
如果是一个手写汇编的函数，那样的话很有可能破坏参数。gcc里有强制不内联的，用法如下
<code>
    void foo() __attribute__((noinline));
</code>
但是有的gcc可能会忽略 noinline。<br/>
那么你可以将你实现的这个函数写到调用函数之后，就不会被inline了。这是因为编译器gcc只内联当前函数之前可见(实现代码在前)的函数。</p>

<h4>2.优化时无法识别inline函数中的ASM汇编</h4>

<p>当GCC尝试内联一个函数时，如果该函数中存在内联汇编，则该汇编语句块可能被丢弃；
<code>
    __inline__ __attribute__((always_inline))int Increment(int volatile *add, int inc)
    {
        int res;
        __asm__
        (
        "lock \n\t"
        "xaddl %0,(%1)\n\t"
        :"=r"(res)
        :"r"(add),"0"(inc)
        :"memory"
        );
        return res;
    }
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[const的使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/03/17/lang-c-const/"/>
    <updated>2014-03-17T17:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/03/17/lang-c-const</id>
    <content type="html"><![CDATA[<h4>1、定义常量</h4>

<h5>(1)const修饰变量</h5>

<p>以下两种定义形式在本质上是一样的。<br/>
它的含义是：const修饰的类型为TYPE的变量value是不可变的。
<code>
    TYPE const ValueName = value;
    const TYPE ValueName = value;
</code></p>

<h5>(2)将const改为外部连接</h5>

<p>作用于扩大至全局,编译时会分配内存,并且可以不进行初始化,仅仅作为声明,编译器认为在程序其他地方进行了定义.
<code>
    extend const int ValueName = value;
</code></p>

<h4><span style="color:red">2、指针使用CONST</span></h4>

<h5>(1)指针本身是常量不可变</h5>

<pre><code>    (char*) const pContent;
    const (char*) pContent;
</code></pre>

<h5>(2)指针所指向的内容是常量不可变</h5>

<pre><code>    const (char) *pContent;
    (char) const *pContent;
</code></pre>

<h5>(3)两者都不可变</h5>

<pre><code>    const char* const pContent;
</code></pre>

<h5>(4)还有其中区别方法，沿着*号划一条线：</h5>

<p>如果const位于<em>的左侧，则const就是用来修饰指针所指向的变量，即指针指向为常量；<br/>
如果const位于</em>的右侧，const就是修饰指针本身，即指针本身是常量。</p>

<h4>3、函数中使用CONST</h4>

<h5>(1)const修饰函数参数</h5>

<h6>a.传递过来的参数在函数内不可以改变(无意义，因为Var本身就是形参)</h6>

<pre><code>    void function(const int Var);
</code></pre>

<h6>b.参数指针所指内容为常量不可变</h6>

<pre><code>    void function(const char* Var);
</code></pre>

<h6>c.参数指针本身为常量不可变(也无意义，因为char* Var也是形参)</h6>

<pre><code>    void function(char* const Var);
</code></pre>

<h6>d.参数为引用，为了增加效率同时防止修改。修饰引用参数时：</h6>

<pre><code>    void function(const Class&amp; Var);//引用参数在函数内不可以改变
    void function(const TYPE&amp; Var); //引用参数在函数内为常量不可变
</code></pre>

<p>这样的一个const引用传递和最普通的函数按值传递的效果是一模一样的,他禁止对引用的对象的一切修改,唯一不同的是按值传递会先建立一个类对象的副本, 然后传递过去,而它直接传递地址,所以这种传递比按值传递更有效.另外只有引用的const传递可以传递一个临时对象,因为临时对象都是const属性, 且是不可见的,他短时间存在一个局部域中,所以不能使用指针,只有引用的const传递能够捕捉到这个家伙.</p>

<h5>(2)const 修饰函数返回值</h5>

<p>const修饰函数返回值其实用的并不是很多，它的含义和const修饰普通变量以及指针的含义基本相同。</p>

<h6>a.</h6>

<p>const int fun1() // 这个其实无意义，因为参数返回本身就是赋值。</p>

<h6>b.</h6>

<p>const int * fun2() //调用时 const int *pValue = fun2();<br/>
                   //我们可以把fun2()看作成一个变量，即指针内容不可变。</p>

<h6>c.</h6>

<p>int* const fun3()   //调用时 int * const pValue = fun2();<br/>
                    //我们可以把fun2()看作成一个变量，即指针本身不可变。</p>

<p>一般情况下，函数的返回值为某个对象时，如果将其声明为const时，多用于操作符的重载。<br/>
通常，不建议用const修饰函数的返回值类型为某个对象或对某个对象引用的情况。<br/>
原因如下：<br/>
如果返回值为某个对象为const（const A test = A 实例）或某个对象的引用为const（const A&amp; test = A实例） ，<br/>
则返回值具有const属性，则返回实例只能访问类A中的公有（保护）数据成员和const成员函数，<br/>
并且不允许对其进行赋值操作，这在一般情况下很少用到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可重入函数与不可重入函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/01/09/lang-c-re-enter-fun/"/>
    <updated>2014-01-09T17:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/01/09/lang-c-re-enter-fun</id>
    <content type="html"><![CDATA[<p>可重入函数主要用于多任务环境中，简单来说就是可以被中断的函数，即在这个函数执行的任何时刻中断它，转入OS调度下去执行另外一段代 码，返回控制时不会出现什么错误；也意味着它除了使用自己栈上的变量以外不依赖于任何环境（包括static），这样的函数就是 purecode（纯代码）可重入，可以允许有该函数的多个副本在运行，由于它们使用的是分离的栈，所以不会互相干扰。而不可重入的函数由于使用了一些系 统资源，比如全局变量区、中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p>

<p>可重入函数确实需要访问全局变量（包括 static），一定要注意实施互斥手段。它在并行运行环境中非常重要，但是一般要为访问全局变量付出一些性能代价。编写可重入函数时，若使用全局变量，则应通过关中断、信号量（即P、V操作）等手段对其加以保护。若对所使用的全局变量不加以保护，则此函数就不具有可重入性，即当多个进程调用此函数时，很有可能使有关全局变量变为不可知状态。</p>

<p>示例：假设Exam是 int型全局变量，函数Squre_Exam返回Exam平方值。那么如下函数不具有可重入性。
<code>
    int Exam = 0;
    unsigned int example( int para )
    {
        unsigned int temp;
        Exam = para; // （**）
         temp = Square_Exam( );
        return temp;  
    }
</code>
此函数若被多个进程调用的话，其结果可能是未知的，因为当（**）语句刚执行完后，另外一个使用本函数的进程可能正好被激活，那么当新激活的进程执行到此 函数时，将使Exam赋与另一个不同的para值，所以当控制重新回到“temp = Square_Exam( )”后，计算出的temp很可能不是预想中的结果。此函数应如下改进。
<code>
    int Exam = 0;
    unsigned int example( int para )
    {
        unsigned int temp;  
        [申请信号量操作] //(1)  加锁  
        Exam = para;  
        temp = Square_Exam( );  
        [释放信号量操作] //   解锁   
        return temp;  
    }
</code>
申请不到“信号量”，说明另外的进程正处于给Exam赋值并计算其平方过程中（即正在使用此信号）,本进程必须等待其释放信号后，才可继续执行。若申请到 信号，则可继续执行，但其它进程必须等待本进程释放信号量后，才能再使用本信号。保证函数的可重入性的方法：<br/>
     1、在写函数时候尽量使用局部变量（例如寄存器、堆栈中的变量）；<br/>
     2、对于要使用的全局变量要加以保护（如采取关中断、信号量等方法），这样构成的函数就一定是一个可重入的函数。</p>

<p>满足下列条件的函数多数是不可重入的：<br/>
     1、函数体内使用了静态的数据结构；<br/>
     2、函数体内调用了malloc()或者free()函数；<br/>
     3、函数体内调用了标准I/O函数。</p>

<p>如何将一个不可重入的函数改写成可重入函数呢？把一个不可重入函数变成可重入的唯一方法是用可重入规则来重写它。其实很简单，只要遵守了几条很容易理解的规则，那么写出来的函数就是可重入的：<br/>
     1、不要使用全局变量。因为别的代码很可能覆盖这些变量值。<br/>
     2、在和硬件发生交互的时候，切记执行类似disinterrupt()之类的操作，就是关闭硬件中断。完成交互记得打开中断，在有些系列上，这叫做“进入/ 退出核心”。<br/>
     3、不能调用其它任何不可重入的函数。<br/>
     4、谨慎使用堆栈。最好先在使用前先OS_ENTER_KERNAL。</p>
]]></content>
  </entry>
  
</feed>
