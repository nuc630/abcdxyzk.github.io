<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~11 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~11/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-23T18:01:22+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式常用字符]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base/"/>
    <updated>2014-11-27T19:05:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base</id>
    <content type="html"><![CDATA[<table>
    <tr>
        <td style="text-align: center;">字符</td>
        <td style="text-align: center;">描述</td>
    </tr>
    <tr>
        <td style="text-align: center;">\</td>
        <td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。</td>
    </tr>
    <tr>
        <td style="text-align: center;">^</td>
        <td>匹配输入字符串的开始位置。如果设置了&nbsp;<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，^ 也匹配 '\n' 或 '\r' 之后的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">$</td>
        <td>匹配输入字符串的结束位置。如果设置了<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，$ 也匹配 '\n' 或 '\r' 之前的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\A</td>
        <td>指定匹配必须出现在字符串的开头（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\Z</td>
        <td>指定匹配必须出现在字符串的结尾或字符串结尾的 &nbsp; &nbsp; 之前（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\z</td>
        <td>指定匹配必须出现在字符串的结尾（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">*</td>
        <td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">+</td>
        <td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>}</td>
        <td><em>n</em>&nbsp;是一个非负整数。匹配确定的&nbsp;<em>n</em>&nbsp;次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,}</td>
        <td><em>n</em>&nbsp;是一个非负整数。至少匹配<em>n</em>&nbsp;次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,<em>m</em>}</td>
        <td><em>m</em>&nbsp;和&nbsp;<em>n</em>&nbsp;均为非负整数，其中<em>n</em>&nbsp;&lt;=&nbsp;<em>m</em>。最少匹配&nbsp;<em>n</em>&nbsp;次且最多匹配&nbsp;<em>m</em>&nbsp;次。刘， "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {<em>n</em>}, {<em>n</em>,}, {<em>n</em>,<em>m</em>}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">.</td>
        <td>匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(<em>pattern</em>)</td>
        <td>匹配<em>pattern</em>&nbsp;并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用&nbsp;<strong>SubMatches</strong>&nbsp;集合，在Visual Basic Scripting Edition 中则使用&nbsp;<strong>$0</strong>…<strong>$9</strong>&nbsp;属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?:<em>pattern</em>)</td>
        <td>匹配&nbsp;<em>pattern</em>&nbsp;但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?=<em>pattern</em>)</td>
        <td>正向预查，在任何匹配&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， 'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?!<em>pattern</em>)</td>
        <td>负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
    </tr>
    <tr>
        <td style="text-align: center;"><em>x</em>|<em>y</em></td>
        <td>匹配&nbsp;<em>x</em>&nbsp;或&nbsp;<em>y</em>。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>xyz</em>]</td>
        <td>字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>xyz</em>]</td>
        <td>负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>a-z</em>]</td>
        <td>字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>a-z</em>]</td>
        <td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\b</td>
        <td>匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\B</td>
        <td>匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\c<em>x</em></td>
        <td>匹配由<em>x</em>指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。&nbsp;<em>x</em>&nbsp;的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\d</td>
        <td>匹配一个数字字符。等价于 [0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\D</td>
        <td>匹配一个非数字字符。等价于 [^0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\f</td>
        <td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\n</td>
        <td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\r</td>
        <td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\s</td>
        <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\S</td>
        <td>匹配任何非空白字符。等价于 [^&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\t</td>
        <td>匹配一个制表符。等价于 \x09 和 \cI。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\v</td>
        <td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\w</td>
        <td>匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\W</td>
        <td>匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\x<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， '\x41' 匹配 "A"。'\x041' 则等价于 '\x04' &amp; "1"。正则表达式中可以使用 ASCII 编码。.</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>num</em></td>
        <td>匹配&nbsp;<em>num</em>，其中&nbsp;<em>num</em>&nbsp;是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>n</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>n</em>&nbsp;之前至少&nbsp;<em>n</em>&nbsp;个获取的子表达式，则&nbsp;<em>n</em>&nbsp;为后向引用。否则，如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-7)，则&nbsp;<em>n</em>&nbsp;为一个八进制转义值。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nm</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>nm</em>&nbsp;之前至少有is preceded by at least&nbsp;<em>nm</em>&nbsp;个获取得子表达式，则&nbsp;<em>nm</em>&nbsp;为后向引用。如果 \<em>nm</em>&nbsp;之前至少有&nbsp;<em>n</em>&nbsp;个获取，则&nbsp;<em>n</em>&nbsp;为一个后跟文字&nbsp;<em>m&nbsp;</em>的后向引用。如果前面的条件都不满足，若&nbsp;&nbsp;<em>n</em>&nbsp;和&nbsp;<em>m</em>&nbsp;均为八进制数字 (0-7)，则 \<em>nm</em>&nbsp;将匹配八进制转义值&nbsp;<em>nm</em>。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nml</em></td>
        <td>如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-3)，且&nbsp;<em>m</em>&nbsp;和&nbsp;<em>l</em>&nbsp;均为八进制数字 (0-7)，则匹配八进制转义值&nbsp;<em>nml。</em></td>
    </tr>
    <tr>
        <td style="text-align: center;">\u<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
    </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll的一些全局变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll/"/>
    <updated>2014-11-27T13:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://jekyllrb.com/docs/variables/">http://jekyllrb.com/docs/variables/</a><br/>
octopress是基于jekyll，所以也可以用这些内容</p>

<h4>Variables</h4>

<p>Jekyll traverses your site looking for files to process. Any files with YAML front matter are subject to processing. For each of these files, Jekyll makes a variety of data available via the Liquid templating system. The following is a reference of the available data.</p>

<h5>Global Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site</p></td>
      <td><p>
          Sitewide information + configuration settings from
          _config.yml. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>page</p></td>
      <td><p>
        Page specific information + the <a href="../frontmatter/">YAML front
        matter</a>. Custom variables set via the YAML Front Matter will be
        available here. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>content</p></td>
      <td><p>
        In layout files, the rendered content of the Post or Page being wrapped.
        Not defined in Post or Page files.
      </p></td>
    </tr>
    <tr>
      <td><p>paginator</p></td>
      <td><p>
        When the paginate configuration option is set, this
        variable becomes available for use. 
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Site Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site.time</p></td>
      <td><p>
        The current time (when you run the jekyll command).
      </p></td>
    </tr>
    <tr>
      <td><p>site.pages</p></td>
      <td><p>
        A list of all Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.posts</p></td>
      <td><p>
        A reverse chronological list of all Posts.
      </p></td>
    </tr>
    <tr>
      <td><p>site.related_posts</p></td>
      <td><p>
        If the page being processed is a Post, this contains a list of up to ten
        related Posts. By default, these are low quality but fast to compute.
        For high quality but slow to compute results, run the
        jekyll command with the --lsi (latent semantic
        indexing) option.
      </p></td>
    </tr>
    <tr>
      <td><p>site.static_files</p></td>
      <td><p>
        A list of all static files (i.e. files not processed by Jekyll's
        converters or the Liquid renderer). Each file has three properties:
        path, modified_time and extname.
      </p></td>
    </tr>
    <tr>
      <td><p>site.html_pages</p></td>
      <td><p>
        A list of all HTML Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.collections</p></td>
      <td><p>
        A list of all the collections.
      </p></td>
    </tr>
    <tr>
      <td><p>site.data</p></td>
      <td><p>
        A list containing the data loaded from the YAML files located in the _data directory.
      </p></td>
    </tr>
    <tr>
      <td><p>site.documents</p></td>
      <td><p>
        A list of all the documents in every collection.
      </p></td>
    </tr>
    <tr>
      <td><p>site.categories.CATEGORY</p></td>
      <td><p>
        The list of all Posts in category CATEGORY.
      </p></td>
    </tr>
    <tr>
      <td><p>site.tags.TAG</p></td>
      <td><p>
        The list of all Posts with tag TAG.
      </p></td>
    </tr>
    <tr>
      <td><p>site.[CONFIGURATION_DATA]</p></td>
      <td><p>
        All the variables set via the command line and your
        _config.yml are available through the site
        variable. For example, if you have url: http://mysite.com
        in your configuration file, then in your Posts and Pages it will be
        stored in site.url. Jekyll does not parse changes to
        _config.yml in watch mode, you must restart
        Jekyll to see changes to variables.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Page Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>page.content</p></td>
      <td><p>
        The content of the Page, rendered or un-rendered depending upon
        what Liquid is being processed and what page is.
      </p></td>
    </tr>
    <tr>
      <td><p>page.title</p></td>
      <td><p>
        The title of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.excerpt</p></td>
      <td><p>
        The un-rendered excerpt of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.url</p></td>
      <td><p>
        The URL of the Post without the domain, but
        with a leading slash, e.g.
        /2008/12/14/my-post.html
      </p></td>
    </tr>
    <tr>
      <td><p>page.date</p></td>
      <td><p>
        The Date assigned to the Post. This can be overridden in a Post’s front
        matter by specifying a new date/time in the format
        YYYY-MM-DD HH:MM:SS (assuming UTC), or
        YYYY-MM-DD HH:MM:SS +/-TTTT (to specify a time zone using
        an offset from UTC. e.g. 2008-12-14 10:30:00 +0900).
      </p></td>
    </tr>
    <tr>
      <td><p>page.id</p></td>
      <td><p>
        An identifier unique to the Post (useful in RSS feeds). e.g.
        /2008/12/14/my-post
      </p></td>
    </tr>
    <tr>
      <td><p>page.categories</p></td>
      <td><p>
        The list of categories to which this post belongs. Categories are
        derived from the directory structure above the _posts
        directory. For example, a post at
        /work/code/_posts/2008-12-24-closures.md would have this
        field set to ['work', 'code']. These can also be specified
        in the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.tags</p></td>
      <td><p>
        The list of tags to which this post belongs. These can be specified in
        the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.path</p></td>
      <td><p>
        The path to the raw post or page. Example usage: Linking back to the
        page or post’s source on GitHub. This can be overridden in the
        <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.next</p></td>
      <td><p>
        The next post relative to the position of the current post in
        site.posts. Returns nil for the last entry.
      </p></td>
    </tr>
    <tr>
      <td><p>page.previous</p></td>
      <td><p>
        The previous post relative to the position of the current post in
        site.posts. Returns nil for the first entry.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Paginator</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>paginator.per_page</p></td>
      <td><p>Number of Posts per page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.posts</p></td>
      <td><p>Posts available for that page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_posts</p></td>
      <td><p>Total number of Posts.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_pages</p></td>
      <td><p>Total number of Pages.</p></td>
    </tr>
    <tr>
      <td><p>paginator.page</p></td>
      <td><p>The number of the current page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page</p></td>
      <td><p>The number of the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page_path</p></td>
      <td><p>The path to the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page</p></td>
      <td><p>The number of the next page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page_path</p></td>
      <td><p>The path to the next page.</p></td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress优化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/25/octopress-5/"/>
    <updated>2014-11-25T23:34:33+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/25/octopress-5</id>
    <content type="html"><![CDATA[<h4>octopress优化</h4>

<p>能够让octopress在50篇文章下跑进5s，不优化要跑60s左右<br/>
300篇15s左右</p>

<h5>运行过程</h5>

<p>看octopress目录下的Rakefile，里面有generate，preview，watch等。<br/>
输入rake generate是就是按照Rakefile中<code>task :generate do</code>执行的。<br/>
最主要的两条：
<code>
    system "compass compile --css-dir #{source_dir}/stylesheets"
    system "jekyll build"
</code>
第一条是编译css，第二条是生成文章。</p>

<!--more-->


<p>第一条不知道如何优化，略过。<br/>
第二条接着执行到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/commands/build.rb<br/>
文件的init_with_program -> process -> build然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/command.rb文件的process_site然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb文件的process，<br/>
process代码如下：
<code>
    47     def process
    48       reset
    49       read
    50       generate
    51       render
    52       cleanup
    53       write
    54     end
</code>
这里的函数都在这个文件里，主要费时在generate和render。</p>

<h6>1. generate</h6>

<p>generate会执行octopress/plugins目录下的tag_generator.rb和category_generator.rb，<br/>
这两个文件的write_tag_indexes和write_category_indexes分别回构建tag和category的分类首页。<br/>
所以tag和category越多构建越慢。
<code>
    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:255:in `block in post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:224:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:100:in `write_category_index'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:112:in `block in write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `each'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:141:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:280:in `block in generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:50:in `process'
</code></p>

<h6>2. render</h6>

<pre><code>    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:249:in `block in pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:222:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:299:in `block in render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `render'
</code></pre>

<p>都是慢在octopress/plugins/rubypants.rb的to_html函数。</p>

<h5>优化</h5>

<h6>1、to_html函数的tokenize和gsub很慢。</h6>

<p>to_html函数只是把一些' &ldquo;之类的转成html，试了一下不执行to_html，diff出来差别不大，页面上显示也都还OK。单纯的&lt;在其他地方已经转好了。<br/>
所以octopress/plugins/octopress_filters.rb中不执行to_html</p>

<h6>2、每次计算侧边栏太慢</h6>

<p>所有页面都是按照其layout的格式找对应source/_layout/下的模板来生成的。<br/>
注意post.html和page.html的最后都有 <code>{ { include_array XXX } }</code>, 这就是说每个页面都要运行plugins/include_array.rb中的render(context)来生成侧边栏。<br/>
但是侧边栏应该是(?)都一样的。所以改成隔一定时间计算一次
<code>
     26     @@caltime = 0
     27     @@retstore = ""
     28     def render(context)
     29         if Time.now.to_f - @@caltime &lt; context.registers[:site].config['recaltime']
     30                 return @@retstore;
     31         end
     32         @@caltime = Time.now.to_f
    ...
     58       @@retstore = rtn
</code>
为什么要隔一段时间？因为在preview中有改动任何文件就会重新生成一次，这时侧边栏也要重新计算</p>

<h6>3、减小文件大小</h6>

<p>我的侧边栏有二级目录，整个侧边栏比较大，50篇时已经有20k。所以将侧边栏独立成一个文件，用js来load。<br/>
plugins/include_array.rb中加：
<code>
    59       fp = File.new('sidebar.html', 'w');
    60       fp.puts(rtn);
    61       fp.puts('&lt;script src="http://abcdxyzk.github.io/javascripts/category.js" type="text/javascript"&gt;&lt;/script&gt;');
    62       fp.puts('&lt;script type="text/javascript"&gt; hadOpenDiv();&lt;/script&gt;');
    63       fp.close();
</code>
source/<em>layout/post.html和source/</em>layout/page.html的最后部分改成：
<code>
    35 &lt;aside class="sidebar" id='load_sidebar'&gt;
    36 &lt;/aside&gt;
    37 &lt;script type="text/javascript"&gt;
    38   $('#load_sidebar').load('/sidebar.html');
    39 &lt;/script&gt;
</code>
因为source/index.html里也有 <code>{ { include_array XXX } }</code>，所以不用担心不执行plugins/include_array.rb。<br/>
问题1：就是"最近评论"要从_config.yml中的default_asides:中移到source/index.html中。因为js load进的文件中的document.write不执行了。这也就是为什么source/index.html不采用js load。如果是<code>&lt;aside&gt;</code>中增加div用来load的话，侧边栏缩到底部就没有三列的效果。<br/>
问题2：sidebar.html要写到主目录，source/sidebar.html中用ln软链接到sidebar.html。因为如果在watch状态直接写到source/目录的话，他就会再次认为文件有改变，又重新生成。造成在不断生成的死循环。细节是在Rakefile文件的generate和preview中先加软链接再运行其他
<code>
    56 task :generate do
    57   system('&gt;`pwd`/sidebar.html')
    58   system('ln -f -s `pwd`/sidebar.html `pwd`/source/sidebar.html')
</code></p>

<h5>优化效果</h5>

<p>在文件中加入时间输出代码
<code>
    p "    #{ __FILE__} line:#{__LINE__} time:#{Time.now.to_f}"
</code>
50篇文章，40个tag，61个category，运行如下：
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1416933869.1204205"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1416933870.019113"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1416933870.7509217"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1416933871.8838022"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1416933871.8838577"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1416933872.389736"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1416933872.4271524"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1416933873.8506286"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1416933873.9671116"
    "total = 4.846851825714111"
</code>
total = 4.846851825714111，不优化要60s左右。</p>

<p>300篇
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1426179501.0918927"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1426179502.0703895"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1426179503.376222"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1426179508.2033086"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1426179508.2033658"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1426179508.3304708"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1426179508.3851612"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1426179515.877446"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1426179516.2085445"
    "total = 15.116710424423218"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress 加站长统计和站内搜索]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/20/octopress-4/"/>
    <updated>2014-11-20T18:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/20/octopress-4</id>
    <content type="html"><![CDATA[<h4>站长统计</h4>

<p>国内使用很广的CNZZ了，注册后，添加并验证你的网站就可以添加统计代码了，选好自己喜欢的样式，获得代码，可添加到source/_includes/custom/footer.html中。即可查看每天你的博客的流量
<code>
    &lt;script type="text/javascript"&gt;var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1253604690'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s95.cnzz.com/z_stat.php%3Fid%3D1253604690' type='text/javascript'%3E%3C/script%3E"));&lt;/script&gt;
</code></p>

<h4>站内搜索</h4>

<p>为了实现站内搜索(页面不跳转)，</p>

<!--more-->


<h5>需要到tapirgo.com注册你的站点，填入atom.xml的url和邮箱地址，tapirgo会生成一对token，我们只使用public token就够了。</h5>

<h5>打开_config.yml文件，加入tapir_token: your_token</h5>

<h5>修改simple_search为你的站点域名simple_search: your_domain</h5>

<h5>在source/javascripts/新建jquery-tapir.js，内容为</h5>

<pre><code>    (function($){
      var el;
      var settings = {};

      var methods = {
        init: function(options) {
          el = this;

          settings = {
                   token: false,
                   query_param: 'query'
                 };

          if (options) {
        $.extend(settings, options);
          }

          if (!settings.token || settings.query_param == '') {
        return this;
          }

          $.getJSON(
        'http://tapirgo.com/api/1/search.json?token=' + settings.token + '&amp;query=' + paramValue(settings.query_param) + '&amp;callback=?', function(data){
          if(settings['complete']) { settings.complete() }
          $.each(data, function(key, val) {
          document.getElementById('search_results').style.display="block";
          document.getElementById('search_results').style.height="100%";
          document.getElementById('search_results').style.overflow="hidden";
              var str1 = val.content;
              var str2 = str1.substr(1, 250);
              str2 = str2.substr(0, Math.min(str2.length, str2.lastIndexOf(" ")));
            el.append('&lt;div id="content" class="inner"&gt;&lt;article class="post"&gt;&lt;h2 class="title"&gt;&lt;a href="' + val.link + '"&gt;' + val.title + '&lt;/a&gt;&lt;/h2&gt;&lt;div class="entry-content"&gt;&lt;div class="date"&gt;Published on: ' + (val.published_on).substr(0,10) + '&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;' + str2 + '...&lt;/p&gt;&lt;br&gt;&lt;a href="' + val.link +'"&gt;Read on &amp;rarr;&lt;/a&gt;&lt;/article&gt;&lt;/div&gt;');
            if(key &gt;= (data.length-1)){
                el.append('&lt;div id="content" class="inner"&gt;&lt;center&gt;&lt;h2 style="border-bottom: 1px solid #ddd;"&gt;Result ends&lt;/h2&gt;&lt;/center&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;');
            }
          });
        }
          );

          return this;
        }
      };

      // Extract the param value from the URL.
      function paramValue(query_param) {
        var results = new RegExp('[\\?&amp;]' + query_param + '=([^&amp;#]*)').exec(window.location.href);
        return results ? results[1] : false;
      }

      $.fn.tapir = function(method) {
        if (methods[method]) {
          return methods[ method ].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || ! method) {
          return methods.init.apply(this, arguments);
        } else {
          $.error('Method ' +  method + ' does not exist on jQuery.tapir');
        }
      };

    })( jQuery );
</code></pre>

<h5>然后在source/search/index.html中</h5>

<pre><code>---
    layout: default
    ---
    &lt;h1 class="entry-title"&gt;&lt;center&gt;Search Results&lt;/center&gt;&lt;/h1&gt;
    &lt;div id="search_loading" style="margin: 40px 0"&gt;
        &lt;center&gt;&lt;img src="http://abcdxyzk.github.io/images/loading.gif"&gt;&lt;/center&gt;
    &lt;/div&gt;

    &lt;script type="text/javascript" src="http://abcdxyzk.github.io/javascripts/jquery-tapir.js"&gt;&lt;/script&gt;
    &lt;div id="search_results" style="display:none"&gt;
    &lt;br&gt;
    &lt;/div&gt;
    &lt;script&gt;
         $('#search_results').tapir({
             'token': 'your_token',
             'complete' : function() { document.getElementById('search_loading').style.display="none"; }
         });
    &lt;/script&gt;
</code></pre>

<h5>更新source/_includes/navigation.html</h5>

<p>将原来的google搜索
<code>
    &lt;input type="hidden" name="q" value="site:smarterhjw.com" /&gt;
    &lt;input class="search" type="text" name="q" results="0" placeholder="Search"/&gt;
</code>
更改为
<code>
    &lt;input class="search" name="query" type="text" placeholder="Search..." x-webkit-speech /&gt;
</code>
最后rake generate，就可以了。 此时进行搜索，就不会再跳转到站外去了。</p>

<h5>可以修改一下搜索框展示</h5>

<pre><code>    --- a/sass/partials/_navigation.scss
    +++ b/sass/partials/_navigation.scss
    @@ -74,6 +74,7 @@ body &gt; nav {
           float: right;
           text-align: left;
           padding-left: .8em;
    +      padding-top: .35em;
           width: $sidebar-width-medium - $pad-medium*2 - $sidebar-pad-medium + 20px;
           .search {
         width: 93%;
    @@ -86,7 +87,7 @@ body &gt; nav {
           .search { width: 91%; }
         }
         fieldset.mobile-nav { display: none; }
    -    fieldset[role=search]{ width: 99%; }
    +    fieldset[role=search]{ width: 80%; }
       }
       @media only screen and (min-width: 992px) {
         form {
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown部分语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/17/blog-markdown/"/>
    <updated>2014-11-17T00:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/17/blog-markdown</id>
    <content type="html"><![CDATA[<p><a href="http://wowubuntu.com/markdown/index.html">贴自http://wowubuntu.com/markdown/index.html</a></p>

<h4>段落和换行</h4>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。普通段落不该用空格或制表符来缩进。<br/>
如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>

<h4>标题</h4>

<p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br/>
类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：
<code>
    This is an H1
    =============
    This is an H2
    -------------
</code>
任何数量的 = 和 - 都可以有效果。<br/>
类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：
<code>
    # 这是 H1
    ## 这是 H2
    ###### 这是 H6
</code>
你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：
<code>
    # 这是 H1 #
    ## 这是 H2 ##
    ### 这是 H3 ######
</code></p>

<!--more-->


<h4>列表</h4>

<p>Markdown 支持有序列表和无序列表。<br/>
无序列表使用星号、加号或是减号作为列表标记：
<code>
    *   R
    *   Gr
    *   B
</code>
有序列表则使用数字接着一个英文句点：
<code>
    1.Bird
    2.McHale
    3.Parish
</code></p>

<h4>代码区块</h4>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。<br/>
要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：
<code>
    这是一个普通段落：
        这是一个代码区块。
</code>
Markdown 会转换成：
<code>
    &lt;p&gt;这是一个普通段落：&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;这是一个代码区块。
    &lt;/code&gt;&lt;/pre&gt;
</code></p>

<h4>分隔线</h4>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：
<code>
    * * *
    ***
    *****
    - - -
    ---------------------------------------
</code></p>

<h4>链接</h4>

<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br/>
不管是哪一种，链接文字都是用 [方括号] 来标记。<br/>
要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：
<code>
    This is [an example](http://example.com/ "Title") inline link.
    [This link](http://example.net/) has no title attribute.
</code>
会产生：
<code>
    &lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
    an example&lt;/a&gt; inline link.&lt;/p&gt;
    &lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
    title attribute.&lt;/p&gt;
</code>
如果你是要链接到同样主机的资源，你可以使用相对路径：
<code>
    See my [About](/about/) page for details.
</code></p>

<h4>图片</h4>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。
Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br/>
行内式的图片语法看起来像是：
<code>
    ![Alt text](/path/to/img.jpg)
    ![Alt text](/path/to/img.jpg "Optional title")
</code>
详细叙述如下：<br/>
    一个惊叹号 !<br/>
    接着一个方括号，里面放上图片的替代文字<br/>
    接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &lsquo;title&rsquo; 文字。<br/>
参考式的图片语法则长得像这样：
<code>
    ![Alt text][id]
</code>
「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br/>
<code>
    [id]: url/to/image  "Optional title attribute"
</code>
到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
]]></content>
  </entry>
  
</feed>
