<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~03 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~03/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-22T11:40:38+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CI 处理 URL 的“大小写敏感”问题]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/30/tools-ci-upcase/"/>
    <updated>2012-03-30T21:02:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/30/tools-ci-upcase</id>
    <content type="html"><![CDATA[<h4>CI 处理 URL 的“大小写敏感”问题</h4>

<p>找到system/core里的Router.php文件，修文件：
<code>
    &lt;?php
    //找到 function _validate_request
    function_validate_request($segments)
    {
        // 增加下面这一句，其实就是强制将控制器名字转化为小写
        $segments[0] = strtolower($segments[0]);
        // Does the requested controller exist in the root folder?
        if(file_exists(APPPATH.'controllers/'.$segments[0].EXT))
        {
            return $segments;
        }
    }
    ?&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu安装mysql扩展]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/30/mysql-php-connect/"/>
    <updated>2012-03-30T20:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/30/mysql-php-connect</id>
    <content type="html"><![CDATA[<p>打开“新立得软件包管理器“安装两个东东就好了，</p>

<p>他们分别是：php5-mysql 和 libapache2-mod-auth-mysql，</p>

<p>装好之后重启apache：sudo/etc/init.d/apache2 restart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git remote管理远程库]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/28/tools-git-base3/"/>
    <updated>2012-03-28T21:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/28/tools-git-base3</id>
    <content type="html"><![CDATA[<h4>查看当前的远程库</h4>

<p>要查看当前配置有哪些远程仓库,可以用 git remote 命令,它会列出每个远程库的简短名字.在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,Git 默认使用这个名字来标识你所克隆的原始仓库:
<code>
    $ git clone git://github.com/schacon/ticgit.git
    $ cd ticgit
    $ git remote
        remote也可以加上 -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址:
    $ git remote -v
        origin git://github.com/schacon/ticgit.git
        如果有多个远程仓库,此命令将全部列出.
</code>
这样一来,我就可以非常轻松地从这些用户的仓库中,拉取他们的提交到本地.</p>

<h4>添加远程仓库</h4>

<p>要添加一个新的远程仓库,可以指定一个简单的名字,以便将来引用,运行<code>git remote add [shortname] [url]</code>
<code>
    $ git remote
        origin
    $ git remote add pb git://github.com/paulboone/ticgit.git
    $ git remote -v
        origin git://github.com/schacon/ticgit.git
        pb git://github.com/paulboone/ticgit.git
        现在可以用字串 pb 指代对应的仓库地址了.
        比如说,要抓取所有 Paul 有的,但本地仓库没有的信息,可以运行 git fetch pb
    $ git fetch pb
        现在,Paul 的主干分支(master)已经完全可以在本地访问了,
        对应的名字是 pb/master,你可以将它合并到自己的某个分支,
        或者切换到这个分支,看看有些什么有趣的更新.
</code></p>

<h4>从远程仓库抓取数据</h4>

<p>正如之前所看到的,可以用下面的命令从远程仓库抓取数据到本地:
<code>$ git fetch [remote-name]</code>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据.运行完成后,你就可以在本地访问该远程仓库中的所有分支,将其中某个分支合并到本地,或者只是取出某个分支,一探究竟.</p>

<p>如果是克隆了一个仓库,此命令会自动将远程仓库归于 origin 名下.所以git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新(或是上次 fetch 以来别人提交的更新).有一点很重要,需要记住,fetch 命令只是将远端的数据拉到本地仓库,并不自动合并到当前工作分支,只有当你确实准备好了,才能手工合并.
说明:<br/>
    事先需要创建好远程的仓库,然后执行<br/>
<code>
    git remote add [仓库名] [仓库url]  
    git fetch [远程仓库名]  
    即可抓取到远程仓库数据到本地,再用  
    git merge remotes/[仓库名]/master
    就可以将远程仓库merge到本地当前branch.
</code>
这种分支方式比较适合独立-整合开发,即各自开发测试好后 再整合在一起.</p>

<h4>远程仓库的删除和重命名</h4>

<p>在Git中可以用<code>git remote rename</code>命令修改某个远程仓库的简短名称,比如想把 pb 改成 paul,可以这么运行:
<code>
    $ git remote rename pb paul
    $ git remote
        origin
</code>
paul注意,对远程仓库的重命名,也会使对应的分支名称发生变化,原来的 pb/master 分支现在成了paul/master.
碰到远端仓库服务器迁移,或者原来的克隆镜像不再使用,又或者某个参与者不再贡献代码,那么需要移除对应的远端仓库,可以运行 git remote rm 命令:
<code>
    $ git remote rm paul
    $ git remote
        origin
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodeIgniter去掉url中的index.php]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/26/tools-ci-del-index-php/"/>
    <updated>2012-03-26T18:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/26/tools-ci-del-index-php</id>
    <content type="html"><![CDATA[<h4>RewriteEngine命令需要rewrite mod的支持</h4>

<p><code>$&gt;cd /etc/apache2/mods-enabled</code> 切换到apache下的mods-enabled目录 <br/>
<code>$&gt;sudo ln -s ../mods-available/rewrite.load</code> rewrite.load 启用rewrite mod<br/>
<code>$&gt;sudo /etc/init.d/apache2 restart</code> 重启apache服务器。 或者在apache的配置文件httpd.conf中将#LoadModule rewrite_module modules/mod_rewrite.so前的#去掉，再重启服务器。<br/>
或者<br/>
<code>sudo a2enmod rewrite</code></p>

<h4>CodeIgniter去掉url中的index.php</h4>

<p>CodeIgniter去掉url中的index.php        CI默认中url中带index.php,比如 <code>http://localhost/index.php/blog/comment/1.html</code>
去掉这个index.php步骤：</p>

<h5>1.打开apache的配置文件，conf/httpd.conf ：</h5>

<p><code>LoadModule rewrite_module modules/mod_rewrite.so</code>，把该行前的#去掉。<br/>
搜索 AllowOverride None（配置文件中有多处），看注释信息，将相关.htaccess的该行信息改为AllowOverride All。</p>

<h5>2.在CI的根目录下</h5>

<p>即在index.php，system的同级目录下，建立.htaccess，直接建立该文件名的不会成功，可以先建立记事本文件，另存为该名的文件即可。内容如下（CI手册上也有介绍）：
<code>
RewriteEngine on
RewriteCond $1 !^(index.php|images|robots.txt)
RewriteRule ^(.*)$ /index.php/$1 [L]
</code>
就可以去掉 index.php 了。<br/>
要注意 /index.php/$1 要根据你目录(Web 目录，比如 <code>http://www.domain.com/index.php</code>)的实际情况来定，比如网站根目录是 /ci/index.php 则要写成 /ci/index.php/$1</p>

<p><code>RewriteCond $1 !^(index.php|images|robots.txt)</code>
上面的代码意思是排除某些目录或文件，使得这些目录不会 rewrite 到 index.php 上，这一般用在图片、js、css 等外部资源上。也就是说非 PHP 代码都要排除出去。（这里我排除了 images 目录和 robots.txt 文件，当然 index.php 也应该被排除）</p>

<h5>3.</h5>

<p>将CI中配置文件（system/application/config/config.php）中$config[&lsquo;index_page&rsquo;] = &amp;index.php&;将$config[&lsquo;index_page&rsquo;] = &amp;&; 。<br/>
ok，完成。还要记得重启apache。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tail 命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/03/22/command-tail/"/>
    <updated>2012-03-22T12:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/03/22/command-tail</id>
    <content type="html"><![CDATA[<h5>1.如果你只想看文件的前5行，可以使用head命令，如：</h5>

<pre><code>head -5 /etc/passwd
</code></pre>

<h5>2. 如果你想查看文件的后10行，可以使用tail命令，如：</h5>

<pre><code>tail -10 /etc/passwd 或 tail -n 10/etc/passwd
</code></pre>

<pre><code>tail -f /var/log/messages
</code></pre>

<p>参数-f使tail不停地去读最新的内容，这样有实时监视的效果 用Ctrl＋c来终止！</p>

<h5>3. 查看文件中间一段，你可以使用sed命令，如：</h5>

<pre><code>sed -n '5,10p' /etc/passwd
</code></pre>

<p>这样你就可以只查看文件的第5行到第10行。</p>

<h4>tail语法格式：</h4>

<pre><code>    tail [ -f ][ -c Number | -n Number | -m Number | -b Number | -k Number ] [File ]
    或者
    tail [ -r ][ -n Number ] [ File ]
</code></pre>

<p>使用说明：
  tail命令从指定点开始将 File 参数指定的文件写到标准输出。如果没有指定文件，则会使用标准输入。 Number变量<br />指定将多少单元写入标准输出。 Number变量的值可以是正的或负的整数。如果值的前面有 +（加号），从文件开头<br/>指定的单元数开始将文件写到标准输出。如果值的前面有-（减号），则从文件末尾指定的单元数开始将文件写到<br/>标准输出。如果值前面没有 +（加号）或-（减号），那么从文件末尾指定的单元号开始读取文件。</p>

<p>主要参数：<br/>
<code>
-b Number 从 Number 变量表示的 512 字节块位置开始读取指定文件。
-c Number 从 Number 变量表示的字节位置开始读取指定文件。
-f 如果输入文件是常规文件或如果 File 参数指定 FIFO（先进先出），
    那么 tail 命令不会在复制了输入文件的最后的指定单元后终止，而是继续
    从输入文件读取和复制额外的单元（当这些单元可用时）。如果没有指定 File 参数，
    并且标准输入是管道，则会忽略 -f 标志。tail -f 命令可用于监视另一个进程正在
    写入的文件的增长。
-k Number 从 Number 变量表示的 1KB 块位置开始读取指定文件。
-m Number 从 Number 变量表示的多字节字符位置开始读取指定文件。使用该标志提供在
    单字节和双字节字符代码集环境中的一致结果。
-n Number 从首行或末行位置来读取指定文件，位置由 Number 变量的符号（+ 或 - 或无）表示，并通过行号 Number 进行位移。
-r 从文件末尾以逆序方式显示输出。-r 标志的缺省值是以逆序方式显示整个文件。
    如果文件大于 20,480 字节，那么-r标志只显示最后的 20,480 字节。 -r 标志只有
    与 -n 标志一起时才有效。否则，就会将其忽略。
</code>
<code>
input
tail -b +1 file
tail -c +1 file
tail -n +2 file//从开始数第二行的位置
</code></p>
]]></content>
  </entry>
  
</feed>
