<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2016 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2016/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-02-29T23:44:14+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[socket建立连接 sys_connect]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect/"/>
    <updated>2016-02-29T22:52:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/chensichensi/article/details/5272346">http://blog.csdn.net/chensichensi/article/details/5272346</a></p>

<p><a href="http://blog.csdn.net/qy532846454/article/details/7882819">http://blog.csdn.net/qy532846454/article/details/7882819</a></p>

<p><a href="http://www.2cto.com/kf/201303/198459.html">http://www.2cto.com/kf/201303/198459.html</a></p>

<pre><code>    connect(fd, servaddr, addrlen);
    -&gt; SYSCALL_DEFINE3()
    -&gt; sock-&gt;ops-&gt;connect() == inet_stream_connect (sock-&gt;ops即inet_stream_ops)
    -&gt; tcp_v4_connect()
        -&gt; inet_hash_connect()
            -&gt; __inet_hash_connect()
                -&gt; check_established()
                    -&gt; __inet_check_established()
</code></pre>

<pre><code>    SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
            int, addrlen)
    {
        struct socket *sock;
        struct sockaddr_storage address;
        int err, fput_needed;
        /* 找到文件描述符对应的BSD socket结构，在前面的socket调用中建立*/
        sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);
        if (!sock)
            goto out;
        /* copy对端的地址到内核空间 */
        err = move_addr_to_kernel(uservaddr, addrlen, (struct sockaddr *)&amp;address);
        if (err &lt; 0)
            goto out_put;

        err =
            security_socket_connect(sock, (struct sockaddr *)&amp;address, addrlen);
        if (err)
            goto out_put;
        /* 调用该BSD socket对应的connect调用 */
        err = sock-&gt;ops-&gt;connect(sock, (struct sockaddr *)&amp;address, addrlen,
                     sock-&gt;file-&gt;f_flags);
    out_put:
        /* 释放文件的引用 */
        fput_light(sock-&gt;file, fput_needed);
    out:
        return err;
    }
</code></pre>

<pre><code>    /*
     *  Connect to a remote host. There is regrettably still a little
     *  TCP 'magic' in here.
     */
    int inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
                int addr_len, int flags)
    {
        struct sock *sk = sock-&gt;sk;
        int err;
        long timeo;

        lock_sock(sk);

        if (uaddr-&gt;sa_family == AF_UNSPEC) {
            err = sk-&gt;sk_prot-&gt;disconnect(sk, flags);
            sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;
            goto out;
        }

        switch (sock-&gt;state) {
        default:
            err = -EINVAL;
            goto out;
        case SS_CONNECTED:     /* 该BSD socket已连接*/
            err = -EISCONN;
            goto out;
        case SS_CONNECTING:   /* 该BSD socket正在连接*/
            err = -EALREADY;
            /* Fall out of switch with err, set for this state */
            break;
        case SS_UNCONNECTED:
            err = -EISCONN;
            if (sk-&gt;sk_state != TCP_CLOSE)
                goto out;
                /* INET SOCKET 调用协议特有connect操作符 */
            err = sk-&gt;sk_prot-&gt;connect(sk, uaddr, addr_len);
            if (err &lt; 0)
                goto out;
                /* 上面的调用完成后，连接并没有完成，*/
            sock-&gt;state = SS_CONNECTING;

            /* Just entered SS_CONNECTING state; the only
             * difference is that return value in non-blocking
             * case is EINPROGRESS, rather than EALREADY.
             */
            err = -EINPROGRESS;
            break;
        }
        /* 获取连接超时时间*/
        timeo = sock_sndtimeo(sk, flags &amp; O_NONBLOCK);

        if ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
            /* Error code is set above 进入定时等待 */
            if (!timeo || !inet_wait_for_connect(sk, timeo))
                goto out;

            err = sock_intr_errno(timeo);
            if (signal_pending(current))
                goto out;
        }

        /* Connection was closed by RST, timeout, ICMP error
         * or another process disconnected us.
         */
        if (sk-&gt;sk_state == TCP_CLOSE)
            goto sock_error;

        /* sk-&gt;sk_err may be not zero now, if RECVERR was ordered by user
         * and error was received after socket entered established state.
         * Hence, it is handled normally after connect() return successfully.
         */

        sock-&gt;state = SS_CONNECTED;
        err = 0;
    out:
        release_sock(sk);
        return err;

    sock_error:
        err = sock_error(sk) ? : -ECONNABORTED;
        sock-&gt;state = SS_UNCONNECTED;
        if (sk-&gt;sk_prot-&gt;disconnect(sk, flags))
            sock-&gt;state = SS_DISCONNECTING;
        goto out;
    }
</code></pre>

<pre><code>    /* This will initiate an outgoing connection. */
    int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
    {
        struct inet_sock *inet = inet_sk(sk);
        struct tcp_sock *tp = tcp_sk(sk);
        struct sockaddr_in *usin = (struct sockaddr_in *)uaddr;
        struct rtable *rt;
        __be32 daddr, nexthop;
        int tmp;
        int err;

        if (addr_len &lt; sizeof(struct sockaddr_in))
            return -EINVAL;

        if (usin-&gt;sin_family != AF_INET)
            return -EAFNOSUPPORT;
        /* 开始准备路由 */
        nexthop = daddr = usin-&gt;sin_addr.s_addr;
        if (inet-&gt;opt &amp;&amp; inet-&gt;opt-&gt;srr) {
            if (!daddr)
                return -EINVAL;
            nexthop = inet-&gt;opt-&gt;faddr;
        }
        /* 调用路由模块获取出口信息，这里不深入 */
        tmp = ip_route_connect(&amp;rt, nexthop, inet-&gt;saddr,
                       RT_CONN_FLAGS(sk), sk-&gt;sk_bound_dev_if,
                       IPPROTO_TCP,
                       inet-&gt;sport, usin-&gt;sin_port, sk, 1);
        if (tmp &lt; 0) {
            if (tmp == -ENETUNREACH)
                IP_INC_STATS_BH(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
            return tmp;
        }
        /* 如果获取的路由是广播或多播域， 返回网络不可达，tcp不支持多播与广播 */
        if (rt-&gt;rt_flags &amp; (RTCF_MULTICAST | RTCF_BROADCAST)) {
            ip_rt_put(rt);
            return -ENETUNREACH;
        }

        if (!inet-&gt;opt || !inet-&gt;opt-&gt;srr)
            daddr = rt-&gt;rt_dst;

        if (!inet-&gt;saddr)
            inet-&gt;saddr = rt-&gt;rt_src;
        inet-&gt;rcv_saddr = inet-&gt;saddr;

        if (tp-&gt;rx_opt.ts_recent_stamp &amp;&amp; inet-&gt;daddr != daddr) {
            /* Reset inherited state */
            tp-&gt;rx_opt.ts_recent       = 0;
            tp-&gt;rx_opt.ts_recent_stamp = 0;
            tp-&gt;write_seq          = 0;
        }

        if (tcp_death_row.sysctl_tw_recycle &amp;&amp;
            !tp-&gt;rx_opt.ts_recent_stamp &amp;&amp; rt-&gt;rt_dst == daddr) {
            struct inet_peer *peer = rt_get_peer(rt);
            /*
             * VJ's idea. We save last timestamp seen from
             * the destination in peer table, when entering state
             * TIME-WAIT * and initialize rx_opt.ts_recent from it,
             * when trying new connection.
             */
            if (peer != NULL &amp;&amp;
                peer-&gt;tcp_ts_stamp + TCP_PAWS_MSL &gt;= get_seconds()) {
                tp-&gt;rx_opt.ts_recent_stamp = peer-&gt;tcp_ts_stamp;
                tp-&gt;rx_opt.ts_recent = peer-&gt;tcp_ts;
            }
        }

        inet-&gt;dport = usin-&gt;sin_port;
        inet-&gt;daddr = daddr;

        inet_csk(sk)-&gt;icsk_ext_hdr_len = 0;
        if (inet-&gt;opt)
            inet_csk(sk)-&gt;icsk_ext_hdr_len = inet-&gt;opt-&gt;optlen;
        /* mss_clamp */
        tp-&gt;rx_opt.mss_clamp = 536;

        /* Socket identity is still unknown (sport may be zero).
         * However we set state to SYN-SENT and not releasing socket
         * lock select source port, enter ourselves into the hash tables and
         * complete initialization after this.
         */
        tcp_set_state(sk, TCP_SYN_SENT);
        err = inet_hash_connect(&amp;tcp_death_row, sk);
        if (err)
            goto failure;

        err = ip_route_newports(&amp;rt, IPPROTO_TCP,
                    inet-&gt;sport, inet-&gt;dport, sk);
        if (err)
            goto failure;

        /* OK, now commit destination to socket.  */
        sk-&gt;sk_gso_type = SKB_GSO_TCPV4;
        sk_setup_caps(sk, &amp;rt-&gt;u.dst);

        if (!tp-&gt;write_seq)
            tp-&gt;write_seq = secure_tcp_sequence_number(inet-&gt;saddr,
                                   inet-&gt;daddr,
                                   inet-&gt;sport,
                                   usin-&gt;sin_port);
        /* id是IP包头的id域 */
        inet-&gt;id = tp-&gt;write_seq ^ jiffies;

        err = tcp_connect(sk);
        rt = NULL;
        if (err)
            goto failure;

        return 0;

    failure:
        /*
         * This unhashes the socket and releases the local port,
         * if necessary.
         */
        tcp_set_state(sk, TCP_CLOSE);
        ip_rt_put(rt);
        sk-&gt;sk_route_caps = 0;
        inet-&gt;dport = 0;
        return err;
    }
</code></pre>

<p>当snum==0时，表明此时源端口没有指定，此时会随机选择一个空闲端口作为此次连接的源端口。low和high分别表示可用端口的下限和上限，remaining表示可用端口的数，注意这里的可用只是指端口可以用作源端口，其中部分端口可能已经作为其它socket的端口号在使用了，所以要循环1~remaining，直到查找到空闲的源端口。</p>

<p>下面来看下对每个端口的检查，即//choose a valid port部分的代码。这里要先了解下tcp的内核表组成，udp的表内核表udptable只是一张hash表，tcp的表则稍复杂，它的名字是tcp_hashinfo，在tcp_init()中被初始化，这个数据结构定义如下(省略了不相关的数据)：</p>

<pre><code>    struct inet_hashinfo {
        struct inet_ehash_bucket *ehash;
        ……
        struct inet_bind_hashbucket *bhash;
        ……
        struct inet_listen_hashbucket  listening_hash[INET_LHTABLE_SIZE]
                        ____cacheline_aligned_in_smp;
    };
</code></pre>

<p>从定义可以看出，tcp表又分成了三张表ehash, bhash, listening_hash，其中ehash, listening_hash对应于socket处在TCP的ESTABLISHED, LISTEN状态，bhash对应于socket已绑定了本地地址。三者间并不互斥，如一个socket可同时在bhash和ehash中，由于TIME_WAIT是一个比较特殊的状态，所以ehash又分成了chain和twchain，为TIME_WAIT的socket单独形成一张表。</p>

<p>回到刚才的代码，现在还只是建立socket连接，使用的就应该是tcp表中的bhash。首先取得内核tcp表的bind表 – bhash，查看是否已有socket占用：</p>

<p>如果没有，则调用inet_bind_bucket_create()创建一个bind表项tb，并插入到bind表中，跳转至goto ok代码段；
如果有，则跳转至goto ok代码段。</p>

<p>进入ok代码段表明已找到合适的bind表项(无论是创建的还是查找到的)，调用inet_bind_hash()赋值源端口inet_num。</p>

<p>inet_hash_connect()函数只是对<code>__inet_hash_connect()</code>函数进行了简单的封装。在<code>__inet_hash_connect()</code>中如果已绑定了端口号，并且是和其他传输控制块共享绑定的端口号，则会调用check_established参数指向的函数来检查这个绑定的端口号是否可用，代码如下所示：</p>

<pre><code>    int __inet_hash_connect(struct inet_timewait_death_row *death_row,
            struct sock *sk, u32 port_offset,
            int (*check_established)(struct inet_timewait_death_row *,
            struct sock *, __u16, struct inet_timewait_sock **),
            void (*hash)(struct sock *sk))
    {
        struct inet_hashinfo *hinfo = death_row-&gt;hashinfo;
        const unsigned short snum = inet_sk(sk)-&gt;num;
        struct inet_bind_hashbucket *head;
        struct inet_bind_bucket *tb;
        int ret;
        struct net *net = sock_net(sk);

        if (!snum) {
            int i, remaining, low, high, port;
            static u32 hint;
            u32 offset = hint + port_offset;
            struct hlist_node *node;
            struct inet_timewait_sock *tw = NULL;

            inet_get_local_port_range(&amp;low, &amp;high);
            remaining = (high - low) + 1;

            local_bh_enable();
            for (i = 1; i &lt;= remaining; i++) {
                port = low + (i + offset) % remaining;
                if (inet_is_reserved_local_port(port)
                    continue;
                head = &amp;hinfo-&gt;bhash[inet_bhashfn(net, port, hinfo-&gt;bhash_size)];
                spin_lock(&amp;head-&gt;lock);
                inet_bind_bucket_for_each(tb, node, &amp;head-&gt;chain) {
                    if (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == port) {
                        if (tb-&gt;fastreuse &gt;= 0)
                            goto next_port;
                        WARN_ON(hlist_empty(&amp;tb-&gt;owners));
                        if (!check_established(death_row, sk, port, &amp;tw))
                            goto ok;
                        goto next_port;
                    }
                }

                tb = inet_bind_bucket_create(hinfo-&gt;bind_bucket_cachep, net, head, port);
                if (!tb) {
                    spin_unlock(&amp;head-&gt;lock);
                    break;
                }
                tb-&gt;fastreuse = -1;
                tb-&gt;fastreuseport = -1;
                goto ok;
            next_port:
                spin_unlock(&amp;head-&gt;lock);
            }
            local_bh_enable();

            return -EADDRNOTAVAIL;

    ok:
            hint += i;

            inet_bind_hash(sk, tb, port);
            if (sk_unhashed(sk)) {
                inet_sk(sk)-&gt;sport = htons(port);
                hash(sk);
            }
            spin_unlock(&amp;head-&gt;lock);
            if (tw) {
                inet_twsk_deschedule(tw, death_row);
                inet_twsk_put(tw);
            }

            ret = 0;
            goto out;
        }

        head = &amp;hinfo-&gt;bhash[inet_bhashfn(net, snum, hinfo-&gt;bhash_size)];
        tb  = inet_csk(sk)-&gt;icsk_bind_hash;
        spin_lock_bh(&amp;head-&gt;lock);
        if (sk_head(&amp;tb-&gt;owners) == sk &amp;&amp; !sk-&gt;sk_bind_node.next) {
            hash(sk);
            spin_unlock_bh(&amp;head-&gt;lock);
            return 0;
        } else {
            spin_unlock(&amp;head-&gt;lock);
            /* No definite answer... Walk to established hash table */
            ret = check_established(death_row, sk, snum, NULL);
    out:
            local_bh_enable();
            return ret;
        }
    }
</code></pre>

<p>(sk_head(&amp;tb->owners) == sk &amp;&amp; !sk->sk_bind_node.next)这个判断条件就是用来判断是不是只有当前传输控制块在使用已绑定的端口，条件为false时，会执行else分支，检查是否可用。这么看来，调用bind()成功并不意味着这个端口就真的可以用。</p>

<p>check_established参数对应的函数是<code>__inet_check_established()</code>，在inet_hash_connect()中可以看到。在上面的代码中我们还注意到调用check_established()时第三个参数为NULL，这在后面的分析中会用到。</p>

<p><code>__inet_check_established()</code>函数中，会分别在TIME_WAIT传输控制块和除TIME_WIAT、LISTEN状态外的传输控制块中查找是已绑定的端口是否已经使用，代码片段如下所示：
```
    /<em> called with local bh disabled </em>/
    static int <strong>inet_check_established(struct inet_timewait_death_row <em>death_row,
                struct sock </em>sk, </strong>u16 lport,
                struct inet_timewait_sock <em><em>twp)
    {
        struct inet_hashinfo </em>hinfo = death_row->hashinfo;
        struct inet_sock </em>inet = inet_sk(sk);
        <strong>be32 daddr = inet->rcv_saddr;
        </strong>be32 saddr = inet->daddr;
        int dif = sk->sk_bound_dev_if;
        INET_ADDR_COOKIE(acookie, saddr, daddr)
        const __portpair ports = INET_COMBINED_PORTS(inet->dport, lport);
        struct net <em>net = sock_net(sk);
        unsigned int hash = inet_ehashfn(net, daddr, lport, saddr, inet->dport);
        struct inet_ehash_bucket </em>head = inet_ehash_bucket(hinfo, hash);
        spinlock_t <em>lock = inet_ehash_lockp(hinfo, hash);
        struct sock </em>sk2;
        const struct hlist_nulls_node <em>node;
        struct inet_timewait_sock </em>tw;</p>

<pre><code>    spin_lock(lock);

    /* Check TIME-WAIT sockets first. */
    sk_nulls_for_each(sk2, node, &amp;head-&gt;twchain) {
        tw = inet_twsk(sk2);


        if (INET_TW_MATCH(sk2, net, hash, acookie,
                saddr, daddr, ports, dif)) {
            if (twsk_unique(sk, sk2, twp))
                goto unique;
            else
                goto not_unique;
        }
    }
    tw = NULL;

    /* And established part... */
    sk_nulls_for_each(sk2, node, &amp;head-&gt;chain) {
        if (INET_MATCH(sk2, net, hash, acookie,
                saddr, daddr, ports, dif))
            goto not_unique;
    }

unique:
    ......
    return 0;

not_unique:
    spin_unlock(lock);
    return -EADDRNOTAVAIL;
}
</code></pre>

<pre><code>
如果是TCP套接字，twsk_uniqueue()中会调用tcp_twsk_uniqueue()来判断，返回true的条件如下所示：
</code></pre>

<pre><code>int tcp_twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
{
    const struct tcp_timewait_sock *tcptw = tcp_twsk(sktw);
    struct tcp_sock *tp = tcp_sk(sk);

    if (tcptw-&gt;tw_ts_recent_stamp &amp;&amp;
            (twp == NULL || (sysctl_tcp_tw_reuse &amp;&amp;
            get_seconds() - tcptw-&gt;tw_ts_recent_stamp &gt; 1))) {
        ......
        return 1;
    }

    return 0;
}
</code></pre>

<pre><code></code></pre>

<pre><code>/*
 * Build a SYN and send it off.
 */
int tcp_connect(struct sock *sk)
{
    struct tcp_sock *tp = tcp_sk(sk);
    struct sk_buff *buff;
    /* 初始化连接对应的INET socket结构的参数，为连接做准备 */
    tcp_connect_init(sk);
    /* 获取一个skb，由于是syn包，没有数据，所以大小是MAX_TCP_HEADER的16位对齐 */
    buff = alloc_skb_fclone(MAX_TCP_HEADER + 15, sk-&gt;sk_allocation);
    if (unlikely(buff == NULL))
        return -ENOBUFS;

    /* Reserve space for headers. */
    skb_reserve(buff, MAX_TCP_HEADER);

    tp-&gt;snd_nxt = tp-&gt;write_seq;
    /* 设置skb相关参数 */
    tcp_init_nondata_skb(buff, tp-&gt;write_seq++, TCPCB_FLAG_SYN);
    /* 设置ECN */
    TCP_ECN_send_syn(sk, buff);

    /* Send it off. */
    /* 保存该数据包的发送时间*/
    TCP_SKB_CB(buff)-&gt;when = tcp_time_stamp;
    tp-&gt;retrans_stamp = TCP_SKB_CB(buff)-&gt;when;
    skb_header_release(buff);
    /* 加入发送队列，待确认后在丢弃*/
    __tcp_add_write_queue_tail(sk, buff);
    sk-&gt;sk_wmem_queued += buff-&gt;truesize;
    sk_mem_charge(sk, buff-&gt;truesize);
    tp-&gt;packets_out += tcp_skb_pcount(buff);
    tcp_transmit_skb(sk, buff, 1, GFP_KERNEL);

    /* We change tp-&gt;snd_nxt after the tcp_transmit_skb() call
     * in order to make this packet get counted in tcpOutSegs.
     */
    tp-&gt;snd_nxt = tp-&gt;write_seq;
    tp-&gt;pushed_seq = tp-&gt;write_seq;
    TCP_INC_STATS(sock_net(sk), TCP_MIB_ACTIVEOPENS);

    /* Timer for repeating the SYN until an answer. */
    inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
                  inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);
    return 0;
}
</code></pre>

<pre><code></code></pre>

<pre><code>/*
 * Do all connect socket setups that can be done AF independent.
 */
static void tcp_connect_init(struct sock *sk)
{
    struct dst_entry *dst = __sk_dst_get(sk);
    struct tcp_sock *tp = tcp_sk(sk);
    __u8 rcv_wscale;

    /* We'll fix this up when we get a response from the other end.
     * See tcp_input.c:tcp_rcv_state_process case TCP_SYN_SENT.
     */
    tp-&gt;tcp_header_len = sizeof(struct tcphdr) +
        (sysctl_tcp_timestamps ? TCPOLEN_TSTAMP_ALIGNED : 0);

#ifdef CONFIG_TCP_MD5SIG
    if (tp-&gt;af_specific-&gt;md5_lookup(sk, sk) != NULL)
        tp-&gt;tcp_header_len += TCPOLEN_MD5SIG_ALIGNED;
#endif

    /* If user gave his TCP_MAXSEG, record it to clamp */
    if (tp-&gt;rx_opt.user_mss)
        tp-&gt;rx_opt.mss_clamp = tp-&gt;rx_opt.user_mss;
    tp-&gt;max_window = 0;
    /* 初始化MTU probe*/
    tcp_mtup_init(sk);
    /* 设置mss */
    tcp_sync_mss(sk, dst_mtu(dst));

    if (!tp-&gt;window_clamp)
        tp-&gt;window_clamp = dst_metric(dst, RTAX_WINDOW);
    tp-&gt;advmss = dst_metric(dst, RTAX_ADVMSS);
    if (tp-&gt;rx_opt.user_mss &amp;&amp; tp-&gt;rx_opt.user_mss &lt; tp-&gt;advmss)
        tp-&gt;advmss = tp-&gt;rx_opt.user_mss;

    tcp_initialize_rcv_mss(sk);
    /* 根据接收空间大小初始化一个通告窗口 */
    tcp_select_initial_window(tcp_full_space(sk),
                  tp-&gt;advmss - (tp-&gt;rx_opt.ts_recent_stamp ? tp-&gt;tcp_header_len - sizeof(struct tcphdr) : 0),
                  &amp;tp-&gt;rcv_wnd,
                  &amp;tp-&gt;window_clamp,
                  sysctl_tcp_window_scaling,
                  &amp;rcv_wscale);

    tp-&gt;rx_opt.rcv_wscale = rcv_wscale;
    tp-&gt;rcv_ssthresh = tp-&gt;rcv_wnd;

    sk-&gt;sk_err = 0;
    sock_reset_flag(sk, SOCK_DONE);
    tp-&gt;snd_wnd = 0;
    /* 更新一些滑动窗口的成员*/
    tcp_init_wl(tp, tp-&gt;write_seq, 0);
    tp-&gt;snd_una = tp-&gt;write_seq;
    tp-&gt;snd_sml = tp-&gt;write_seq;
    tp-&gt;snd_up = tp-&gt;write_seq;
    tp-&gt;rcv_nxt = 0;
    tp-&gt;rcv_wup = 0;
    tp-&gt;copied_seq = 0;

    inet_csk(sk)-&gt;icsk_rto = TCP_TIMEOUT_INIT;
    inet_csk(sk)-&gt;icsk_retransmits = 0;
    tcp_clear_retrans(tp);
}
</code></pre>

<pre><code>
skb发送后，connect并没有返回，因为此时连接还没有建立，tcp进入等待状态，此时回到前面的inet_stream_connect函数

在发送syn后进入等待状态
</code></pre>

<pre><code>static long inet_wait_for_connect(struct sock *sk, long timeo)
{
    DEFINE_WAIT(wait);
    /* sk_sleep 保存此INET SOCKET的等待队列 */
    prepare_to_wait(sk-&gt;sk_sleep, &amp;wait, TASK_INTERRUPTIBLE);

    /* Basic assumption: if someone sets sk-&gt;sk_err, he _must_
     * change state of the socket from TCP_SYN_*.
     * Connect() does not allow to get error notifications
     * without closing the socket.
     */
    /* 定时等待知道状态变化 */
    while ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
        release_sock(sk);
        timeo = schedule_timeout(timeo);
        lock_sock(sk);
        if (signal_pending(current) || !timeo)
            break;
        prepare_to_wait(sk-&gt;sk_sleep, &amp;wait, TASK_INTERRUPTIBLE);
    }
    finish_wait(sk-&gt;sk_sleep, &amp;wait);
    return timeo;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[udp checksum]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum/"/>
    <updated>2016-01-21T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum</id>
    <content type="html"><![CDATA[<p><a href="http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/">http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/</a></p>

<h4>a. 网卡设备属性</h4>

<pre><code>    #define NETIF_F_IP_CSUM     2   /* 基于IPv4的L4层checksum. */  
    #define NETIF_F_NO_CSUM     4   /* 设备可靠不需要L4层checksum. loopack. */  
    #define NETIF_F_HW_CSUM     8   /* 基于所有协议的L4层checksum*/  
    #define NETIF_F_IPV6_CSUM   16  /* 基于IPv6的L4层checksum*/  
</code></pre>

<p>通过ethtool -k eth0可以查看网卡是否支持硬件checksum，tx-checksumming: on  表明支持发送hardware checksum。</p>

<h4>b. linux UDP checksum数据结构</h4>

<pre><code>    union {
        __wsum  csum;
        struct {
            __u16   csum_start;
            __u16   csum_offset;
        };
    };
</code></pre>

<p>1） skb->csum和skb->ip_summed这两个域也是与4层校验相关的，这两个域的含义依赖于skb表示的是一个输入包还是一个输出包。</p>

<p>2） 当网卡设备能提供硬件checksum并且作为输出包的时候，表示为skb->csum_start和skb->csum_offset</p>

<p>csum_start: Offset from skb->head where checksumming should start</p>

<p>csum_offset: Offset from csum_start where checksum should be stored</p>

<p>当数据包是一个输入包时</p>

<p>skb->ip_summed表示的是四层校验的状态，下面的几个宏定义表示了设备驱动传递给4层的一些信息。</p>

<pre><code>    #define CHECKSUM_NONE 0
    #define CHECKSUM_UNNECESSARY 1
    #define CHECKSUM_COMPLETE 2
</code></pre>

<p>skb->csum:存放硬件或者软件计算的payload的checksum不包括伪头，但是是否有意义由skb->ip_summed的值决定。</p>

<p>CHECKSUM_NONE表示csum域中的校验值是无意义的，需要L4层自己校验payload和伪头。有可能是硬件检验出错或者硬件没有校验功能，协议栈软件更改如pskb_trim_rcsum函数。</p>

<p>CHECKSUM_UNNECESSARY表示网卡或者协议栈已经计算和验证了L4层的头和校验值。也就是计算了tcp udp的伪头。还有一种情况就是回环，因为在回环中错误发生的概率太低了，因此就不需要计算校验来节省cpu事件。</p>

<p>CHECKSUM_COMPLETE表示网卡已经计算了L4层payload的校验，并且csum已经被赋值，此时L4层的接收者只需要加伪头并验证校验结果。</p>

<p>1) 在L4层发现如果udp->check位段被设为0，那么skb->ip_summed直接设为CHECKSUM_UNNECESSARY，放行该报文。</p>

<p>2) 如果skb->ip_summed为CHECKSUM_COMPLETE，则把skb->csum加上伪头进行校验，成功则将skb->ip_summed设为CHECKSUM_UNNECESSARY， 放行该数据包。</p>

<p>3) 通过上述后skb->ip_summed还不是CHECKSUM_UNNECESSARY，那么重新计算伪头赋给skb->csum。</p>

<p>4) 将还不是CHECKSUM_UNNECESSARY的数据报文的payload加上skb->csum进行checksum计算，成功将设为CHECKSUM_UNNECESSARY并放行，失败则丢弃。</p>

<pre><code>    static inline int udp4_csum_init(struct sk_buff *skb, struct udphdr *uh, 
                    int proto)
    {
        const struct iphdr *iph;
        int err; 

        UDP_SKB_CB(skb)-&gt;partial_cov = 0; 
        UDP_SKB_CB(skb)-&gt;cscov = skb-&gt;len;

        if (proto == IPPROTO_UDPLITE) {
            err = udplite_checksum_init(skb, uh); 
            if (err)
                return err; 
        }    

        iph = ip_hdr(skb);
        if (uh-&gt;check == 0) { 
            skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        } else if (skb-&gt;ip_summed == CHECKSUM_COMPLETE) {
            if (!csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len,
                    proto, skb-&gt;csum))
                skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        }    
        if (!skb_csum_unnecessary(skb))
            skb-&gt;csum = csum_tcpudp_nofold(iph-&gt;saddr, iph-&gt;daddr,
                                skb-&gt;len, proto, 0);
        /* Probably, we should checksum udp header (it should be in cache
         * in any case) and data in tiny packets (&lt; rx copybreak).
         */

        return 0;
    }
</code></pre>

<pre><code>    if (udp_lib_checksum_complete(skb))
        goto csum_error;
</code></pre>

<pre><code>    static inline int udp_lib_checksum_complete(struct sk_buff *skb)
    {
        return !skb_csum_unnecessary(skb) &amp;&amp;
            __udp_lib_checksum_complete(skb);
    }

    static inline __sum16 __udp_lib_checksum_complete(struct sk_buff *skb)
    {
        return __skb_checksum_complete_head(skb, UDP_SKB_CB(skb)-&gt;cscov);
    }

    __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len)
    {
        __sum16 sum;

        sum = csum_fold(skb_checksum(skb, 0, len, skb-&gt;csum));
        if (likely(!sum)) {
            if (unlikely(skb-&gt;ip_summed == CHECKSUM_COMPLETE))
                netdev_rx_csum_fault(skb-&gt;dev);
            skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        }
        return sum;
    }
</code></pre>

<h4>当数据包是输出包时</h4>

<p>skb->csum表示为csum_start和csum_offset，它表示硬件网卡存放将要计算的校验值的地址，和最后填充的便宜。这个域在输出包时使用，只在校验值在硬件计算的情况下才对于网卡真正有意义。硬件checksum功能只能用于非分片报文。
而此时ip_summed可以被设置的值有下面两种：</p>

<pre><code>    #define CHECKSUM_NONE       0
    #define CHECKSUM_PARTIAL    3
</code></pre>

<p>CHECKSUM_NONE 表示协议栈计算好了校验值，设备不需要做任何事。CHECKSUM_PARTIAL表示协议栈算好了伪头需要硬件计算payload checksum。</p>

<p>1）对于UDP socket开启了UDP_CSUM_NOXMIT /<em> UDP csum disabled </em>/</p>

<pre><code>    uh-&gt;check = 0；
    skb-&gt;ip_summed = CHECKSUM_NONE;
</code></pre>

<p>2）软件udp checksum
<code>
    struct iphdr *iph = ip_hdr(skb);
    struct udphdr *uh = udp_hdr(skb);
    uh-&gt;check = 0;
    skb-&gt;csum = csum_partial(skb_transport_header (skb), skb-&gt;len, 0);//skb-&gt;data指向传输层头
    uh-&gt;check = csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, iph-&gt;protocol, skb-&gt;csum);
    skb-&gt;ip_summed = CHECKSUM_NONE;
    //Todo: scatter and gather
</code></p>

<p>3)  硬件checksum: 只能是ip报文长度小于mtu的数据报(没有分片的报文)。</p>

<p>CHECKSUM_PARTIAL表示使用硬件checksum ，L4层的伪头的校验已经完毕，并且已经加入uh->check字段中，此时只需要设备计算整个头4层头的校验值。</p>

<p>（对于支持scatter and gather的报文必须要传输层头在线性空间才能使用硬件checksum功能）</p>

<pre><code>    uh-&gt;check = ~csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, IPPROTO_UDP, 0);
    skb-&gt;csum_start = skb_transport_header (skb) - skb-&gt;head;
    skb-&gt;csum_offset = offsetof(struct udphdr, check);
    skb-&gt;ip_summed = CHECKSUM_PARTIAL;
</code></pre>

<p>最后在dev_queue_xmit发送的时候发现设备不支持硬件checksum就会进行软件计算</p>

<pre><code>    int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
                    struct netdev_queue *txq)

    {
        .......

                /* If packet is not checksummed and device does not
                 * support checksumming for this protocol, complete
                 * checksumming here.
                 */
                if (skb-&gt;ip_summed == CHECKSUM_PARTIAL) {
                    skb_set_transport_header(skb, skb-&gt;csum_start -
                            skb_headroom(skb));
                    if (!dev_can_checksum(dev, skb) &amp;&amp;
                            skb_checksum_help(skb))
                        goto out_kfree_skb;
                }
        ........
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux系统启动过程分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/21/system-base-init/"/>
    <updated>2016-01-21T16:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/21/system-base-init</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-23069658-id-3142047.html">http://blog.chinaunix.net/uid-23069658-id-3142047.html</a></p>

<h4>BIOS自检</h4>

<p>  稍有计算机基础的人都应该听过BIOS(Basic Input / Output System)，又称基本输入输出系统，可以视为是一个永久地记录在ROM中的一个软件，是操作系统输入输出管理系统的一部分。早期的BIOS芯片确实是"只读"的，里面的内容是用一种烧录器写入的，一旦写入就不能更改，除非更换芯片。现在的主机板都使用一种叫Flash EPROM的芯片来存储系统BIOS，里面的内容可通过使用主板厂商提供的擦写程序擦除后重新写入，这样就给用户升级BIOS提供了极大的方便。</p>

<p>  BIOS的功能由两部分组成，分别是POST码和Runtime服务。POST阶段完成后它将从存储器中被清除，而Runtime服务会被一直保留，用于目标操作系统的启动。BIOS两个阶段所做的详细工作如下：</p>

<p>  步骤1：上电自检POST(Power-on self test)，主要负责检测系统外围关键设备（如：CPU、内存、显卡、I/O、键盘鼠标等）是否正常。例如，最常见的是内存松动的情况，BIOS自检阶段会报错，系统就无法启动起来；</p>

<p>  步骤2：步骤1成功后，便会执行一段小程序用来枚举本地设备并对其初始化。这一步主要是根据我们在BIOS中设置的系统启动顺序来搜索用于启动系统的驱动器，如硬盘、光盘、U盘、软盘和网络等。我们以硬盘启动为例，BIOS此时去读取硬盘驱动器的第一个扇区(MBR，512字节)，然后执行里面的代码。实际上这里BIOS并不关心启动设备第一个扇区中是什么内容，它只是负责读取该扇区内容、并执行。</p>

<p>至此，BIOS的任务就完成了，此后将系统启动的控制权移交到MBR部分的代码。</p>

<p>PS: 在个人电脑中，Linux的启动是从0xFFFF0地址开始的。</p>

<h4>系统引导</h4>

<p>  我们首先来了解一下MBR，它是Master Boot Record的缩写。硬盘的0柱面、0磁头、1扇区称为主引导扇区。它由三个部分组成，主引导程序(Bootloader)、 硬盘分区表DPT（Disk Partition table）和硬盘有效标志（55AA），其结构图如下所示：</p>

<p><img src="/images/system/2016-01-21-1.png" alt="" /></p>

<p> 磁盘分区表包含以下三部分：</p>

<p>1）、Partition ID  （5：延申  82：Swap   83：Linux   8e：LVM     fd：RAID）</p>

<p>2）、Partition起始磁柱</p>

<p>3）、Partition的磁柱数量</p>

<p>  通常情况下，诸如lilo、grub这些常见的引导程序都直接安装在MBR中。我们以grub为例来分析这个引导过程。</p>

<h5>grub引导也分为两个阶段stage1阶段和stage2阶段(有些较新的grub又定义了stage1.5阶段)。</h5>

<p>1)、stage1：stage1是直接被写入到MBR中去的，这样机器一启动检测完硬件后，就将控制权交给了GRUB的代码。也就是上图所看到的前446个字节空间中存放的是stage1的代码。BIOS将stage1载入内存中0x7c00处并跳转执行。stage1（/stage1/start.S）的任务非常单纯，仅仅是将硬盘0头0道2扇区读入内存。而0头0道2扇区内容是源代码中的/stage2/start.S，编译后512字节，它是stage2或者stage1_5的入口。而此时，stage1是没有识别文件系统的能力的。如果感觉脑子有些晕了，那么下面的过程就直接跳过，去看stage2吧！</p>

<h5>【外传】定位硬盘的0头0道2扇区的过程：</h5>

<p>  BIOS将stage1载入内存0x7c00处并执行，然后调用BIOS INIT13中断，将硬盘0头0道2扇区内容载入内存0x7000处，然后调用copy_buffer将其转移到内存0x8000处。在定位0头0道2扇区时通常有两种寻址方式：LBA和CHS。如果你是刨根问底儿型的爱好者，那么此时去找谷哥打听打听这两种方式的来龙去脉吧。</p>

<p>2)、stage2：严格来说这里还应该再区分个stage1.5的，就一并把stage1.5放在这里一起介绍了，免得大家看得心里乱哄哄的。好的，我们继续说0头0到2扇区的/stage2/start.S文件，当它的内容被读入到内存之后，它的主要作用就是负责将stage2或stage1.5从硬盘读到内存中。如果是stage2，它将被载入到0x820处；如果是stage1.5，它将被载入到0x2200处。这里的stage2或者stage1_5不是/boot分区/boot/grub目录下的文件，因为这个时候grub还没有能力识别任何文件系统。</p>

<p> 如果start.S加载stage1.5：stage1.5它存放在硬盘0头0道3扇区向后的位置，stage1_5作为stage1和stage2中间的桥梁，stage1_5有识别文件系统的能力，此后grub才有能力去访问/boot分区/boot/grub目录下的 stage2文件，将stage2载入内存并执行。</p>

<p> 如果start.S加载stage2：同样，这个stage2也不是/boot分区/boot/grub目录下的stage2，这个时候start.S读取的是存放在/boot分区Boot Sector的stage2。这种情况下就有一个限制：因为start.S通过BIOS中断方式直接对硬盘寻址（而非通过访问具体的文件系统），其寻址范围有限，限制在8GB以内。因此这种情况需要将/boot分区分在硬盘8GB寻址空间之前。</p>

<p>假如是情形2，我们将/boot/grub目录下的内容清空，依然能成功启动grub；假如是情形1，将/boot/grub目录下stage2删除后，则系统启动过程中grub会启动失败。</p>

<h4>启动内核</h4>

<p>  当stage2被载入内存执行时，它首先会去解析grub的配置文件/boot/grub/grub.conf，然后加载内核镜像到内存中，并将控制权转交给内核。而内核会立即初始化系统中各设备并做相关的配置工作，其中包括CPU、I/O、存储设备等。</p>

<p>关于Linux的设备驱动程序的加载，有一部分驱动程序直接被编译进内核镜像中，另一部分驱动程序则是以模块的形式放在initrd(ramdisk)中。</p>

<p>  Linux内核需要适应多种不同的硬件架构，但是将所有的硬件驱动编入内核又是不实际的，而且内核也不可能每新出一种硬件结构，就将该硬件的设备驱动写入内核。实际上Linux的内核镜像仅是包含了基本的硬件驱动，在系统安装过程中会检测系统硬件信息，根据安装信息和系统硬件信息将一部分设备驱动写入 initrd 。这样在以后启动系统时，一部分设备驱动就放在initrd中来加载。这里有必要给大家再多介绍一下initrd这个东东：</p>

<p>  initrd 的英文含义是 bootloader initialized RAM disk，就是由 boot loader 初始化的内存盘。在 linu2.6内核启动前，boot loader 会将存储介质中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统。在 boot loader 配置了 initrd 的情况下，内核启动被分成了两个阶段，第一阶段先执行 initrd 文件系统中的init，完成加载驱动模块等任务，第二阶段才会执行真正的根文件系统中的 /sbin/init 进程。</p>

<p>另外一个概念：initramfs</p>

<p>  initramfs 是在 kernel 2.5中引入的技术，实际上它的含义就是：在内核镜像中附加一个cpio包，这个cpio包中包含了一个小型的文件系统，当内核启动时，内核将这个 cpio包解开，并且将其中包含的文件系统释放到rootfs中，内核中的一部分初始化代码会放到这个文件系统中，作为用户层进程来执行。这样带来的明显的好处是精简了内核的初始化代码，而且使得内核的初始化过程更容易定制。
疑惑的是：我的内核是2.6.32-71.el6.i686版本，但在我的/boot分区下面却存在的是/boot/initramfs-2.6.32-71.el6.i686.img类型的文件，没搞明白，还望高人解惑。我只知道在2.6内核中支持两种格式的initrd，一种是2.4内核的文件系统镜像image-initrd，一种是cpio格式。接下来我们就来探究一下initramfs-2.6.32-71.el6.i686.img里到底放了那些东西。</p>

<p><img src="/images/system/2016-01-21-2.png" alt="" /></p>

<p>在tmp文件夹中解压initrd.img里的内容：</p>

<p><img src="/images/system/2016-01-21-3.png" alt="" /></p>

<p>如果initrd.img文件的格式显示为“initrd.img:ISO 9660 CD-ROM filesystem data”，则可直接输入命令“mount -o loop initrd.img /mnt/test”进行挂载。</p>

<p>通过上的分析和我们的验证，我们确实得到了这样的结论：</p>

<p>  grub的stage2将initrd加载到内存里，让后将其中的内容释放到内容中，内核便去执行initrd中的init脚本，这时内核将控制权交给了init文件处理。我们简单浏览一下init脚本的内容，发现它也主要是加载各种存储介质相关的设备驱动程序。当所需的驱动程序加载完后，会创建一个根设备，然后将根文件系统rootfs以只读的方式挂载。这一步结束后，释放未使用的内存，转换到真正的根文件系统上面去，同时运行/sbin/init程序，执行系统的1号进程。此后系统的控制权就全权交给/sbin/init进程了。</p>

<h4>初始化系统</h4>

<p>经过千辛万苦的跋涉，我们终于接近黎明的曙光了。接下来就是最后一步了：初始化系统。/sbin/init进程是系统其他所有进程的父进程，当它接管了系统的控制权先之后，它首先会去读取/etc/inittab文件来执行相应的脚本进行系统初始化，如设置键盘、字体，装载模块，设置网络等。主要包括以下工作：</p>

<p>1)、执行系统初始化脚本(/etc/rc.d/rc.sysinit)，对系统进行基本的配置，以读写方式挂载根文件系统及其它文件系统，到此系统算是基本运行起来了，后面需要进行运行级别的确定及相应服务的启动。rc.sysinit所做的事情(不同的Linux发行版，该文件可能有些差异)如下：</p>

<p>（1）获取网络环境与主机类型。首先会读取网络环境设置文件"/etc/sysconfig/network"，获取主机名称与默认网关等网络环境。</p>

<p>（2）测试与载入内存设备/proc及usb设备/sys。除了/proc外，系统会主动检测是否有usb设备，并主动加载usb驱动，尝试载入usb文件系统。</p>

<p>（3）决定是否启动SELinux。</p>

<p>（4）接口设备的检测与即插即用（pnp）参数的测试。</p>

<p>（5）用户自定义模块的加载。用户可以再"/etc/sysconfig/modules/*.modules"加入自定义的模块，此时会加载到系统中。</p>

<p>（6）加载核心的相关设置。按"/etc/sysctl.conf"这个文件的设置值配置功能。</p>

<p>（7）设置系统时间（clock）。</p>

<p>（8）设置终端的控制台的字形。</p>

<p>（9）设置raid及LVM等硬盘功能。</p>

<p>（10）以方式查看检验磁盘文件系统。</p>

<p>（11）进行磁盘配额quota的转换。</p>

<p>（12）重新以读取模式载入系统磁盘。</p>

<p>（13）启动quota功能。</p>

<p>（14）启动系统随机数设备（产生随机数功能）。</p>

<p>（15）清楚启动过程中的临时文件。</p>

<p>（16）将启动信息加载到"/var/log/dmesg"文件中。</p>

<p> 当/etc/rc.d/rc.sysinit执行完后，系统就可以顺利工作了，只是还需要启动系统所需要的各种服务，这样主机才可以提供相关的网络和主机功能，因此便会执行下面的脚本。</p>

<p>2)、执行/etc/rc.d/rc脚本。该文件定义了服务启动的顺序是先K后S，而具体的每个运行级别的服务状态是放在/etc/rc.d/rc<em>.d（</em>=0~6）目录下，所有的文件均是指向/etc/init.d下相应文件的符号链接。rc.sysinit通过分析/etc/inittab文件来确定系统的启动级别，然后才去执行/etc/rc.d/rc*.d下的文件。</p>

<p>/etc/init.d-> /etc/rc.d/init.d</p>

<p>/etc/rc ->/etc/rc.d/rc</p>

<p>/etc/rc<em>.d ->/etc/rc.d/rc</em>.d</p>

<p>/etc/rc.local-> /etc/rc.d/rc.local</p>

<p>/etc/rc.sysinit-> /etc/rc.d/rc.sysinit</p>

<p>也就是说，/etc目录下的init.d、rc、rc*.d、rc.local和rc.sysinit均是指向/etc/rc.d目录下相应文件和文件夹的符号链接。我们以启动级别3为例来简要说明一下。</p>

<p>/etc/rc.d/rc3.d目录，该目录下的内容全部都是以 S 或 K 开头的链接文件，都链接到"/etc/rc.d/init.d"目录下的各种shell脚本。S表示的是启动时需要start的服务内容，K表示关机时需要关闭的服务内容。/etc/rc.d/rc<em>.d中的系统服务会在系统后台启动，如果要对某个运行级别中的服务进行更具体的定制，通过chkconfig命令来操作，或者通过setup、ntsys、system-config-services来进行定制。如果我们需要自己增加启动的内容，可以在init.d目录中增加相关的shell脚本，然后在rc</em>.d目录中建立链接文件指向该shell脚本。这些shell脚本的启动或结束顺序是由S或K字母后面的数字决定，数字越小的脚本越先执行。例如，/etc/rc.d/rc3.d /S01sysstat就比/etc/rc.d/rc3.d /S99local先执行。</p>

<p>3)、执行用户自定义引导程序/etc/rc.d/rc.local。其实当执行/etc/rc.d/rc3.d/S99local时，它就是在执行/etc/rc.d/rc.local。S99local是指向rc.local的符号链接。就是一般来说，自定义的程序不需要执行上面所说的繁琐的建立shell增加链接文件的步骤，只需要将命令放在rc.local里面就可以了，这个shell脚本就是保留给用户自定义启动内容的。</p>

<p>4)、完成了系统所有的启动任务后，linux会启动终端或X-Window来等待用户登录。tty1,tty2,tty3&hellip;这表示在运行等级1，2，3，4的时候，都会执行"/sbin/mingetty"，而且执行了6个，所以linux会有6个纯文本终端，mingetty就是启动终端的命令。</p>

<p>除了这6个之外还会执行"/etc/X11/prefdm-nodaemon"这个主要启动X-Window</p>

<p>至此，系统就启动完毕了。以上分析不到的地方还请各位大虾不吝指正。</p>

<p>关于Linux的其他分析内容下次再继续写。
最后附上一张非常完整的系统启动流程图，适合各个水平阶段的读者。</p>

<p><img src="/images/system/2016-01-21-4.jpg" alt="" /></p>

<p><a href="http://blog.itpub.net/8111049/viewspace-680043">http://blog.itpub.net/8111049/viewspace-680043</a></p>

<p><a href="http://bbs.chinaunix.net/thread-2046548-1-1.html">http://bbs.chinaunix.net/thread-2046548-1-1.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-26495963-id-3066282.html">http://blog.chinaunix.net/uid-26495963-id-3066282.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux 实时时钟（RTC）驱动]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/12/kernel-base-rtc/"/>
    <updated>2016-01-12T15:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/12/kernel-base-rtc</id>
    <content type="html"><![CDATA[<p><a href="/download/kernel/rtc.txt">Documentation/rtc.txt</a></p>

<hr />

<p><a href="http://blog.csdn.net/yaozhenguo2006/article/details/6820218">http://blog.csdn.net/yaozhenguo2006/article/details/6820218</a></p>

<p>这个是linux内核文档关于rtc实时时钟部分的说明，此文档主要描述了rtc实时时钟的作用和编程接口，分别介绍了老的rtc接口和新的rtc类架构。并给出了一个测试rtc驱动的程序。</p>

<h3>linux 实时时钟（RTC）驱动</h3>

<p>翻译：窗外云天<a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x79;&#97;&#x6f;&#122;&#x68;&#101;&#x6e;&#x67;&#x75;&#111;&#50;&#x30;&#x30;&#54;&#x40;&#49;&#x32;&#54;&#46;&#99;&#x6f;&#109;">&#x79;&#97;&#x6f;&#122;&#104;&#101;&#110;&#x67;&#x75;&#x6f;&#x32;&#48;&#48;&#x36;&#64;&#x31;&#50;&#x36;&#x2e;&#99;&#x6f;&#109;</a>  最后矫正时间：2011.9.25</p>

<p>当linux开发者提到“实时时钟”的时候，他们通常所指的就是墙钟时间，这个时间是电池供电的，所以在系统掉电的情况下还能正常工作。除非在MS-Windows启动的时候设置，否则这个时钟不会同步于本地时区和夏令时间。事实上，他被设置成格林威治时间。</p>

<p>最新的非pc体系的硬件趋向于记秒数，比如time(2)系统调用的输出，但是实时时钟用公历和24小时表示日期与时间，比如gmtime(3)的输出。</p>

<p>linux提供两类的rtc兼容性很高的用户空间系统调用接口，如下所示：<br/>
（1） /dev/rtc &hellip; 这个RTC适合pc体系的系统，而并不适合非x86体系的系统<br/>
（2） /dev/rtc0,/dev/rtc1 &hellip; 他们依赖一种架构，这种架构在所有的系统上被RTC芯片广泛的支持。</p>

<p>程序员必须知道，PC/AT的功能不总是有效，其他的系统可能会有另外的实现。这种情况下，如果在相同的系统结构上使用同样的RTC API，那么硬件会有不同的反应。例如，不是每一个RTC都提供IRQ，所以这些不能处理报警中断；标准的PC系统RTC只能处理未来24小时以内的闹钟，而其他系统的RTC可能处理未来一个世纪的任何时间。</p>

<h4>老的PC/AT驱动：/dev/rtc</h4>

<p>所有基于PC的系统（甚至Alpha体系的机器）都有一个集成的实时时钟。通常他们集成在计算机的芯片组内，但是也有一些系统是在主板上焊接着摩托罗拉MC146818（或者类似的芯片），他们给系统提供时间和日期，这个时间和日期在系统掉电后仍然会保存。</p>

<p>ACPT(高级配置与电源管理接口)对MC146818的功能进行了标准化，并且在一些方面进行了功能扩展（提供了更长的定时周期，睡眠唤醒功能）。然而这些扩展的功能不适合老的驱动程序。</p>

<p>这个RTC还可以产生频率从 2HZ 到 8192HZ 的信号，以2的乘方增长。这些信号通过中断信号线8报告给系统。这个RTC还可以用作定时限制为24小时的闹钟，当定时时间到时产生8号中断。这个闹钟可以设置成任意一个可编程值的子集，这意味着可以设置成任意小时的任意分钟任意秒，例如，可以将这个时钟设置成在每个clk产生中断，从而产生1hz的信号。</p>

<p>这些中断通过/dev/rtc报告给系统（主设备号10,次设备号135，只读字符设备），中断传回一个无符号整数类型的数据。最低的位包含中断的类型（更新，闹钟，或者期），其他的字节代表了最后一次读到现在中断发生的次数。状态信息由虚拟文件/proc/driver/rtc产生，前提条件是使能了/proc文件系统。驱动应该提供锁机制，保证在同一时刻只有一个进程访问/dev/rtc。</p>

<p>用户进程通过系统调用read(2)或者select(2)读取/dev/rtc来获取这些中断。当调用这两个系统调用的时候，进程会阻塞或者退出直到下一个中断到来。这个功能用在需要不频繁的获取数据而又不希望通过轮询当前时间而占用CPU时间的情况下。</p>

<p>在高频率中断或者高系统负载下，用户进程应该检查从上次读取到现在发生中断的次数以判断是否有未处理的中断。例如，一个典型的 486-33 对/dev/rtc以大于1024hz的频率进行循环读，偶尔会产生中断积累（从上次读取到现在发生大于一次的中断）。鉴于此你应该检查读取数据的高字节，特别是在频率高于普通定时器中断&ndash;100hz的情况下。</p>

<p>中断频率是可编程的或可以让他超过64hz，但是只有root权限的用户可以这样做。这样做可能有点保守，但是我们不希望有恶意的用户在一个较慢的386sx-16机器上产生很多中断，这样会严重影响系统的性能。我们可以通过向/proc/sys/dev/rtc/max-user-freq写入值来修改这个64hz的限制。但是注意你一定要这样做，减少中断处理程序的代码才会亡羊补牢，使对系统性能的影响降到最小。</p>

<p>如果内核时间是和外部时钟源同步的，那么内核将每隔11分钟就会将时间写回CMOS时钟。在这个过程中，内核会关闭rtc周期中断，如果你的程序在做一些关键的工作一定要注意到。如果你的内核不和外部时钟源同步，那么内核会一直处理rtc中断，处理方式根据你具体的应用。</p>

<p>闹钟和中断频率可以通过系统调用ioctl(2)来设置，ioctl的命令定义在./include/linux/rtc.h。与其长篇大论的介绍怎么样使用这个系统调用，还不如写一个实例程序来的方便，这个程序用来演示驱动的功能，对很多人来说用驱动程序提供的功能来进行应用编程他们会更感兴趣。在这个文档的最后有这段程序。</p>

<h4>新接口 “RTC类” 驱动：/dev/rtcn</h4>

<p>因为linux支持许多非ACPI非PC平台，其中一些平台有不只一个RTC，所以需要更多可移植性的设计，而不是仅仅在每个系统都实现类似MC146818的接口。在这种情况下，新的“RTC类”构架产生了。他提供不同的用户空间接口：
（1） /dev/rtcn 和老的接口一样
（2）/dev/class/rtc/rtcn   sysfs 属性，一些属性是只读的
（3） /dev/driver/rtc 第一个rtc会使用procfs接口。更多的信息会显示在这里而不是sysfs。</p>

<p>RTC类构架支持很多类型的RTC，从集成在嵌入式SOC处理器内的RTC到通过I2C，SPI和其他总线连接到CPU的芯片。这个架构甚至还支持PC系统的RTC，包括使用ACPI，PC的一些新特性。</p>

<p>新架构也打破了“每个系统只有一个RTC”的限制。例如，一个低功耗电池供电的RTC是一个分离的I2C接口的芯片，但是系统可能还集成了一个多功能的RTC。系统可能从分离的RTC读取系统时钟，但是对于其他任务用集成的RTC，因为这个RTC提供更多的功能。</p>

<h4>SYSFS 接口</h4>

<p>在/sys/class/rtc/rtcn下面的sysfs接口提供了操作rtc属性的方法，而不用通过Ioclt系统调用。所有的日期时间都是墙钟时间，而不是系统时间。
<code>
    date:           RTC提供的日期
    hctosys:        如果在内核配置选项中配置了CONFIG_RTC_HCTOSYS，RTC会在系统启动的时候提供系统时间，这种情况下这个位就是1,否则为0
    max_user_freq:  非特权用户可以从RTC得到的最大中断频率
    name:           RTC的名字，与sysfs目录相关
    since_epoch:    从纪元开始所经历的秒数
    time:           RTC提供的时间
    wakealarm:      唤醒时间的时间事件。 这是一种单次的唤醒事件，所以如果还需要唤醒，在唤醒发生后必须复位。这个域的数据结构或者是从纪元开始经历的妙数，或者是相对的秒数
</code></p>

<h4>IOCTL 接口</h4>

<p>/dev/rtc支持的Ioctl系统调用，RTC类构架也支持。然而，因为芯片和系统没有一个统一的标准，一些PC/AT功能可能没有提供。以相同方式工作的一些新特性，&ndash;包括ACPI提供的，&ndash;在RTC类构架中表现出的，在老的驱动上不会工作。</p>

<p>（1） RTC_RD_TIME,RTC_SET_TIME .. 每一个RTC都至少支持读时间这个命令，时间格式为公历和24小时制墙钟时间。最有用的特性是，这个时间可以更新。<br/>
（2） RTC_ATE_ON,RTC_ATE_OFF,RTC_ALM_SET,RTC_ALM_READ &hellip; 当RTC连接了一条IRQ线，他还能处理在未来24小时的报警中断。<br/>
（3） RTC_WKALM_SET，RTC_WKALM_RD 。。。 RTCs 使用一个功能更强大的api,他可以处理超过24小时的报警时间。这个API支持设置更长的报警时间，支持单次请求的IRQ中断。<br/>
（4） RTC_UIE_ON,RTC_UIE_OFF &hellip; 如果RTC提供IRQ，他可能也提供每秒更新的IRQ中断。如果需要，RTC结构可以模仿这个机制。</p>

<p>（5） RTC_PIE_ON,RTC_PIE_OFF,RTC_IRQP_SET,RTC_IRQP_READ &hellip; 如果一个IRQ是周期中断，那么这个IRQ还有可设置频率的特性（频率通常是2的n次方）</p>

<p>很多情况下，RTC报警时钟通常是一个系统唤醒事件，用于将Linux从低功耗睡眠模式唤醒到正常的工作模式。例如，系统会处于低功耗的模式下，直到时间到了去执行一些任务。注意这些ioctl的一些功能不必在你的驱动程序中实现。如果一个ioctl调用，你的驱动返回ENOIOCTLCMD，那么这个Ioctl就由通用RTC设备接口处理。下面是一些通用的例子：<br/>
（6） RTC_RD_TIME, RTC_SET_TIME: read_time/set_time 函数会被调用。<br/>
（7） RTC_ALM_SET, RTC_ALM_READ, RTC_WKALM_SET, RTC_WKALM_RD: set_alarm/read_alarm 函数将会被调用.<br/>
（8） RTC_IRQP_SET, RTC_IRQP_READ: irq_set_freq 函数将会调用，用来设置频率，RTC类构架会处理读请求，而频率保存在RTC设备结构中的irq_freq域。你的驱动需要在模块初始化的时候初始化irq_freq，你必须在irq_set_freq函数里检查设置的频率是否在硬件允许的范围。如果不是那么驱动应该返回-EINVAL。如果你不需要改变这个频率，那么不要定义irq_set_freq这个函数。<br/>
（7） RTC_PIE_ON, RTC_PIE_OFF: irq_set_state 函数会被调用。</p>

<p>  如果所有的ioctl都失败了，用下面的rtc-test.c检查一下你的驱动吧！</p>

<pre><code>    /*
     *      Real Time Clock Driver Test/Example Program
     *
     *      Compile with:
     *           gcc -s -Wall -Wstrict-prototypes rtctest.c -o rtctest
     *
     *      Copyright (C) 1996, Paul Gortmaker.
     *
     *      Released under the GNU General Public License, version 2,
     *      included herein by reference.
     *
     */

    #include &lt;stdio.h&gt;
    #include &lt;linux/rtc.h&gt;
    #include &lt;sys/ioctl.h&gt;
    #include &lt;sys/time.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;errno.h&gt;


    /*
     * This expects the new RTC class driver framework, working with
     * clocks that will often not be clones of what the PC-AT had.
     * Use the command line to specify another RTC if you need one.
     */
    static const char default_rtc[] = "/dev/rtc0";


    int main(int argc, char **argv)
    {
        int i, fd, retval, irqcount = 0;
        unsigned long tmp, data;
        struct rtc_time rtc_tm;
        const char *rtc = default_rtc;

        switch (argc) {
        case 2:
            rtc = argv[1];
            /* FALLTHROUGH */
        case 1:
            break;
        default:
            fprintf(stderr, "usage:  rtctest [rtcdev]\n");
            return 1;
        }

        fd = open(rtc, O_RDONLY);

        if (fd ==  -1) {
            perror(rtc);
            exit(errno);
        }

        fprintf(stderr, "\n\t\t\tRTC Driver Test Example.\n\n");

        /* Turn on update interrupts (one per second) */
        retval = ioctl(fd, RTC_UIE_ON, 0);
        if (retval == -1) {
            if (errno == ENOTTY) {
                fprintf(stderr,
                    "\n...Update IRQs not supported.\n");
                goto test_READ;
            }
            perror("RTC_UIE_ON ioctl");
            exit(errno);
        }

        fprintf(stderr, "Counting 5 update (1/sec) interrupts from reading %s:",
                rtc);
        fflush(stderr);
        for (i=1; i&lt;6; i++) {
            /* This read will block */
            retval = read(fd, &amp;data, sizeof(unsigned long));
            if (retval == -1) {
                perror("read");
                exit(errno);
            }
            fprintf(stderr, " %d",i);
            fflush(stderr);
            irqcount++;
        }

        fprintf(stderr, "\nAgain, from using select(2) on /dev/rtc:");
        fflush(stderr);
        for (i=1; i&lt;6; i++) {
            struct timeval tv = {5, 0};     /* 5 second timeout on select */
            fd_set readfds;

            FD_ZERO(&amp;readfds);
            FD_SET(fd, &amp;readfds);
            /* The select will wait until an RTC interrupt happens. */
            retval = select(fd+1, &amp;readfds, NULL, NULL, &amp;tv);
            if (retval == -1) {
                    perror("select");
                    exit(errno);
            }
            /* This read won't block unlike the select-less case above. */
            retval = read(fd, &amp;data, sizeof(unsigned long));
            if (retval == -1) {
                    perror("read");
                    exit(errno);
            }
            fprintf(stderr, " %d",i);
            fflush(stderr);
            irqcount++;
        }

        /* Turn off update interrupts */
        retval = ioctl(fd, RTC_UIE_OFF, 0);
        if (retval == -1) {
            perror("RTC_UIE_OFF ioctl");
            exit(errno);
        }

    test_READ:
        /* Read the RTC time/date */
        retval = ioctl(fd, RTC_RD_TIME, &amp;rtc_tm);
        if (retval == -1) {
            perror("RTC_RD_TIME ioctl");
            exit(errno);
        }

        fprintf(stderr, "\n\nCurrent RTC date/time is %d-%d-%d, %02d:%02d:%02d.\n",
            rtc_tm.tm_mday, rtc_tm.tm_mon + 1, rtc_tm.tm_year + 1900,
            rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);

        /* Set the alarm to 5 sec in the future, and check for rollover */
        rtc_tm.tm_sec += 5;
        if (rtc_tm.tm_sec &gt;= 60) {
            rtc_tm.tm_sec %= 60;
            rtc_tm.tm_min++;
        }
        if (rtc_tm.tm_min == 60) {
            rtc_tm.tm_min = 0;
            rtc_tm.tm_hour++;
        }
        if (rtc_tm.tm_hour == 24)
            rtc_tm.tm_hour = 0;

        retval = ioctl(fd, RTC_ALM_SET, &amp;rtc_tm);
        if (retval == -1) {
            if (errno == ENOTTY) {
                fprintf(stderr,
                    "\n...Alarm IRQs not supported.\n");
                goto test_PIE;
            }
            perror("RTC_ALM_SET ioctl");
            exit(errno);
        }

        /* Read the current alarm settings */
        retval = ioctl(fd, RTC_ALM_READ, &amp;rtc_tm);
        if (retval == -1) {
            perror("RTC_ALM_READ ioctl");
            exit(errno);
        }

        fprintf(stderr, "Alarm time now set to %02d:%02d:%02d.\n",
            rtc_tm.tm_hour, rtc_tm.tm_min, rtc_tm.tm_sec);

        /* Enable alarm interrupts */
        retval = ioctl(fd, RTC_AIE_ON, 0);
        if (retval == -1) {
            perror("RTC_AIE_ON ioctl");
            exit(errno);
        }

        fprintf(stderr, "Waiting 5 seconds for alarm...");
        fflush(stderr);
        /* This blocks until the alarm ring causes an interrupt */
        retval = read(fd, &amp;data, sizeof(unsigned long));
        if (retval == -1) {
            perror("read");
            exit(errno);
        }
        irqcount++;
        fprintf(stderr, " okay. Alarm rang.\n");

        /* Disable alarm interrupts */
        retval = ioctl(fd, RTC_AIE_OFF, 0);
        if (retval == -1) {
            perror("RTC_AIE_OFF ioctl");
            exit(errno);
        }

    test_PIE:
        /* Read periodic IRQ rate */
        retval = ioctl(fd, RTC_IRQP_READ, &amp;tmp);
        if (retval == -1) {
            /* not all RTCs support periodic IRQs */
            if (errno == ENOTTY) {
                fprintf(stderr, "\nNo periodic IRQ support\n");
                goto done;
            }
            perror("RTC_IRQP_READ ioctl");
            exit(errno);
        }
        fprintf(stderr, "\nPeriodic IRQ rate is %ldHz.\n", tmp);

        fprintf(stderr, "Counting 20 interrupts at:");
        fflush(stderr);

        /* The frequencies 128Hz, 256Hz, ... 8192Hz are only allowed for root. */
        for (tmp=2; tmp&lt;=64; tmp*=2) {

            retval = ioctl(fd, RTC_IRQP_SET, tmp);
            if (retval == -1) {
                /* not all RTCs can change their periodic IRQ rate */
                if (errno == ENOTTY) {
                    fprintf(stderr,
                        "\n...Periodic IRQ rate is fixed\n");
                    goto done;
                }
                perror("RTC_IRQP_SET ioctl");
                exit(errno);
            }

            fprintf(stderr, "\n%ldHz:\t", tmp);
            fflush(stderr);

            /* Enable periodic interrupts */
            retval = ioctl(fd, RTC_PIE_ON, 0);
            if (retval == -1) {
                perror("RTC_PIE_ON ioctl");
                exit(errno);
            }

            for (i=1; i&lt;21; i++) {
                /* This blocks */
                retval = read(fd, &amp;data, sizeof(unsigned long));
                if (retval == -1) {
                    perror("read");
                    exit(errno);
                }
                fprintf(stderr, " %d",i);
                fflush(stderr);
                irqcount++;
            }

            /* Disable periodic interrupts */
            retval = ioctl(fd, RTC_PIE_OFF, 0);
            if (retval == -1) {
                perror("RTC_PIE_OFF ioctl");
                exit(errno);
            }
        }

    done:
        fprintf(stderr, "\n\n\t\t\t *** Test complete ***\n");

        close(fd);

        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kdump时间错误]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/12/debug-kdump-rtc/"/>
    <updated>2016-01-12T15:39:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/12/debug-kdump-rtc</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016/01/06/debug-mark-rtc/">CentOS 5.x安装新内核之后时钟混乱问题</a></p>

<p>解决kdump的vmcore保存的目录的时间错误问题</p>

<pre><code>    diff --git a/mkdumprd b/mkdumprd
    index d567085..7d946f4 100755
    --- a/mkdumprd
    +++ b/mkdumprd
    @@ -2279,12 +2279,19 @@ mknod /dev/systty c 4 0
     mknod /dev/tty c 5 0
     mknod /dev/console c 5 1
     mknod /dev/ptmx c 5 2
    -mknod /dev/rtc c 10 135
     mknod /dev/urandom c 1 9
     mknod /dev/efirtc c 10 136
     export network_up=0
     EOF

    +kernelval=`echo $kernel | awk -F "[-|.]" '{print $1*65536+$2*256+$3}'`
    +#echo "kernel=$kernel kernelval=$kernelval"
    +if [ $kernelval -lt 132640 ]; then
    +   emit "mknod /dev/rtc c 10 135"
    +else
    +   emit "mknod /dev/rtc c 254 0"
    +fi
    +
     # XXX really we need to openvt too, in case someting changes the
     # color palette and then changes vts on fbcon before gettys start.
     # (yay, fbcon bugs!)
</code></pre>
]]></content>
  </entry>
  
</feed>
