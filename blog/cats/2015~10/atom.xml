<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-03-29T17:17:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tcp连接建立过程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/10/31/kernel-net-connect/"/>
    <updated>2015-10-31T22:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/10/31/kernel-net-connect</id>
    <content type="html"><![CDATA[<h4>一、server</h4>

<h5>1. 接收syn</h5>

<pre><code>    tcp_v4_do_rcv {
        nsk = tcp_v4_hnd_req(sk, skb);

        nsk == sk


        tcp_rcv_state_process {
            icsk-&gt;icsk_af_ops-&gt;conn_request(sk, skb)
            tcp_v4_conn_request {
                __tcp_v4_send_synack {

                    2. 发送syn/ack
                }
            }
        }
    }
</code></pre>

<h5>2. 接收ack</h5>

<pre><code>    tcp_v4_do_rcv {
        nsk = tcp_v4_hnd_req(sk, skb) {
            req = inet_csk_search_req
            nsk = tcp_check_req {
                tcp_v4_syn_recv_sock {
                    tcp_create_openreq_child {
                        inet_csk_clone {

                            newsk-&gt;sk_state = TCP_SYN_RECV;

                        }
                    }
                }
            }
        }

        nsk != sk {
            tcp_child_process {
                tcp_rcv_state_process {

                    if (!tcp_validate_incoming(sk, skb, th, 0))
                        return 0;

                    /* step 5: check the ACK field */
                    if (th-&gt;ack) {
                        int acceptable = tcp_ack(sk, skb, FLAG_SLOWPATH) &gt; 0;

                        switch (sk-&gt;sk_state) {
                            case TCP_SYN_RECV:

                            tcp_set_state(sk, TCP_ESTABLISHED);

                        }

                        case TCP_ESTABLISHED:
                            tcp_data_queue(sk, skb);
                            queued = 1;
                            break;
                        }
                    }

                }
            }
        }
    }
</code></pre>

<h4>二、client</h4>

<h5>1. 发送syn</h5>

<pre><code>    tcp_v4_connect {

        tcp_set_state(sk, TCP_SYN_SENT);

        tcp_connect {
            __tcp_add_write_queue_tail
            tcp_transmit_skb
            inet_csk_reset_xmit_timer
        }
    }
</code></pre>

<h5>2. 接收syn/ack</h5>

<pre><code>    tcp_v4_do_rcv {
        sk-&gt;sk_state == TCP_SYN_SENT

        tcp_rcv_state_process {
            queued = tcp_rcv_synsent_state_process(sk, skb, th, len) {

                tcp_set_state(sk, TCP_ESTABLISHED);

                tcp_send_ack(sk); // 发送ack
            }
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[udp协议]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/10/31/kernel-net-udp/"/>
    <updated>2015-10-31T21:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/10/31/kernel-net-udp</id>
    <content type="html"><![CDATA[<p>UDP数据段格式：udp包头8字节</p>

<table>
    <tr>
        <td width="200">源端口号（16）</td>
        <td width="200">目的端口号（16）</td>
    </tr>
    <tr>
        <td width="200">长度（16）</td>
        <td width="200">校验和（16）</td>
    </tr>
    <tr>
        <td width="400" colspan="2">数据（若有的话）</td>
    </tr>
</table>


<p>长度：UDP报头 加上 UDP数据的长度。</p>

<p>校验和：UDP报头和UDP数据字段两者的校验和。（加伪首部）</p>

<p>raw socket 发送udp包</p>

<pre><code>    //mdos.c
    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;string.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;netdb.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;netinet/ip.h&gt;
    #include &lt;arpa/inet.h&gt;
    #include &lt;linux/udp.h&gt;

    #include &lt;linux/if_ether.h&gt;
    #include &lt;linux/if_arp.h&gt;
    #include &lt;linux/sockios.h&gt;

    unsigned csum_tcpudp_nofold(unsigned saddr, unsigned daddr,
                        unsigned len, unsigned proto, unsigned sum)
    {
        unsigned long long s = (unsigned)sum;
        s += (unsigned)saddr;
        s += (unsigned)daddr;
        s += (proto + len) &lt;&lt; 8;
        s += (s &gt;&gt; 32);
        return (unsigned)s;
    }

    unsigned short check_sum(unsigned short *addr, int len, unsigned sum)
    {
        int nleft = len;
        unsigned short *w = addr;
        unsigned short ret = 0;
        while (nleft &gt; 1) {
                sum += *w++;
                nleft -= 2;
        }
        if (nleft == 1) {
                *(unsigned char *)(&amp;ret) = *(unsigned char *)w;
                sum += ret;
        }

        sum = (sum&gt;&gt;16) + (sum&amp;0xffff);
        sum += (sum&gt;&gt;16);
        ret = ~sum;
        return ret;
    }

    //在该函数中构造整个IP报文，最后调用sendto函数将报文发送出去
    void attack(int skfd, struct sockaddr_in *target, unsigned short srcport)
    {
        char buf[512] = {0};
        struct ip *ip;
        struct udphdr *udp;
        int ip_len;
        /*
    #define kk 16
        char ch[kk] = {0x47,0x45,0x54,0x20,0x2f,0x20,0x48,0x54,0x54,0x50,0x2f,0x31,0x2e,0x31,0x0d,0x0a};
    */
    #define kk 168
        char ch[kk] = {
    0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a,
    0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x63, 0x75, 0x72, 0x6c,
    0x2f, 0x37, 0x2e, 0x31, 0x39, 0x2e, 0x37, 0x20, 0x28, 0x78, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x2d,
    0x72, 0x65, 0x64, 0x68, 0x61, 0x74, 0x2d, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x67, 0x6e, 0x75,
    0x29, 0x20, 0x6c, 0x69, 0x62, 0x63, 0x75, 0x72, 0x6c, 0x2f, 0x37, 0x2e, 0x31, 0x39, 0x2e, 0x37,
    0x20, 0x4e, 0x53, 0x53, 0x2f, 0x33, 0x2e, 0x31, 0x35, 0x2e, 0x33, 0x20, 0x7a, 0x6c, 0x69, 0x62,
    0x2f, 0x31, 0x2e, 0x32, 0x2e, 0x33, 0x20, 0x6c, 0x69, 0x62, 0x69, 0x64, 0x6e, 0x2f, 0x31, 0x2e,
    0x31, 0x38, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x73, 0x68, 0x32, 0x2f, 0x31, 0x2e, 0x34, 0x2e, 0x32,
    0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e,
    0x31, 0x30, 0x39, 0x2e, 0x32, 0x32, 0x32, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a,
    0x20, 0x2a, 0x2f, 0x2a, 0x0d, 0x0a, 0x0d, 0x0a
    };

        int data_len = kk;

        //在我们UDP的报文中Data没有字段，所以整个IP报文的长度
        ip_len = sizeof(struct ip) + sizeof(struct udphdr) + data_len;

        //开始填充IP首部
        ip=(struct ip*)buf;
        ip-&gt;ip_v = IPVERSION;
        ip-&gt;ip_hl = sizeof(struct ip)&gt;&gt;2;
        ip-&gt;ip_tos = 0;
        ip-&gt;ip_len = htons(ip_len);
        ip-&gt;ip_id = 0;
        ip-&gt;ip_off = 0;
        ip-&gt;ip_ttl = MAXTTL;
        ip-&gt;ip_p = IPPROTO_UDP;
        ip-&gt;ip_sum = 0;
        ip-&gt;ip_dst = target-&gt;sin_addr;

        //开始填充UDP首部
        udp = (struct udphdr*)(buf+sizeof(struct ip));
        udp-&gt;source = htons(srcport);
        udp-&gt;dest = target-&gt;sin_port;
        udp-&gt;check = 0;
        udp-&gt;len = htons(data_len + sizeof(struct udphdr));

        int i = ip_len - data_len;
        int j = i;
        for (;i&lt;ip_len;i++)
            buf[i] = ch[i-j];
        /*
        int s = 'A';
        buf[i++] = 0x00 + s;
        buf[i++] = 0x01 + s;
        buf[i++] = 0x02 + s;
        buf[i++] = 0x03 + s;
        buf[i++] = 0x04 + s;
        buf[i++] = 0x05 + s;
        buf[i++] = 0x06 + s;
        buf[i++] = 0x07 + s;
        buf[i++] = 0x08 + s;
        buf[i++] = 0x09 + s;
    */
        printf("%lx %d %d\n", ip-&gt;ip_dst, udp-&gt;dest, udp-&gt;source);
        int T = 1;
        while(1) {
            if (T == 0) break;
            T--;
            //printf("%d\n", T);
            //udp-&gt;seq = random();
                //源地址伪造，我们随便任意生成个地址，让服务器一直等待下去
                //ip-&gt;ip_src.s_addr = random();
            //自定义源地址192.168.204.136 = 0xc0a8cc88; 反转赋值
                ip-&gt;ip_src.s_addr = 0xf86da8c0;
            unsigned sum = csum_tcpudp_nofold(ip-&gt;ip_src.s_addr, ip-&gt;ip_dst.s_addr, sizeof(struct udphdr)+data_len, IPPROTO_UDP, 0);
                udp-&gt;check = check_sum((unsigned short*)udp, sizeof(struct udphdr)+data_len, sum);
            ip-&gt;ip_sum = check_sum((unsigned short*)ip, sizeof(struct ip), 0);
            printf("s1 s2 %lx %lx\n", udp-&gt;check, ip-&gt;ip_sum);
                sendto(skfd, buf, ip_len, 0, (struct sockaddr*)target, sizeof(struct sockaddr_in));
        }
    }

    int main(int argc, char** argv)
    {
        int skfd;
        struct sockaddr_in target;
        struct hostent *host;
        const int on = 1;
        unsigned short srcport;

        if (argc != 4) {
                printf("Usage:%s target dstport srcport\n", argv[0]);
                exit(1);
        }

        bzero(&amp;target, sizeof(struct sockaddr_in));
        target.sin_family = AF_INET;
        target.sin_port = htons(atoi(argv[2]));

        if (inet_aton(argv[1], &amp;target.sin_addr) == 0) {
                host = gethostbyname(argv[1]);
                if(host == NULL) {
                        printf("TargetName Error:%s\n", hstrerror(h_errno));
                        exit(1);
                }
                target.sin_addr = *(struct in_addr *)(host-&gt;h_addr_list[0]);
        }

        //将协议字段置为IPPROTO_UDP，来创建一个UDP的原始套接字
        if (0 &gt; (skfd = socket(AF_INET, SOCK_RAW, IPPROTO_UDP))) {
                perror("Create Error");
                exit(1);
        }

        //用模板代码来开启IP_HDRINCL特性，我们完全自己手动构造IP报文
        if (0 &gt; setsockopt(skfd, IPPROTO_IP, IP_HDRINCL, &amp;on, sizeof(on))) {
                perror("IP_HDRINCL failed");
                exit(1);
        }

        //因为只有root用户才可以play with raw socket :)
        setuid(getpid());
        srcport = atoi(argv[3]);
        attack(skfd, &amp;target, srcport);
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
