<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~kdump、crash | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~kdump,-crash/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-22T11:40:38+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[crash kmem]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem/"/>
    <updated>2015-07-02T10:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/02/debug-crash-kmem</id>
    <content type="html"><![CDATA[<h4>一、kmem -s 查看slab</h4>

<pre><code>    crash&gt; kmem -s
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ...
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    ffff8808135e1400 sock_inode_cache         704        298       470     94     4k
    ...
</code></pre>

<h4>二、kmem -S 查看slab中详细内容</h4>

<pre><code>    crash&gt; kmem -S request_sock_TCP
    CACHE            NAME                 OBJSIZE  ALLOCATED     TOTAL  SLABS  SSIZE
    ffff8808132d1ac0 request_sock_TCP         128          2        30      1     4k
    SLAB              MEMORY            TOTAL  ALLOCATED  FREE
    ffff88078b9c6000  ffff88078b9c60c0     30          2    28
    FREE / [ALLOCATED]
       ffff88078b9c60c0
       ffff88078b9c6140
       ffff88078b9c61c0
       ffff88078b9c6240
       ffff88078b9c62c0
       ffff88078b9c6340
       ffff88078b9c63c0
       ffff88078b9c6440
       ffff88078b9c64c0
       ffff88078b9c6540
       ffff88078b9c65c0
       ffff88078b9c6640
       ffff88078b9c66c0
      [ffff88078b9c6740]
      [ffff88078b9c67c0]
       ffff88078b9c6840
       ffff88078b9c68c0
       ffff88078b9c6940
       ffff88078b9c69c0
    ...
</code></pre>

<p>request_sock_TCP 是 struct request_sock 类型，所以对于已分配的地址可以直接查看</p>

<pre><code>    crash&gt; struct request_sock 0xffff88078b9c6740
    struct request_sock {
      dl_next = 0x0, 
      mss = 1460, 
      retrans = 0 '\000', 
      cookie_ts = 0 '\000', 
      window_clamp = 8388480, 
      rcv_wnd = 14600, 
      ts_recent = 0, 
      expires = 4302901768, 
      rsk_ops = 0xffffffff81c0e840 &lt;tcp_request_sock_ops&gt;, 
      sk = 0xffff880771dad800, 
      secid = 3039208612, 
      peer_secid = 3672081930
    }
</code></pre>

<p><a href="http://blog.csdn.net/u011279649/article/details/17529315">http://blog.csdn.net/u011279649/article/details/17529315</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VMware 'Host SMBus controller not enabled!']]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/29/debug-kdump-vm/"/>
    <updated>2015-05-29T14:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/29/debug-kdump-vm</id>
    <content type="html"><![CDATA[<p><a href="https://www.centos.bz/faq/111/">https://www.centos.bz/faq/111/</a></p>

<p>Ubuntu/CentOS guest instances in VMware sometimes come up with the boot error message:
<code>
    piix4_smbus 0000:00:007.3: Host SMBus controller not enabled!
</code></p>

<p>This error is being caused because VMware doesn’t actually provide that level interface for CPU access, but Ubuntu try to load the kernel module anyway.</p>

<p>How to fix it: <br/>
在虚拟机中
<code>
    sudo vim /etc/modprobe.d/blacklist.conf
</code>
add the line:
<code>
    blacklist i2c-piix4
</code></p>

<p>reboot</p>

<hr />

<p>似乎这个错误在centos6 + 3.10* 的内核，有时kdump不起作用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crash vs gdb work]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work/"/>
    <updated>2014-11-06T10:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work</id>
    <content type="html"><![CDATA[<p><a href="https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html">贴自https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html</a><br/>
Yes, sure. GDB works very differently from crash. There main conceptual<br/>
difference is that GDB only handles with VIRTUAL addresses, while the<br/>
crash utility first translates everything to PHYSICAL addresses.<br/>
Consequently, GDB ignores the PhysAddr field in ELF program headers,<br/>
and crash ignores the VirtAddr field.</p>

<p>I have looked at some of my ELF dump files, and it seems to me that<br/>
VirtAddr is not filled correctly, except for kernel text and static<br/>
data (address range 0xffffffff80000000-0xffffffff9fffffff). Your linked<br/>
list is most likely allocated in the direct mapping<br/>
(0xffff880000000000-0xffffc7ffffffffff). However, I found out that the<br/>
virtual addresses for the direct mapping segments are wrong, e.g. my<br/>
dump file specifies it at 0xffff810000000000 (hypervisor area). This is<br/>
most likely a bug in the kernel code that implements /proc/vmcore.</p>

<p>But that&rsquo;s beside the point. Why?  The Linux kernel maps many physical<br/>
pages more than once into the virtual address space. It would be waste<br/>
of space if you saved it multiple times (for each virtual address that<br/>
maps to it). The crash utility can translate each virtual address to<br/>
the physical address and map it onto ELF segments using PhysAddr.<br/>
Incidentally, the PhysAddr fields are correct in my dump files&hellip;</p>

<p>I&rsquo;m glad you&rsquo;re interested in using GDB to read kernel dump files,<br/>
especially if you&rsquo;re willing to make it work for real. I have proposed<br/>
more than once that the crash utility be re-implemented in pure gdb.<br/>
Last time I looked (approx. 1.5 years ago) the main missing pieces were:</p>

<ol>
<li> Use of physical addresses (described above)</li>
<li> Support for multiple virtual address spaces (for different process contexts)</li>
<li> Ability to read compressed kdump files</li>
<li> Ability to use 64-bit files on 32-bit platforms (to handle PAE)</li>
</ol>


<p>HTH,<br/>
Petr Tesarik</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静态编译crash + xbt + bt -H]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/04/debug-crash-static/"/>
    <updated>2014-11-04T18:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/04/debug-crash-static</id>
    <content type="html"><![CDATA[<h5>要在centos6上编译，为了能在centos5用，用静态编译</h5>

<h5>有两个显示函数参数的patch，但是不一定能起作用</h5>

<h5>patch1:</h5>

<p><a href="https://github.com/jhammond/xbt">https://github.com/jhammond/xbt</a>
<a href="https://www.redhat.com/archives/crash-utility/2013-September/msg00010.html">https://www.redhat.com/archives/crash-utility/2013-September/msg00010.html</a></p>

<h5>patch2:</h5>

<p><a href="https://github.com/hziSot/crash-stack-parser">https://github.com/hziSot/crash-stack-parser</a>
<a href="https://github.com/hziSot/crash-stack-parser/blob/master/crash-parse-stack-7.0.1.patch">https://github.com/hziSot/crash-stack-parser/blob/master/crash-parse-stack-7.0.1.patch</a></p>

<h4>一、依赖包：</h4>

<p>yum install bison zlib zlib-static glibc-static elfutils-devel elfutils-devel-static elfutils-libelf-devel-static ncurses ncurses-static crash-devel</p>

<h4>二、patch1: xbt 显示参数</h4>

<p>patch: <a href="https://github.com/hziSot/crash-stack-parser  ">https://github.com/hziSot/crash-stack-parser  </a>
make CFLAGS+=&ndash;static LDFLAGS+=&ndash;static</p>

<h4>三、patch2: bt -H 显示参数</h4>

<pre><code>    依赖：有些没有静态包，要自己编译安装：
    liblzma.a: http://tukaani.org/xz/xz-5.0.7.tar.bz2
    libbz2.a:  http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
    下载代码：git clone https://github.com/jhammond/xbt.git xbt.git
    把xbt.git/xbt_crash.c中函数xbt_func前的static删了
    把xbt.git/xbt_crash.c中函数xmod_init的register_extension删了
    把 xbt 命令加到global_data.c        函数x86_64_exception_frame已经在其他库中定义了，所以要换个名字
    编译xbt代码：make   ==  rm -rf *.so
    把 xbt.git/xbt_crash.o  xbt.git/xbt_dwarf.o  xbt.git/xbt_dwfl.o  xbt.git/xbt_eval.o  xbt.git/xbt_frame_print.o 加到 Makefile 的 OBJECT_FILES= 中
    make CFLAGS+=--static LDFLAGS+="--static -lc  -lm -ldl -ldw -lebl -lelf -lbz2 -llzma"


    注意:-lelf -lebl要放在-ldw后面。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kdump el5 --dump-dmesg 错误]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg/"/>
    <updated>2014-08-28T16:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-kdump-cannot--dump-dmesg</id>
    <content type="html"><![CDATA[<h4>原因：</h4>

<p><a href="http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm  ">http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm  </a>
这个包的一个patch(kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch)是为了得到dmesg的，<br/>
但是它判断dmesg的结束是用logged_chars(看kernel/printk.c)，logged_chars应该是输出的结束，所以不对。<br/>
改成log_end就行，<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff &ndash;git a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>index 3938280..76c402a 100644
</span><span class='line'>&mdash; a/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>+++ b/kexec-tools-1.102pre-makedumpfile-dump-dmesg.patch
</span><span class='line'>@@ -68,7 +68,7 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +dump_dmesg()
</span><span class='line'> +{
</span><span class='line'> +      int log_buf_len, length_log, length_oldlog, ret = FALSE;
</span><span class='line'>-+      unsigned long log_addr, logged_chars, index;
</span><span class='line'>++      unsigned long log_addr, logged_chars, log_end, index;
</span><span class='line'> +      char *log_buffer = NULL;
</span><span class='line'> +
</span><span class='line'> +      if (!open_files_for_creating_dumpfile())
</span><span class='line'>@@ -101,10 +101,15 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               printf(&ldquo;Failed to get logged_chars.\n&rdquo;);
</span><span class='line'> +               return FALSE;
</span><span class='line'> +      }
</span><span class='line'>++      if (!readmem(VADDR, SYMBOL(log_end), &amp;log_end, sizeof(log_end))) {
</span><span class='line'>++               printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>++               return FALSE;
</span><span class='line'>++      }
</span><span class='line'> +      DEBUG_MSG(&ldquo;\n&rdquo;);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_addr     : %lx\n&rdquo;, log_addr);
</span><span class='line'> +      DEBUG_MSG(&ldquo;log_buf_len  : %d\n&rdquo;, log_buf_len);
</span><span class='line'> +      DEBUG_MSG(&ldquo;logged_chars : %ld\n&rdquo;, logged_chars);
</span><span class='line'>++      DEBUG_MSG(&ldquo;log_end      : %ld\n&rdquo;, log_end);
</span><span class='line'> +
</span><span class='line'> +      if ((log_buffer = malloc(log_buf_len)) == NULL) {
</span><span class='line'> +               ERRMSG(&ldquo;Can&rsquo;t allocate memory for log_buf. %s\n&rdquo;,
</span><span class='line'>@@ -112,21 +117,16 @@ diff -up kexec-tools-testing-20070330/makedumpfile/makedumpfile.c.orig kexec-too
</span><span class='line'> +               return FALSE;
</span><span class='line'> +       }
</span><span class='line'> +
</span><span class='line'>-+      if (logged_chars &lt; log_buf_len) {
</span><span class='line'>++      if (log_end &lt; log_buf_len) {
</span><span class='line'> +               index = 0;
</span><span class='line'>-+               length_log = logged_chars;
</span><span class='line'>++               length_log = log_end;
</span><span class='line'> +
</span><span class='line'> +               if(!readmem(VADDR, log_addr, log_buffer, length_log)) {
</span><span class='line'> +                        printf(&ldquo;Failed to read dmesg log.\n&rdquo;);
</span><span class='line'> +                        goto out;
</span><span class='line'> +               }
</span><span class='line'> +      } else {
</span><span class='line'>-+               if (!readmem(VADDR, SYMBOL(log_end), &amp;index, sizeof(index))) {
</span><span class='line'>-+                        printf(&ldquo;Failed to get log_end.\n&rdquo;);
</span><span class='line'>-+                        goto out;
</span><span class='line'>-+               }
</span><span class='line'>-+               DEBUG_MSG(&ldquo;log_end      : %lx\n&rdquo;, index);
</span><span class='line'>-+               index &amp;= log_buf_len - 1;
</span><span class='line'>++               index = log_end &amp; (log_buf_len - 1);
</span><span class='line'> +               length_log = log_buf_len;
</span><span class='line'> +               length_oldlog = log_buf_len - index;
</span><span class='line'> +&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;----------------
</span><span class='line'>----------------
</span><span class='line'>#### 如果不修改上面bug，kdump得到vmcore后用 makedumpfile --dump-dmesg 无法解得dmesg，补救办法如下：  
</span><span class='line'>kdump得到vmcore后  
</span><span class='line'> 1、vmlinux没有debuginfo，crash不能运行  
</span><span class='line'> 2、makedumpfile -F --dump-dmesg vmcore &gt; dmesg 只能显示开头一下部分dmesg （不懂为什么）  
</span><span class='line'>解决：
</span><span class='line'>
</span><span class='line'>##### 方法一、
</span><span class='line'>通过/boot/System.map 或者 /proc/kallsyms 找到 log_buf 地址，例如 0xffffffff81a9ac30
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gdb vmlinux vmcore&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set print repeats 100
</span><span class='line'>set print elements 0
</span><span class='line'>set logging file XXX
</span><span class='line'>set pagination off
</span><span class='line'>set logging on
</span><span class='line'>p {char*} 0xffffffff81a9ac30
</span><span class='line'>quit&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vi XXX
</span><span class='line'>:%s/\n/\r/g</span></code></pre></td></tr></table></div></figure></p>

<h5>方法二、</h5>

<p>是另一命令，但不好用
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /proc/kallsyms | grep log_end
</span><span class='line'>ffffffff81e30de0 b log_end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1dw 0xffffffff81e30de0
</span><span class='line'>0xffffffff81e30de0:     85689&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x/1xg 0xffffffff81a9ac30
</span><span class='line'>0xffffffff81a9ac30:     0xffffffff81e30ee0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;显示最后4000字符
</span><span class='line'>x/5s 0xffffffff81e30ee0+85689-4000</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
