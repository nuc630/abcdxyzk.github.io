<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2013~05 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2013~05/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-14T22:08:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RedHat/CentOS发行版本号及内核版本号对照表]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/28/centos-versions/"/>
    <updated>2013-05-28T15:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/28/centos-versions</id>
    <content type="html"><![CDATA[<pre><code>Redhat 9.0———————————————2.4.20-8
RHEL 3 Update 8————————————2.4.21-47
RHEL 4 ————————————————2.6.9-5
RHEL 4 Update 1————————————2.6.9-11
RHEL 4 Update 2————————————2.6.9-22
RHEL 4 Update 3————————————2.6.9-34
RHEL 4 Update 4————————————2.6.9-42
RHEL 4 Update 5————————————2.6.9-55
RHEL 4 Update 6————————————2.6.9-67
RHEL 4 Update 7————————————2.6.9-78

CENTOS 5/RHEL 5 ———————————2.6.18-8
CENTOS 5.1/RHEL 5 Update 1——————2.6.18-53
CENTOS 5.2/RHEL 5 Update 2——————2.6.18-92
CENTOS 5.3/RHEL 5 Update 3——————2.6.18-128
CENTOS 5.4/RHEL 5 Update 4——————2.6.18-164
CENTOS 5.5/RHEL 5 Update 5——————2.6.18-194
CENTOS 5.6/RHEL 5 Update 6——————2.6.18-238
CENTOS 5.7/RHEL 5 Update 7——————2.6.18-274
CENTOS 5.8/RHEL 5 Update 8——————2.6.18-308

CENTOS 6.0/RHEL 6 Update 0——————2.6.32-71
CENTOS 6.1/RHEL 6 Update 1——————2.6.32-131
CENTOS 6.2/RHEL 6 Update 2——————2.6.32-220
CENTOS 6.3/RHEL 6 Update 3——————2.6.32-279
CENTOS 6.4/RHEL 6 Update 4——————2.6.32-358
CENTOS 6.5/RHEL 6 Update 5——————2.6.32-431
CENTOS 6.6/RHEL 6 Update 6——————2.6.32-504

CENTOS 7.0/RHEL 7 Update 0——————3.10.0-123
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核kretprobe机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/24/debug-kretprobe/"/>
    <updated>2013-05-24T10:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/24/debug-kretprobe</id>
    <content type="html"><![CDATA[<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap1/index.html">http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap1/index.html</a></p>

<p>  kretprobe也使用了kprobes来实现，当用户调用register_kretprobe()时，kprobe在被探测函数的入口建立 了一个探测点，当执行到探测点时，kprobe保存了被探测函数的返回地址并取代返回地址为一个trampoline的地址，kprobe在初始化时定义 了该trampoline并且为该trampoline注册了一个kprobe,当被探测函数执行它的返回指令时，控制传递到该trampoline，因 此kprobe已经注册的对应于trampoline的处理函数将被执行，而该处理函数会调用用户关联到该kretprobe上的处理函数，处理完毕后， 设置指令寄存器指向已经备份的函数返回地址，因而原来的函数返回被正常执行。</p>

<p>  被探测函数的返回地址保存在类型为 kretprobe_instance的变量中，结构kretprobe的maxactive字段指定了被探测函数可以被同时探测的实例数，函数 register_kretprobe()将预分配指定数量的kretprobe_instance。如果被探测函数是非递归的并且调用时已经保持了自旋 锁（spinlock），那么maxactive为1就足够了；  如果被探测函数是非递归的且运行时是抢占失效的，那么maxactive为NR_CPUS就可以了；如果maxactive被设置为小于等于0,  它被设置到缺省值（如果抢占使能， 即配置了  CONFIG_PREEMPT，缺省值为10和2*NR_CPUS中的最大值，否则缺省值为NR_CPUS）。</p>

<p>  如果 maxactive被设置的太小了，一些探测点的执行可能被丢失，但是不影响系统的正常运行，在结构kretprobe中nmissed字段将记录被丢失 的探测点执行数，它在返回探测点被注册时设置为0，每次当执行探测函数而没有kretprobe_instance可用时，它就加1。</p>

<p><a href="http://hi.baidu.com/lixiang1988/item/8884bc286c9920ceddf69acd">http://hi.baidu.com/lixiang1988/item/8884bc286c9920ceddf69acd</a></p>

<h4>kretprobe的实现</h4>

<p>相关数据结构与函数分析</p>

<h5>1)　struct kretprobe结构</h5>

<p>  该结构是kretprobe实现的基础数据结构，以下是该结构的成员：
<code>
    struct kprobe kp; //该成员是kretprobe内嵌的struct kprobe结构。
    kretprobe_handler_t handler;//该成员是调试者定义的回调函数。
    int maxactive;//该成员是最多支持的返回地址实例数。
    int nmissed;//该成员记录有多少次该函数返回没有被回调函数处理。
    struct hlist_head free_instances;
    用于链接未使用的返回地址实例，在注册时初始化。
    struct hlist_head used_instances;//该成员是正在被使用的返回地址实例链表。
</code></p>

<h5>2)　struct kretprobe_instance结构</h5>

<p>  该结构表示一个返回地址实例。因为函数每次被调用的地方不同，这造成了返回地址不同，因此需要为每一次发生的调用记录在这样一个结构里面。以下是该结构的成员：
<code>
    struct hlist_node uflist;
    该成员被链接入kretprobe的used_instances或是free_instances链表。
    struct kretprobe *rp;//该成员指向所属的kretprobe结构。
    kprobe_opcode_t *ret_addr;//该成员用于记录被探测函数正真的返回地址。
    struct task_struct *task;//该成员记录当时运行的进程。
</code></p>

<h5>3)　pre_handler_kretprobe()函数</h5>

<p>  该函数在kretprobe探测点被执行到后，用于修改被探测函数的返回地址。</p>

<h5>4)　trampoline_handler()函数</h5>

<p>  该函数用于执行调试者定义的回调函数以及把被探测函数的返回地址修改回原来的返回地址。</p>

<h4>kretprobe处理流程分析</h4>

<p>  kretprobe探测方式是基于kprobe实现的又一种内核探测方式，该探测方式主要用于在函数返回时进行探测，获得内核函数的返回值，还可以用于计算函数执行时间等方面。</p>

<h5>1)　kretprobe的注册过程</h5>

<p>  调试者要进行kretprobe调试首先要注册处理，这需要在调试模块中调用register_kretprobe()，下文中称该函数为 kretprobe  注册器。kretprobe注册器对传入的kretprobe结构的中kprobe.pre_handler赋值为 pre_handler_kretprobe()函数，用于在探测点被触发时被调用。接着，kretprobe注册器还会初始化kretprobe的一些 成员，比如分配返回地址实例的空间等操作。最后，kretprobe注册器会利用  kretprobe内嵌的structkprobe结构进行kropbe的注册。自此，kretprobe注册过程就完成了。</p>

<h5>2)　kretprobe探测点的触发过程</h5>

<p>  kretprobe触发是在刚进入被探测函数的第一条汇编指令时发生的，因为 kretprobe注册时把该地址修改位int3指令。<br/>
  此时发生了一次CPU异常处理，这与kprobe探测点被触发相同。但与kprobe处理不同的是，这里并不是运行用户定义的pre_handler函 数，而是执行pre_handler_kretprobe()函数，该函数又会调用arch_prepare_kretprobe()函数。 arch_prepare_kretprobe()函数的主要功能是把被探测函数的返回地址变换为&amp;kretprobe_trampoline所 在的地址，这是一个汇编地址标签。这个标签的地址在kretprobe_trampoline_holder()中用汇编伪指令定义。替换函数返回地址是 kretprobe实现的关键。当被探测函数返回时，返回到&amp;kretprobe_trampoline地址处开始运行。</p>

<p>  接着，在 一些保护现场的处理后，又去调用trampoline_handler()函数。该函数的主要有两个作用，一是根据当前的实例去运行用户定义的调试函数， 也就是kretprobe结构中的handler所指向的函数，二是把返回值设成被探测函数正真的返回地址。最后，在进行一些堆栈的处理后，被探测函数又 返回到了正常执行流程中去。</p>

<p>  以上讨论的就是kretprobe的执行过程，可以看出，该调试方式的关键点在于修改被探测函数的返回地址到kprobes的控制流程中，之后再把返回地址修改到原来的返回地址并使得该函数继续正常执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核kprobe机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/24/debug-kprobe-base/"/>
    <updated>2013-05-24T10:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/24/debug-kprobe-base</id>
    <content type="html"><![CDATA[<ul>
<li>探测点处理函数在运行时是失效抢占的，依赖于特定的架构，探测点处理函数运行时也可能是中断失效的。</li>
<li><p>因此，对于任何探测点处理函数，不要使用导致睡眠或进程调度的任何内核函数（如尝试获得semaphore)。</p>

<p>Kprobe机制是内核提供的一种调试机制，它提供了一种方法，能够在不修改现有代码的基础上，灵活的跟踪内核函数的执行。它的基本工作原理是：用户指定一个探测点，并把一个用户定义的处理函数关联到该探测点，当内核执行到该探测点时，相应的关联函数被执行，然后继续执行正常的代码路径。</p>

<p>Kprobe提供了三种形式的探测点，一种是最基本的kprobe，能够在指定代码执行前、执行后进行探测，但此时不能访问被探测函数内的相关变量信 息；一种是jprobe，用于探测某一函数的入口，并且能够访问对应的函数参数；一种是kretprobe，用于完成指定函数返回值的探测功能。其中最基 本的就是kprobe机制，jprobe以及kretprobe的实现都依赖于kprobe，但其代码的实现都很巧妙，强烈建议每一个内核爱好者阅读。</p></li>
</ul>


<h4>代码：</h4>

<h5>首先是struct kprobe结构，每一个探测点的基本结构。</h5>

<pre><code>    structkprobe {
        /*用于保存kprobe的全局hash表，以被探测的addr为key*/
        structhlist_node hlist;

        /* list of kprobes for multi-handler support */
        /*当对同一个探测点存在多个探测函数时，所有的函数挂在这条链上*/
        structlist_head list;

        /*count the number of times this probe was temporarily disarmed */
        unsigned longnmissed;

        /* location of the probe point */
        /*被探测的目标地址*/
        kprobe_opcode_t *addr;

        /* Allow user to indicate symbol name of the probe point */
        /*symblo_name的存在，允许用户指定函数名而非确定的地址*/
        constchar*symbol_name;

        /* Offset into the symbol */
        /*如果被探测点为函数内部某个指令，需要使用addr + offset的方式*/
        unsigned intoffset;

        /* Called before addr is executed. */
        /*探测函数，在目标探测点执行之前调用*/
        kprobe_pre_handler_t pre_handler;

        /* Called after addr is executed, unless... */
        /*探测函数，在目标探测点执行之后调用*/
        kprobe_post_handler_t post_handler;

        /*
         * ... called if executing addr causes a fault (eg. page fault).
         * Return 1 if it handled fault, otherwise kernel will see it.
         */
        kprobe_fault_handler_t fault_handler;

        /*
         * ... called if breakpoint trap occurs in probe handler.
         * Return 1 if it handled break, otherwise kernel will see it.
         */
        kprobe_break_handler_t break_handler;

        /*opcode 以及 ainsn 用于保存被替换的指令码*/

        /* Saved opcode (which has been replaced with breakpoint) */
        kprobe_opcode_t opcode;

        /* copy of the original instruction */
        structarch_specific_insn ainsn;

        /*
         * Indicates various status flags.
         * Protected by kprobe_mutex after this kprobe is registered.
         */
        u32 flags;
    };
</code></pre>

<p>  对于kprobe功能的实现主要利用了内核中的两个功能特性：异常（尤其是int 3），单步执行（EFLAGS中的TF标志）。</p>

<h5>大概的流程：</h5>

<pre><code> 1）在注册探测点的时候，对被探测函数的指令码进行替换，替换为int 3的指令码；
 2）在执行int 3的异常执行中，通过通知链的方式调用kprobe的异常处理函数；
 3）在kprobe的异常出来函数中，判断是否存在pre_handler钩子，存在则执行；
 4）执行完后，准备进入单步调试，通过设置EFLAGS中的TF标志位，并且把异常返回的地址修改为保存的原指令码；
 5）代码返回，执行原有指令，执行结束后触发单步异常；
 6）在单步异常的处理中，清除单步标志，执行post_handler流程，并最终返回；
</code></pre>

<p>  下面又进入代码时间，首先看一下kprobe模块的初始化代码，初始化代码主要做了两件事：标记出哪些代码是不能被探测的，这些代码属于kprobe实现的关键代码；注册通知链到die_notifier，用于接收异常通知。</p>

<h5>初始化代码位于kernel/kprobes.c中</h5>

<pre><code>    staticint__init init_kprobes(void)
    {
        inti,err =0;
            ....

         /*kprobe_blacklist中保存的是kprobe实现的关键代码路径，这些函数不应该被kprobe探测*/
        /*
         * Lookup and populate the kprobe_blacklist.
         *
         * Unlike the kretprobe blacklist, we'll need to determine
         * the range of addresses that belong to the said functions,
         * since a kprobe need not necessarily be at the beginning
         * of a function.
         */
        for(kb =kprobe_blacklist;kb-&gt;name!=NULL;kb++){
            kprobe_lookup_name(kb-&gt;name,addr);
            if(!addr)
                continue;

            kb-&gt;start_addr =(unsigned long)addr;
            symbol_name =kallsyms_lookup(kb-&gt;start_addr,
                    &amp;size,&amp;offset,&amp;modname,namebuf);
            if(!symbol_name)
                kb-&gt;range =0;
            else
                kb-&gt;range =size;
        }
            ....
        if(!err)
            /*注册通知链到die_notifier，用于接收int 3的异常信息*/
            err =register_die_notifier(&amp;kprobe_exceptions_nb);
             ....
    }
</code></pre>

<h5>其中的通知链：</h5>

<pre><code>    staticstructnotifier_block kprobe_exceptions_nb ={
        .notifier_call =kprobe_exceptions_notify,
        /*优先级最高，保证最先执行*/
        .priority =0x7fffffff /* we need to be notified first */
    };
</code></pre>

<h6>kprobe的注册流程register_kprobe。</h6>

<pre><code>    int__kprobes register_kprobe(structkprobe *p)
    {
        intret =0;
        structkprobe *old_p;
        structmodule *probed_mod;
        kprobe_opcode_t *addr;

        /*获取被探测点的地址，指定了symbol_name，则从kallsyms中获取；指定了offset，则返回addr + offset*/
        addr =kprobe_addr(p);
        if(!addr)
            return-EINVAL;
        p-&gt;addr =addr;

        /*判断同一个kprobe是否被重复注册*/
        ret =check_kprobe_rereg(p);
        if(ret)
            returnret;

        jump_label_lock();
        preempt_disable();
        /*判断被注册的函数是否位于内核的代码段内，或位于不能探测的kprobe实现路径中*/
        if(!kernel_text_address((unsigned long)p-&gt;addr)||
            in_kprobes_functions((unsigned long)p-&gt;addr)||
            ftrace_text_reserved(p-&gt;addr,p-&gt;addr)||
            jump_label_text_reserved(p-&gt;addr,p-&gt;addr))
            gotofail_with_jump_label;

        /* User can pass only KPROBE_FLAG_DISABLED to register_kprobe */
        p-&gt;flags&amp;=KPROBE_FLAG_DISABLED;

        /*
         * Check if are we probing a module.
         */
        /*判断被探测的地址是否属于某一个模块，并且位于模块的text section内*/
        probed_mod =__module_text_address((unsigned long)p-&gt;addr);
        if(probed_mod){
            /*如果被探测的为模块地址，首先要增加模块的引用计数*/
            /*
             * We must hold a refcount of the probed module while updating
             * its code to prohibit unexpected unloading.
             */
            if(unlikely(!try_module_get(probed_mod)))
                gotofail_with_jump_label;

            /*
             * If the module freed .init.text, we couldn't insert
             * kprobes in there.
             */
            /*如果被探测的地址位于模块的init地址段内，但该段代码区间已被释放，则直接退出*/
            if(within_module_init((unsigned long)p-&gt;addr,probed_mod)&amp;&amp;
                probed_mod-&gt;state!=MODULE_STATE_COMING){
                module_put(probed_mod);
                gotofail_with_jump_label;
            }
        }
        preempt_enable();
        jump_label_unlock();

        p-&gt;nmissed =0;
        INIT_LIST_HEAD(&amp;p-&gt;list);
        mutex_lock(&amp;kprobe_mutex);

        jump_label_lock();/* needed to call jump_label_text_reserved() */

        get_online_cpus();  /* For avoiding text_mutex deadlock. */
        mutex_lock(&amp;text_mutex);

        /*判断在同一个探测点是否已经注册了其他的探测函数*/
        old_p =get_kprobe(p-&gt;addr);
        if(old_p){
            /* Since this may unoptimize old_p, locking text_mutex. */
            /*如果已经存在注册过的kprobe，则将探测点的函数修改为aggr_pre_handler，并将所有的handler挂载到其链表上，由其负责所有handler函数的执行*/
            ret =register_aggr_kprobe(old_p,p);
            gotoout;
        }

        /* 分配特定的内存地址用于保存原有的指令
         * 按照内核注释，被分配的地址必须must be on special executable page on x86.
         * 该地址被保存在kprobe-&gt;ainsn.insn
         */
        ret =arch_prepare_kprobe(p);
        if(ret)
            gotoout;

        /*将kprobe加入到相应的hash表内*/
        INIT_HLIST_NODE(&amp;p-&gt;hlist);
        hlist_add_head_rcu(&amp;p-&gt;hlist,
                   &amp;kprobe_table[hash_ptr(p-&gt;addr,KPROBE_HASH_BITS)]);

        if(!kprobes_all_disarmed &amp;&amp;!kprobe_disabled(p))
    /*将探测点的指令码修改为int 3指令*/
            __arm_kprobe(p);

        /* Try to optimize kprobe */
        try_to_optimize_kprobe(p);

    out:
        mutex_unlock(&amp;text_mutex);
        put_online_cpus();
        jump_label_unlock();
        mutex_unlock(&amp;kprobe_mutex);

        if(probed_mod)
            module_put(probed_mod);

        returnret;

    fail_with_jump_label:
        preempt_enable();
        jump_label_unlock();
        return-EINVAL;
</code></pre>

<h5>注册完毕，就开始kprobe的执行流程了。对于该探测点，由于其起始指令已经被修改为int3，因此在执行到该地址时，必然会触发3号中断向量的处理流程do_int3.</h5>

<pre><code>    /* May run on IST stack. */
    dotraplinkage void__kprobes do_int3(structpt_regs *regs,longerror_code)
    {
    #ifdef CONFIG_KGDB_LOW_LEVEL_TRAP
        if(kgdb_ll_trap(DIE_INT3,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #endif /* CONFIG_KGDB_LOW_LEVEL_TRAP */
    #ifdef CONFIG_KPROBES
        /*在这里以DIE_INT3，通知kprobe注册的通知链*/
        if(notify_die(DIE_INT3,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #else
        if(notify_die(DIE_TRAP,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #endif

        preempt_conditional_sti(regs);
        do_trap(3,SIGTRAP,"int3",regs,error_code,NULL);
        preempt_conditional_cli(regs);
    }
</code></pre>

<h5>在do_int3中触发kprobe注册的通知链函数，kprobe_exceptions_notify。由于kprobe以及jprobe等机制的处 理核心都在此函数内，这里只针对kprobe的流程进行分析：进入函数的原因是DIE_INT3,并且是第一次进入该函数。</h5>

<pre><code>    int__kprobes kprobe_exceptions_notify(structnotifier_block *self,
                           unsigned longval,void*data)
    {
        structdie_args *args =data;
        intret =NOTIFY_DONE;

        if(args-&gt;regs &amp;&amp;user_mode_vm(args-&gt;regs))
            returnret;

        switch(val){
        caseDIE_INT3:
    /*对于kprobe，进入kprobe_handle*/
            if(kprobe_handler(args-&gt;regs))
                ret =NOTIFY_STOP;
            break;
        caseDIE_DEBUG:
            if(post_kprobe_handler(args-&gt;regs)){
                /*
                 * Reset the BS bit in dr6 (pointed by args-&gt;err) to
                 * denote completion of processing
                 */
                (*(unsigned long*)ERR_PTR(args-&gt;err))&amp;=~DR_STEP;
                ret =NOTIFY_STOP;
            }
            break;
        caseDIE_GPF:
            /*
             * To be potentially processing a kprobe fault and to
             * trust the result from kprobe_running(), we have
             * be non-preemptible.
             */
            if(!preemptible()&amp;&amp;kprobe_running()&amp;&amp;
                kprobe_fault_handler(args-&gt;regs,args-&gt;trapnr))
                ret =NOTIFY_STOP;
            break;
        default:
            break;
        }
        returnret;
    }

    staticint__kprobes kprobe_handler(structpt_regs *regs)
    {
        kprobe_opcode_t *addr;
        structkprobe *p;
        structkprobe_ctlblk *kcb;

        /*对于int 3中断，其被Intel定义为Trap，那么异常发生时EIP寄存器内指向的为异常指令的后一条指令*/
        addr =(kprobe_opcode_t *)(regs-&gt;ip -sizeof(kprobe_opcode_t));
        /*
         * We don't want to be preempted for the entire
         * duration of kprobe processing. We conditionally
         * re-enable preemption at the end of this function,
         * and also in reenter_kprobe() and setup_singlestep().
         */
        preempt_disable();

        kcb =get_kprobe_ctlblk();
        /*获取addr对应的kprobe*/
        p =get_kprobe(addr);

        if(p){
    /*如果异常的进入是由kprobe导致，则进入reenter_kprobe(jprobe需要，到时候分析)*/
            if(kprobe_running()){
                if(reenter_kprobe(p,regs,kcb))
                    return1;
            }else{
                set_current_kprobe(p,regs,kcb);
                kcb-&gt;kprobe_status =KPROBE_HIT_ACTIVE;

                /*
                 * If we have no pre-handler or it returned 0, we
                 * continue with normal processing.  If we have a
                 * pre-handler and it returned non-zero, it prepped
                 * for calling the break_handler below on re-entry
                 * for jprobe processing, so get out doing nothing
                 * more here.
                 */
        /*执行在此地址上挂载的pre_handle函数*/
                if(!p-&gt;pre_handler ||!p-&gt;pre_handler(p,regs))
    /*设置单步调试模式，为post_handle函数的执行做准备*/
                    setup_singlestep(p,regs,kcb,0);
                return1;
            }
        }elseif(*addr !=BREAKPOINT_INSTRUCTION){
            /*
             * The breakpoint instruction was removed right
             * after we hit it.  Another cpu has removed
             * either a probepoint or a debugger breakpoint
             * at this address.  In either case, no further
             * handling of this interrupt is appropriate.
             * Back up over the (now missing) int3 and run
             * the original instruction.
             */
            regs-&gt;ip =(unsigned long)addr;
            preempt_enable_no_resched();
            return1;
        }elseif(kprobe_running()){
            p =__this_cpu_read(current_kprobe);
            if(p-&gt;break_handler &amp;&amp;p-&gt;break_handler(p,regs)){
                setup_singlestep(p,regs,kcb,0);
                return1;
            }
        }/* else: not a kprobe fault; let the kernel handle it */

        preempt_enable_no_resched();
        return0;
    }

    staticvoid__kprobes setup_singlestep(structkprobe *p,structpt_regs *regs,
                           structkprobe_ctlblk *kcb,intreenter)
    {
        if(setup_detour_execution(p,regs,reenter))
            return;

    #if!defined(CONFIG_PREEMPT)
        if(p-&gt;ainsn.boostable ==1 &amp;&amp;!p-&gt;post_handler){
            /* Boost up -- we can execute copied instructions directly */
            if(!reenter)
                reset_current_kprobe();
            /*
             * Reentering boosted probe doesn't reset current_kprobe,
             * nor set current_kprobe, because it doesn't use single
             * stepping.
             */
            regs-&gt;ip =(unsigned long)p-&gt;ainsn.insn;
            preempt_enable_no_resched();
            return;
        }
    #endif
        /*jprobe*/
        if(reenter){
            save_previous_kprobe(kcb);
            set_current_kprobe(p,regs,kcb);
            kcb-&gt;kprobe_status =KPROBE_REENTER;
        }else
            kcb-&gt;kprobe_status =KPROBE_HIT_SS;
        /* Prepare real single stepping */
        /*准备单步模式，设置EFLAGS的TF标志位，清楚IF标志位(禁止中断)*/
        clear_btf();
        regs-&gt;flags|=X86_EFLAGS_TF;
        regs-&gt;flags&amp;=~X86_EFLAGS_IF;
        /* single step inline if the instruction is an int3 */
        if(p-&gt;opcode ==BREAKPOINT_INSTRUCTION)
            regs-&gt;ip =(unsigned long)p-&gt;addr;
        else
    /*设置异常返回的指令为保存的被探测点的指令*/
            regs-&gt;ip =(unsigned long)p-&gt;ainsn.insn;
    }
</code></pre>

<h5>对应kprobe,pre_handle的执行就结束了，按照代码，程序开始执行保存的被探测点的指令，由于开启了单步调试模式，执行完指令后会继续触发异常，这次的是do_debug异常处理流程。</h5>

<pre><code>    dotraplinkage void__kprobes do_debug(structpt_regs *regs,longerror_code)
    {
        ....

        /*在do_debug中，以DIE_DEBUG再一次触发kprobe的通知链*/
        if(notify_die(DIE_DEBUG,"debug",regs,PTR_ERR(&amp;dr6),error_code,
                                SIGTRAP)==NOTIFY_STOP)
            return;

        ....
        return;
    }

    /*对于kprobe_exceptions_notify，其DIE_DEBUG处理流程*/
    caseDIE_DEBUG:
            if(post_kprobe_handler(args-&gt;regs)){
                /*
                 * Reset the BS bit in dr6 (pointed by args-&gt;err) to
                 * denote completion of processing
                 */
                (*(unsigned long*)ERR_PTR(args-&gt;err))&amp;=~DR_STEP;
                ret =NOTIFY_STOP;
            }
            break;

    staticint__kprobes post_kprobe_handler(structpt_regs *regs)
    {
        structkprobe *cur =kprobe_running();
        structkprobe_ctlblk *kcb =get_kprobe_ctlblk();

        if(!cur)
            return0;

        /*设置异常返回的EIP为下一条需要执行的指令*/
        resume_execution(cur,regs,kcb);
        /*恢复异常执行前的EFLAGS*/
        regs-&gt;flags|=kcb-&gt;kprobe_saved_flags;

        /*执行post_handler函数*/
        if((kcb-&gt;kprobe_status !=KPROBE_REENTER)&amp;&amp;cur-&gt;post_handler){
            kcb-&gt;kprobe_status =KPROBE_HIT_SSDONE;
            cur-&gt;post_handler(cur,regs,0);
        }

        /* Restore back the original saved kprobes variables and continue. */
        if(kcb-&gt;kprobe_status ==KPROBE_REENTER){
            restore_previous_kprobe(kcb);
            gotoout;
        }
        reset_current_kprobe();
    out:
        preempt_enable_no_resched();

        /*
         * if somebody else is singlestepping across a probe point, flags
         * will have TF set, in which case, continue the remaining processing
         * of do_debug, as if this is not a probe hit.
         */
        if(regs-&gt;flags&amp;X86_EFLAGS_TF)
            return0;

        return1;
    }
</code></pre>

<p>至此，一个典型的kprobe的流程已经执行完毕了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[addr2line命令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/23/command-addr2line/"/>
    <updated>2013-05-23T18:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/23/command-addr2line</id>
    <content type="html"><![CDATA[<p>这是一个示例程序，func函数返回参数a除以参数b的结果。这里使用0作为除数，结果就是程序因为除以0导致错误，直接中断了。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int func(int a, int b)
</span><span class='line'>{
</span><span class='line'>    return a / b;
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int main()
</span><span class='line'>{
</span><span class='line'>int x = 10;
</span><span class='line'>int y = 0;
</span><span class='line'>printf("%d / %d = %d\n", x, y, func(x, y));
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ gcc -o test1 -g test1.c&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>编译程序，test1.c是程序文件名。执行程序，结果程序异常中断。查看系统dmesg信息，发现系统日志的错误信息：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>[54106.016179] test1[8352] trap divide error ip:400506 sp:7fff2add87e0 error:0 in test1[400000+1000]
</span><span class='line'>&lt;code&gt;
</span><span class='line'>这条信息里的ip字段后面的数字就是test1程序出错时所程序执行的位置。使用addr2line就可以将400506转换成出错程序的位置：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ addr2line -e test1 400506&lt;br/&gt;
</span><span class='line'>/home/hanfoo/code/test/addr2line/test1.c:5
</span><span class='line'>&lt;code&gt;
</span><span class='line'>这里的test1.c:5指的就是test1.c的第5行
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>return a / b;&lt;br/&gt;</span></code></pre></td></tr></table></div></figure>
也正是这里出现的错误。addr2line帮助我们解决了问题。</p>

<p>  addr2line如何找到的这一行呢。在可执行程序中都包含有调试信息， 其中很重要的一份数据就是程序源程序的行号和编译后的机器代码之间的对应关系Line Number Table。DWARF格式的Line  Number Table是一种高度压缩的数据，存储的是表格前后两行的差值，在解析调试信息时，需要按照规则在内存里重建Line Number  Table才能使用。</p>

<p>Line Number Table存储在可执行程序的.debug_line域，使用命令
<code>
$ readelf -w test1
</code>
可以输出DWARF的调试信息，其中有两行
<code>
Special opcode 146: advance Address by 10 to 0x4004fe and Line by 1 to 5  
Special opcode 160: advance Address by 11 to 0x400509 and Line by 1 to 6  
</code>
这里说明机器二进制编码的0x4004fe位置开始，对应于源码中的第5行，0x400509开始就对应与源码的第6行了，所以400506这个地址对应的是源码第5行位置。</p>

<p>addr2line通过分析调试信息中的Line Number Table自动就能把源码中的出错位置找出来.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抓包命令tcpdump]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/13/command-tcpdump/"/>
    <updated>2013-05-13T09:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/13/command-tcpdump</id>
    <content type="html"><![CDATA[<p>例:tcpdump host 172.16.29.40 and port 4600 -X -s 500</p>

<p>tcpdump采用命令行方式，它的命令格式为：
<code>
  tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]
　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]
　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]
</code></p>

<h4>1. tcpdump的选项介绍</h4>

<pre><code>        -a      将网络地址和广播地址转变成名字；
        -d      将匹配信息包的代码以人们能够理解的汇编格式给出；
        -dd     将匹配信息包的代码以c语言程序段的格式给出；
        -ddd    将匹配信息包的代码以十进制的形式给出；
        -e      在输出行打印出数据链路层的头部信息；
        -f      将外部的Internet地址以数字的形式打印出来；
        -l      使标准输出变为缓冲行形式；
        -n      不把网络地址转换成名字；
        -t      在输出的每一行不打印时间戳；
        -v      输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；
        -vv     输出详细的报文信息；
        -c      在收到指定的包的数目后，tcpdump就会停止；
        -F      从指定的文件中读取表达式,忽略其它的表达式；
        -i      指定监听的网络接口；
        -r      从指定的文件中读取包(这些包一般通过-w选项产生)；
        -w      直接将包写入文件中，并不分析和打印出来；
        -T      将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议）
</code></pre>

<h4>2. tcpdump的表达式介绍</h4>

<p>  表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表
达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会
被截获。</p>

<p>  在表达式中一般如下几种类型的关键字，一种是关于类型的关键字，主要包括host，
net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明
202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是
host.</p>

<p>  第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,
这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.
48.2 , dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则
缺省是src or dst关键字。</p>

<p>  第三种是协议的关键字，主要包括fddi,ip ,arp,rarp,tcp,udp等类型。Fddi指明是在
FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是"ether"的别名，fddi和e
ther具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。
其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会
监听所有协议的信息包。</p>

<p>  除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,
greater,还有三种逻辑运算，取非运算是 &lsquo;not &rsquo; &lsquo;! &rsquo;, 与运算是'and',&lsquo;&amp;&amp;&rsquo;;或运算 是'o
r' ,&lsquo;||'；</p>

<p>  这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来
说明。<br/>
   (1)想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包:<br/>
　　　　#tcpdump host 210.27.48.1 <br/>
   (2) 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信:<br/>
　　　　#tcpdump host 210.27.48.1 and ( 210.27.48.2 or 210.27.48.3 ) <br/>
   (3) 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包:<br/>
　　　　#tcpdump ip host 210.27.48.1 and ! 210.27.48.2<br/>
   (4)如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：<br/>
　　　　#tcpdump tcp port 23 host 210.27.48.1</p>

<h4>3. tcpdump 的输出结果介绍</h4>

<p>下面我们介绍几种典型的tcpdump命令的输出信息</p>

<h5>(1) 数据链路层头信息</h5>

<p> 使用命令#tcpdump &ndash;e host ice<br/>
  ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A
  H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；上一条<br/>
命令的输出结果如下所示：<br/>
21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 > ice.<br/>
telne<br/>
t 0:0(0) ack 22535 win 8760 (DF)<br/>
 分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该<br/>
数据包，eth0 >表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它<br/>
表明是从源地址H219发来的数据包. 0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的<br/>
目的地址是ICE . ip 是表明该数据包是IP数据包,60 是数据包的长度, h219.33357 > ice.<br/>
telnet 表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535<br/>
表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.</p>

<h5>(2) ARP包的TCPDUMP输出信息</h5>

<p> 使用命令#tcpdump arp
得到的输出结果是：<br/>
22:32:42.802509 eth0 > arp who-has route tell ice (0:90:27:58:af:1a)<br/>
　　22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)<br/>
 分析: 22:32:42是时间戳, 802509是ID号, eth0 >表明从主机发出该数据包, arp表明是<br/>
ARP请求包, who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。 0:90:27:58:af:1a是主机ICE的MAC地址。</p>

<h5>(3) TCP包的输出信息</h5>

<p> 用TCPDUMP捕获的TCP包的一般输出信息是：
src > dst: flags data-seqno ack window urgent options<br/>
src > dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R (RST) &ldquo;.&rdquo; (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号, window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.</p>

<h5>(4) UDP包的输出信息</h5>

<p> 用TCPDUMP捕获的UDP包的一般输出信息是：<br/>
route.port1 > ice.port2: udp lenth<br/>
UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth</p>
]]></content>
  </entry>
  
</feed>
