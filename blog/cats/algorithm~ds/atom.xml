<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm~ds | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/algorithm~ds/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-23T18:01:22+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树状数组]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/16/alg-bit/"/>
    <updated>2014-11-16T21:19:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/16/alg-bit</id>
    <content type="html"><![CDATA[<p>大体上可以分为两种:</p>

<h4>一</h4>

<p>每次修改的是一个点，所求的是关于某段区间；<br/>
这种情况最好办；比如说poj2352 stars；求每个点前面比他小的点的个数；<br/>
只用设置数组a[],先全是0，然后有某个点就依次修改，并以此统计；<br/>
这一种是最基本的向上修改，向下统计；<br/>
<code>
    int lowbit(int x) {
        return x&amp;(-x);
    }
    void update(int x,int num) {
        while(x&lt;=N) {
             d[x]+=num;
             x+=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&gt;0) {
             s+=d[x];
             x-=lowbit(x);
         }
        return s;
    }
</code></p>

<!--more-->


<h4>二</h4>

<p>每次修改的是一个区间，所求的值是关于某个点的；<br/>
代表的典型题目是HOJ1556 color the ball；<br/>
这个题是每次修改了一整个区间，最后求的是每个点修改的次数；<br/>
这个需要将上面的函数，稍加修改；<br/>
对于[s,t]，要向下修改，将它的区间[0, t]都加一遍update(t)；再向下修改，把不必要的区间[0, s)再减去update(s-1)；
<code>
    void update(int x,int num) {
        while(x&gt;0) {
             d[x]+=num;
             x-=lowbit(x);
         }
    }
    int getSum(int x) {
        int s=0;
        while(x&lt;=N) {
             s+=d[x];
             x+=lowbit(x);
         }
        return s;
    }
</code></p>

<h5>注意</h5>

<div style="color:red">
对于一，可以用于计算统计子树；</br>
对于二，可以用于计算统计树上某个节点的所有祖先节点
</div>


<h4>poj3321</h4>

<p>这题难的不是树状数组，主要是映射到树状数组。<br/>
建树，然后dfs一次就可以算出对某个节点它的第一个下标(在树状数组中)和最后一个下标。那个更改的时候就用这两个下标就行了。<br/>
<img src="/images/alg/20141116.png" alt="" /><br/>
类似于将树向右倾斜，dfs建好树后c子树的第一个下标是4，最后一个下标是7。统计子树时只要sum(7)-sum(4-1)</p>

<h4>foj2176</h4>

<p>是poj3321加强版，一样的建树，但是节点要存k个值，然后update和sum的时候注意取和dep的差值，注意update减去val时的dep不要取错，update(le[i], dep[ri[i]], -val);</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;vector&gt;
    using namespace std;

    int n,m,mod;
    vector&lt;int&gt; tr[50009];
    int pre[50009];
    int s[50009][5];
    int dep[50009];
    int now, le[50009], ri[50009];

    int lowbit(int x)
    {
        return x&amp;(-x);
    }

    void update(int x, int de, int v)
    {
        int i;
        while (x &gt; 0) {
            i = (dep[x]-de+mod*1000000)%mod;
            s[x][i%mod] += v;
            x -= lowbit(x);
        }
    }

    int sum(int x, int de)
    {
        int i, j, val[5], ret;
        for (i=0;i&lt;mod;i++) val[i] = 0;
        while (x &lt;= now) {
            j = i = (de-dep[x]+mod*1000000)%mod;
            for (;i&lt;j+mod;i++)
                val[i%mod] += s[x][i-j];
            x += lowbit(x);
        }
        ret = 0;
        for (i=0;i&lt;mod;i++) ret += (i+1)*val[i];
        return ret;
    }

    void dfs(int k, int d)
    {
        int i;
        le[k] = now;
        for (i=0;i&lt;tr[k].size();i++)
            dfs(tr[k][i], d+1);
        now++;
        ri[k] = now;
        dep[now] = d;
    }

    int main()
    {
        int i,j,k,l,T,cas=0;
        scanf("%d", &amp;T);
        while (T--)
        {
            cas++;
            printf("Case#%d:\n", cas);
            scanf("%d %d %d", &amp;n, &amp;m, &amp;mod);
            for (i=1;i&lt;=n;i++) tr[i].clear();
            for (i=1;i&lt;n;i++) {
                scanf("%d %d", &amp;j, &amp;k);
                pre[k] = j;
                tr[j].push_back(k);
            }
            for (i=1;i&lt;=n;i++) if (pre[i] == 0) break;
            now = 0;
            dfs(i, 0);
            for (i=0;i&lt;=now;i++)
                for (j=0;j&lt;mod;j++) s[i][j] = 0;
            while (m--) {
                scanf("%d", &amp;l);
                if (l == 1) {
                    scanf("%d %d", &amp;j, &amp;k);
                    update(ri[j], dep[ri[j]], k);
                    update(le[j], dep[ri[j]], -k);
                } else {
                    scanf("%d", &amp;j);
                    k = sum(ri[j], dep[ri[j]]);
                    printf("%d\n", k);
                }
            }
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[大牛的]后缀数组总结]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/04/09/alg-suffix/"/>
    <updated>2014-04-09T17:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/04/09/alg-suffix</id>
    <content type="html"><![CDATA[<h5>双关键字的基数排序</h5>

<p>先对关键字2进行排序，然后再对关键字1进行稳定排序。 后缀数组中用到了这点。</p>

<hr />

<p><a href="http://hi.baidu.com/ahnkftravhdhkyr">大牛在这里</a></p>

<p>  后缀数组是处理字符串的有力工具。后缀数组是后缀树的一个非常精巧的替代品，它比后缀树容易编程实现，能够实现后缀树的很多功能而时间复杂度也并不逊色，而且它比后缀树所占用的内存空间小很多。可以说，后缀数组比后缀树要更为实用。自从拜读了罗穗骞大牛的WC2009论文《后缀数组——处理字符串的有力工具》后，经过若干星期的努力（中间有因某些原因而缓下来），终于把论文上面的练习题全部完成了，现在写写自己对后缀数组的理解和感悟。在看本笔记时，请不要忘记了，这是笔记，而教材是《后缀数组——处理字符串的有力工具》。</p>

<h4>一：后缀数组的实现</h4>

<ol>
<li>定义：Suffix Array数组（SA数组）用于保存从小到大排好序之后的后缀。RANK名次数组用来保存后缀S[i..n]在所有后缀中是第几小的后缀。简单来说，SA数组表示的是“排第几的是谁”，RANK数组表示的是“你的排名是多少”。</li>
<li>求SA数组以及RANK数组的方法：详细的请转到罗穗骞大牛的论文，我的学习笔记重点不是要介绍这个。</li>
<li>对DA（倍增算法）的一些个人理解：由于我只学习了倍增算法，所以我只能谈谈我对它的理解。DC3算法我没有去研究&hellip;.</li>
</ol>


<p>DA算法我是根据罗穗骞的模板写的，根据自己的理解做了些许的小优化。我们现在来看看罗穗骞大牛的模板：
<code>
    int wa[maxn],wb[maxn],wv[maxn],ws[maxn];
    int cmp(int *r,int a,int b,int l)
    {return r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];}
    void da(int *r,int *sa,int n,int m)
    {
        int i,j,p,*x=wa,*y=wb,*t;
        for(i=0;i&lt;m;i++) ws[i]=0;
        for(i=0;i&lt;n;i++) ws[x[i]=r[i]]++;
        for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
        for(i=n-1;i&gt;=0;i--) sa[--ws[x[i]]]=i;
        for(j=1,p=1;p&lt;n;j*=2,m=p)
        {
            for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;
            for(i=0;i&lt;n;i++) if(sa[i]&gt;=j) y[p++]=sa[i]-j;
            for(i=0;i&lt;n;i++) wv[i]=x[y[i]];
            for(i=0;i&lt;m;i++) ws[i]=0;
            for(i=0;i&lt;n;i++) ws[wv[i]]++;
            for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
            for(i=n-1;i&gt;=0;i--) sa[--ws[wv[i]]]=y[i];
            for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i&lt;n;i++)
            x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
        }
        return;
    }
</code>
其实，我个人认为，对于这个算法以及代码，无需过分深入地理解，只需记忆即可，理解只是为了帮助记忆罢了。先解释变量：n为字符串长度，m为字符的取值范围，r为字符串。后面的j为每次排序时子串的长度。
<code>
    for(i=0;i&lt;m;i++) ws[i]=0;
    for(i=0;i&lt;n;i++) ws[x[i]=r[i]]++;
    for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i&gt;=0;i--) sa[--ws[x[i]]]=i;
</code>
这四行代码，进行的是对R中长度为1的子串进行基数排序。x数组在后面需要用到，所以先复制r数组的值。特别需要注意的是，第四行的for语句，初始化语句为i=n-1，如果写得不太熟练，很容易习惯性地写成i=0，我一开始就是。理解这是基数排序的最好方法，找个例子，自己推推&hellip;.
<code>
    for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;
    for(i=0;i&lt;n;i++) if(sa[i]&gt;=j) y[p++]=sa[i]-j;
</code>
这两行代码，利用了上一次基数排序的结果，对待排序的子串的第二关键字进行了一次高效地基数排序。我们可以结合下面的图来理解：</p>

<p>不难发现，除了第一次基数排序以外，之后的每次双关键字排序，设此次排序子串长度为j，则从第n-j位开始的子串，其第二关键字均为0，所以得到第一个for语句：for(p=0,i=n-j;i&lt;n;i++) y[p++]=i;使用pascal的朋友们注意了，这里之所以是n-j位，是因为c++的字符串是从第0位开始表示的。这里，p暂时成为了一个计数变量。第二个语句的意义，分析上图也不难理解，这里留给朋友们你们自行思考啦。（不如说我懒&hellip;）
<code>
    for(i=0;i&lt;n;i++) wv[i]=x[y[i]];
    for(i=0;i&lt;m;i++) ws[i]=0;
    for(i=0;i&lt;n;i++) ws[wv[i]]++;
    for(i=1;i&lt;m;i++) ws[i]+=ws[i-1];
    for(i=n-1;i&gt;=0;i--) sa[--ws[wv[i]]]=y[i];
</code>
与一开始的4个for语句意义相同，基数排序。至于为什么wv[i]=x[y[i]]，这个我想了蛮久没想通&hellip;硬记算了- -哪位朋友理解的希望能告诉我一声&hellip;
<code>
    for(t=x,x=y,y=t,p=1,x[sa[0]]=0,i=1;i&lt;n;i++)
        x[sa[i]]=cmp(y,sa[i-1],sa[i],j)?p-1:p++;
</code>
这个for语句中的初始化语句里，完成了x数组和y数组的交换，用了指针的交换节约时间，简化代码。这里需要注意的是p和i的初始值都是1，不是0.其实如果记得后面的语句，不难看出它们的初始值不能为0，因为后面有i-1和p-1嘛。这个for语句的意义要结合cmp函数来理解。反正，你知道这里p的值表示的是此时关键字不同的串的数量就对了。当 p=n 的时候，说明所有串都已经排好序了（它们的排名都唯一确定）。所以，一开始的循环语句中，循环条件是（p&lt;n）。</p>

<p>另外，在使用倍增算法前，需要保证r数组的值均大于0。然后要在原字符串后添加一个0号字符，具体原因参见罗穗骞的论文。这时候，若原串的长度为n，则实际要进行后缀数组构建的r数组的长度应该为n+1.所以调用da函数时，对应的n应为n+1.</p>

<h4>二、后缀数组的应用&ndash;height数组</h4>

<p>在介绍后缀数组的应用前，先介绍后缀数组的一个重要附属数组：height数组。
1、height 数组：定义height[i]=suffix(sa[i-1])和suffix(sa[i])的最长公
共前缀，也就是排名相邻的两个后缀的最长公共前缀。
height数组是应用后缀数组解题是的核心，基本上使用后缀数组解决的题目都是依赖height数组完成的。</p>

<p>2、height数组的求法：具体的求法参见罗穗骞的论文。对于height数组的求法，我并没有去深刻理解，单纯地记忆了而已&hellip;有兴趣的朋友可以去钻研钻研再和我交流交流
这里给出代码：
<code>
    int rank[maxn],height[maxn];
    void calheight(int *r,int *sa,int n)
    {
        int i,j,k=0;
        for(i=1;i&lt;=n;i++) rank[sa[i]]=i;
        for(i=0;i&lt;n;height[rank[i++]]=k)
        for(k?k--:0,j=sa[rank[i]-1];r[i+k]==r[j+k];k++);
        return;
    }
</code>
3、一些注意事项：height数组的值应该是从height[1]开始的，而且height[1]应该是等于0的。原因是，因为我们在字符串后面添加了一个0号字符，所以它必然是最小的一个后缀。而字符串中的其他字符都应该是大于0的（前面有提到，使用倍增算法前需要确保这点），所以排名第二的字符串和0号字符的公共前缀（即height[1]）应当为0.在调用calheight函数时，要注意height数组的范围应该是[1..n]。所以调用时应该是calheight(r,sa,n)而不是calheight(r,sa,n+1)。要理解清楚这里的n的含义是什么。</p>

<p>calheight过程中，对rank数组求值的for语句的初始语句是i=1 而不是i=0 的原因，和上面说的类似，因为sa[0]总是等于那个已经失去作用的0号字符，所以没必要求出其rank值。当然你错写成for (i=0 ..)，也不会有什么问题。</p>

<h4>三、后缀数组解题总结：</h4>

<h5>1、求单个子串的不重复子串个数。SPOJ 694、SPOJ 705.</h5>

<p>  这个问题是一个特殊求值问题。要认识到这样一个事实：一个字符串中的所有子串都必然是它的后缀的前缀。（这句话稍微有点绕&hellip;）对于每一个sa[i]后缀，它的起始位置sa[i]，那么它最多能得到该后缀长度个子串（n-sa[i]个），而其中有height[i]个是与前一个后缀相同的，所以它能产生的实际后缀个数便是n-sa[i]-height[i]。遍历一次所有的后缀，将它产生的后缀数加起来便是答案。<br/>
代码及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/68f919f849748668024f56fb.html">http://hi.baidu.com/fhnstephen/blog/item/68f919f849748668024f56fb.html</a></p>

<h5>2、后缀的最长公共前缀。（记为lcp（x，y））</h5>

<p>这是height数组的最基本性质之一。具体的可以参看罗穗骞的论文。后缀i和后缀j的最长公共前缀的长度为它们在sa数组中所在排位之间的height值中的最小值。这个描述可能有点乱，正规的说，令x=rank[i],y=rank[j]，x&lt;y,那么lcp(i,j)=min(height[x+1],height[x+2]&hellip;height[y])。lcp(i,i)=n-sa[i]。解决这个问题，用RMQ的ST算法即可（我只会这个，或者用最近公共祖先那个转化的做法）。</p>

<h5>3、最长重复子串（可重叠）</h5>

<p>  要看到，任何一个重复子串，都必然是某两个后缀的最长公共前缀。因为，两个后缀的公共前缀，它出现在这两个后缀中，并且起始位置时不同的，所以这个公共前缀必然重复出现两次以上（可重叠）。而任何两个后缀的最长公共前缀为某一段height值中的最小值，所以最大为height值中的最大值（即某个lcp(sa[i],sa[i+1]））。所以只要算出height数组，然后输出最大值就可以了。<br/>
一道题目和代码：<a href="http://hi.baidu.com/fhnstephen/blog/item/4ed09dffdec0a78eb801a0ba.html">http://hi.baidu.com/fhnstephen/blog/item/4ed09dffdec0a78eb801a0ba.html</a></p>

<h5>4、最长重复不重叠子串 PKU1743</h5>

<p>  这个问题和3的唯一区别在于能否重叠。加上不能重叠这个限制后，直接求解比较困难，所以我们选择二分枚举答案，将问题转换为判定性问题。假设当时枚举的长度为k，那么要怎样判断是否存在长度为k的重复不重叠子串呢？</p>

<p>  首先，根据height数组，将后缀分成若干组，使得每组后缀中，后缀之间的height值不小于k。这样分组之后，不难看出，如果某组后缀数量大于1，那么它们之中存在一个公共前缀，其长度为它们之间的height值的最小值。而我们分组之后，每组后缀之间height值的最小值大于等于k。所以，后缀数大于1的分组中，有可能存在满足题目限制条件的长度不小于k的子串。只要判断满足题目限制条件成立，那么说明存在长度至少为k的合法子串。</p>

<p>  对于本题，限制条件是不重叠，判断的方法是，一组后缀中，起始位置最大的后缀的起始位置减去起始位置最小的后缀的起始位置>=k。满足这个条件的话，那么这两个后缀的公共前缀不但出现两次，而且出现两次的起始位置间隔大于等于k，所以不会重叠。</p>

<p>深刻理解这种height分组方法以及判断重叠与否的方法，在后面的问题中起到举足轻重的作用。<br/>
练习及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/85a25b208263794293580759.html">http://hi.baidu.com/fhnstephen/blog/item/85a25b208263794293580759.html</a></p>

<h5>5、最长的出现k次的重复（可重叠）子串。 PKU3261</h5>

<p>  使用后缀数组解题时，遇到“最长”，除了特殊情况外（如问题3），一般需要二分答案，利用height值进行分组。本题的限制条件为出现k次。只需判断，有没有哪一组后缀数量不少于k就可以了。相信有了我前面问题的分析作为基础，这个应该不难理解。注意理解“不少于k次”而不是“等于k次”的原因。如果理解不了，可以找个具体的例子来分析分析。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/be7d15133ccbe7f0c2ce79bb.html">http://hi.baidu.com/fhnstephen/blog/item/be7d15133ccbe7f0c2ce79bb.html</a></p>

<h5>6、最长回文子串 ural1297</h5>

<p>  这个问题没有很直接的方法可以解决，但可以采用枚举的方法。具体的就是枚举回文子串的中心所在位置i。注意要分回文子串的长度为奇数还是偶数两种情况分析。然后，我们要做的，是要求出以i为中心的回文子串最长为多长。利用后缀数组，可以设计出这样一种求法：求i往后的后缀与i往前的前缀的最长公共前缀。我这里的表述有些问题，不过不影响理解。</p>

<p>  要快速地求这个最长前缀，可以将原串反写之后接在原串后面。在使用后缀数组的题目中，连接两个（n个）字符串时，中间要用不可能会出现在原串中，不一样的非0号的字符将它们隔开。这样可以做到不影响后缀数组的性质。然后，问题就可以转化为求两个后缀的最长公共前缀了。具体的细节，留给大家自己思考&hellip;（懒&hellip;原谅我吧，都打这么多字了..一个多小时了啊TOT ）<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/68342f1d5f9e3cf81ad576ef.html">http://hi.baidu.com/fhnstephen/blog/item/68342f1d5f9e3cf81ad576ef.html</a></p>

<h5>7、求一个串最多由哪个串复制若干次得到 PKU2406</h5>

<p>  具体的问题描述请参考PKU2406.这个问题可以用KMP解决，而且效率比后缀数组好。
利用后缀数组直接解决本题也很困难（主要是，就算二分答案，也难以解决转变而成的判定性问题。上题也是），但可以同过枚举模板串的长度k（模板串指被复制的那个串）将问题变成一个后缀数组可以解决的判定性问题。首先判断k能否被n整除，然后只要看lcp(1,k+1)（实际在用c写程序时是lcp(0,k)）是否为n-k就可以了。</p>

<p>  为什么这样就行了呢？这要充分考虑到后缀的性质。当lcp（1，k+1）=n-k时，后缀k+1是后缀1（即整个字符串）的一个前缀。（因为后缀k+1的长度为n-k）那么，后缀1的前k个字符必然和后缀k+1的前k个字符对应相同。而后缀1的第k+1..2k个字符，又相当于后缀k+1的前k个字符，所以与后缀1的前k个字符对应相同，且和后缀k的k+1..2k又对应相同。依次类推，只要lcp(1,k+1)=n-k,那么s[1..k]就可以通过自复制n/k次得到整个字符串。找出k的最小值，就可以得到n/k的最大值了。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/5d79f2efe1c3623127979124.html">http://hi.baidu.com/fhnstephen/blog/item/5d79f2efe1c3623127979124.html</a></p>

<h5>8、求两个字符串的最长公共子串。Pku2774、Ural1517</h5>

<p>  首先区分好“最长公共子串”和“最长公共子序列”。前者的子串是连续的，后者是可以不连续的。</p>

<p>  对于两个字符串的问题，一般情况下均将它们连起来，构造height数组。然后，最长公共子串问题等价于后缀的最长公共前缀问题。只不过，并非所有的lcp值都能作为问题的答案。只有当两个后缀分属两个字符串时，它们的lcp值才能作为答案。与问题3一样，本题的答案必然是某个height值，因为lcp值是某段height值中的最小值。当区间长度为1时，lcp值等于某个height值。所以，本题只要扫描一遍后缀，找出后缀分属两个字符串的height值中的最大值就可以了。判断方法这里就不说明了，留给大家自己思考&hellip;<br/>
题目及题解：<br/>
<a href="http://hi.baidu.com/fhnstephen/blog/item/8666a400cd949d7b3812bb44.html  ">http://hi.baidu.com/fhnstephen/blog/item/8666a400cd949d7b3812bb44.html  </a>
<a href="http://hi.baidu.com/fhnstephen/blog/item/b5c7585600cadfc8b645aebe.html">http://hi.baidu.com/fhnstephen/blog/item/b5c7585600cadfc8b645aebe.html</a></p>

<h5>9、重复次数最多的重复子串 SPOJ 687，Pku3693</h5>

<p>  难度比较大的一个问题，主要是罗穗骞的论文里的题解写得有点含糊不清。题目的具体含义可以去参考Pku3693.</p>

<p>  又是一题难以通过二分枚举答案解决的问题（因为要求的是重复次数），所以选择朴素枚举的方法。先枚举重复子串的长度k，再利用后缀数组来求长度为k的子串最多重复出现多少次。注意到一点，假如一个字符串它重复出现2次（这里不讨论一次的情况，因为那是必然的），那么它必然包含s[0],s[k],s[2<em>k]&hellip;之中的相邻的两个。所以，我们可以枚举一个数i，然后判断从i</em>k这个位置起的长度为k的字符串能重复出现多少次。判断方法和8中的相似，lcp(i<em>k,(i+1)</em>k)/k+1。但是，仅仅这样会忽略点一些特殊情况，即重复子串的起点不在[i<em>k]位置上时的情况。这种情况应该怎么求解呢？<br/>
看下面这个例子：<br/>
aabababc<br/>
当k=2，i=1时，枚举到2的位置，此时的重复子串为ba(注意第一位是0),lcp(2，4)=3，所以ba重复出现了2次。但实际上，起始位置为1的字符串ab出现次数更多，为3次。我们注意到，这种情况下，lcp(2,4)=3，3不是2的整数倍。说明当前重复子串在最后没有多重复出现一次，而重复出现了部分（这里是多重复出现了一个b）。如果我这样说你没有看懂，那么更具体地：<br/>
sa[2]=bababc<br/>
sa[4]=babc<br/>
lcp=bab<br/>
现在注意到了吧，ba重复出现了两次之后，出现了一个b，而a没有出现。那么，不难想到，可以将枚举的位置往前挪一位，这样这个最后的b就能和前面的一个a构成一个重复子串了，而假如前挪的一位正好是a，那么答案可以多1。所以，我们需要求出a=lcp(i</em>k,(i+1)*k)%n，然后向前挪k-a位，再用同样的方法求其重复出现的长度。这里，令b=k-a,只需要lcp(b,b+k)>=k就可以了。实际上，lcp(b,b+k)>=k时，lcp(b,b+k)必然大于等于之前求得的lcp值，而此时答案的长度只加1。没有理解的朋友细细体会下上图吧。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/870da9ee3651404379f0555f.html">http://hi.baidu.com/fhnstephen/blog/item/870da9ee3651404379f0555f.html</a></p>

<h5>10.多个串的公共子串问题 PKU3294</h5>

<p>首先将串连接起来，然后构造height数组，然后怎么办呢？<br/>
对，二分答案再判断是否可行就行了。可行条件很直观：有一组后缀，有超过题目要求的个数个不同的字符串中的后缀存在。即，假如题目要求要出现在至少k个串中，那么就得有一组后缀，在不同字符串中的后缀数大于等于k。<br/>
题目及题解：<a href="http://hi.baidu.com/fhnstephen/blog/item/49c3b7dec79ec5e377c638f1.html">http://hi.baidu.com/fhnstephen/blog/item/49c3b7dec79ec5e377c638f1.html</a></p>

<h5>11、出现或反转后出现所有字符串中的最长子串 PKU1226</h5>

<p><a href="http://hi.baidu.com/fhnstephen/blog/item/7fead5020a16d2da267fb5c0.html">http://hi.baidu.com/fhnstephen/blog/item/7fead5020a16d2da267fb5c0.html</a></p>

<h5>12、不重叠地至少两次出现在所有字符串中的最长子串</h5>

<p>spoj220 <a href="http://hi.baidu.com/fhnstephen/blog/item/1dffe1dda1c98754cdbf1a35.html">http://hi.baidu.com/fhnstephen/blog/item/1dffe1dda1c98754cdbf1a35.html</a></p>

<p>之所以把两题一起说，因为它们大同小异，方法在前面的题目均出现过。对于多个串，连起来；反转后出现，将每个字符串反写后和原串都连起来，将反写后的串和原串看成同一个串；求最长，二分答案后height分组；出现在所有字符串中（反写后的也行），判断方法和10一样，k=n而已；不重叠见问题4，只不过这里对于每个字符串都要进行检验而已。</p>

<h5>13、两个字符串的重复子串个数。 Pku3415</h5>

<p>我个人觉得颇有难度的一个问题。具体的题目描述参看Pku3415。<br/>
大家可以移步到这：<a href="http://hi.baidu.com/fhnstephen/blog/item/bf06d001de30fc034afb51c1.html">http://hi.baidu.com/fhnstephen/blog/item/bf06d001de30fc034afb51c1.html</a></p>

<h5>14、最后的总结</h5>

<p>用后缀数组解题有着一定的规律可循，这是后缀的性质所决定的，具体归纳如下：<br/>
1、N个字符串的问题（N>1）<br/>
方法：将它们连接起来，中间用不会出现在原串中的，互不相同的，非0号字符分隔开。</p>

<p>2、无限制条件下的最长公共子串（重复子串算是后缀们的最长公共前缀）<br/>
方法：height的最大值。这里的无限制条件是对子串无限制条件。最多只能是两个串的最长公共子串，才可以直接是height的最大值。</p>

<p>3、特殊条件下的最长子串<br/>
方法：二分答案，再根据height数组进行分组，根据条件完成判定性问题。三个或以上的字符串的公共子串问题也需要二分答案。设此时要验证的串长度为len，特殊条件有：<br/>
3.1、出现在k个串中<br/>
条件：属于不同字符串的后缀个数不小于k。（在一组后缀中，下面省略）<br/>
3.2、不重叠<br/>
条件：出现在同一字符串中的后缀中，出现位置的最大值减最小值大于等于len。<br/>
3.3、可重叠出现k次<br/>
条件：出现在同一字符串中的后缀个数大于等于k。若对于每个字符串都需要满足，需要逐个字符串进行判断。</p>

<p>4、特殊计数<br/>
方法：根据后缀的性质，和题目的要求，通过自己的思考，看看用后缀数组能否实现。一般和“子串”有关的题目，用后缀数组应该是可以解决的。</p>

<p>5、重复问题<br/>
知道一点：lcp(i,i+k)可以判断，以i为起点，长度为k的一个字符串，它向后自复制的长度为多少，再根据具体题目具体分析，得出算法即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平衡二叉树]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/04/10/alg-avltree-base/"/>
    <updated>2011-04-10T11:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/04/10/alg-avltree-base</id>
    <content type="html"><![CDATA[<pre><code>/**
 * 平衡二叉搜索（排序）树
 *
 * 平衡二叉搜索树双称为AVL树，它也是一棵二叉搜索树，是对二叉搜索树的一种改进，或都是具有下列性质的二叉树：它
 * 的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。
 *
 * 平衡因子（Balance Factor,BF）定义为该节点的左子树的深度减去其右子树的深度，则平衡二叉树上所有节点的平
 * 衡因子只可能是-1、0和1。只要树上有一个节点的平衡因子的绝对值大于1，则该二叉树就是不平衡的了。
 *
 * 使用二叉排序树保持平衡的基本思想是：每当在二叉排序树中插入一个节点时，首先检查是否因插入而破坏了平衡，若
 * 是，则找出其中的最小不平衡二叉树，在保持二叉排序树特性的情况下，调整最小不平衡子s树中节点之间的关系，以达
 * 到新的平衡。所谓最小不平衡子树指离插入节点最近且以平衡因子的绝对值大于1的节点作为根的子树。
 *
 * 对于平衡二叉搜索树，保持树的平衡的基本机制就是旋转。旋转是对树的元素顺序进行调节。旋转的目的是消除由于临
 * 时插入和删除对树的平衡产生的影响。
 *
 * 有四种旋转：
 * 1)绕某元素左旋转
 *          80 ← p               90
 *         / \                   / \
 *        60 90 ← r    →         80   120
 *           /\                /\    /
 *         85 120            60 85 100
 *            /
 *          100
 *            
 * 2)绕某元素右旋转
 *      p → 100                      85
 *           /\                      / \
 *     l → 85 120          →         60   100
 *         /\                       \    /\
 *        60 90                     80  90 120
 *         \
 *         80
 *
 * 3)绕某元素的左子节点左旋转，接着再绕该元素自己右旋转。此情况下就是 左旋与右旋 的结合，具体操作时可以分
 * 解成这两种操作，只是围绕点不一样而已
 *
 * 先绕100的左子节点80左旋转，接着再绕100左旋转
 *
 *                左旋                 右旋
 *         100     →     p → 100        →         90
 *         /\                /\                 /\
 *   p → 80 120        l → 90 120            80 100
 *       /\                /                  /\   \
 *     60 90 ← r         80                 60 85  120
 *        /              / \
 *       85             60 85
 *        
 * 4)绕某元素的右子节点右旋转，接着再绕该元素自己左旋转。此情况下就是 右旋与左旋 的结合，具体操作时可以分解
 * 成这两种操作，只是围绕点不一样而已
 *
 * 先绕80的右子节点80右旋转，接着再绕80左旋转
 *                     右旋             左旋
 *          80          →      80 ← p     →       85
 *          /\                /\               /\
 *        60 100 ← p        60 85 ← r        80 100
 *           /\                  \           /    /\
 *     l → 85 120                100        60  90 120
 *          \                     /\
 *           90                 90 120
 *           
 * 平衡二叉树实现类 AVLTree 中的很多方法与排序二叉树是一新的，详细请参考 BinSearchTree 类中相应方法
 *
 * AVLTree中的Entry对象与BinSearchTree中的Entry对象是有区别的，所以AVLTree类不能是BinSearchTree的
 * 了类，虽然很多的方法是一样的（如：contains、getEntry、successor、iterator），还有一些方法（add、de
 * leteEntry）只是在操作后增加了节点平衡因子调整动作，但不能直接继承于它。
 *
 * 二叉搜索树与平衡二叉搜索树没有在Java集合框架中实现，但RED-BLACK树在TreeMap实现过，当然TreeSet也是，
 * 因为它是基于TreeMap实现的，TreeSet对象基本上就是一个忽略了每个元素值部分的TreeMap对象。
 *
 */
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[划分树--查询区间k-th number]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/03/23/alg-ds-div-tree/"/>
    <updated>2011-03-23T23:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/03/23/alg-ds-div-tree</id>
    <content type="html"><![CDATA[<h4>划分树 &ndash; 查询区间 k-th number</h4>

<p><a href="http://poj.org/problem?id=2104">http://poj.org/problem?id=2104</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2665">http://acm.hdu.edu.cn/showproblem.php?pid=2665</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3727">http://acm.hdu.edu.cn/showproblem.php?pid=3727</a><br/>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3473">http://acm.hdu.edu.cn/showproblem.php?pid=3473</a></p>

<pre><code>tr[ log(N) ][ N ]
1. 先对原来的数 稳定排序 ，tr[0][i] = 原先的数 a[i] 在排序后的位置。
2. dep = 0; s = 1; t = n;
3. 递归建树 
build_tree(dep, s, t)
{
    if(s &gt;= t) return;
    mid = (s+t)/2;  j = s;  k = mid+1;
    for(i=s;i&lt;=t;i++) if( tr[dep][i] &lt;= mid )  tr[dep+1][j++] = tr[dep][i]; else tr[dep+1][k++] = tr[dep][i];
    //  把s 到 t 一分为二， s 到 t 的每个数 如果排序后它排在该区间的前半部分就移到下一层的前半部。
    //  如果要计算小于和大于 k-th number 的数的和要多算 sum[dep][x] 即 dep+1 层中 s 到 x(x&lt;=mid) 的和 或 mid+1 到 x(x&gt;mid) 的和。
    tr[dep][i] = j-1;  // s 到 t 区间， tr[dep][i] 记录 s 到 i 分到前半部分的最后位置
    build_tree(dep+1, s, mid);  build_tree(dep+1, mid+1, t);
}
4. 查找区间 [i,j] 中的 k-th number ，其中 1&lt;=k&lt;=j-i+1;
find_tree(dep, s, t, i, j, k)
{
    if(s == t) return s;
    v = i 到 j 中分到左边的数
    if(v &gt;= k) return find_tree(dep+1, s, mid, ci, cj, k); // ci, cj 对应 i, j 分到前半部分的位置。 分到右半部分的和加到大于k-th number 上
    else    return find_tree(dep+1, mid+1, t, ci, cj, k-v); // 分到左半部分的和加到小于k-th number 上
 }

时间复杂度 O( n*log(n) 预处理， log(n) 查询 ) ，空间大小 n*log(n)

序列 ： 2 5 9 8 4 3 1
排序后  1 2 3 4 5 8 9
所以 原序列对应的最终位置为 2 5 7 6 4 3 1

        按最终位置分                                   指向分到前半部分的最后位置
tr[0][] = 2 5 7 6 4 3 1                        处理后 tr[0][] = 1 1 1 1 2 3 4
tr[1][] = 2 4 3 1 || 5 7 6                            tr[1][] = 1 1 1 2 || 5 5 6
tr[2][] = 2 1 || 4 3 || 5 6 || 7                      tr[2][] = 0 1 || 2 3 || 5 5 || 7
tr[3][] = 1 || 2 || 3 || 4 || 5 || 6   
</code></pre>
]]></content>
  </entry>
  
</feed>
