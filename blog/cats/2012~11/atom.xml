<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~11 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~11/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-12-27T03:04:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[64位汇编参数传递]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/11/23/assembly-args/"/>
    <updated>2012-11-23T11:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/11/23/assembly-args</id>
    <content type="html"><![CDATA[<h4>64位汇编</h4>

<p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。<br/>
当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 &ldquo;右向左&rdquo; 放入栈中，即和32位汇编一样。</p>

<p>参数个数大于 7 个的时候<br/>
H(a, b, c, d, e, f, g, h);<br/>
a->%rdi,   b->%rsi,   c->%rdx,   d->%rcx,   e->%r8,   f->%r9<br/>
h->8(%esp)<br/>
g->(%esp)<br/>
call H</p>

<hr />

<p>Linux (and Windows) x86-64 calling conventionhas the first few arguments noton the stack, but in registers instead<br/>
See <a href="http://www.x86-64.org/documentation/abi.pdf">http://www.x86-64.org/documentation/abi.pdf</a> (page 20)<br/>
Specifically:<br/>
  If the class is MEMORY, pass the argument on the stack.<br/>
  If the class is INTEGER, the next available register of the sequence %rdi, %rsi, %rdx, %rcx, %r8 and %r9 is used. <br/>
  If the class is SSE, the next available vector register is used, the registers are taken in the order from %xmm0 to %xmm7.<br/>
  If the class is SSEUP, the eightbyte is passed in the next available eightbyte chunk of the last used vector register.<br/>
  If the class is X87, X87UP or COMPLEX_X87, it is passed in memory.<br/>
The INTEGERclass is anything that will fit in a general purpose register</p>

<hr />

<p>【x86_64 Assembler Calling Convention】</p>

<h4>1、x86_64 registers</h4>

<p><img src="/images/assembly/2013-06-04-1.png" alt="" /></p>

<h4>2、x86_64寄存器特性表</h4>

<p><img src="/images/assembly/2013-06-04-2.png" alt="" /></p>

<h4>3、特性要点：</h4>

<p>　　1）常用寄存器有16个，分为x86通用寄存器以及r8-r15寄存器。<br/>
　　2）通用寄存器中，函数执行前后必须保持原始的寄存器有3个：是rbx、rbp、rsp。rx寄存器中，最后4个必须保持原值：r12、r13、r14、r15。<br/>
    保持原值的意义是为了让当前函数有可信任的寄存器，减小在函数调用过程中的保存&amp;恢复操作。除了rbp、rsp用于特定用途外，其余5个寄存器可随意使用。<br/>
　　3）通用寄存器中，不必假设保存值可随意使用的寄存器有5个：是rax、rcx、rdx、rdi、rsi。其中rax用于第一个返回寄存器（当 然也可以用于其它用途），rdx用于第二个返回寄存器（在调用函数时也用于第三个参数寄存器）。rcx用于第四个参数。rdi用于第一个参数。rsi用于 第二个函数参数。<br/>
　　4）r8、r9分配用于第5、第6个参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个数只出现一次]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once/"/>
    <updated>2012-11-12T16:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/11/12/alg-2num-appear-once</id>
    <content type="html"><![CDATA[<h4>problem</h4>

<p>一个数组，其中只有两个数只出现一次，其余数皆出现偶数次。<br/>
设计Time: O(n) 的算法得出那个只出现一次的数。</p>

<h4>answer</h4>

<p>再因为a和b不等，那么a<sup>b</sup>必然不为0。<br/>
那么a<sup>b</sup>这个数上面必然能够找到一个二进制位是1<br/>
在这个二进制位上，a和b不等。<br/>
根据这个二进制位，将各元素中在这位上为1的分派到左边，为0的分派到右边，形成两个子数组。</p>

<p>可以证明，<br/>
1）这两个数组分别包含a和b。<br/>
2）每个数组中除了a或b之外的所有元素都是成对出现的。</p>
]]></content>
  </entry>
  
</feed>
