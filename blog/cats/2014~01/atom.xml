<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~01 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~01/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-08T14:17:09+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内核态抢占机制分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/01/09/kernel-sched-1/"/>
    <updated>2014-01-09T17:31:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/01/09/kernel-sched-1</id>
    <content type="html"><![CDATA[<h4>1. 非抢占式和可抢占式内核的区别</h4>

<p>为了简化问题，我使用嵌入式实时系统uC/OS作为例子。首先要指出的是，uC/OS只有内核态，没有用户态，这和Linux不一样。<br/>
多任务系统中，内核负责管理各个任务，或者说为每个任务分配CPU时间，并且负责任务之间的通讯。内核提供的基本服务是任务切换。调度 （Scheduler）,英文还有一词叫dispatcher，也是调度的意思。这是内核的主要职责之一，就是要决定该轮到哪个任务运行了。多数实时内核 是基于优先级调度法的。每个任务根据其重要程度的不同被赋予一定的优先级。基于优先级的调度法指，CPU总是让处在就绪态的优先级最高的任务先运行。然 而，究竟何时让高优先级任务掌握CPU的使用权，有两种不同的情况，这要看用的是什么类型的内核，是不可剥夺型的还是可剥夺型内核。</p>

<h5>非抢占式内核</h5>

<p>非抢占式内核是由任务主动放弃CPU的使用权。非抢占式调度法也称作合作型多任务，各个任务彼此合作共享一个CPU。异步事件还是由中断服务来处理。中断 服务可以使一个高优先级的任务由挂起状态变为就绪状态。但中断服务以后控制权还是回到原来被中断了的那个任务，直到该任务主动放弃CPU的使用权时，那个 高优先级的任务才能获得CPU的使用权。非抢占式内核如下图所示。<br/>
非抢占式内核的优点有：<br/>
·中断响应快(与抢占式内核比较)；<br/>
·允许使用不可重入函数；<br/>
·几乎不需要使用信号量保护共享数据。运行的任务占有CPU，不必担心被别的任务抢占。这不是绝对的，在打印机的使用上，仍需要满足互斥条件。</p>

<p>非抢占式内核的缺点有：<br/>
·任务响应时间慢。高优先级的任务已经进入就绪态，但还不能运行，要等到当前运行着的任务释放CPU。<br/>
·非抢占式内核的任务级响应时间是不确定的，不知道什么时候最高优先级的任务才能拿到CPU的控制权，完全取决于应用程序什么时候释放CPU。</p>

<h5>抢占式内核</h5>

<p>使用抢占式内核可以保证系统响应时间。最高优先级的任务一旦就绪，总能得到CPU的使用权。当一个运行着的任务使一个比它优先级高的任务进入了就绪态，当 前任务的CPU使用权就会被剥夺，或者说被挂起了，那个高优先级的任务立刻得到了CPU的控制权。如果是中断服务子程序使一个高优先级的任务进入就绪态， 中断完成时，中断了的任务被挂起，优先级高的那个任务开始运行。抢占式内核如下图所示。<br/>
抢占式内核的优点有：<br/>
·使用抢占式内核，最高优先级的任务什么时候可以执行，可以得到CPU的使用权是可知的。使用抢占式内核使得任务级响应时间得以最优化。</p>

<p>抢占式内核的缺点有：<br/>
·不能直接使用不可重入型函数。调用不可重入函数时，要满足互斥条件，这点可以使用互斥型信号量来实现。如果调用不可重入型函数时，低优先级的任务CPU的使用权被高优先级任务剥夺，不可重入型函数中的数据有可能被破坏。</p>

<h4>2. Linux下的用户态抢占和内核态抢占</h4>

<p>Linux除了内核态外还有用户态。用户程序的上下文属于用户态，系统调用和中断处理例程上下文属于内核态。在2.6 kernel以前，Linux kernel只支持用户态抢占。</p>

<h5>2.1 用户态抢占(User Preemption)</h5>

<p>在kernel返回用户态(user-space)时，并且need_resched标志为1时，scheduler被调用，这就是用户态抢占。当 kernel返回用户态时，系统可以安全的执行当前的任务，或者切换到另外一个任务。当中断处理例程或者系统调用完成后，kernel返回用户态 时，need_resched标志的值会被检查，假如它为1，调度器会选择一个新的任务并执行。中断和系统调用的返回路径(return path)的实现在entry.S中(entry.S不仅包括kernel entry code，也包括kernel exit code)。</p>

<h5>2.2 内核态抢占(Kernel Preemption)</h5>

<p>在2.6 kernel以前，kernel code(中断和系统调用属于kernel code)会一直运行，直到code被完成或者被阻塞(系统调用可以被阻塞)。在 2.6 kernel里，Linux kernel变成可抢占式。当从中断处理例程返回到内核态(kernel-space)时，kernel会检查是否可以抢占和是否需要重新调度。 kernel可以在任何时间点上抢占一个任务(因为中断可以发生在任何时间点上)，只要在这个时间点上kernel的状态是安全的、可重新调度的。</p>

<h4>3.内核态抢占的设计</h4>

<h5>3.1 可抢占的条件</h5>

<p>要满足什么条件，kernel才可以抢占一个任务的内核态呢？<br/>
·没持有锁。锁是用于保护临界区的，不能被抢占。<br/>
·Kernel code可重入(reentrant)。因为kernel是SMP-safe的，所以满足可重入性。<br/>
如何判断当前上下文(中断处理例程、系统调用、内核线程等)是没持有锁的？Linux在每个每个任务的thread_info结构中增加了preempt_count变量作为preemption的计数器。这个变量初始为0，当加锁时计数器增一，当解锁时计数器减一。</p>

<h5>3.2 内核态需要抢占的触发条件</h5>

<p>内核提供了一个need_resched标志(这个标志在任务结构thread_info中)来表明是否需要重新执行调度。</p>

<h5>3.3 何时触发重新调度</h5>

<p>set_tsk_need_resched()：设置指定进程中的need_resched标志<br/>
clear_tsk need_resched()：清除指定进程中的need_resched标志<br/>
need_resched()：检查need_ resched标志的值;如果被设置就返回真，否则返回假</p>

<p>什么时候需要重新调度：<br/>
<code>
·时钟中断处理例程检查当前任务的时间片，当任务的时间片消耗完时，scheduler_tick()函数就会设置need_resched标志；
·信号量、等到队列、completion等机制唤醒时都是基于waitqueue的，而waitqueue的唤醒函数为default_wake_function，其调用try_to_wake_up将被唤醒的任务更改为就绪状态并设置need_resched标志。
·设置用户进程的nice值时，可能会使高优先级的任务进入就绪状态；
·改变任务的优先级时，可能会使高优先级的任务进入就绪状态；
·新建一个任务时，可能会使高优先级的任务进入就绪状态；
·对CPU(SMP)进行负载均衡时，当前任务可能需要放到另外一个CPU上运行；
</code></p>

<h5>3.4 抢占发生的时机(何时检查可抢占条件)</h5>

<pre><code>·当一个中断处理例程退出，在返回到内核态时(kernel-space)。这是隐式的调用schedule()函数，当前任务没有主动放弃CPU使用权，而是被剥夺了CPU使用权。
·当kernel code从不可抢占状态变为可抢占状态时(preemptible again)。也就是preempt_count从正整数变为0时。这也是隐式的调用schedule()函数。
·一个任务在内核态中显式的调用schedule()函数。任务主动放弃CPU使用权。
·一个任务在内核态中被阻塞，导致需要调用schedule()函数。任务主动放弃CPU使用权。
</code></pre>

<h5>3.5 禁用/使能可抢占条件的操作</h5>

<p>对preempt_count操作的函数有add_preempt_count()、sub_preempt_count()、inc_preempt_count()、dec_preempt_count()。<br/>
使能可抢占条件的操作是preempt_enable()，它调用dec_preempt_count()函数，然后再调用preempt_check_resched()函数去检查是否需要重新调度。<br/>
禁用可抢占条件的操作是preempt_disable()，它调用inc_preempt_count()函数。<br/>
在内核中有很多函数调用了preempt_enable()和preempt_disable()。比如spin_lock()函数调用了preempt_disable()函数，spin_unlock()函数调用了preempt_enable()函数。</p>

<h5>3.6 什么时候不允许抢占</h5>

<p>preempt_count()函数用于获取preempt_count的值，preemptible()用于判断内核是否可抢占。<br/>
有几种情况Linux内核不应该被抢占，除此之外，Linux内核在任意一点都可被抢占。这几种情况是：<br/>
<code>
·内核正进行中断处理。在Linux内核中进程不能抢占中断(中断只能被其他中断中止、抢占，进程不能中止、抢占中断)，在中断例程中不允许进行进程调度。进程调度函数schedule()会对此作出判断，如果是在中断中调用，会打印出错信息。
·内核正在进行中断上下文的Bottom Half(中断的下半部)处理。硬件中断返回前会执行软中断，此时仍然处于中断上下文中。
·内核的代码段正持有spinlock自旋锁、writelock/readlock读写锁等锁，处干这些锁的保护状态中。内核中的这些锁是为了在SMP 系统中短时间内保证不同CPU上运行的进程并发执行的正确性。当持有这些锁时，内核不应该被抢占，否则由于抢占将导致其他CPU长期不能获得锁而死等。
·内核正在执行调度程序Scheduler。抢占的原因就是为了进行新的调度，没有理由将调度程序抢占掉再运行调度程序。
·内核正在对每个CPU“私有”的数据结构操作(Per-CPU date structures)。在SMP中，对于per-CPU数据结构未用spinlocks保护，因为这些数据结构隐含地被保护了(不同的CPU有不一样的 per-CPU数据，其他CPU上运行的进程不会用到另一个CPU的per-CPU数据)。但是如果允许抢占，但一个进程被抢占后重新调度，有可能调度到 其他的CPU上去，这时定义的Per-CPU变量就会有问题，这时应禁抢占。
</code></p>

<h4>4.Linux内核态抢占的实现</h4>

<h5>4.1 数据结构</h5>

<p>在thread_info.h中
<code>
    struct thread_info {
        struct task_struct  *task;
        struct exec_domain  *exec_domain;
        __u32           flags;
         __u32           status;
        __u32           cpu;
        int         preempt_count;
        mm_segment_t        addr_limit;
        struct restart_block    restart_block;
        void __user     *sysenter_return;
    #ifdef CONFIG_X86_32
        unsigned long           previous_esp;
        __u8            supervisor_stack[0];
    #endif
    };
</code></p>

<h5>4.2 代码流程</h5>

<p>禁用/使能可抢占条件的函数
<code>
    #if defined(CONFIG_DEBUG_PREEMPT) || defined(CONFIG_PREEMPT_TRACER)
        extern void add_preempt_count(int val);
        extern void sub_preempt_count(int val);
    #else
        #define add_preempt_count(val) do { preempt_count() += (val); } while (0)
        #define sub_preempt_count(val) do { preempt_count() -= (val); } while (0)
    #endif
        #define inc_preempt_count() add_preempt_count(1)
        #define dec_preempt_count() sub_preempt_count(1)
        #define preempt_count() (current_thread_info()-&gt;preempt_count)
        #define preempt_disable() \
        do { \
            inc_preempt_count(); \
            barrier(); \
        } while (0)
        #define preempt_enable_no_resched() \
        do { \
            barrier(); \
            dec_preempt_count(); \
        } while (0)
        #define preempt_check_resched() \
        do { \
            if (unlikely(test_thread_flag(TIF_NEED_RESCHED))) \
            preempt_schedule(); \
        } while (0)
        #define preempt_enable() \
        do { \
            preempt_enable_no_resched(); \
            barrier(); \
            preempt_check_resched(); \
        } while (0)
</code>
检查可抢占条件
<code>
    # define preemptible() (preempt_count() == 0 &amp;&amp; !irqs_disabled())
</code>
自旋锁的加锁与解锁
<code>
    void __lockfunc _spin_lock(spinlock_t *lock)
    {
        preempt_disable();
        spin_acquire(&amp;lock-&gt;dep_map, 0, 0, _RET_IP_);
        LOCK_CONTENDED(lock, _raw_spin_trylock, _raw_spin_lock);
    }
    void __lockfunc _spin_unlock(spinlock_t *lock)
    {
        spin_release(&amp;lock-&gt;dep_map, 1, _RET_IP_);
        _raw_spin_unlock(lock);
        preempt_enable();
    }
</code>
设置need_resched标志的函数
<code>
    static inline void set_tsk_need_resched(struct task_struct *tsk)
    {
        set_tsk_thread_flag(tsk,TIF_NEED_RESCHED);
    }
    static inline void clear_tsk_need_resched(struct task_struct *tsk)
    {
        clear_tsk_thread_flag(tsk,TIF_NEED_RESCHED);
    }
    static inline int test_tsk_need_resched(struct task_struct *tsk)
    {
        return unlikely(test_tsk_thread_flag(tsk,TIF_NEED_RESCHED));
    }
</code>
时钟中断时调用的task_tick()函数，当时间片消耗完之后，设置need_resched标志
<code>
    static void task_tick_rt(struct rq *rq, struct task_struct *p, int queued)
    {
        update_curr_rt(rq);
        watchdog(rq, p);
        if (p-&gt;policy != SCHED_RR)
            return;
        if (--p-&gt;rt.time_slice)
            return;
        p-&gt;rt.time_slice = DEF_TIMESLICE;
        if (p-&gt;rt.run_list.prev != p-&gt;rt.run_list.next) {
            requeue_task_rt(rq, p, 0);
            set_tsk_need_resched(p);
        }
    }
</code>
设置任务的need_resched标志，并触发任务所在CPU的调度器。
<code>
    static void resched_task(struct task_struct *p)
    {
        int cpu;
        assert_spin_locked(&amp;task_rq(p)-&gt;lock);
        if (unlikely(test_tsk_thread_flag(p, TIF_NEED_RESCHED)))
            return;
        set_tsk_thread_flag(p, TIF_NEED_RESCHED);
        cpu = task_cpu(p);
        if (cpu == smp_processor_id())
            return;
        smp_mb();
        if (!tsk_is_polling(p))
            smp_send_reschedule(cpu);
    }
</code></p>

<h4>5. 参考资料</h4>

<p><a href="http://blog.csdn.net/sailor_8318/archive/2008/09/03/2870184.aspx">http://blog.csdn.net/sailor_8318/archive/2008/09/03/2870184.aspx</a></p>

<p>《uC/OS-II源码公开的嵌入式实时多任务操作系统内核》</p>

<p>Linux 2.6.29内核源码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可重入函数与不可重入函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/01/09/lang-c-re-enter-fun/"/>
    <updated>2014-01-09T17:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/01/09/lang-c-re-enter-fun</id>
    <content type="html"><![CDATA[<p>可重入函数主要用于多任务环境中，简单来说就是可以被中断的函数，即在这个函数执行的任何时刻中断它，转入OS调度下去执行另外一段代 码，返回控制时不会出现什么错误；也意味着它除了使用自己栈上的变量以外不依赖于任何环境（包括static），这样的函数就是 purecode（纯代码）可重入，可以允许有该函数的多个副本在运行，由于它们使用的是分离的栈，所以不会互相干扰。而不可重入的函数由于使用了一些系 统资源，比如全局变量区、中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p>

<p>可重入函数确实需要访问全局变量（包括 static），一定要注意实施互斥手段。它在并行运行环境中非常重要，但是一般要为访问全局变量付出一些性能代价。编写可重入函数时，若使用全局变量，则应通过关中断、信号量（即P、V操作）等手段对其加以保护。若对所使用的全局变量不加以保护，则此函数就不具有可重入性，即当多个进程调用此函数时，很有可能使有关全局变量变为不可知状态。</p>

<p>示例：假设Exam是 int型全局变量，函数Squre_Exam返回Exam平方值。那么如下函数不具有可重入性。
<code>
    int Exam = 0;
    unsigned int example( int para )
    {
        unsigned int temp;
        Exam = para; // （**）
         temp = Square_Exam( );
        return temp;  
    }
</code>
此函数若被多个进程调用的话，其结果可能是未知的，因为当（**）语句刚执行完后，另外一个使用本函数的进程可能正好被激活，那么当新激活的进程执行到此 函数时，将使Exam赋与另一个不同的para值，所以当控制重新回到“temp = Square_Exam( )”后，计算出的temp很可能不是预想中的结果。此函数应如下改进。
<code>
    int Exam = 0;
    unsigned int example( int para )
    {
        unsigned int temp;  
        [申请信号量操作] //(1)  加锁  
        Exam = para;  
        temp = Square_Exam( );  
        [释放信号量操作] //   解锁   
        return temp;  
    }
</code>
申请不到“信号量”，说明另外的进程正处于给Exam赋值并计算其平方过程中（即正在使用此信号）,本进程必须等待其释放信号后，才可继续执行。若申请到 信号，则可继续执行，但其它进程必须等待本进程释放信号量后，才能再使用本信号。保证函数的可重入性的方法：<br/>
     1、在写函数时候尽量使用局部变量（例如寄存器、堆栈中的变量）；<br/>
     2、对于要使用的全局变量要加以保护（如采取关中断、信号量等方法），这样构成的函数就一定是一个可重入的函数。</p>

<p>满足下列条件的函数多数是不可重入的：<br/>
     1、函数体内使用了静态的数据结构；<br/>
     2、函数体内调用了malloc()或者free()函数；<br/>
     3、函数体内调用了标准I/O函数。</p>

<p>如何将一个不可重入的函数改写成可重入函数呢？把一个不可重入函数变成可重入的唯一方法是用可重入规则来重写它。其实很简单，只要遵守了几条很容易理解的规则，那么写出来的函数就是可重入的：<br/>
     1、不要使用全局变量。因为别的代码很可能覆盖这些变量值。<br/>
     2、在和硬件发生交互的时候，切记执行类似disinterrupt()之类的操作，就是关闭硬件中断。完成交互记得打开中断，在有些系列上，这叫做“进入/ 退出核心”。<br/>
     3、不能调用其它任何不可重入的函数。<br/>
     4、谨慎使用堆栈。最好先在使用前先OS_ENTER_KERNAL。</p>
]]></content>
  </entry>
  
</feed>
