<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~kprobe | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~kprobe/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-12-27T03:04:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[kprobes Documentation]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/12/25/debug-kprobe-doc/"/>
    <updated>2013-12-25T14:04:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/12/25/debug-kprobe-doc</id>
    <content type="html"><![CDATA[<p><a href="https://www.kernel.org/doc/Documentation/kprobes.txt">https://www.kernel.org/doc/Documentation/kprobes.txt</a></p>

<p>Documentation/kprobes.txt</p>

<h4>1.4 How Does Jump Optimization Work?</h4>

<p>If your kernel is built with CONFIG_OPTPROBES=y (currently this flag<br/>
is automatically set &lsquo;y&rsquo; on x86/x86-64, non-preemptive kernel) and<br/>
the &ldquo;debug.kprobes_optimization&rdquo; kernel parameter is set to 1 (see<br/>
sysctl(8)), Kprobes tries to reduce probe-hit overhead by using a jump<br/>
instruction instead of a breakpoint instruction at each probepoint.</p>

<h5>1.4.1 Init a Kprobe</h5>

<p>When a probe is registered, before attempting this optimization,<br/>
Kprobes inserts an ordinary, breakpoint-based kprobe at the specified<br/>
address. So, even if it&rsquo;s not possible to optimize this particular<br/>
probepoint, there&rsquo;ll be a probe there.</p>

<h5>1.4.2 Safety Check</h5>

<p>Before optimizing a probe, Kprobes performs the following safety checks:</p>

<ul>
<li><p>Kprobes verifies that the region that will be replaced by the jump<br/>
instruction (the &ldquo;optimized region&rdquo;) lies entirely within one function.<br/>
(A jump instruction is multiple bytes, and so may overlay multiple<br/>
instructions.)</p></li>
<li><p>Kprobes analyzes the entire function and verifies that there is no<br/>
jump into the optimized region.  Specifically:</p>

<ul>
<li>the function contains no indirect jump;</li>
<li>the function contains no instruction that causes an exception (since<br/>
the fixup code triggered by the exception could jump back into the<br/>
optimized region &ndash; Kprobes checks the exception tables to verify this);<br/>
and</li>
<li>there is no near jump to the optimized region (other than to the first<br/>
byte).</li>
</ul>
</li>
<li><p>For each instruction in the optimized region, Kprobes verifies that<br/>
the instruction can be executed out of line.</p></li>
</ul>


<h5>1.4.3 Preparing Detour Buffer</h5>

<p>Next, Kprobes prepares a &ldquo;detour&rdquo; buffer, which contains the following<br/>
instruction sequence:<br/>
- <span style="color:red">code to push the CPU&rsquo;s registers (emulating a breakpoint trap)</span><br/>
- <span style="color:red">a call to the trampoline code which calls user&rsquo;s probe handlers.</span><br/>
- <span style="color:red">code to restore registers</span><br/>
- <span style="color:red">the instructions from the optimized region</span><br/>
- <span style="color:red">a jump back to the original execution path.</span></p>

<h5>1.4.4 Pre-optimization</h5>

<p>After preparing the detour buffer, Kprobes verifies that none of the<br/>
following situations exist:<br/>
- <span style="color:red">The probe has either a break_handler (i.e., it&rsquo;s a jprobe) or a post_handler.</span><br/>
- <span style="color:red">Other instructions in the optimized region are probed.</span><br/>
- <span style="color:red">The probe is disabled.</span></p>

<p>In any of the above cases, Kprobes won&rsquo;t start optimizing the probe.<br/>
Since these are temporary situations, Kprobes tries to start<br/>
optimizing it again if the situation is changed.</p>

<p>If the kprobe can be optimized, Kprobes enqueues the kprobe to an<br/>
optimizing list, and kicks the kprobe-optimizer workqueue to optimize<br/>
it.  If the to-be-optimized probepoint is hit before being optimized,<br/>
Kprobes returns control to the original instruction path by setting<br/>
the CPU&rsquo;s instruction pointer to the copied code in the detour buffer<br/>
&ndash; thus at least avoiding the single-step.</p>

<h5>1.4.5 Optimization</h5>

<p>The Kprobe-optimizer doesn&rsquo;t insert the jump instruction immediately;<br/>
rather, it calls synchronize_sched() for safety first, because it&rsquo;s<br/>
possible for a CPU to be interrupted in the middle of executing the<br/>
optimized region(*).  As you know, synchronize_sched() can ensure<br/>
that all interruptions that were active when synchronize_sched()<br/>
was called are done, but only if CONFIG_PREEMPT=n.  So, this version<br/>
of kprobe optimization supports only kernels with CONFIG_PREEMPT=n.(**)</p>

<p>After that, the Kprobe-optimizer calls stop_machine() to replace<br/>
the optimized region with a jump instruction to the detour buffer,<br/>
using text_poke_smp().</p>

<h5>1.4.6 Unoptimization</h5>

<p>When an optimized kprobe is unregistered, disabled, or blocked by<br/>
another kprobe, it will be unoptimized.  If this happens before<br/>
the optimization is complete, the kprobe is just dequeued from the<br/>
optimized list.  If the optimization has been done, the jump is<br/>
replaced with the original code (except for an int3 breakpoint in<br/>
the first byte) by using text_poke_smp().</p>

<p>(<em>)Please imagine that the 2nd instruction is interrupted and then<br/>
the optimizer replaces the 2nd instruction with the jump </em>address*<br/>
while the interrupt handler is running. When the interrupt<br/>
returns to original address, there is no valid instruction,<br/>
and it causes an unexpected result.</p>

<p>(**)This optimization-safety checking may be replaced with the<br/>
stop-machine method that ksplice uses for supporting a CONFIG_PREEMPT=y<br/>
kernel.</p>

<p>NOTE for geeks:<br/>
<span style="color:red">The jump optimization changes the kprobe&rsquo;s pre_handler behavior.</span><br/>
<span style="color:red">Without optimization, the pre_handler can change the kernel&rsquo;s execution</span><br/>
<span style="color:red">path by changing regs->ip and returning 1.  However, when the probe</span><br/>
<span style="color:red">is optimized, that modification is ignored.  Thus, if you want to</span><br/>
<span style="color:red">tweak the kernel&rsquo;s execution path, you need to suppress optimization,</span><br/>
<span style="color:red">using one of the following techniques:</span><br/>
- <span style="color:blue">Specify an empty function for the kprobe&rsquo;s post_handler or break_handler.</span><br/>
 or<br/>
- <span style="color:blue">Execute &lsquo;sysctl -w debug.kprobes_optimization=n&rsquo;</span></p>

<p>&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;..</p>

<h4>5. Kprobes Features and Limitations</h4>

<p>Kprobes allows multiple probes at the same address.  Currently,<br/>
however, there cannot be multiple jprobes on the same function at<br/>
the same time.  Also, a probepoint for which there is a jprobe or<br/>
a post_handler cannot be optimized.  So if you install a jprobe,<br/>
or a kprobe with a post_handler, at an optimized probepoint, the<br/>
probepoint will be unoptimized automatically.</p>

<p>In general, you can install a probe anywhere in the kernel.<br/>
In particular, you can probe interrupt handlers.  Known exceptions<br/>
are discussed in this section.</p>

<p>The register_<em>probe functions will return -EINVAL if you attempt<br/>
to install a probe in the code that implements Kprobes (mostly<br/>
kernel/kprobes.c and arch/</em>/kernel/kprobes.c, but also functions such<br/>
as do_page_fault and notifier_call_chain).</p>

<p>If you install a probe in an inline-able function, Kprobes makes<br/>
no attempt to chase down all inline instances of the function and<br/>
install probes there.  gcc may inline a function without being asked,<br/>
so keep this in mind if you&rsquo;re not seeing the probe hits you expect.</p>

<p>A probe handler can modify the environment of the probed function<br/>
&ndash; e.g., by modifying kernel data structures, or by modifying the<br/>
contents of the pt_regs struct (which are restored to the registers<br/>
upon return from the breakpoint).  So Kprobes can be used, for example,<br/>
to install a bug fix or to inject faults for testing.  Kprobes, of<br/>
course, has no way to distinguish the deliberately injected faults<br/>
from the accidental ones.  Don&rsquo;t drink and probe.</p>

<p>Kprobes makes no attempt to prevent probe handlers from stepping on<br/>
each other &ndash; e.g., probing printk() and then calling printk() from a<br/>
probe handler.  If a probe handler hits a probe, that second probe&rsquo;s<br/>
handlers won&rsquo;t be run in that instance, and the kprobe.nmissed member<br/>
of the second probe will be incremented.</p>

<p>As of Linux v2.6.15-rc1, multiple handlers (or multiple instances of<br/>
the same handler) may run concurrently on different CPUs.</p>

<p>Kprobes does not use mutexes or allocate memory except during<br/>
registration and unregistration.</p>

<p>Probe handlers are run with preemption disabled.  Depending on the<br/>
architecture and optimization state, handlers may also run with<br/>
interrupts disabled (e.g., kretprobe handlers and optimized kprobe<br/>
handlers run without interrupt disabled on x86/x86-64).  In any case,<br/>
your handler should not yield the CPU (e.g., by attempting to acquire<br/>
a semaphore).</p>

<p>Since a return probe is implemented by replacing the return<br/>
address with the trampoline&rsquo;s address, stack backtraces and calls<br/>
to <code>__builtin_return_address()</code> will typically yield the trampoline&rsquo;s<br/>
address instead of the real return address for kretprobed functions.<br/>
(As far as we can tell, <code>__builtin_return_address()</code> is used only<br/>
for instrumentation and error reporting.)</p>

<p>If the number of times a function is called does not match the number<br/>
of times it returns, registering a return probe on that function may<br/>
produce undesirable results. In such a case, a line:<br/>
kretprobe BUG!: Processing kretprobe d000000000041aa8 @ c00000000004f48c<br/>
gets printed. With this information, one will be able to correlate the<br/>
exact instance of the kretprobe that caused the problem. We have the<br/>
do_exit() case covered. do_execve() and do_fork() are not an issue.<br/>
We&rsquo;re unaware of other specific cases where this could be a problem.</p>

<p>If, upon entry to or exit from a function, the CPU is running on<br/>
a stack other than that of the current task, registering a return<br/>
probe on that function may produce undesirable results.  For this<br/>
reason, Kprobes doesn&rsquo;t support return probes (or kprobes or jprobes)<br/>
on the x86_64 version of <code>__switch_to()</code>; the registration functions<br/>
return -EINVAL.</p>

<p><kk style="color:red">
On x86/x86-64, since the Jump Optimization of Kprobes modifies<br/>
instructions widely, there are some limitations to optimization. To<br/>
explain it, we introduce some terminology. Imagine a 3-instruction<br/>
sequence consisting of a two 2-byte instructions and one 3-byte<br/>
instruction.<br/>
</kk></p>

<pre><code class="">            IA  
             |  
    [-2][-1][0][1][2][3][4][5][6][7]  
            [ins1][ins2][  ins3 ]  
            [&lt;-     DCR       -&gt;]  
               [&lt;- JTPR -&gt;]  
</code></pre>

<p><kk style="color:red">
ins1: 1st Instruction<br/>
ins2: 2nd Instruction<br/>
ins3: 3rd Instruction<br/>
IA:  Insertion Address<br/>
JTPR: Jump Target Prohibition Region<br/>
DCR: Detoured Code Region<br/>
</kk></p>

<p><kk style="color:red">
The instructions in DCR are copied to the out-of-line buffer<br/>
of the kprobe, because the bytes in DCR are replaced by<br/>
a 5-byte jump instruction. So there are several limitations.<br/>
</kk></p>

<p><kk style="color:red">
a) The instructions in DCR must be relocatable.<br/>
b) The instructions in DCR must not include a call instruction.<br/>
c) JTPR must not be targeted by any jump or call instruction.<br/>
d) DCR must not straddle the border between functions.<br/>
</kk></p>

<p><kk style="color:red">
Anyway, these limitations are checked by the in-kernel instruction<br/>
decoder, so you don&rsquo;t need to worry about that.<br/>
</kk></p>

<h4>6. Probe Overhead</h4>

<p>On a typical CPU in use in 2005, a kprobe hit takes 0.5 to 1.0<br/>
microseconds to process.  Specifically, a benchmark that hits the same<br/>
probepoint repeatedly, firing a simple handler each time, reports 1-2<br/>
million hits per second, depending on the architecture.  A jprobe or<br/>
return-probe hit typically takes 50-75% longer than a kprobe hit.<br/>
When you have a return probe set on a function, adding a kprobe at<br/>
the entry to that function adds essentially no overhead.</p>

<p>Here are sample overhead figures (in usec) for different architectures.<br/>
k = kprobe; j = jprobe; r = return probe; kr = kprobe + return probe<br/>
on same function; jr = jprobe + return probe on same function</p>

<p>i386: Intel Pentium M, 1495 MHz, 2957.31 bogomips<br/>
k = 0.57 usec; j = 1.00; r = 0.92; kr = 0.99; jr = 1.40</p>

<p>x86_64: AMD Opteron 246, 1994 MHz, 3971.48 bogomips<br/>
k = 0.49 usec; j = 0.76; r = 0.80; kr = 0.82; jr = 1.07</p>

<p>ppc64: POWER5 (gr), 1656 MHz (SMT disabled, 1 virtual CPU per physical CPU)<br/>
k = 0.77 usec; j = 1.31; r = 1.26; kr = 1.45; jr = 1.99</p>

<h5>6.1 Optimized Probe Overhead</h5>

<p>Typically, an optimized kprobe hit takes 0.07 to 0.1 microseconds to<br/>
process. Here are sample overhead figures (in usec) for x86 architectures.<br/>
k = unoptimized kprobe, b = boosted (single-step skipped), o = optimized kprobe,<br/>
r = unoptimized kretprobe, rb = boosted kretprobe, ro = optimized kretprobe.</p>

<p>i386: Intel&reg; Xeon&reg; E5410, 2.33GHz, 4656.90 bogomips<br/>
k = 0.80 usec; b = 0.33; o = 0.05; r = 1.10; rb = 0.61; ro = 0.33</p>

<p>x86-64: Intel&reg; Xeon&reg; E5410, 2.33GHz, 4656.90 bogomips<br/>
<span style="color:red">k = 0.99 usec; b = 0.43; o = 0.06; r = 1.24; rb = 0.68; ro = 0.30</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看注册的kprobe列表]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/06/06/kprobe-list/"/>
    <updated>2013-06-06T10:45:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/06/06/kprobe-list</id>
    <content type="html"><![CDATA[<pre><code>sudo mount -t debugfs none mount_dir/

#cat mount_dir/kprobes/list
c015d71a  k  vfs_read+0x0
c011a316  j  do_fork+0x0
c03dedc5  r  tcp_v4_rcv+0x0
</code></pre>

<p>第一列表示探测点插入的内核地址，第二列表示内核探测的类型，k表示kprobe，r表示kretprobe，j表示jprobe，第三列指定探测点的"符号+偏移"。如果被探测的函数属于一个模块，模块名也被指定。</p>

<p>打开和关闭kprobe的方法列出如下：
```</p>

<h1>echo ‘1’ mount_dir/kprobes/enabled</h1>

<h1>echo ‘0’ mount_dir/kprobes/enabled</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核kretprobe机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/24/debug-kretprobe/"/>
    <updated>2013-05-24T10:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/24/debug-kretprobe</id>
    <content type="html"><![CDATA[<p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap1/index.html">http://www.ibm.com/developerworks/cn/linux/l-cn-systemtap1/index.html</a></p>

<p>  kretprobe也使用了kprobes来实现，当用户调用register_kretprobe()时，kprobe在被探测函数的入口建立 了一个探测点，当执行到探测点时，kprobe保存了被探测函数的返回地址并取代返回地址为一个trampoline的地址，kprobe在初始化时定义 了该trampoline并且为该trampoline注册了一个kprobe,当被探测函数执行它的返回指令时，控制传递到该trampoline，因 此kprobe已经注册的对应于trampoline的处理函数将被执行，而该处理函数会调用用户关联到该kretprobe上的处理函数，处理完毕后， 设置指令寄存器指向已经备份的函数返回地址，因而原来的函数返回被正常执行。</p>

<p>  被探测函数的返回地址保存在类型为 kretprobe_instance的变量中，结构kretprobe的maxactive字段指定了被探测函数可以被同时探测的实例数，函数 register_kretprobe()将预分配指定数量的kretprobe_instance。如果被探测函数是非递归的并且调用时已经保持了自旋 锁（spinlock），那么maxactive为1就足够了；  如果被探测函数是非递归的且运行时是抢占失效的，那么maxactive为NR_CPUS就可以了；如果maxactive被设置为小于等于0,  它被设置到缺省值（如果抢占使能， 即配置了  CONFIG_PREEMPT，缺省值为10和2*NR_CPUS中的最大值，否则缺省值为NR_CPUS）。</p>

<p>  如果 maxactive被设置的太小了，一些探测点的执行可能被丢失，但是不影响系统的正常运行，在结构kretprobe中nmissed字段将记录被丢失 的探测点执行数，它在返回探测点被注册时设置为0，每次当执行探测函数而没有kretprobe_instance可用时，它就加1。</p>

<p><a href="http://hi.baidu.com/lixiang1988/item/8884bc286c9920ceddf69acd">http://hi.baidu.com/lixiang1988/item/8884bc286c9920ceddf69acd</a></p>

<h4>kretprobe的实现</h4>

<p>相关数据结构与函数分析</p>

<h5>1)　struct kretprobe结构</h5>

<p>  该结构是kretprobe实现的基础数据结构，以下是该结构的成员：
<code>
    struct kprobe kp; //该成员是kretprobe内嵌的struct kprobe结构。
    kretprobe_handler_t handler;//该成员是调试者定义的回调函数。
    int maxactive;//该成员是最多支持的返回地址实例数。
    int nmissed;//该成员记录有多少次该函数返回没有被回调函数处理。
    struct hlist_head free_instances;
    用于链接未使用的返回地址实例，在注册时初始化。
    struct hlist_head used_instances;//该成员是正在被使用的返回地址实例链表。
</code></p>

<h5>2)　struct kretprobe_instance结构</h5>

<p>  该结构表示一个返回地址实例。因为函数每次被调用的地方不同，这造成了返回地址不同，因此需要为每一次发生的调用记录在这样一个结构里面。以下是该结构的成员：
<code>
    struct hlist_node uflist;
    该成员被链接入kretprobe的used_instances或是free_instances链表。
    struct kretprobe *rp;//该成员指向所属的kretprobe结构。
    kprobe_opcode_t *ret_addr;//该成员用于记录被探测函数正真的返回地址。
    struct task_struct *task;//该成员记录当时运行的进程。
</code></p>

<h5>3)　pre_handler_kretprobe()函数</h5>

<p>  该函数在kretprobe探测点被执行到后，用于修改被探测函数的返回地址。</p>

<h5>4)　trampoline_handler()函数</h5>

<p>  该函数用于执行调试者定义的回调函数以及把被探测函数的返回地址修改回原来的返回地址。</p>

<h4>kretprobe处理流程分析</h4>

<p>  kretprobe探测方式是基于kprobe实现的又一种内核探测方式，该探测方式主要用于在函数返回时进行探测，获得内核函数的返回值，还可以用于计算函数执行时间等方面。</p>

<h5>1)　kretprobe的注册过程</h5>

<p>  调试者要进行kretprobe调试首先要注册处理，这需要在调试模块中调用register_kretprobe()，下文中称该函数为 kretprobe  注册器。kretprobe注册器对传入的kretprobe结构的中kprobe.pre_handler赋值为 pre_handler_kretprobe()函数，用于在探测点被触发时被调用。接着，kretprobe注册器还会初始化kretprobe的一些 成员，比如分配返回地址实例的空间等操作。最后，kretprobe注册器会利用  kretprobe内嵌的structkprobe结构进行kropbe的注册。自此，kretprobe注册过程就完成了。</p>

<h5>2)　kretprobe探测点的触发过程</h5>

<p>  kretprobe触发是在刚进入被探测函数的第一条汇编指令时发生的，因为 kretprobe注册时把该地址修改位int3指令。<br/>
  此时发生了一次CPU异常处理，这与kprobe探测点被触发相同。但与kprobe处理不同的是，这里并不是运行用户定义的pre_handler函 数，而是执行pre_handler_kretprobe()函数，该函数又会调用arch_prepare_kretprobe()函数。 arch_prepare_kretprobe()函数的主要功能是把被探测函数的返回地址变换为&amp;kretprobe_trampoline所 在的地址，这是一个汇编地址标签。这个标签的地址在kretprobe_trampoline_holder()中用汇编伪指令定义。替换函数返回地址是 kretprobe实现的关键。当被探测函数返回时，返回到&amp;kretprobe_trampoline地址处开始运行。</p>

<p>  接着，在 一些保护现场的处理后，又去调用trampoline_handler()函数。该函数的主要有两个作用，一是根据当前的实例去运行用户定义的调试函数， 也就是kretprobe结构中的handler所指向的函数，二是把返回值设成被探测函数正真的返回地址。最后，在进行一些堆栈的处理后，被探测函数又 返回到了正常执行流程中去。</p>

<p>  以上讨论的就是kretprobe的执行过程，可以看出，该调试方式的关键点在于修改被探测函数的返回地址到kprobes的控制流程中，之后再把返回地址修改到原来的返回地址并使得该函数继续正常执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内核kprobe机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/05/24/debug-kprobe-base/"/>
    <updated>2013-05-24T10:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/05/24/debug-kprobe-base</id>
    <content type="html"><![CDATA[<ul>
<li>探测点处理函数在运行时是失效抢占的，依赖于特定的架构，探测点处理函数运行时也可能是中断失效的。</li>
<li><p>因此，对于任何探测点处理函数，不要使用导致睡眠或进程调度的任何内核函数（如尝试获得semaphore)。</p>

<p>Kprobe机制是内核提供的一种调试机制，它提供了一种方法，能够在不修改现有代码的基础上，灵活的跟踪内核函数的执行。它的基本工作原理是：用户指定一个探测点，并把一个用户定义的处理函数关联到该探测点，当内核执行到该探测点时，相应的关联函数被执行，然后继续执行正常的代码路径。</p>

<p>Kprobe提供了三种形式的探测点，一种是最基本的kprobe，能够在指定代码执行前、执行后进行探测，但此时不能访问被探测函数内的相关变量信 息；一种是jprobe，用于探测某一函数的入口，并且能够访问对应的函数参数；一种是kretprobe，用于完成指定函数返回值的探测功能。其中最基 本的就是kprobe机制，jprobe以及kretprobe的实现都依赖于kprobe，但其代码的实现都很巧妙，强烈建议每一个内核爱好者阅读。</p></li>
</ul>


<h4>代码：</h4>

<h5>首先是struct kprobe结构，每一个探测点的基本结构。</h5>

<pre><code>    structkprobe {
        /*用于保存kprobe的全局hash表，以被探测的addr为key*/
        structhlist_node hlist;

        /* list of kprobes for multi-handler support */
        /*当对同一个探测点存在多个探测函数时，所有的函数挂在这条链上*/
        structlist_head list;

        /*count the number of times this probe was temporarily disarmed */
        unsigned longnmissed;

        /* location of the probe point */
        /*被探测的目标地址*/
        kprobe_opcode_t *addr;

        /* Allow user to indicate symbol name of the probe point */
        /*symblo_name的存在，允许用户指定函数名而非确定的地址*/
        constchar*symbol_name;

        /* Offset into the symbol */
        /*如果被探测点为函数内部某个指令，需要使用addr + offset的方式*/
        unsigned intoffset;

        /* Called before addr is executed. */
        /*探测函数，在目标探测点执行之前调用*/
        kprobe_pre_handler_t pre_handler;

        /* Called after addr is executed, unless... */
        /*探测函数，在目标探测点执行之后调用*/
        kprobe_post_handler_t post_handler;

        /*
         * ... called if executing addr causes a fault (eg. page fault).
         * Return 1 if it handled fault, otherwise kernel will see it.
         */
        kprobe_fault_handler_t fault_handler;

        /*
         * ... called if breakpoint trap occurs in probe handler.
         * Return 1 if it handled break, otherwise kernel will see it.
         */
        kprobe_break_handler_t break_handler;

        /*opcode 以及 ainsn 用于保存被替换的指令码*/

        /* Saved opcode (which has been replaced with breakpoint) */
        kprobe_opcode_t opcode;

        /* copy of the original instruction */
        structarch_specific_insn ainsn;

        /*
         * Indicates various status flags.
         * Protected by kprobe_mutex after this kprobe is registered.
         */
        u32 flags;
    };
</code></pre>

<p>  对于kprobe功能的实现主要利用了内核中的两个功能特性：异常（尤其是int 3），单步执行（EFLAGS中的TF标志）。</p>

<h5>大概的流程：</h5>

<pre><code> 1）在注册探测点的时候，对被探测函数的指令码进行替换，替换为int 3的指令码；
 2）在执行int 3的异常执行中，通过通知链的方式调用kprobe的异常处理函数；
 3）在kprobe的异常出来函数中，判断是否存在pre_handler钩子，存在则执行；
 4）执行完后，准备进入单步调试，通过设置EFLAGS中的TF标志位，并且把异常返回的地址修改为保存的原指令码；
 5）代码返回，执行原有指令，执行结束后触发单步异常；
 6）在单步异常的处理中，清除单步标志，执行post_handler流程，并最终返回；
</code></pre>

<p>  下面又进入代码时间，首先看一下kprobe模块的初始化代码，初始化代码主要做了两件事：标记出哪些代码是不能被探测的，这些代码属于kprobe实现的关键代码；注册通知链到die_notifier，用于接收异常通知。</p>

<h5>初始化代码位于kernel/kprobes.c中</h5>

<pre><code>    staticint__init init_kprobes(void)
    {
        inti,err =0;
            ....

         /*kprobe_blacklist中保存的是kprobe实现的关键代码路径，这些函数不应该被kprobe探测*/
        /*
         * Lookup and populate the kprobe_blacklist.
         *
         * Unlike the kretprobe blacklist, we'll need to determine
         * the range of addresses that belong to the said functions,
         * since a kprobe need not necessarily be at the beginning
         * of a function.
         */
        for(kb =kprobe_blacklist;kb-&gt;name!=NULL;kb++){
            kprobe_lookup_name(kb-&gt;name,addr);
            if(!addr)
                continue;

            kb-&gt;start_addr =(unsigned long)addr;
            symbol_name =kallsyms_lookup(kb-&gt;start_addr,
                    &amp;size,&amp;offset,&amp;modname,namebuf);
            if(!symbol_name)
                kb-&gt;range =0;
            else
                kb-&gt;range =size;
        }
            ....
        if(!err)
            /*注册通知链到die_notifier，用于接收int 3的异常信息*/
            err =register_die_notifier(&amp;kprobe_exceptions_nb);
             ....
    }
</code></pre>

<h5>其中的通知链：</h5>

<pre><code>    staticstructnotifier_block kprobe_exceptions_nb ={
        .notifier_call =kprobe_exceptions_notify,
        /*优先级最高，保证最先执行*/
        .priority =0x7fffffff /* we need to be notified first */
    };
</code></pre>

<h6>kprobe的注册流程register_kprobe。</h6>

<pre><code>    int__kprobes register_kprobe(structkprobe *p)
    {
        intret =0;
        structkprobe *old_p;
        structmodule *probed_mod;
        kprobe_opcode_t *addr;

        /*获取被探测点的地址，指定了symbol_name，则从kallsyms中获取；指定了offset，则返回addr + offset*/
        addr =kprobe_addr(p);
        if(!addr)
            return-EINVAL;
        p-&gt;addr =addr;

        /*判断同一个kprobe是否被重复注册*/
        ret =check_kprobe_rereg(p);
        if(ret)
            returnret;

        jump_label_lock();
        preempt_disable();
        /*判断被注册的函数是否位于内核的代码段内，或位于不能探测的kprobe实现路径中*/
        if(!kernel_text_address((unsigned long)p-&gt;addr)||
            in_kprobes_functions((unsigned long)p-&gt;addr)||
            ftrace_text_reserved(p-&gt;addr,p-&gt;addr)||
            jump_label_text_reserved(p-&gt;addr,p-&gt;addr))
            gotofail_with_jump_label;

        /* User can pass only KPROBE_FLAG_DISABLED to register_kprobe */
        p-&gt;flags&amp;=KPROBE_FLAG_DISABLED;

        /*
         * Check if are we probing a module.
         */
        /*判断被探测的地址是否属于某一个模块，并且位于模块的text section内*/
        probed_mod =__module_text_address((unsigned long)p-&gt;addr);
        if(probed_mod){
            /*如果被探测的为模块地址，首先要增加模块的引用计数*/
            /*
             * We must hold a refcount of the probed module while updating
             * its code to prohibit unexpected unloading.
             */
            if(unlikely(!try_module_get(probed_mod)))
                gotofail_with_jump_label;

            /*
             * If the module freed .init.text, we couldn't insert
             * kprobes in there.
             */
            /*如果被探测的地址位于模块的init地址段内，但该段代码区间已被释放，则直接退出*/
            if(within_module_init((unsigned long)p-&gt;addr,probed_mod)&amp;&amp;
                probed_mod-&gt;state!=MODULE_STATE_COMING){
                module_put(probed_mod);
                gotofail_with_jump_label;
            }
        }
        preempt_enable();
        jump_label_unlock();

        p-&gt;nmissed =0;
        INIT_LIST_HEAD(&amp;p-&gt;list);
        mutex_lock(&amp;kprobe_mutex);

        jump_label_lock();/* needed to call jump_label_text_reserved() */

        get_online_cpus();  /* For avoiding text_mutex deadlock. */
        mutex_lock(&amp;text_mutex);

        /*判断在同一个探测点是否已经注册了其他的探测函数*/
        old_p =get_kprobe(p-&gt;addr);
        if(old_p){
            /* Since this may unoptimize old_p, locking text_mutex. */
            /*如果已经存在注册过的kprobe，则将探测点的函数修改为aggr_pre_handler，并将所有的handler挂载到其链表上，由其负责所有handler函数的执行*/
            ret =register_aggr_kprobe(old_p,p);
            gotoout;
        }

        /* 分配特定的内存地址用于保存原有的指令
         * 按照内核注释，被分配的地址必须must be on special executable page on x86.
         * 该地址被保存在kprobe-&gt;ainsn.insn
         */
        ret =arch_prepare_kprobe(p);
        if(ret)
            gotoout;

        /*将kprobe加入到相应的hash表内*/
        INIT_HLIST_NODE(&amp;p-&gt;hlist);
        hlist_add_head_rcu(&amp;p-&gt;hlist,
                   &amp;kprobe_table[hash_ptr(p-&gt;addr,KPROBE_HASH_BITS)]);

        if(!kprobes_all_disarmed &amp;&amp;!kprobe_disabled(p))
    /*将探测点的指令码修改为int 3指令*/
            __arm_kprobe(p);

        /* Try to optimize kprobe */
        try_to_optimize_kprobe(p);

    out:
        mutex_unlock(&amp;text_mutex);
        put_online_cpus();
        jump_label_unlock();
        mutex_unlock(&amp;kprobe_mutex);

        if(probed_mod)
            module_put(probed_mod);

        returnret;

    fail_with_jump_label:
        preempt_enable();
        jump_label_unlock();
        return-EINVAL;
</code></pre>

<h5>注册完毕，就开始kprobe的执行流程了。对于该探测点，由于其起始指令已经被修改为int3，因此在执行到该地址时，必然会触发3号中断向量的处理流程do_int3.</h5>

<pre><code>    /* May run on IST stack. */
    dotraplinkage void__kprobes do_int3(structpt_regs *regs,longerror_code)
    {
    #ifdef CONFIG_KGDB_LOW_LEVEL_TRAP
        if(kgdb_ll_trap(DIE_INT3,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #endif /* CONFIG_KGDB_LOW_LEVEL_TRAP */
    #ifdef CONFIG_KPROBES
        /*在这里以DIE_INT3，通知kprobe注册的通知链*/
        if(notify_die(DIE_INT3,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #else
        if(notify_die(DIE_TRAP,"int3",regs,error_code,3,SIGTRAP)
                ==NOTIFY_STOP)
            return;
    #endif

        preempt_conditional_sti(regs);
        do_trap(3,SIGTRAP,"int3",regs,error_code,NULL);
        preempt_conditional_cli(regs);
    }
</code></pre>

<h5>在do_int3中触发kprobe注册的通知链函数，kprobe_exceptions_notify。由于kprobe以及jprobe等机制的处 理核心都在此函数内，这里只针对kprobe的流程进行分析：进入函数的原因是DIE_INT3,并且是第一次进入该函数。</h5>

<pre><code>    int__kprobes kprobe_exceptions_notify(structnotifier_block *self,
                           unsigned longval,void*data)
    {
        structdie_args *args =data;
        intret =NOTIFY_DONE;

        if(args-&gt;regs &amp;&amp;user_mode_vm(args-&gt;regs))
            returnret;

        switch(val){
        caseDIE_INT3:
    /*对于kprobe，进入kprobe_handle*/
            if(kprobe_handler(args-&gt;regs))
                ret =NOTIFY_STOP;
            break;
        caseDIE_DEBUG:
            if(post_kprobe_handler(args-&gt;regs)){
                /*
                 * Reset the BS bit in dr6 (pointed by args-&gt;err) to
                 * denote completion of processing
                 */
                (*(unsigned long*)ERR_PTR(args-&gt;err))&amp;=~DR_STEP;
                ret =NOTIFY_STOP;
            }
            break;
        caseDIE_GPF:
            /*
             * To be potentially processing a kprobe fault and to
             * trust the result from kprobe_running(), we have
             * be non-preemptible.
             */
            if(!preemptible()&amp;&amp;kprobe_running()&amp;&amp;
                kprobe_fault_handler(args-&gt;regs,args-&gt;trapnr))
                ret =NOTIFY_STOP;
            break;
        default:
            break;
        }
        returnret;
    }

    staticint__kprobes kprobe_handler(structpt_regs *regs)
    {
        kprobe_opcode_t *addr;
        structkprobe *p;
        structkprobe_ctlblk *kcb;

        /*对于int 3中断，其被Intel定义为Trap，那么异常发生时EIP寄存器内指向的为异常指令的后一条指令*/
        addr =(kprobe_opcode_t *)(regs-&gt;ip -sizeof(kprobe_opcode_t));
        /*
         * We don't want to be preempted for the entire
         * duration of kprobe processing. We conditionally
         * re-enable preemption at the end of this function,
         * and also in reenter_kprobe() and setup_singlestep().
         */
        preempt_disable();

        kcb =get_kprobe_ctlblk();
        /*获取addr对应的kprobe*/
        p =get_kprobe(addr);

        if(p){
    /*如果异常的进入是由kprobe导致，则进入reenter_kprobe(jprobe需要，到时候分析)*/
            if(kprobe_running()){
                if(reenter_kprobe(p,regs,kcb))
                    return1;
            }else{
                set_current_kprobe(p,regs,kcb);
                kcb-&gt;kprobe_status =KPROBE_HIT_ACTIVE;

                /*
                 * If we have no pre-handler or it returned 0, we
                 * continue with normal processing.  If we have a
                 * pre-handler and it returned non-zero, it prepped
                 * for calling the break_handler below on re-entry
                 * for jprobe processing, so get out doing nothing
                 * more here.
                 */
        /*执行在此地址上挂载的pre_handle函数*/
                if(!p-&gt;pre_handler ||!p-&gt;pre_handler(p,regs))
    /*设置单步调试模式，为post_handle函数的执行做准备*/
                    setup_singlestep(p,regs,kcb,0);
                return1;
            }
        }elseif(*addr !=BREAKPOINT_INSTRUCTION){
            /*
             * The breakpoint instruction was removed right
             * after we hit it.  Another cpu has removed
             * either a probepoint or a debugger breakpoint
             * at this address.  In either case, no further
             * handling of this interrupt is appropriate.
             * Back up over the (now missing) int3 and run
             * the original instruction.
             */
            regs-&gt;ip =(unsigned long)addr;
            preempt_enable_no_resched();
            return1;
        }elseif(kprobe_running()){
            p =__this_cpu_read(current_kprobe);
            if(p-&gt;break_handler &amp;&amp;p-&gt;break_handler(p,regs)){
                setup_singlestep(p,regs,kcb,0);
                return1;
            }
        }/* else: not a kprobe fault; let the kernel handle it */

        preempt_enable_no_resched();
        return0;
    }

    staticvoid__kprobes setup_singlestep(structkprobe *p,structpt_regs *regs,
                           structkprobe_ctlblk *kcb,intreenter)
    {
        if(setup_detour_execution(p,regs,reenter))
            return;

    #if!defined(CONFIG_PREEMPT)
        if(p-&gt;ainsn.boostable ==1 &amp;&amp;!p-&gt;post_handler){
            /* Boost up -- we can execute copied instructions directly */
            if(!reenter)
                reset_current_kprobe();
            /*
             * Reentering boosted probe doesn't reset current_kprobe,
             * nor set current_kprobe, because it doesn't use single
             * stepping.
             */
            regs-&gt;ip =(unsigned long)p-&gt;ainsn.insn;
            preempt_enable_no_resched();
            return;
        }
    #endif
        /*jprobe*/
        if(reenter){
            save_previous_kprobe(kcb);
            set_current_kprobe(p,regs,kcb);
            kcb-&gt;kprobe_status =KPROBE_REENTER;
        }else
            kcb-&gt;kprobe_status =KPROBE_HIT_SS;
        /* Prepare real single stepping */
        /*准备单步模式，设置EFLAGS的TF标志位，清楚IF标志位(禁止中断)*/
        clear_btf();
        regs-&gt;flags|=X86_EFLAGS_TF;
        regs-&gt;flags&amp;=~X86_EFLAGS_IF;
        /* single step inline if the instruction is an int3 */
        if(p-&gt;opcode ==BREAKPOINT_INSTRUCTION)
            regs-&gt;ip =(unsigned long)p-&gt;addr;
        else
    /*设置异常返回的指令为保存的被探测点的指令*/
            regs-&gt;ip =(unsigned long)p-&gt;ainsn.insn;
    }
</code></pre>

<h5>对应kprobe,pre_handle的执行就结束了，按照代码，程序开始执行保存的被探测点的指令，由于开启了单步调试模式，执行完指令后会继续触发异常，这次的是do_debug异常处理流程。</h5>

<pre><code>    dotraplinkage void__kprobes do_debug(structpt_regs *regs,longerror_code)
    {
        ....

        /*在do_debug中，以DIE_DEBUG再一次触发kprobe的通知链*/
        if(notify_die(DIE_DEBUG,"debug",regs,PTR_ERR(&amp;dr6),error_code,
                                SIGTRAP)==NOTIFY_STOP)
            return;

        ....
        return;
    }

    /*对于kprobe_exceptions_notify，其DIE_DEBUG处理流程*/
    caseDIE_DEBUG:
            if(post_kprobe_handler(args-&gt;regs)){
                /*
                 * Reset the BS bit in dr6 (pointed by args-&gt;err) to
                 * denote completion of processing
                 */
                (*(unsigned long*)ERR_PTR(args-&gt;err))&amp;=~DR_STEP;
                ret =NOTIFY_STOP;
            }
            break;

    staticint__kprobes post_kprobe_handler(structpt_regs *regs)
    {
        structkprobe *cur =kprobe_running();
        structkprobe_ctlblk *kcb =get_kprobe_ctlblk();

        if(!cur)
            return0;

        /*设置异常返回的EIP为下一条需要执行的指令*/
        resume_execution(cur,regs,kcb);
        /*恢复异常执行前的EFLAGS*/
        regs-&gt;flags|=kcb-&gt;kprobe_saved_flags;

        /*执行post_handler函数*/
        if((kcb-&gt;kprobe_status !=KPROBE_REENTER)&amp;&amp;cur-&gt;post_handler){
            kcb-&gt;kprobe_status =KPROBE_HIT_SSDONE;
            cur-&gt;post_handler(cur,regs,0);
        }

        /* Restore back the original saved kprobes variables and continue. */
        if(kcb-&gt;kprobe_status ==KPROBE_REENTER){
            restore_previous_kprobe(kcb);
            gotoout;
        }
        reset_current_kprobe();
    out:
        preempt_enable_no_resched();

        /*
         * if somebody else is singlestepping across a probe point, flags
         * will have TF set, in which case, continue the remaining processing
         * of do_debug, as if this is not a probe hit.
         */
        if(regs-&gt;flags&amp;X86_EFLAGS_TF)
            return0;

        return1;
    }
</code></pre>

<p>至此，一个典型的kprobe的流程已经执行完毕了。</p>
]]></content>
  </entry>
  
</feed>
