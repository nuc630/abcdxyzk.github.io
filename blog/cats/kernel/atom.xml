<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-11-08T23:51:40+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux 中断下半部]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/05/21/kernel-irq-bh/"/>
    <updated>2016-05-21T10:40:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/05/21/kernel-irq-bh</id>
    <content type="html"><![CDATA[<p><a href="http://blog.chinaunix.net/uid-24203478-id-3111803.html">http://blog.chinaunix.net/uid-24203478-id-3111803.html</a></p>

<p>与Linux中断息息相关的一个重要概念是Linux中断分为两个半部：上半部（tophalf）和下半部(bottom half)。上半部的功能是"登记中断"，当一个中断发生时，它进行相应地硬件读写后就把中断例程的下半部挂到该设备的下半部执行队列中去。因此，上半部执行的速度就会很快，可以服务更多的中断请求。但是，仅有"登记中断"是远远不够的，因为中断的事件可能很复杂。因此，Linux引入了一个下半部，来完成中断事件的绝大多数使命。下半部和上半部最大的不同是下半部是可中断的，而上半部是不可中断的，下半部几乎做了中断处理程序所有的事情，而且可以被新的中断打断！下半部则相对来说并不是非常紧急的，通常还是比较耗时的，因此由系统自行安排运行时机，不在中断服务上下文中执行。</p>

<h4>在Linux2.6的内核中存在三种不同形式的下半部实现机制：软中断，tasklet和工作队列。</h4>

<p>Tasklet基于Linux softirq，其使用相当简单，我们只需要定义tasklet及其处理函数并将二者关联：</p>

<pre><code>    void my_tasklet_func(unsigned long); //定义一个处理函数：
    DECLARE_TASKLET(my_tasklet,my_tasklet_func,data); //定义一个tasklet结构my_tasklet，与my_tasklet_func(data)函数相关联
</code></pre>

<p>然后，在需要调度tasklet的时候引用一个简单的API就能使系统在适当的时候进行调度运行：
<code>
    tasklet_schedule(&amp;my_tasklet);
</code></p>

<p>此外，Linux还提供了另外一些其它的控制tasklet调度与运行的API：
<code>
    DECLARE_TASKLET_DISABLED(name,function,data); //与DECLARE_TASKLET类似，但等待tasklet被使能
    tasklet_enable(struct tasklet_struct *); //使能tasklet
    tasklet_disble(struct tasklet_struct *); //禁用tasklet
    tasklet_init(struct tasklet_struct *,void (*func)(unsigned long),unsigned long); //类似DECLARE_TASKLET()
    tasklet_kill(struct tasklet_struct *); // 清除指定tasklet的可调度位，即不允许调度该tasklet
</code></p>

<p>我们先来看一个tasklet的运行实例，这个实例没有任何实际意义，仅仅为了演示。它的功能是：在globalvar被写入一次后，就调度一个tasklet，函数中输出"tasklet is executing"：</p>

<pre><code>    //定义与绑定tasklet函数
    void test_tasklet_action(unsigned long t);
    DECLARE_TASKLET(test_tasklet, test_tasklet_action, 0);

    void test_tasklet_action(unsigned long t)
    {
        printk("tasklet is executing\n");
    }

    ...

    ssize_t globalvar_write(struct file *filp, const char *buf, size_t len, loff_t *off)
    {
        ...
        if (copy_from_user(&amp;global_var, buf, sizeof(int)))
        {
            return - EFAULT;
        }

        //调度tasklet执行
        tasklet_schedule(&amp;test_tasklet);
        return sizeof(int);
    }
</code></pre>

<p>下半部分的任务就是执行与中断处理密切相关但中断处理程序本身不执行的工作。</p>

<h4>在Linux2.6的内核中存在三种不同形式的下半部实现机制：软中断，tasklet和工作队列。</h4>

<p>下面将比较三种机制的差别与联系。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
<span class='line-number'>1146</span>
<span class='line-number'>1147</span>
<span class='line-number'>1148</span>
<span class='line-number'>1149</span>
<span class='line-number'>1150</span>
<span class='line-number'>1151</span>
<span class='line-number'>1152</span>
<span class='line-number'>1153</span>
<span class='line-number'>1154</span>
<span class='line-number'>1155</span>
<span class='line-number'>1156</span>
<span class='line-number'>1157</span>
<span class='line-number'>1158</span>
<span class='line-number'>1159</span>
<span class='line-number'>1160</span>
<span class='line-number'>1161</span>
<span class='line-number'>1162</span>
<span class='line-number'>1163</span>
<span class='line-number'>1164</span>
<span class='line-number'>1165</span>
<span class='line-number'>1166</span>
<span class='line-number'>1167</span>
<span class='line-number'>1168</span>
<span class='line-number'>1169</span>
<span class='line-number'>1170</span>
<span class='line-number'>1171</span>
<span class='line-number'>1172</span>
<span class='line-number'>1173</span>
<span class='line-number'>1174</span>
<span class='line-number'>1175</span>
<span class='line-number'>1176</span>
<span class='line-number'>1177</span>
<span class='line-number'>1178</span>
<span class='line-number'>1179</span>
<span class='line-number'>1180</span>
<span class='line-number'>1181</span>
<span class='line-number'>1182</span>
<span class='line-number'>1183</span>
<span class='line-number'>1184</span>
<span class='line-number'>1185</span>
<span class='line-number'>1186</span>
<span class='line-number'>1187</span>
<span class='line-number'>1188</span>
<span class='line-number'>1189</span>
<span class='line-number'>1190</span>
<span class='line-number'>1191</span>
<span class='line-number'>1192</span>
<span class='line-number'>1193</span>
<span class='line-number'>1194</span>
<span class='line-number'>1195</span>
<span class='line-number'>1196</span>
<span class='line-number'>1197</span>
<span class='line-number'>1198</span>
<span class='line-number'>1199</span>
<span class='line-number'>1200</span>
<span class='line-number'>1201</span>
<span class='line-number'>1202</span>
<span class='line-number'>1203</span>
<span class='line-number'>1204</span>
<span class='line-number'>1205</span>
<span class='line-number'>1206</span>
<span class='line-number'>1207</span>
<span class='line-number'>1208</span>
<span class='line-number'>1209</span>
<span class='line-number'>1210</span>
<span class='line-number'>1211</span>
<span class='line-number'>1212</span>
<span class='line-number'>1213</span>
<span class='line-number'>1214</span>
<span class='line-number'>1215</span>
<span class='line-number'>1216</span>
<span class='line-number'>1217</span>
<span class='line-number'>1218</span>
<span class='line-number'>1219</span>
<span class='line-number'>1220</span>
<span class='line-number'>1221</span>
<span class='line-number'>1222</span>
<span class='line-number'>1223</span>
<span class='line-number'>1224</span>
<span class='line-number'>1225</span>
<span class='line-number'>1226</span>
<span class='line-number'>1227</span>
<span class='line-number'>1228</span>
<span class='line-number'>1229</span>
<span class='line-number'>1230</span>
<span class='line-number'>1231</span>
<span class='line-number'>1232</span>
<span class='line-number'>1233</span>
<span class='line-number'>1234</span>
<span class='line-number'>1235</span>
<span class='line-number'>1236</span>
<span class='line-number'>1237</span>
<span class='line-number'>1238</span>
<span class='line-number'>1239</span>
<span class='line-number'>1240</span>
<span class='line-number'>1241</span>
<span class='line-number'>1242</span>
<span class='line-number'>1243</span>
<span class='line-number'>1244</span>
<span class='line-number'>1245</span>
<span class='line-number'>1246</span>
<span class='line-number'>1247</span>
<span class='line-number'>1248</span>
<span class='line-number'>1249</span>
<span class='line-number'>1250</span>
<span class='line-number'>1251</span>
<span class='line-number'>1252</span>
<span class='line-number'>1253</span>
<span class='line-number'>1254</span>
<span class='line-number'>1255</span>
<span class='line-number'>1256</span>
<span class='line-number'>1257</span>
<span class='line-number'>1258</span>
<span class='line-number'>1259</span>
<span class='line-number'>1260</span>
<span class='line-number'>1261</span>
<span class='line-number'>1262</span>
<span class='line-number'>1263</span>
<span class='line-number'>1264</span>
<span class='line-number'>1265</span>
<span class='line-number'>1266</span>
<span class='line-number'>1267</span>
<span class='line-number'>1268</span>
<span class='line-number'>1269</span>
<span class='line-number'>1270</span>
<span class='line-number'>1271</span>
<span class='line-number'>1272</span>
<span class='line-number'>1273</span>
<span class='line-number'>1274</span>
<span class='line-number'>1275</span>
<span class='line-number'>1276</span>
<span class='line-number'>1277</span>
<span class='line-number'>1278</span>
<span class='line-number'>1279</span>
<span class='line-number'>1280</span>
<span class='line-number'>1281</span>
<span class='line-number'>1282</span>
<span class='line-number'>1283</span>
<span class='line-number'>1284</span>
<span class='line-number'>1285</span>
<span class='line-number'>1286</span>
<span class='line-number'>1287</span>
<span class='line-number'>1288</span>
<span class='line-number'>1289</span>
<span class='line-number'>1290</span>
<span class='line-number'>1291</span>
<span class='line-number'>1292</span>
<span class='line-number'>1293</span>
<span class='line-number'>1294</span>
<span class='line-number'>1295</span>
<span class='line-number'>1296</span>
<span class='line-number'>1297</span>
<span class='line-number'>1298</span>
<span class='line-number'>1299</span>
<span class='line-number'>1300</span>
<span class='line-number'>1301</span>
<span class='line-number'>1302</span>
<span class='line-number'>1303</span>
<span class='line-number'>1304</span>
<span class='line-number'>1305</span>
<span class='line-number'>1306</span>
<span class='line-number'>1307</span>
<span class='line-number'>1308</span>
<span class='line-number'>1309</span>
<span class='line-number'>1310</span>
<span class='line-number'>1311</span>
<span class='line-number'>1312</span>
<span class='line-number'>1313</span>
<span class='line-number'>1314</span>
<span class='line-number'>1315</span>
<span class='line-number'>1316</span>
<span class='line-number'>1317</span>
<span class='line-number'>1318</span>
<span class='line-number'>1319</span>
<span class='line-number'>1320</span>
<span class='line-number'>1321</span>
<span class='line-number'>1322</span>
<span class='line-number'>1323</span>
<span class='line-number'>1324</span>
<span class='line-number'>1325</span>
<span class='line-number'>1326</span>
<span class='line-number'>1327</span>
<span class='line-number'>1328</span>
<span class='line-number'>1329</span>
<span class='line-number'>1330</span>
<span class='line-number'>1331</span>
<span class='line-number'>1332</span>
<span class='line-number'>1333</span>
<span class='line-number'>1334</span>
<span class='line-number'>1335</span>
<span class='line-number'>1336</span>
<span class='line-number'>1337</span>
<span class='line-number'>1338</span>
<span class='line-number'>1339</span>
<span class='line-number'>1340</span>
<span class='line-number'>1341</span>
<span class='line-number'>1342</span>
<span class='line-number'>1343</span>
<span class='line-number'>1344</span>
<span class='line-number'>1345</span>
<span class='line-number'>1346</span>
<span class='line-number'>1347</span>
<span class='line-number'>1348</span>
<span class='line-number'>1349</span>
<span class='line-number'>1350</span>
<span class='line-number'>1351</span>
<span class='line-number'>1352</span>
<span class='line-number'>1353</span>
<span class='line-number'>1354</span>
<span class='line-number'>1355</span>
<span class='line-number'>1356</span>
<span class='line-number'>1357</span>
<span class='line-number'>1358</span>
<span class='line-number'>1359</span>
<span class='line-number'>1360</span>
<span class='line-number'>1361</span>
<span class='line-number'>1362</span>
<span class='line-number'>1363</span>
<span class='line-number'>1364</span>
<span class='line-number'>1365</span>
<span class='line-number'>1366</span>
<span class='line-number'>1367</span>
<span class='line-number'>1368</span>
<span class='line-number'>1369</span>
<span class='line-number'>1370</span>
<span class='line-number'>1371</span>
<span class='line-number'>1372</span>
<span class='line-number'>1373</span>
<span class='line-number'>1374</span>
<span class='line-number'>1375</span>
<span class='line-number'>1376</span>
<span class='line-number'>1377</span>
<span class='line-number'>1378</span>
<span class='line-number'>1379</span>
<span class='line-number'>1380</span>
<span class='line-number'>1381</span>
<span class='line-number'>1382</span>
<span class='line-number'>1383</span>
<span class='line-number'>1384</span>
<span class='line-number'>1385</span>
<span class='line-number'>1386</span>
<span class='line-number'>1387</span>
<span class='line-number'>1388</span>
<span class='line-number'>1389</span>
<span class='line-number'>1390</span>
<span class='line-number'>1391</span>
<span class='line-number'>1392</span>
<span class='line-number'>1393</span>
<span class='line-number'>1394</span>
<span class='line-number'>1395</span>
<span class='line-number'>1396</span>
<span class='line-number'>1397</span>
<span class='line-number'>1398</span>
<span class='line-number'>1399</span>
<span class='line-number'>1400</span>
<span class='line-number'>1401</span>
<span class='line-number'>1402</span>
<span class='line-number'>1403</span>
<span class='line-number'>1404</span>
<span class='line-number'>1405</span>
<span class='line-number'>1406</span>
<span class='line-number'>1407</span>
<span class='line-number'>1408</span>
<span class='line-number'>1409</span>
<span class='line-number'>1410</span>
<span class='line-number'>1411</span>
<span class='line-number'>1412</span>
<span class='line-number'>1413</span>
<span class='line-number'>1414</span>
<span class='line-number'>1415</span>
<span class='line-number'>1416</span>
<span class='line-number'>1417</span>
<span class='line-number'>1418</span>
<span class='line-number'>1419</span>
<span class='line-number'>1420</span>
<span class='line-number'>1421</span>
<span class='line-number'>1422</span>
<span class='line-number'>1423</span>
<span class='line-number'>1424</span>
<span class='line-number'>1425</span>
<span class='line-number'>1426</span>
<span class='line-number'>1427</span>
<span class='line-number'>1428</span>
<span class='line-number'>1429</span>
<span class='line-number'>1430</span>
<span class='line-number'>1431</span>
<span class='line-number'>1432</span>
<span class='line-number'>1433</span>
<span class='line-number'>1434</span>
<span class='line-number'>1435</span>
<span class='line-number'>1436</span>
<span class='line-number'>1437</span>
<span class='line-number'>1438</span>
<span class='line-number'>1439</span>
<span class='line-number'>1440</span>
<span class='line-number'>1441</span>
<span class='line-number'>1442</span>
<span class='line-number'>1443</span>
<span class='line-number'>1444</span>
<span class='line-number'>1445</span>
<span class='line-number'>1446</span>
<span class='line-number'>1447</span>
<span class='line-number'>1448</span>
<span class='line-number'>1449</span>
<span class='line-number'>1450</span>
<span class='line-number'>1451</span>
<span class='line-number'>1452</span>
<span class='line-number'>1453</span>
<span class='line-number'>1454</span>
<span class='line-number'>1455</span>
<span class='line-number'>1456</span>
<span class='line-number'>1457</span>
<span class='line-number'>1458</span>
<span class='line-number'>1459</span>
<span class='line-number'>1460</span>
<span class='line-number'>1461</span>
<span class='line-number'>1462</span>
<span class='line-number'>1463</span>
<span class='line-number'>1464</span>
<span class='line-number'>1465</span>
<span class='line-number'>1466</span>
<span class='line-number'>1467</span>
<span class='line-number'>1468</span>
<span class='line-number'>1469</span>
<span class='line-number'>1470</span>
<span class='line-number'>1471</span>
<span class='line-number'>1472</span>
<span class='line-number'>1473</span>
<span class='line-number'>1474</span>
<span class='line-number'>1475</span>
<span class='line-number'>1476</span>
<span class='line-number'>1477</span>
<span class='line-number'>1478</span>
<span class='line-number'>1479</span>
<span class='line-number'>1480</span>
<span class='line-number'>1481</span>
<span class='line-number'>1482</span>
<span class='line-number'>1483</span>
<span class='line-number'>1484</span>
<span class='line-number'>1485</span>
<span class='line-number'>1486</span>
<span class='line-number'>1487</span>
<span class='line-number'>1488</span>
<span class='line-number'>1489</span>
<span class='line-number'>1490</span>
<span class='line-number'>1491</span>
<span class='line-number'>1492</span>
<span class='line-number'>1493</span>
<span class='line-number'>1494</span>
<span class='line-number'>1495</span>
<span class='line-number'>1496</span>
<span class='line-number'>1497</span>
<span class='line-number'>1498</span>
<span class='line-number'>1499</span>
<span class='line-number'>1500</span>
<span class='line-number'>1501</span>
<span class='line-number'>1502</span>
<span class='line-number'>1503</span>
<span class='line-number'>1504</span>
<span class='line-number'>1505</span>
<span class='line-number'>1506</span>
<span class='line-number'>1507</span>
<span class='line-number'>1508</span>
<span class='line-number'>1509</span>
<span class='line-number'>1510</span>
<span class='line-number'>1511</span>
<span class='line-number'>1512</span>
<span class='line-number'>1513</span>
<span class='line-number'>1514</span>
<span class='line-number'>1515</span>
<span class='line-number'>1516</span>
<span class='line-number'>1517</span>
<span class='line-number'>1518</span>
<span class='line-number'>1519</span>
<span class='line-number'>1520</span>
<span class='line-number'>1521</span>
<span class='line-number'>1522</span>
<span class='line-number'>1523</span>
<span class='line-number'>1524</span>
<span class='line-number'>1525</span>
<span class='line-number'>1526</span>
<span class='line-number'>1527</span>
<span class='line-number'>1528</span>
<span class='line-number'>1529</span>
<span class='line-number'>1530</span>
<span class='line-number'>1531</span>
<span class='line-number'>1532</span>
<span class='line-number'>1533</span>
<span class='line-number'>1534</span>
<span class='line-number'>1535</span>
<span class='line-number'>1536</span>
<span class='line-number'>1537</span>
<span class='line-number'>1538</span>
<span class='line-number'>1539</span>
<span class='line-number'>1540</span>
<span class='line-number'>1541</span>
<span class='line-number'>1542</span>
<span class='line-number'>1543</span>
<span class='line-number'>1544</span>
<span class='line-number'>1545</span>
<span class='line-number'>1546</span>
<span class='line-number'>1547</span>
<span class='line-number'>1548</span>
<span class='line-number'>1549</span>
<span class='line-number'>1550</span>
<span class='line-number'>1551</span>
<span class='line-number'>1552</span>
<span class='line-number'>1553</span>
<span class='line-number'>1554</span>
<span class='line-number'>1555</span>
<span class='line-number'>1556</span>
<span class='line-number'>1557</span>
<span class='line-number'>1558</span>
<span class='line-number'>1559</span>
<span class='line-number'>1560</span>
<span class='line-number'>1561</span>
<span class='line-number'>1562</span>
<span class='line-number'>1563</span>
<span class='line-number'>1564</span>
<span class='line-number'>1565</span>
<span class='line-number'>1566</span>
<span class='line-number'>1567</span>
<span class='line-number'>1568</span>
<span class='line-number'>1569</span>
<span class='line-number'>1570</span>
<span class='line-number'>1571</span>
<span class='line-number'>1572</span>
<span class='line-number'>1573</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>软中断:    1、软中断是在编译期间静态分配的。
</span><span class='line'>           2、最多可以有32个软中断。
</span><span class='line'>           3、软中断不会抢占另外一个软中断，唯一可以抢占软中断的是中断处理程序。
</span><span class='line'>           4、可以并发运行在多个CPU上（即使同一类型的也可以）。所以软中断必须设计为可重入的函数（允许多个CPU同时操作），
</span><span class='line'>              因此也需要使用自旋锁来保护其数据结构。
</span><span class='line'>           5、目前只有两个子系直接使用软中断：网络和SCSI。
</span><span class='line'>           6、执行时间有：从硬件中断代码返回时、在ksoftirqd内核线程中和某些显示检查并执行软中断的代码中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;tasklet:   1、tasklet是使用两类软中断实现的：HI_SOFTIRQ和TASKLET_SOFTIRQ。
</span><span class='line'>       2、可以动态增加减少，没有数量限制。
</span><span class='line'>       3、同一类tasklet不能并发执行。
</span><span class='line'>       4、不同类型可以并发执行。
</span><span class='line'>       5、大部分情况使用tasklet。
</span><span class='line'>
</span><span class='line'>工作队列:  1、由内核线程去执行，换句话说总在进程上下文执行。
</span><span class='line'>       2、可以睡眠，阻塞。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[bonding的源代码分析]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding-source/"/&gt;
</span><span class='line'>&lt;updated&gt;2016-03-09T10:10:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding-source&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://github.com/matrix207/bonding"&gt;https://github.com/matrix207/bonding&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;1.  目的&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  本文档结合相关内核代码和对Linux 2.6.9内核中Bonding模块的三种主要工作模式的工作&lt;br/&gt;
</span><span class='line'>  原理和流程。在配置Bond模块时，除了资料[2]，本文档也有一定的参考价值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2. 内容&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本文档包含下列内容：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;Bonding模块工作流程综述。（第3节）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Bonding链路状态监控机制（mii模式、arp模式）描述。（第4节）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Bonding模块三种主要工作模式：balance-rr、active- backup和broadcast相关代码分析。（第5节）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;Bonding模块关键数据结构和函数的代码分析。（第5节）&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果想了解bonding模块的原理和工作流程，请阅读3、4节，如果想进一步分析bonding模块的代码，请阅读5节。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;3. Bonding模块工作流程综述&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  Bonding模块本质上是一个虚拟的网卡驱动（network device driver），只不过并没有&lt;br/&gt;
</span><span class='line'>  真实的物理网卡与之对应，而是由这个虚拟网卡去“管辖”一系列的真实的物理网卡，所以&lt;br/&gt;
</span><span class='line'>  它的代码结构和一般网卡驱动的代码结构非常类似，这是共性；除此之外，它还有自己的&lt;br/&gt;
</span><span class='line'>  一些特性功能，例如特别的链路状态监控机制，绑定/解除绑定等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.1 物理网卡的活动状态和链路状态：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在bonding模块中为每一个被绑定的物理网卡定义了两种活动状态和四种链路状态：注意，&lt;br/&gt;
</span><span class='line'>  这里的链路状态和实际网卡真实的链路状态（是否故障、是否有网线连接）没有直接的关系，&lt;br/&gt;
</span><span class='line'>  虽然bonding模块通过MII或者ARP侦测到实际网卡故障时也会改变自定义的链路状态值&lt;br/&gt;
</span><span class='line'>  （例如从BOND_LINK_UP切换到BOND_LINK_FAIL随后切换到 BOND_LINK_DOWN状态），但是&lt;br/&gt;
</span><span class='line'>  概念上应该把这两类链路状态区分开。在本文档随后的内容中，除非特别指出，“链路状态”&lt;br/&gt;
</span><span class='line'>  都指bonding模块自定义的链路状态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  活动状态：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>BOND_STATE_ACTIVE：处于该状态的网卡是潜在的发送数据包的候选者
</span><span class='line'>BOND_STATE_BACKUP：处于该状态的网卡在选择发送数据的网卡时被排除
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  链路状态：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>BOND_LINK_UP：  上线状态（处于该状态的网卡是是潜在的发送数据包的候选者）
</span><span class='line'>BOND_LINK_DOWN：故障状态
</span><span class='line'>BOND_LINK_FAIL：网卡出现故障，向状态BOND_LINK_DOWN 切换中
</span><span class='line'>BOND_LINK_BACK：网卡恢复，向状态BOND_LINK_UP切换中
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  一个网卡必须活动状态为BOND_STATE_ACTIVE并且链路状态为 BOND_LINK_UP，才有可能作&lt;br/&gt;
</span><span class='line'>  为发送数据包的候选者，注意，这里所说的数据包并不包含ARP请求，在使用ARP链路状态&lt;br/&gt;
</span><span class='line'>  监控时，一个处于BOND_LINK_BACK状态的网卡也可能发送ARP请求。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  bonding模块的所有工作模式可以分为两类：多主型工作模式和主备型工作模式，balance-rr&lt;br/&gt;
</span><span class='line'>  和broadcast属于多主型工作模式而active-backup属于主备型工作模式。（balance-xor、&lt;br/&gt;
</span><span class='line'>  自适应传输负载均衡模式（balance-tlb）和自适应负载均衡模式（balance-alb）也属于&lt;br/&gt;
</span><span class='line'>  多主型工作模式，IEEE 802.3ad动态链路聚合模式（802.3ad）属于主备型工作模式，在本文档中不加以讨论）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在多主型工作模式中，如果物理网卡不出现故障，所有的物理网卡都处于 BOND_STATE_ACTIVE&lt;br/&gt;
</span><span class='line'>  和BOND_LINK_UP的状态下，参与数据的收发，此时：如果工作在balance-rr 模式中轮流&lt;br/&gt;
</span><span class='line'>  向各个网卡发送数据，curr_active_slave字段（见5.1.3）指向前次发送数据（不包含&lt;br/&gt;
</span><span class='line'>  ARP请求）的物理网卡，该指针每次发送过数据后都会切换到下一个物理网卡；在broadcast&lt;br/&gt;
</span><span class='line'>  模式中向所有网卡发送数据，curr_active_slave字段除非网卡有故障发生不会切换。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在主备型工作模式中，如果物理网卡不出现故障，只有一块网卡（活动网卡）处于 &lt;br/&gt;
</span><span class='line'>  BOND_STATE_ACTIVE和BOND_LINK_UP的状态下，负责数据的收发，而其他网卡（后备网卡）&lt;br/&gt;
</span><span class='line'>  处于BOND_STATE_BACKUP 和BOND_LINK_DOWN状态下，此时curr_active_slave字段指向当前的活动网卡。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  如果工作在active-backup模式下，可以指定一个物理网卡作为主网卡（primitive interface）&lt;br/&gt;
</span><span class='line'>  ,如果主网卡可用，就把主网卡作为当前活动网卡，否则在其他的可用网卡中选取一块网&lt;br/&gt;
</span><span class='line'>  卡作为当前活动网卡，而一旦主网卡从故障中恢复，不管当前活动网卡是否故障都切换到&lt;br/&gt;
</span><span class='line'>  主网卡。在balance-tlb和balance-alb模式中也可以指定主网卡，但是其意义和active-backup模式中并不相同。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3.2 数据收发流程&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  如果一个物理网卡被虚拟网卡绑定，则代表该网卡的数据结构struct net_device中下列字段将发生变化：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>flags字段（unsigned short）将包含IFF_SLAVE标志。
</span><span class='line'>master字段（struct net_device *）将指向虚拟网卡。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在主备型工作模式下，所有的非活动物理网卡的flags字段还将设置IFF_NOARP标志位表示对ARP请求不做出回应。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  而代表虚拟网卡的struct net_device数据结构的flags字段将包含IFF_MASTER标志。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  所有被绑定的物理网卡都将被设置相同的MAC地址和MTU值（和虚拟网卡也相同），这些值&lt;br/&gt;
</span><span class='line'>  将和第一块被绑定的物理网卡保持一致（“第一块网卡”并不是一个强制条件，这是由bonding&lt;br/&gt;
</span><span class='line'>  模块的启动流程造成的，我们也可以手工设置虚拟网卡的MAC地址和MTU值，这个设定同时&lt;br/&gt;
</span><span class='line'>  也将用于所有被绑定的物理网卡）。另外，所有被绑定的物理网卡没有IP地址，所以不参&lt;br/&gt;
</span><span class='line'>  与发送IP数据包的路由选择。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在下面的三节中，只描述数据发送和接收过程中和bonding相关的一些特殊处理，关于Linux&lt;br/&gt;
</span><span class='line'>  内核的一般数据包收发流程请参考资料[3][4]，本文档不再赘述。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3.2.1 接收数据&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  无论在何种模式下，只要物理网卡的实际链路状态正常，任何被绑定的物理网卡都可以接&lt;br/&gt;
</span><span class='line'>  收数据（虽然没有IP地址，但是仍然有MAC地址），即使是处于BOND_STATE_BACKUP和BOND_LINK_DOWN&lt;br/&gt;
</span><span class='line'>  状态时，这是由于BOND_STATE_BACKUP和BOND_LINK_DOWN是bonding模块自己定义的管理物&lt;br/&gt;
</span><span class='line'>  理网卡所用的状态，和内核的TCP/IP栈没有任何关系，bonding模块最多在主备模式下给&lt;br/&gt;
</span><span class='line'>  备用物理网卡设置IFF_NOARP标志，使它对ARP数据包不做出回应，仅此而已。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  收取数据包时，物理网卡驱动的中断处理函数把数据包放入接收队列中，随后软中断&lt;br/&gt;
</span><span class='line'>  NET_RX_SOFTIRQ的处理函数net_rx_action被调用，该函数将调用接收数据包的物理网卡网卡的poll函数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  无论一个物理网卡是否支持NAPI，函数netif_receive_skb都将在某个阶段被调用。&lt;br/&gt;
</span><span class='line'>  （如果物理网卡不支持NAPI，内核使用函数process_backlog代替真实的poll调用，&lt;br/&gt;
</span><span class='line'>  而process_backlog调用netif_receive_skb）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在netif_receive_skb函数中将调用函数skb_bond，该函数本质上作如下操作：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>if(dev-&gt;master) skb-&gt;dev = dev-&gt;master;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>  即把数据包skb的物理网卡字段替换为虚拟网卡，使得该数据包看起来像是从虚拟网卡接&lt;br/&gt;
</span><span class='line'>  收的一样，随后的处理和其他数据包没有任何差别，不再赘述。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3.2.2 发送数据&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  发送数据包时，内核根据路由选择某一个虚拟网卡作为发送接口（注意被绑定的物理网卡&lt;br/&gt;
</span><span class='line'>  没有IP地址），最后调用该虚拟网卡的数据包传输接口net_device-&gt; hard_start_xmit，&lt;br/&gt;
</span><span class='line'>  注意此时该数据包中的dev字段指向虚拟网卡。net_device-&gt; hard_start_xmit接口根据&lt;br/&gt;
</span><span class='line'>  不同的工作模式指向不同的传输函数，但是无论是何种工作模式，最后bond_dev_queue_xmit&lt;br/&gt;
</span><span class='line'>  函数都将被调用（以一个选定的物理网卡作为参数调用）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  bond_dev_queue_xmit函数将作如下操作：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>skb-&gt;dev = slave_dev;
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  即替换skb的dev字段为选定的物理网卡。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  随后，bond_dev_queue_xmit将调用标准的内核接口dev_queue_xmit把数据包放入选定物理网卡的发送队列中。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3.2.3 ARP请求和回应&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  既然被绑定物理网卡没有IP地址，那么如果接收到ARP请求之后，根据何IP地址决定是否产生应答？&lt;br/&gt;
</span><span class='line'>  如果产生应答，在应答中，源IP地址应该是什么？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  答案是：被绑定物理网卡接收到ARP请求后，由于函数arp_rcv在netif_receive_skb之后被调用，&lt;br/&gt;
</span><span class='line'>  而skb-&gt;dev经过netif_receive_skb的处理将指向虚拟网卡，所以是否产生应答由该物理网卡所&lt;br/&gt;
</span><span class='line'>  属的虚拟网卡的IP地址决定（当然前提是物理网卡没有设置IFF_NOARP标志），并且最终的ARP&lt;br/&gt;
</span><span class='line'>  回应将包含虚拟网卡的IP地址（细节请参考arp_rcv和arp_process函数）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;4. 链路状态监控&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;链路状态监控有如下两个作用：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;根据被绑定物理网卡的实际链路状态（是否故障、网线是否连接）更新bonding模块自定义&lt;br/&gt;
</span><span class='line'>的物理网卡链路状态和活动状态。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;在主备模式下，根据自定义的物理网卡链路状态切换活动状态和当前的活动网卡。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Bonging模块支持两种模式的链路状态监控：通过MII ioctl调用直接进行或是通过发送ARP&lt;br/&gt;
</span><span class='line'>请求间接进行。前者通过调用物理网卡驱动程序的MII ioctl接口直接获得物理网卡是否&lt;br/&gt;
</span><span class='line'>故障的信息，后者通过向预定义的一组IP地址发送ARP请求，并观察被监控物理网卡是否&lt;br/&gt;
</span><span class='line'>有收到数据包（可能是ARP回答或者是一般数据包）间接进行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这两种链路状态监控模式不能并存。参数arp_interval和miimon表示以毫秒为单位的检测&lt;br/&gt;
</span><span class='line'>间隔，在加载bonding模块时如果指定了非0的arp_interval参数并且miimon参数等于0，&lt;br/&gt;
</span><span class='line'>则使用ARP链路状态监控；如果指定了非0 miimon参数则使用MII链路状态监控&lt;br/&gt;
</span><span class='line'>（强制arp_interval = 0从而忽略arp_interval参数）。如果arp_interval和miimon都&lt;br/&gt;
</span><span class='line'>等于0则使用参数值为100的MII链路状态监控（强制miimon等于100 ms）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果使用ARP链路状态监控，还&lt;em&gt;必须&lt;/em&gt;指定 arp_ip_target参数，该参数设定ARP监控时发送ARP&lt;br/&gt;
</span><span class='line'>请求的目标IP列表，各个IP之间使用逗号分隔。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果使用MII链路状态监控，还&lt;em&gt;可以&lt;/em&gt;指定参数updelay和downdelay作为从BOND_LINK_DOWN到&lt;br/&gt;
</span><span class='line'>BOND_LINK_UP或者从BOND_LINK_UP 到BOND_LINK_DOWN切换的时间间隔，这两个参数默认是0值。&lt;br/&gt;
</span><span class='line'>（在ARP链路状态监控中这两个参数没有用）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.1 MII链路状态监控&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;MII链路状态监控可以用下列流程图表示&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;您的浏览器可能不支持显示此图像。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;初始时，如果虚拟网卡工作在多主型工作模式下，则所有物理网卡的链路状态为BOND_LINK_UP，&lt;br/&gt;
</span><span class='line'>并且活动状态处于BOND_STATE_ACTIVE，IFF_NOARP标志都没有设置；否则所有物理网卡的链路&lt;br/&gt;
</span><span class='line'>状态为 BOND_LINK_UP，但是只有当前活动网卡的活动状态处于BOND_STATE_ACTIVE并且没有&lt;br/&gt;
</span><span class='line'>设置IFF_NOARP 标志，而其余网卡的活动状态为BOND_STATE_BACKUP并且IFF_NOARP标志被设置。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;MII检测机制每miimon毫秒检测一遍所有被绑定物理网卡的状态。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;在某时刻，如果通过MII调用侦测到某一个物理网卡发生故障，则该物理网卡的链路状态立&lt;br/&gt;
</span><span class='line'>即被设置为BOND_LINK_FAILED。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果在downdelay毫秒内物理网卡恢复正常，则重新把网卡的链路状态设置为BOND_LINK_UP。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果在downdelay毫秒内物理网卡始终没有恢复正常，则该物理网卡的链路状态被设置为&lt;br/&gt;
</span><span class='line'>BOND_LINK_DOWN。如果虚拟网卡工作于主备型工作模式下，则活动状态被设置为BOND_STATE_BACKUP&lt;br/&gt;
</span><span class='line'>同时设置物理网卡的IFF_NOARP标志，并且如果出故障的是当前活动网卡，则通过一个重&lt;br/&gt;
</span><span class='line'>选择过程选择新的活动网卡（一般是第一块可用物理网卡）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果一个链路状态为BOND_LINK_DOWN的物理网卡在MII检测过程中恢复正常，则立即把网卡&lt;br/&gt;
</span><span class='line'>的链路状态设置为BOND_LINK_BACK。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果在updelay毫秒内物理网卡又发生故障，就把链路状态重新设置为BOND_LINK_DOWN。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果ådelay毫秒内物理网卡始终保持可用状态，就把链路状态重新设置为BOND_LINK_UP。&lt;br/&gt;
</span><span class='line'>如果虚拟网卡工作于主备型工作模式下，则同时设置活动状态为BOND_STATE_ACTIVE并且&lt;br/&gt;
</span><span class='line'>清除物理网卡的IFF_NOARP标志，并且如果是主网卡恢复到BOND_STATE_ACTIVE状态，则会&lt;br/&gt;
</span><span class='line'>把当前活动网卡切换到主网卡。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4.2 ARP链路状态监控&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4.2.1 active-backup工作模式下的ARP链路状态监控&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该模式下的ARP链路状态监控可以分为两个阶段：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果当前活动网卡（curr_active_slave不为NULL）存在，则以间隔 arp_interval毫秒从当&lt;br/&gt;
</span><span class='line'>前活动网卡向arp_targets表示的各个IP地址发送ARP请求，如果当前活动网卡在过去的&lt;br/&gt;
</span><span class='line'>2&lt;em&gt;arp_interval毫秒内没有数据包发送&lt;/em&gt;和&lt;em&gt;接收并且已经作为活动网卡至少 2&lt;/em&gt;arp_interval&lt;br/&gt;
</span><span class='line'>毫秒，则把当前活动网卡的链路状态设置为BOND_LINK_DOWN并且试图在链路状态为BOND_LINK_UP&lt;br/&gt;
</span><span class='line'>或者BOND_LINK_BACK的网卡中选取一个网卡作为当前活动网卡。如果有这样一个网卡存在，&lt;br/&gt;
</span><span class='line'>则原来的活动网卡的活动状态被设置为BOND_STATE_BACKUP，并且IFF_NOARP标志被设置，&lt;br/&gt;
</span><span class='line'>新的活动网卡链路状态被设置为BOND_STATE_UP, 活动状态被设置为BOND_STATE_ACTIVE，&lt;br/&gt;
</span><span class='line'>IFF_NOARP标志被清除。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果上述过程没有选出新的活动网卡（正常情况下active-backup 模式下除当前活动网卡&lt;br/&gt;
</span><span class='line'>外所有网卡的链路状态都是BOND_LINK_DOWN，所以可能没有链路状态为BOND_LINK_UP或者&lt;br/&gt;
</span><span class='line'>BOND_LINK_BACK的后备网卡），则开始一个下述的选取活动网卡的过程：&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从第一块可用（即IFF_UP标志被设置，netif_running(dev)和netif_carrier_ok(dev)都返回非0值）&lt;br/&gt;
</span><span class='line'>物理网卡开始，向arp_targets表示的各个IP地址发送ARP请求，然后观察所有的物理网卡，&lt;br/&gt;
</span><span class='line'>如果有物理网卡在arp_interval毫秒内有数据发送&lt;em&gt;和&lt;/em&gt;接收，就把它设置为当前活动网卡，结束这个选取过程。否则换下一个可用物理网卡，重复这个过程。
</span><span class='line'>注意即使物理网卡被设置IFF_NOARP标志，仍旧可以收到ARP应答数据包。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;4.2.2 其他工作模式下的ARP链路状态监控&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  虚拟网卡每arp_interval遍历一遍所有被绑定物理网卡，如果在网卡在过去的2 * arp_interval毫秒内没有任何数据的发送&lt;em&gt;或者&lt;/em&gt;接收，就把网卡的链路状态设置为 BOND_LINK_DOWN，活动状态设置为BOND_STATE_BACKUP，如果在过去的arp_interval毫秒有数据包发送&lt;em&gt;和&lt;/em&gt;接收，则把网卡的链路状态设置为BOND_LINK_UP，活动状态设置为 BOND_STATE_ACTIVE。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  在遍历过程中，对每一个可用的物理网卡（IFF_UP标志被设置，netif_running(dev)和netif_carrier_ok(dev)都返回非0值），都试图从该网卡向arp_targets表示的各个IP地址发送ARP请求，保证其他的被绑定的物理网卡可以收到ARP应答包。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;5. 代码分析&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;5.1 关键数据结构&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;1.struct bond_params&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;文件：driver/net/bonding/bonding.h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该结构是全局结构（每系统一个），对应于加载bonding模块时传入的各个参数
</span><span class='line'>&lt;code&gt;
</span><span class='line'>主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>mode  int  Bonding模块工作模式
</span><span class='line'>    BOND_MODE_ROUNDROBIN     balance-rr模式
</span><span class='line'>    BOND_MODE_ACTIVEBACKUP   active-backup模式
</span><span class='line'>    BOND_MODE_XOR            balance-xor模式
</span><span class='line'>    BOND_MODE_BROADCAST      broadcast模式
</span><span class='line'>    BOND_MODE_8023AD         IEEE 802.3ad动态链路聚合模式
</span><span class='line'>    BOND_MODE_TLB            自适应传输负载均衡模式
</span><span class='line'>    BOND_MODE_ALB            自适应负载均衡模式
</span><span class='line'>miimon  int  使用MII链路状态监控时的时间间隔（ms）
</span><span class='line'>arp_interval  int  使用arp链路状态监控时的时间间隔（ms）
</span><span class='line'>use_carrier  int  使用MII链路状态监控时是否使用更新的carrier调用
</span><span class='line'>updelay  int  使用MII链路状态监控时从BACK状态切换到UP状态的时延(ms)
</span><span class='line'>downdelay  int  使用MII链路状态监控时从FAIL状态切换到DOWN状态的时延(ms)
</span><span class='line'>primary  char[]  用来在active-backup、balance-tlb和balance-alb模式中指定主网卡
</span><span class='line'>arp_targets  u32[]  在ARP链路状态监控中将向这些IP地址发送ARP请求。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;2.struct slave&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;文件：driver/net/bonding/Bonding.h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;每一个被管辖的物理网卡对应一个该数据结构的实例&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>dev  struct net_device*  指向被绑定的物理网卡
</span><span class='line'>next，prev  struct slave *  所有的slave数据结构通过这两个指针双向链接到一起形成*循环*链表
</span><span class='line'>delay  s16  用于保存MII链路状态监控和ARP链路状态监控的时延值。
</span><span class='line'>jiffies  u32  用于active-backup模式下的ARP状态监控
</span><span class='line'>link  s8  表示对应网卡的链路状态，取下列四个值之一：
</span><span class='line'>    BOND_LINK_UP     上线状态
</span><span class='line'>    BOND_LINK_DOWN   故障状态
</span><span class='line'>    BOND_LINK_FAIL   网卡出现故障，状态BOND_LINK_DOWN切换中
</span><span class='line'>    BOND_LINK_BACK   网卡恢复，状态BOND_LINK_UP切换中
</span><span class='line'>state  s8  表示对应网卡活动状态，取下列两个值之一：
</span><span class='line'>    BOND_STATE_ACTIVE            活动状态
</span><span class='line'>    BOND_STATE_BACKUP            后备状态
</span><span class='line'>original_flags  u32  保存被绑定物理网卡原来的flags
</span><span class='line'>perm_hwaddr  u8[]  保存被绑定物理网卡原来的MAC地址
</span><span class='line'>ad_info  struct ad_slave_info  记录IEEE 802.3ad动态链路聚合模式下的“每网卡”相关状态信息
</span><span class='line'>tlb_info  struct tlb_slave_info  记录自适应传输负载均衡模式下的“每网卡”相关状态信息
</span><span class='line'>link_failure_count  u32  网卡从BOND_LINK_FAIL切换到BOND_LINK_DOWN的次数
</span><span class='line'>speed  u16  记录网卡的传输速度（10M/100M/1000G）
</span><span class='line'>duplex  u8  网卡工作模式（全双工？）
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;3.struct bonding&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;文件：driver/net/bonding/Bonding.h&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;每一个虚拟网卡对应一个该数据结构的实例。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    主要成员：
</span><span class='line'>名称  类型  含义
</span><span class='line'>dev  struct net_device*  指向虚拟网卡（例如bond0、bond1等等）
</span><span class='line'>first_slave  struct   slave *  指向被绑定的第一个物理网卡对应的slave结构。
</span><span class='line'>curr_active_slave  struct   slave *  指向当前活动的网卡对应的slave结构，在不同的工作模式下有不同的含义。
</span><span class='line'>current_arp_slave  struct   slave *  用于ARP状态监控（只用于bond_activebackup_arp_mon）
</span><span class='line'>primary_slave  struct   slave *  如果使用BOND_MODE_ACTIVEBACKUP、BOND_MODE_TLB或者BOND_MODE_ALB模式，则指向主物理网卡对应的slave结构（primary_slave）
</span><span class='line'>slave_cnt  s32  虚拟网卡所管辖的物理网络接口的个数
</span><span class='line'>lock  rwlock_t  每一个虚拟网卡管辖一系列物理网卡，每一个物理网卡对应一个slave结构，所有的slave被放在一个链表中，这个读写锁用来保护该链表。
</span><span class='line'>curr_slave_lock  rwlock_t  用来保护curr_active_slave的读写锁。
</span><span class='line'>mii_timer  struct   timer_list  用于MII链路状态监控的定时器
</span><span class='line'>arp_timer  struct   timer_list  用于ARP链路状态监控的定时器
</span><span class='line'>kill_timers  s8  如果该标志置位，所有的计时器超时后就不再重新设置，从而可以被安全删除
</span><span class='line'>bond_list  struct   list_head  通过该结构，所有的bonding数据结构被连接为双向链表，链表头是全局变量bond_dev_list。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;5.2 关键函数&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;本节描述了bonding模块关键函数的操作流程，这些函数是基本的原子模块，其他没有被列举的函数仅仅是对这些函数的简单包装。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5.2.1 模块初始化/释放&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;1.初始化&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bonding_init&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int __init bonding_init(void)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bonding_init作为bonging模块的初始化函数，在模块被加载时被调用。它主要做如下工作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;调用函数bond_check_params解析传入模块的参数并检查其合法性，结果放入数据结构params中。其中params是一个类型为bond_params的全局变量。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果内核支持proc文件系统，调用bond_create_proc_dir在/proc/net下创建目录/proc/net/bonding。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果传入参数指定了bond设备的个数（通过参数max_bonds），则通过下列步骤创建max_bonds个bond设备（从bond0到bondN）
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;调用alloc_netdev和dev_alloc_name创建网络设备，指定每一个设嘯一个bonding结构（dev-&gt;priv）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;为每一个新创建的虚拟网络设备调用bond_init函数。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用register_netdevice注册这个新创建的网络设备。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用register_netdevice_notifier，注册函数bond_netdev_notifier为网络事件处理函数。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_init&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int __init bond_init(struct net_device *bond_dev, struct bond_params *params)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数对每一个新创建的虚拟网络设备调用一次。它主要做下列工作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;取出虚拟网络设备bond_dev的私有数据块，用bond指向它（struct bonding *bond）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;初始化两个读写锁bond-&gt;lock和bond-&gt;curr_slave_lock。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;把bond-&gt;first_slave、bond-&gt;curr_active_slave、bond-&gt;current_arp_slave、bond-&gt;primary_slave全部置为NULL。bond-&gt;dev指向属主网络设备bond_dev。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_dev的一系列通用接口函数，例如open、close、get_stats、do_ioctl、set_multicast_list、change_mtu和set_mac_address。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;根据不同的工作模式，设置bond_dev的通用接口函数hard_start_xmit 指向不同的目的函数。例如如果工作模式是BOND_MODE_ROUNDROBIN，则 hard_start_xmit指向函数bond_xmit_roundrobin。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_dev-&gt;tx_queue_len为0，表示发送队列大小没有限制。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_dev-&gt;flags为IFF_MASTER|IFF_MULTICAST表示该设备支持Muticase并且是一个流量均衡组中的master（被它管辖的其他物理网卡将被设置IFF_SLAVE标志）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;其他和VLAN相关的标志设置和初始化。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果内核支持proc文件系统，调用bond_create_proc_entry在目录/proc/net/bonding下创建对应的proc文件。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用list_add_tail把该bonding数据结构添加到bond_dev_list中。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2. 释放 bonding_exit&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void __exit bonding_exit(void)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数在模块被卸载的时候被调用，它主要做如下工作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;调用unregister_netdevice_notifier注销网络事件处理函数。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_free_all注销所有形如bondN的虚拟网络接口。bond_free_all遍历bond_dev_list链表，并且对其中的每一个类型为 struct bonding*的数据结构bond做如下操作：&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用unregister_netdevice注销bond-&gt;dev&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_deinit(bond-&gt;dev)&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_destroy_proc_dir删除/proc/net/bonding目录&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;bond_deinit&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static inline void bond_deinit(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数对每一个虚拟网卡的实例调用一次，它主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;调用list_del把虚拟网卡对应的bonding数据结构从bond_dev_list链表中摘除。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_remove_proc_entry删除/proc/net/bonding目录中的对应文件。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5.2.2 物理网卡的绑定/解除绑定&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在下面的讨论中，假定ifenslave使用新的ABI接口，即：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;在绑定物理网卡时，如果虚拟的网卡还没有MAC地址，则ifenslave通过IOCTL把该虚拟网卡的MAC地址设置为该物理网卡的MAC地址（保证bond_enslave被调用时虚拟网卡已经有了MAC地址）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果被绑定网卡处于UP状态，则ifenslave首先把它设置为DOWN状态（保证bond_enslave被调用时被绑定物理网卡处于DOWN状态）。&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果使用旧版本的ABI接口，则虚拟的网卡的MAC地址由bonding模块在bond_enslave函数中自行设置，并且被绑定网卡在bond_enslave被调用时可能处于UP状态，需要由bond_enslave函数自行处理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;1. 绑定 bond_enslave&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数在试图把一个物理网卡绑定到一个虚拟的网卡时被调用，其中bond_dev表示虚拟的网卡，slave_dev表示真实的物理网卡。该函数主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;取出bond_dev的私有数据，用bond指向它（struct bonding *）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;一系列的合法性检查，包括：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;bond_dev的flags是否已经设置了IFF_UP（虚拟的网卡必须已经处于UP状态）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;slave_dev的flags是否没有设置IFF_SLAVE（防止同一个物理网卡被绑定两次）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;bond_dev的flags如果设置了NETIF_F_VLAN_CHALLENGED，则bond-&gt;vlan_list不能为空。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;slave_dev-&gt;flags是否没有设置IFF_UP（物理网卡应该处于DOWN状态）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;slave_dev-&gt;set_mac_address不能为NULL（物理网卡应该支持设置MAC地址）&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用kmalloc分配一个新的slave结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;把slave_dev-&gt;flags保存在slave-&gt;original_flags中。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;把slave_dev原有的MAC地址保存在slave-&gt; perm_hwaddr中。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置slave_dev新的MAC地址为虚拟网卡的MAC地址。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用netdev_set_master设置slave_dev，该函数主要作如下操作：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;设置slave_dev-&gt;flags的IFF_SLAVE标志。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置slave_dev-&gt;master指向虚拟网卡bond_dev。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置slave-&gt;dev指向slave_dev。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果bond_dev工作在模式BOND_MODE_TLB或者BOND_MODE_ALB，对slave调用bond_alb_init_slave函数。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;维护和Multicast以及VLAN相关的一系列数据结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_attach_slave把slave加入bond的链表（通过维护bond-&gt; first_slave和slave结构的next，prev指针）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;把slave的delay和link_failure_count都清零。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;监测slave_dev的链路状态：&lt;br/&gt;
</span><span class='line'>1.如果使用MII链路，并且bond_check_dev_link返回BMSR_LSTATUS（表示链路正常），或者不使用MII链路监控，则根据updelay是否为0把slave-&gt;link设置为BOND_LINK_BACK或者BOND_LINK_UP。&lt;br/&gt;
</span><span class='line'>2.如果使用MII链路，并且bond_check_dev_link返回非BMSR_LSTATUS值，则设置slave-&gt;link为BOND_LINK_DOWN。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_update_speed_duplex更新slave_dev的链路速率，如果失败则设置slave_dev的链路速率为100M全双工。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP、BOND_MODE_TLB或者BOND_MODE_ALB模式下，并且slave_dev是用户指定的主网卡，则设置bond-&gt;primary_slave为slave_dev。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond-&gt;curr_active_slave和slave的活动状态，维护VLAN和Multicast相关数据结构：&lt;br/&gt;
</span><span class='line'>1.如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP：如果bond-&gt;curr_active_slave没有被设置或者bond-&gt;curr_active_slave不响应ARP（设置了IFF_NOARP标志），并且slave_dev不处于BOND_LINK_DOWN状态，则设置slave_dev为活动网卡（设置BOND_STATE_ACTIVE标志，清除IFF_NOARP标志），否则设置slave_dev为后备网卡（设置BOND_STATE_BACKUP标志，设置IFF_NOARP标志）。&lt;br/&gt;
</span><span class='line'>2.如果虚拟网卡工作在BOND_MODE_ROUNDROBIN或者 BOND_MODE_BROADCAST：直接设置slave_dev的活动状态为BOND_STATE_ACTIVE（在BOND_MODE_ROUNDROBIN和BOND_MODE_BROADCAST 模式下，IFF_NOARP标志始终被清除），如果没有设置bond-&gt;curr_active_slave，则设置bond-&gt;curr_active_slave指向slave。&lt;br/&gt;
</span><span class='line'>3.其他工作模式：（还没有加以分析）&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2. 解除绑定 bond_release&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数在试图解除一个物理网卡的绑定状态时被调用，其中bond_dev表示虚拟的网卡，slave_dev表示真实的物理网卡。该函数主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;取出bond_dev的私有数据，用bond指向它（struct bonding *）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;寻找对应的slave结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;一系列的合法性检查，包括：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;slave_dev-&gt;flags是否设置了IFF_SLAVE。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;slave结构是否存在。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;slave_dev原来的MAC地址是否和bond_dev相同，如果相同给出警告（防止MAC冲突）&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在BOND_MODE_8023AD模式，调用bond_3ad_unbind_slave&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_detach_slave把slave从bond的链表中摘除（通过维护bond-&gt; first_slave和slave结构的next，prev指针）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果slave_dev是虚拟网卡以前的主物理网卡，则设置bond-&gt;primary_slave为NULL。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果slave_dev是虚拟网卡以前的活动网卡，则设置bond-&gt;active_slave为NULL（通过调用bond_change_active_slave函数）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB则调用bond_alb_deinit_slave。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果slave_dev是虚拟网卡以前的活动网卡，则调用bond_select_active_slave寻找一个新的活动网卡。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡再也没有管辖的物理网卡，清除虚拟网卡的MAC地址（如果新调用ifenslave绑定物理网卡，则重新设置这个MAC地址）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;维护VLAN和Multicast相关的数据结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用netdev_set_master解除master和slave的绑定关系并且调用dev_close关闭slave_dev。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;恢复slave_dev的MAC地址（根据slave-&gt;perm_hwaddr）和flags（根据slave-&gt;original_flags）。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用kfree释放slave结构。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5.2.3 网卡驱动通用接口（interface service routines）&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;既然bonding模块本质上是一个虚拟网卡的驱动模块，所以必须提供一组所有网卡驱动模块都遵守的通用接口函数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;1. open/close&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_open（net_device-&gt;open接口）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_open(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数在对应的虚拟网卡被打开时调用（即使用ifup/ifconfig工具启动网卡的时候），主要做如下操作（只分析三种主要模式）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;设置bond-&gt;kill_timers为0。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果使用MII链路状态监控：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;初始化mii_timer。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置超时时间mii_timer-&gt;expires为当前jiffies+1（立即调用bond_mii_monitor函数）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_mii_monitor为定时器的超时处理函数。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果使用ARP链路状态监控：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;初始化arp_timer。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置超时时间arp_timer-&gt;expires为当前jiffies+1（立即调用定时器的超时处理函数）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果工作在BOND_MODE_ACTIVEBACKUP，设置bond_activebackup_arp_mon为超时处理函数。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果工作在其他模式，设置bond_loadbalance_arp_mon为超时处理函数。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_close（net_device-&gt;stop接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_close(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数在对应的虚拟网卡被关闭时调用（即使用ifdown/ifconfig工具关闭网卡的时候），主要做如下操作（只分析三种主要模式）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;调用bond_mc_list_destroy维护Multicast相关数据结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond-&gt;kill_timers为1，所有的计时器超时后就不再重新设置，从而可以被安全删除。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;删除所有的定时器，包括mii_timer和arp_timer。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_release_all释放所有被绑定的物理网卡，本质上该函数只是遍历slave链表并且对每一个元素调用bond_release。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_deinitialize。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2. ioctl接口&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_do_ioctl（net_device-&gt;do_ioctl 接口）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_do_ioctl(struct net_device *bond_dev, struct ifreq *ifr, int cmd)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数是虚拟网卡的IOCTRL接口，仅仅根据不同的IOCTRL命令调用其他函数执行相应的功能，
</span><span class='line'>所以不再列出操作流程而仅仅列举出这些被调用的函数和相应的功能：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  1.链路状态设置和查询（bond_ethtool_ioctl或者if_mii）
</span><span class='line'>  2.Bonding模块状态查询（bond_info_query）
</span><span class='line'>  3.被绑定的物理网卡状态查询（bond_slave_info_query）
</span><span class='line'>  4.物理网卡的绑定和解除绑定（bond_enslave/bond_release）
</span><span class='line'>  5.虚拟网卡的MAC地址设置（bond_sethwaddr）
</span><span class='line'>  6.切换当前活动的物理网卡（bond_ioctl_change_active）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;3. 统计值查询&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_get_stats（net_device-&gt; get_stats 接口）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static struct net_device_stats *bond_get_stats(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数枚举所有被管辖的物理网卡，并且对每一个物理网卡调用get_stats接口，然后把对应的统计值加起来并作为最终的返回值，这些统计值包括。
</span><span class='line'>名称  含义
</span><span class='line'>rx_packets  接收包总数
</span><span class='line'>rx_bytes  接收字节总数
</span><span class='line'>rx_errors  接收过程中错误数据包数
</span><span class='line'>rx_dropped  接受过程中丢弃包数
</span><span class='line'>tx_packets  发送包总数
</span><span class='line'>tx_bytes  发送字节总数
</span><span class='line'>tx_errors  发送过程中错误数据包数
</span><span class='line'>tx_dropped  发送过程中丢弃包数
</span><span class='line'>multicast  Multicast数据包总数
</span><span class='line'>collisions  MAC地址冲突次数
</span><span class='line'>rx_length_errors  接收数据包长度错误总数
</span><span class='line'>rx_over_errors  ring buff溢出次数
</span><span class='line'>rx_crc_errors  接收数据包CRC校验错误总数
</span><span class='line'>rx_frame_errors  接收数据包frame对齐错误总数
</span><span class='line'>rx_fifo_errors  接收队列溢出次数
</span><span class='line'>rx_missed_errors  接收时丢失的包数（仅仅对某些媒体有效）
</span><span class='line'>tx_aborted_errors  发送取消次数（例如发送超时）
</span><span class='line'>tx_carrier_errors  链路错误总数
</span><span class='line'>tx_fifo_errors  发送队列溢出次数
</span><span class='line'>tx_heartbeat_errors  心跳信号丢失（仅仅对某些媒体有效）
</span><span class='line'>tx_window_errors  接收窗口错误（不明，需要进一步确认）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_set_multicast_list（net_device-&gt; set_multicast_list 接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void bond_set_multicast_list(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数设置和Multicast和混杂模式相关的一组数据结构，由于三种主要工作模式并不过多地涉及这个函数，所以本文档不给出详细的说明。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_change_mtu（net_device-&gt; change_mtu 接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_change_mtu(struct net_device *bond_dev, int new_mtu)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数把被虚拟网卡的MTU和被它管辖的所有物理网卡的MTU设置为同一值，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;枚举所有被管辖的物理网卡，对每一个物理网卡调用change_mtu设置新的MTU值，如果物理网卡没有change_mtu接口函数，则直接设置slave-&gt;dev-&gt;mtu等于new_mtu。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_dev-&gt;mtu的值等于new_mtu。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_set_mac_address（net_device-&gt; set_mac_address 接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_set_mac_address(struct net_device *bond_dev, void *addr)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数设置虚拟网卡的MAC地址和被管辖的物理网卡的MAC地址为同一值，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;枚举所有被管辖的物理网卡，对每一个物理网卡调用set_mac_address设置新的MAC地址，如果物理网卡没有set_mac_address函数，则错误返回。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置bond_dev-&gt;dev_addr的值等于新的MAC地址。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;4. 数据包传输（接收/发送）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Bonding模块仅仅负责把发送数据包按照特定的工作模式转给被管辖的物理网卡发送，而每一个物理网卡负责自己的数据包接收，即虚拟网卡不管理各个物理网卡的数据接收过程，它能做的仅仅是设置它们的IFF_NOARP标志，使某一个物理网卡对ARP请求不做出回应。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在模块初始化时， bond_init函数根据工作模式把net_device-&gt; hard_start_xmit接口设置为不同的函数，对于 BOND_MODE_ROUNDROBIN、BOND_MODE_ACTIVEBACKUP和BOND_MODE_BROADCAST 模式，该接口分别被设置为下列三个函数之一&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_xmit_roundrobin（net_device-&gt; hard_start_xmit 接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_xmit_roundrobin(struct sk_buff *skb, struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数用来在BOND_MODE_ROUNDROBIN模式中发送数据包，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;合法性检查，包括：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;检查bond_dev -&gt;flags中IFF_UP标志是否设置&lt;/li&gt;
</span><span class='line'>&lt;li&gt;netif_running(bond_dev)是否返回非0值&lt;/li&gt;
</span><span class='line'>&lt;li&gt;对应的虚拟网卡是否至少有一个管辖的物理网卡&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;从bond-&gt;curr_active_slave开始遍历slave链表，找到第一个链路状态为BOND_LINK_UP，活动状态为BOND_STATE_ACTIVE的物理网卡并且调用bond_dev_queue_xmit向这个物理网卡发送数据，然后设置bond-&gt;curr_active_slave为slave链表中的下一个物理网卡。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果没有找到这样的网卡或者bond_dev_queue_xmit返回非0值，则调用dev_kfree_skb丢弃数据包。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_xmit_activebackup（net_device-&gt; hard_start_xmit 接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_xmit_activebackup(struct sk_buff *skb, struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数用来在BOND_MODE_ACTIVEBACKUP模式中发送数据包，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果是试图发送ARP请求，则把全局变量my_ip设置为ARP请求中的发送方IP地址（skb-&gt;data+以太网头长度+ARP头长度+6），这个全局变量在ARP链路状态监控中被使用。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;合法性检查，包括：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;检查bond_dev -&gt;flags中IFF_UP标志是否设置&lt;/li&gt;
</span><span class='line'>&lt;li&gt;netif_running(bond_dev)是否返回非0值&lt;/li&gt;
</span><span class='line'>&lt;li&gt;对应的虚拟网卡是否至少有一个管辖的物理网卡&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果bond-&gt;curr_active_slave不为空，则调用bond_dev_queue_xmit向这个物理网卡发送数据。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;否则，调用dev_kfree_skb丢弃数据包。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_xmit_broadcast（net_device-&gt; hard_start_xmit接口）&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_xmit_broadcast(struct sk_buff *skb, struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数用来在BOND_MODE_BROADCAST模式中发送数据包，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;合法性检查，包括：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;检查bond_dev -&gt;flags中IFF_UP标志是否设置&lt;/li&gt;
</span><span class='line'>&lt;li&gt;netif_running(bond_dev)是否返回非0值&lt;/li&gt;
</span><span class='line'>&lt;li&gt;对应的虚拟网卡是否至少有一个管辖的物理网卡&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;从bond-&gt;curr_active_slave开始遍历slave链表，找到所有状态为BOND_LINK_UP，活动状态为BOND_STATE_ACTIVE的物理网卡，包括bond-&gt;curr_active_slave，调用bond_dev_queue_xmit向这些物理网卡发送数据（其中需要通过skb_clone复制skb结构）。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果发送失败，调用dev_kfree_skb丢弃数据包&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;# bond_dev_queue_xmit&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>int bond_dev_queue_xmit(struct bonding *bond, struct sk_buff *skb, struct net_device *slave_dev)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数被bond_xmit_roundrobin，bond_xmit_activebackup 和bond_xmit_broadcast 调用，向实际的物理网卡发送数据包，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;设置skb-&gt;dev为slave_dev（在此之前skb-&gt;dev指向虚拟网卡，现在指向真实的物理网卡）&lt;/li&gt;
</span><span class='line'>&lt;li&gt;维护和VLAN相关的数据结构。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用dev_queue_xmit发送数据包。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;dev_queue_xmit&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>int dev_queue_xmit(struct sk_buff *skb)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>该函数不是bonding模块的一部分而是内核的一个标准接口，为了清楚起见也把它列出来，请参考net/core/dev.c文件。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果底层的物理网卡不支持Scatter/Gather IO，而skb包含了分片（注意不是IP分片，而是和DMA相关的一个概念，见skbbuff.h），则调用__skb_linearize合并分片。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果底层的设备不支持计算校验和，则计算一系列校验和。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果底层的设备有发送队列（qdisc），则把数据包放入发送队列中，退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果底层的设备没有发送队列（例如loopback或者其他没有真实物理网卡对应的设备，bonding模块自然也算一个），则直接调用底层设备的hard_start_xmit发送数据包。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果发送失败，调用dev_kfree_skb丢弃数据包&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;5.2.4. 链路状态监控&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;1. MII链路状态监控&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_mii_monitor&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void bond_mii_monitor(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果使用MII链路状态监控，则该函数被周期调用以检测每一个被绑定物理网卡的链路状态, 主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;计算局部变量delta_in_ticks = (bond-&gt;params.miimon * HZ) / 1000，即miimon参数的jiffies表示。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果kill_timers被设置，直接退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果没有任何物理网卡被绑定，重新设置定时器，退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;根据bond_check_dev_link的结果，按照第5节描述的MII链路状态监控模型设置网卡的链路状态。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果原来物理网卡的链路状态为BOND_LINK_FAIL，而 bond_check_dev_link返回非BMSR_LSTATUS值，则除了把链路状态设置为BOND_LINK_DOWN之外，还做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_8023AD，调用bond_3ad_handle_link_change&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_handle_link_change。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果当前被检查的slave不是curr_active_slave，设置标志do_failover表明可能会发生slave切换。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果原来物理网卡的链路状态为BOND_LINK_BACK而bond_check_dev_link 返回BMSR_LSTATUS，则除了把链路状态设置为BOND_LINK_UP之外，还做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_8023AD或者被监测网卡不是primary_slave，则设置物理网卡的活动状态为BOND_STATE_BACKUP&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡&lt;em&gt;不是&lt;/em&gt;工作在模式BOND_MODE_ACTIVEBACKUP，则设置物理网卡的活动状态为BOND_STATE_ACTIVE&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_8023AD，调用bond_3ad_handle_link_change&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果虚拟网卡工作在模式BOND_MODE_TLB或者BOND_MODE_ALB模式下，调用bond_alb_handle_link_change。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果当前被检查的slave不是curr_active_slave，设置标志do_failover表明可能会发生slave切换。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;调用bond_update_speed_duplex更新物理网卡的速率。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;&lt;p&gt;如果do_failover被设置，调用bond_select_active_slave。&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置定时器的超时值为jiffies+delta_in_ticks。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_check_dev_link&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static int bond_check_dev_link(struct bonding *bond, struct net_device *slave_dev, int reporting)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数调用MII/ETHTOOL IOCTL或者使用netif_carrier_ok()检查链路是否正常工作（如果用&lt;br/&gt;
</span><span class='line'>户指定了use_carrier）参数，如果该函数返回BMSR_LSTATUS表明链路是正常的，否则表示链&lt;br/&gt;
</span><span class='line'>路故障（例如掉网线等等）。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;2. ARP链路状态监控&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_loadbalance_arp_mon&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void bond_loadbalance_arp_mon(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果虚拟网卡工作在&lt;em&gt;非&lt;/em&gt;BOND_MODE_ACTIVEBACKUP 模式下，而用户指定了使用ARP状态监控，&lt;br/&gt;
</span><span class='line'>则周期性地对每一个被绑定物理网卡调用该函数，注意该函数不使用 downdelay和updelay参数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由于&lt;em&gt;非&lt;/em&gt;BOND_MODE_ACTIVEBACKUP模式下所有的被绑定网卡都是处于活动状态（BOND_STATE_ACTIVE），&lt;br/&gt;
</span><span class='line'>所以该函数的功能是轮流从每一个被绑定物理网卡发送ARP请求，并且在一段时间间隔内是否&lt;br/&gt;
</span><span class='line'>有数据包接收，如果没有就设置被检查物理网卡的链路状态为BOND_LINK_DOWN，活动状态设置&lt;br/&gt;
</span><span class='line'>为BOND_STATE_BACKUP 表示不参与发送数据（但是只要IFF_UP被设置、netif_running和&lt;br/&gt;
</span><span class='line'>netif_carrier_ok都返回非0（真）值，即本地网卡检查通过，仍然周期性地发送ARP请求出去），&lt;br/&gt;
</span><span class='line'>请参考5.2节中的描述。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;计算局部变量delta_in_ticks = (bond-&gt;params.arp_interval * HZ) / 1000，即arp_interval参数的jiffies表示。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果kill_timers被设置，直接退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果没有任何物理网卡被绑定，重新设置定时器，退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;枚举所有被绑定的物理网卡，做如下操作：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;假如物理网卡的链路状态不是BOND_LINK_UP并且在delta_in_ticks时间间隔内发送过&lt;em&gt;并且&lt;/em&gt;接受过数据包，则把链路状态设置为BOND_LINK_UP，活动状态设置为BOND_STATE_ACTIVE，并且如果curr_active_slave为空则设置do_failover局部变量。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;假如物理网卡的链路状态是BOND_LINK_UP并且在2*delta_in_ticks时间间隔内没有发送过或者没有接受过数据包，则把链路状态设置为BOND_LINK_DOWN，活动状态设置为BOND_STATE_BACKUP，如果当前slave是curr_active_slave则设置do_failover局部变量。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果dev-&gt;flags中IFF_UP被设置，netif_running和netif_carrier_ok都返回非0（真）值，则尝试调用bond_arp_send_all从该网卡发送ARP请求（参考bond_arp_send_all的描述）。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果do_failover被设置，调用bond_select_active_slave。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置定时器的超时值为jiffies+delta_in_ticks。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_activebackup_arp_mon&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void bond_activebackup_arp_mon(struct net_device *bond_dev)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果虚拟网卡工作在BOND_MODE_ACTIVEBACKUP模式下，而用户指定了使用ARP状态监控，则周期性地对每一个被绑定物理网卡调用该函数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;计算局部变量delta_in_ticks = (bond-&gt;params.arp_interval * HZ) / 1000，即arp_interval参数的jiffies表示。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果kill_timers被设置，直接退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果没有任何物理网卡被绑定，重新设置定时器，退出。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;枚举所有被绑定的物理网卡，做如下操作：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果物理网卡在时间间隔delta_in_ticks内接收过数据包，就把网卡的链路状态设置为BOND_LINK_UP（网卡的活动状态保持不变），设置curr_active_slave为NULL。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果物理网卡在时间间隔3*delta_in_ticks内没有接收过数据包并且该网卡不是curr_active_slave，就把网卡的链路状态设置为BOND_LINK_DOWN并且调用bond_set_slave_inactive_flags设置网卡的活动状态为BOND_STATE_BACKUP，并且设置IFF_NOARP标志位，设置curr_active_slave为NULL。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;检查curr_active_slave，如果curr_active_slave不为NULL：
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果curr_active_slave在2*delta_in_ticks内没有发送也没有接收过数据包，就把curr_active_slave的链路状态设置为BOND_LINK_DOWN并且调用bond_select_active_slave寻找一个新的网卡作为新的curr_active_slave，设置current_arp_slave为curr_active_slave。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果使用bond-&gt;primary_slave并且bond-&gt;primary_slave的链路状态是BOND_LINK_UP且bond-&gt;primary_slave不是curr_active_slave，就把bond-&gt;primary_slave作为新的curr_active_slave。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;否则设置current_arp_slave为NULL；&lt;/li&gt;
</span><span class='line'>&lt;li&gt;调用bond_arp_send_all通过curr_active_slave发送ARP请求。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>&lt;/li&gt;
</span><span class='line'>&lt;li&gt;检查curr_active_slave，如果curr_active_slave为NULL，则从current_arp_slave 开始或者从first_slave开始选出一个网卡并且把链路状态设置为BOND_LINK_BACK的作为 curr_active_slave的候选者（包存在current_arp_slave中），在下一次lbond_activebackup_arp_mon 被调用的时候将把这个网卡设置为curr_active_slave。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置定时器的超时值为jiffies+delta_in_ticks。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;3. slave切换&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bond_find_best_slave&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static struct slave *bond_find_best_slave(struct bonding *bond)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数从被绑定网卡中选出最佳者作为curr_active_slave的候选，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果没有物理网卡被绑定，返回NULL。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果没有设置primary_slave或者primary_slave不可用，从first_slave开始，否则从primary_slave开始遍历被绑定物理网卡列表，如果有网卡的链路状态为BOND_LINK_UP，则返回这个物理网卡。如果没有链路状态为BOND_LINK_UP的网卡，返回处于BOND_LINK_BACK状态最久者（delay值最小）。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h6&gt;bond_change_active_slave&lt;/h6&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;原型：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>static void bond_change_active_slave(struct bonding *bond, struct slave *new_active)
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该函数切换new_active为新的curr_active_slave，主要做如下操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;如果curr_active_slave和new_active相同，不做任何操作。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果new_active的链路状态是BOND_LINK_BACK，把链路状态设为BOND_LINK_UP。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;如果当前工作在BOND_MODE_ACTIVEBACKUP状态，把curr_active_slave的活动状态设置为BOND_STATE_BACKUP，并且设置IFF_NOARP标志位；把new_active的活动状态设置为BOND_STATE_ACTIVE，清除IFF_NOARP标志位。&lt;/li&gt;
</span><span class='line'>&lt;li&gt;设置curr_active_slave为new_active。&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;6. 参考&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;[1]《Linux 多网卡绑定/负载均衡调研报告》&lt;/li&gt;
</span><span class='line'>&lt;li&gt;[2]《Linux Ethernet Bonding Driver mini-howto》/src/net/Documentation/networking/bonding.txt&lt;/li&gt;
</span><span class='line'>&lt;li&gt;[3]《The Linux® Networking Architecture: Design and Implementation of Network Protocols in the Linux Kernel》Klaus Wehrle&lt;/li&gt;
</span><span class='line'>&lt;li&gt;[4]《Understanding Linux Network_Internals》Christian Benvenuti&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[七种网卡绑定模式详解]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding/"/&gt;
</span><span class='line'>&lt;updated&gt;2016-03-09T09:50:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2016/03/09/kernel-net-bonding&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;按ip+port哈希可能会比较好
</span><span class='line'>&lt;code&gt;
</span><span class='line'>mode=2 miimon=100 xmit_hash_policy=1
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://blog.csdn.net/wuweilong/article/details/39720571"&gt;http://blog.csdn.net/wuweilong/article/details/39720571&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;概览：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;目前网卡绑定mode共有七种(0~6)mode=0、mode=1、mode=2、mode=3、mode=4、mode=5、mode=6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;说明:&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;需要说明的是如果想做成mode 0的负载均衡,仅仅设置这里optionsbond0 miimon=100 mode=0是不够的,与网卡相连的交换机必须做特殊配置（这两个端口应该采取聚合方式），因为做bonding的这两块网卡是使用同一个MAC地址.从原理分析一下（bond运行在mode0下）：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mode 0下bond所绑定的网卡的IP都被修改成相同的mac地址，如果这些网卡都被接在同一个交换机，那么交换机的arp表里这个mac地址对应的端口就有多 个，那么交换机接受到发往这个mac地址的包应该往哪个端口转发呢？正常情况下mac地址是全球唯一的，一个mac地址对应多个端口肯定使交换机迷惑了。所以 mode0下的bond如果连接到交换机，交换机这几个端口应该采取聚合方式（cisco称为 ethernetchannel，foundry称为portgroup），因为交换机做了聚合后，聚合下的几个端口也被捆绑成一个mac地址.我们的解 决办法是，两个网卡接入不同的交换机即可。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mode6模式下无需配置交换机，因为做bonding的这两块网卡是使用不同的MAC地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;七种bond模式说明：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第一种模式：mode=0 ，即：(balance-rr)Round-robin policy（平衡抡循环策略）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第二种模式：mode=1，即： (active-backup)Active-backup policy（主-备份策略）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有 N 个网络接口的情况下，资源利用率为1/N&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第三种模式：mode=2，即：(balance-xor)XOR policy（平衡策略）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址)% slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第四种模式：mode=3，即：broadcast（广播策略）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：在每个slave接口上传输每个数据包，此模式提供了容错能力&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第五种模式：mode=4，即：(802.3ad)IEEE 802.3ad Dynamic link aggregation（IEEE802.3ad 动态链接聚合）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的 是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应 性。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;必要条件：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;条件1：ethtool支持获取每个slave的速率和双工设定&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;条件2：switch(交换机)支持IEEE802.3ad Dynamic link aggregation&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第六种模式：mode=5，即：(balance-tlb)Adaptive transmit load balancing（适配器传输负载均衡）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该模式的必要条件：ethtool支持获取每个slave的速率&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;第七种模式：mode=6，即：(balance-alb)Adaptive load balancing（适配器适应性负载均衡）&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;特点：该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receiveload balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播 ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新（ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（roundrobin）在bond中最高速的slave上当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答 不会被switch(交换机)阻截。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;必要条件：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;条件1：ethtool支持获取每个slave的速率；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个 bond 中的slave都有一个唯一的硬件地址。如果curr_active_slave出故障，它的硬件地址将会被新选出来的 curr_active_slave接管其实mod=6与mod=0的区别：mod=6，先把eth0流量占满，再占eth1，….ethX；而mod=0的话，会发现2个口的流量都很稳定，基本一样的带宽。而mod=6，会发现第一个口流量很高，第2个口只占了小部分流量&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Linux网口绑定：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;通过网口绑定(bond)技术,可以很容易实现网口冗余，负载均衡，从而达到高可用高可靠的目的。前提约定：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2个物理网口分别是：eth0,eth1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;绑定后的虚拟口是：bond0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;服务器IP是：10.10.10.1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;第一步，配置设定文件：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    [root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-bond0
</span><span class='line'>DEVICE=bond0
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>ONBOOT=yes
</span><span class='line'>IPADDR=10.10.10.1
</span><span class='line'>NETMASK=255.255.255.0
</span><span class='line'>NETWORK=192.168.0.0
</span><span class='line'>
</span><span class='line'>[root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-eth0
</span><span class='line'>DEVICE=eth0
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>MASTER=bond0
</span><span class='line'>SLAVE=yes
</span><span class='line'>
</span><span class='line'>[root@woo ~]# vi  /etc/sysconfig/network-scripts/ifcfg-eth1
</span><span class='line'>DEVICE=eth1
</span><span class='line'>BOOTPROTO=none
</span><span class='line'>MASTER=bond0
</span><span class='line'>SLAVE=yes
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;第二步，修改modprobe相关设定文件，并加载bonding模块：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1.在这里，我们直接创建一个加载bonding的专属设定文件/etc/modprobe.d/bonding.conf
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[root@woo ~]# vi /etc/modprobe.d/bonding.conf
</span><span class='line'>alias bond0 bonding
</span><span class='line'>options bonding mode=0 miimon=200
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>2.加载模块(重启系统后就不用手动再加载了)
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[root@woo ~]# modprobe bonding
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>3.确认模块是否加载成功：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[root@woo ~]# lsmod | grep bonding
</span><span class='line'>bonding 100065 0
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;第三步，重启一下网络，然后确认一下状况：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    [root@db01 ~]# service network restart
</span><span class='line'>Shutting down interface bond0:  [  OK  ]
</span><span class='line'>Shutting down loopback interface:  [  OK  ]
</span><span class='line'>Bringing up loopback interface:  [  OK  ]
</span><span class='line'>Bringing up interface bond0:  [  OK  ]
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    [root@db01 ~]#  cat /proc/net/bonding/bond0
</span><span class='line'>Ethernet Channel Bonding Driver: v3.4.0-1 (October 7, 2008)
</span><span class='line'>
</span><span class='line'>Bonding Mode: fault-tolerance (active-backup)
</span><span class='line'>Primary Slave: None
</span><span class='line'>Currently Active Slave: eth0
</span><span class='line'>MII Status: up
</span><span class='line'>MII Polling Interval (ms): 100
</span><span class='line'>Up Delay (ms): 0
</span><span class='line'>Down Delay (ms): 0
</span><span class='line'>
</span><span class='line'>Slave Interface: eth0
</span><span class='line'>MII Status: up
</span><span class='line'>Speed: 1000 Mbps
</span><span class='line'>Duplex: full
</span><span class='line'>Link Failure Count: 0
</span><span class='line'>Permanent HW addr: 40:f2:e9:db:c9:c2
</span><span class='line'>
</span><span class='line'>Slave Interface: eth1
</span><span class='line'>MII Status: up
</span><span class='line'>Speed: 1000 Mbps
</span><span class='line'>Duplex: full
</span><span class='line'>Link Failure Count: 0
</span><span class='line'>Permanent HW addr: 40:f2:e9:db:c9:c3
</span><span class='line'>[root@db01 ~]#  ifconfig | grep HWaddr
</span><span class='line'>bond0     Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2
</span><span class='line'>eth0      Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2
</span><span class='line'>eth1      Link encap:Ethernet  HWaddr 40:F2:E9:DB:C9:C2
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从上面的确认信息中，我们可以看到3个重要信息：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1.现在的bonding模式是active-backup&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2.现在Active状态的网口是eth0&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;3.bond0,eth1的物理地址和处于active状态下的eth0的物理地址相同，这样是为了避免上位交换机发生混乱。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;任意拔掉一根网线，然后再访问你的服务器，看网络是否还是通的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;第四步(一般不需要)，系统启动自动绑定、增加默认网关：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    [root@woo ~]# vi /etc/rc.d/rc.local
</span><span class='line'>#追加
</span><span class='line'>ifenslave bond0 eth0 eth1
</span><span class='line'>route add default gw 10.10.10.1
</span><span class='line'>#如可上网就不用增加路由，0.1地址按环境修改.
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;留心：前面只是2个网口绑定成一个bond0的情况，如果我们要设置多个bond口，比如物理网口eth0和eth1组成bond0，eth2和eth3组成bond1，&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;多网口绑定：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;那么网口设置文件的设置方法和上面第1步讲的方法相同，只是/etc/modprobe.d/bonding.conf的设定就不能像下面这样简单的叠加了：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    alias bond0 bonding
</span><span class='line'>options bonding mode=1 miimon=200
</span><span class='line'>
</span><span class='line'>alias bond1 bonding
</span><span class='line'>options bonding mode=1 miimon=200
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;正确的设置方法有2种：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第一种,你可以看到，这种方式的话，多个bond口的模式就只能设成相同的了：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    alias bond0 bonding
</span><span class='line'>alias bond1 bonding
</span><span class='line'>options bonding max_bonds=2 miimon=200 mode=1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第二种，这种方式，不同的bond口的mode可以设成不一样：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    alias bond0 bonding
</span><span class='line'>options bond0 miimon=100 mode=1
</span><span class='line'>install bond1 /sbin/modprobe bonding -o bond1 miimon=200 mode=0
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;仔细看看上面这2种设置方法，现在如果是要设置3个，4个，甚至更多的bond口，你应该也会了吧！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;后记：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;简单的介绍一下上面在加载bonding模块的时候，options里的一些参数的含义：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;miimon 监视网络链接的频度，单位是毫秒，我们设置的是200毫秒。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;max_bonds 配置的bond口个数&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mode bond模式，主要有以下几种，在一般的实际应用中，0和1用的比较多。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[socket建立连接 sys_connect]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect/"/&gt;
</span><span class='line'>&lt;updated&gt;2016-02-29T22:52:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2016/02/29/kernel-net-connect&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/chensichensi/article/details/5272346"&gt;http://blog.csdn.net/chensichensi/article/details/5272346&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://blog.csdn.net/qy532846454/article/details/7882819"&gt;http://blog.csdn.net/qy532846454/article/details/7882819&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="http://www.2cto.com/kf/201303/198459.html"&gt;http://www.2cto.com/kf/201303/198459.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    connect(fd, servaddr, addrlen);
</span><span class='line'>-&gt; SYSCALL_DEFINE3()
</span><span class='line'>-&gt; sock-&gt;ops-&gt;connect() == inet_stream_connect (sock-&gt;ops即inet_stream_ops)
</span><span class='line'>-&gt; tcp_v4_connect()
</span><span class='line'>    -&gt; inet_hash_connect()
</span><span class='line'>        -&gt; __inet_hash_connect()
</span><span class='line'>            -&gt; check_established()
</span><span class='line'>                -&gt; __inet_check_established()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
</span><span class='line'>        int, addrlen)
</span><span class='line'>{
</span><span class='line'>    struct socket *sock;
</span><span class='line'>    struct sockaddr_storage address;
</span><span class='line'>    int err, fput_needed;
</span><span class='line'>    /* 找到文件描述符对应的BSD socket结构，在前面的socket调用中建立*/
</span><span class='line'>    sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);
</span><span class='line'>    if (!sock)
</span><span class='line'>        goto out;
</span><span class='line'>    /* copy对端的地址到内核空间 */
</span><span class='line'>    err = move_addr_to_kernel(uservaddr, addrlen, (struct sockaddr *)&amp;address);
</span><span class='line'>    if (err &lt; 0)
</span><span class='line'>        goto out_put;
</span><span class='line'>
</span><span class='line'>    err =
</span><span class='line'>        security_socket_connect(sock, (struct sockaddr *)&amp;address, addrlen);
</span><span class='line'>    if (err)
</span><span class='line'>        goto out_put;
</span><span class='line'>    /* 调用该BSD socket对应的connect调用 */
</span><span class='line'>    err = sock-&gt;ops-&gt;connect(sock, (struct sockaddr *)&amp;address, addrlen,
</span><span class='line'>                 sock-&gt;file-&gt;f_flags);
</span><span class='line'>out_put:
</span><span class='line'>    /* 释放文件的引用 */
</span><span class='line'>    fput_light(sock-&gt;file, fput_needed);
</span><span class='line'>out:
</span><span class='line'>    return err;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /*
</span><span class='line'> *  Connect to a remote host. There is regrettably still a little
</span><span class='line'> *  TCP 'magic' in here.
</span><span class='line'> */
</span><span class='line'>int inet_stream_connect(struct socket *sock, struct sockaddr *uaddr,
</span><span class='line'>            int addr_len, int flags)
</span><span class='line'>{
</span><span class='line'>    struct sock *sk = sock-&gt;sk;
</span><span class='line'>    int err;
</span><span class='line'>    long timeo;
</span><span class='line'>
</span><span class='line'>    lock_sock(sk);
</span><span class='line'>
</span><span class='line'>    if (uaddr-&gt;sa_family == AF_UNSPEC) {
</span><span class='line'>        err = sk-&gt;sk_prot-&gt;disconnect(sk, flags);
</span><span class='line'>        sock-&gt;state = err ? SS_DISCONNECTING : SS_UNCONNECTED;
</span><span class='line'>        goto out;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    switch (sock-&gt;state) {
</span><span class='line'>    default:
</span><span class='line'>        err = -EINVAL;
</span><span class='line'>        goto out;
</span><span class='line'>    case SS_CONNECTED:     /* 该BSD socket已连接*/
</span><span class='line'>        err = -EISCONN;
</span><span class='line'>        goto out;
</span><span class='line'>    case SS_CONNECTING:   /* 该BSD socket正在连接*/
</span><span class='line'>        err = -EALREADY;
</span><span class='line'>        /* Fall out of switch with err, set for this state */
</span><span class='line'>        break;
</span><span class='line'>    case SS_UNCONNECTED:
</span><span class='line'>        err = -EISCONN;
</span><span class='line'>        if (sk-&gt;sk_state != TCP_CLOSE)
</span><span class='line'>            goto out;
</span><span class='line'>            /* INET SOCKET 调用协议特有connect操作符 */
</span><span class='line'>        err = sk-&gt;sk_prot-&gt;connect(sk, uaddr, addr_len);
</span><span class='line'>        if (err &lt; 0)
</span><span class='line'>            goto out;
</span><span class='line'>            /* 上面的调用完成后，连接并没有完成，*/
</span><span class='line'>        sock-&gt;state = SS_CONNECTING;
</span><span class='line'>
</span><span class='line'>        /* Just entered SS_CONNECTING state; the only
</span><span class='line'>         * difference is that return value in non-blocking
</span><span class='line'>         * case is EINPROGRESS, rather than EALREADY.
</span><span class='line'>         */
</span><span class='line'>        err = -EINPROGRESS;
</span><span class='line'>        break;
</span><span class='line'>    }
</span><span class='line'>    /* 获取连接超时时间*/
</span><span class='line'>    timeo = sock_sndtimeo(sk, flags &amp; O_NONBLOCK);
</span><span class='line'>
</span><span class='line'>    if ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
</span><span class='line'>        /* Error code is set above 进入定时等待 */
</span><span class='line'>        if (!timeo || !inet_wait_for_connect(sk, timeo))
</span><span class='line'>            goto out;
</span><span class='line'>
</span><span class='line'>        err = sock_intr_errno(timeo);
</span><span class='line'>        if (signal_pending(current))
</span><span class='line'>            goto out;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /* Connection was closed by RST, timeout, ICMP error
</span><span class='line'>     * or another process disconnected us.
</span><span class='line'>     */
</span><span class='line'>    if (sk-&gt;sk_state == TCP_CLOSE)
</span><span class='line'>        goto sock_error;
</span><span class='line'>
</span><span class='line'>    /* sk-&gt;sk_err may be not zero now, if RECVERR was ordered by user
</span><span class='line'>     * and error was received after socket entered established state.
</span><span class='line'>     * Hence, it is handled normally after connect() return successfully.
</span><span class='line'>     */
</span><span class='line'>
</span><span class='line'>    sock-&gt;state = SS_CONNECTED;
</span><span class='line'>    err = 0;
</span><span class='line'>out:
</span><span class='line'>    release_sock(sk);
</span><span class='line'>    return err;
</span><span class='line'>
</span><span class='line'>sock_error:
</span><span class='line'>    err = sock_error(sk) ? : -ECONNABORTED;
</span><span class='line'>    sock-&gt;state = SS_UNCONNECTED;
</span><span class='line'>    if (sk-&gt;sk_prot-&gt;disconnect(sk, flags))
</span><span class='line'>        sock-&gt;state = SS_DISCONNECTING;
</span><span class='line'>    goto out;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* This will initiate an outgoing connection. */
</span><span class='line'>int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
</span><span class='line'>{
</span><span class='line'>    struct inet_sock *inet = inet_sk(sk);
</span><span class='line'>    struct tcp_sock *tp = tcp_sk(sk);
</span><span class='line'>    struct sockaddr_in *usin = (struct sockaddr_in *)uaddr;
</span><span class='line'>    struct rtable *rt;
</span><span class='line'>    __be32 daddr, nexthop;
</span><span class='line'>    int tmp;
</span><span class='line'>    int err;
</span><span class='line'>
</span><span class='line'>    if (addr_len &lt; sizeof(struct sockaddr_in))
</span><span class='line'>        return -EINVAL;
</span><span class='line'>
</span><span class='line'>    if (usin-&gt;sin_family != AF_INET)
</span><span class='line'>        return -EAFNOSUPPORT;
</span><span class='line'>    /* 开始准备路由 */
</span><span class='line'>    nexthop = daddr = usin-&gt;sin_addr.s_addr;
</span><span class='line'>    if (inet-&gt;opt &amp;&amp; inet-&gt;opt-&gt;srr) {
</span><span class='line'>        if (!daddr)
</span><span class='line'>            return -EINVAL;
</span><span class='line'>        nexthop = inet-&gt;opt-&gt;faddr;
</span><span class='line'>    }
</span><span class='line'>    /* 调用路由模块获取出口信息，这里不深入 */
</span><span class='line'>    tmp = ip_route_connect(&amp;rt, nexthop, inet-&gt;saddr,
</span><span class='line'>                   RT_CONN_FLAGS(sk), sk-&gt;sk_bound_dev_if,
</span><span class='line'>                   IPPROTO_TCP,
</span><span class='line'>                   inet-&gt;sport, usin-&gt;sin_port, sk, 1);
</span><span class='line'>    if (tmp &lt; 0) {
</span><span class='line'>        if (tmp == -ENETUNREACH)
</span><span class='line'>            IP_INC_STATS_BH(sock_net(sk), IPSTATS_MIB_OUTNOROUTES);
</span><span class='line'>        return tmp;
</span><span class='line'>    }
</span><span class='line'>    /* 如果获取的路由是广播或多播域， 返回网络不可达，tcp不支持多播与广播 */
</span><span class='line'>    if (rt-&gt;rt_flags &amp; (RTCF_MULTICAST | RTCF_BROADCAST)) {
</span><span class='line'>        ip_rt_put(rt);
</span><span class='line'>        return -ENETUNREACH;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (!inet-&gt;opt || !inet-&gt;opt-&gt;srr)
</span><span class='line'>        daddr = rt-&gt;rt_dst;
</span><span class='line'>
</span><span class='line'>    if (!inet-&gt;saddr)
</span><span class='line'>        inet-&gt;saddr = rt-&gt;rt_src;
</span><span class='line'>    inet-&gt;rcv_saddr = inet-&gt;saddr;
</span><span class='line'>
</span><span class='line'>    if (tp-&gt;rx_opt.ts_recent_stamp &amp;&amp; inet-&gt;daddr != daddr) {
</span><span class='line'>        /* Reset inherited state */
</span><span class='line'>        tp-&gt;rx_opt.ts_recent       = 0;
</span><span class='line'>        tp-&gt;rx_opt.ts_recent_stamp = 0;
</span><span class='line'>        tp-&gt;write_seq          = 0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (tcp_death_row.sysctl_tw_recycle &amp;&amp;
</span><span class='line'>        !tp-&gt;rx_opt.ts_recent_stamp &amp;&amp; rt-&gt;rt_dst == daddr) {
</span><span class='line'>        struct inet_peer *peer = rt_get_peer(rt);
</span><span class='line'>        /*
</span><span class='line'>         * VJ's idea. We save last timestamp seen from
</span><span class='line'>         * the destination in peer table, when entering state
</span><span class='line'>         * TIME-WAIT * and initialize rx_opt.ts_recent from it,
</span><span class='line'>         * when trying new connection.
</span><span class='line'>         */
</span><span class='line'>        if (peer != NULL &amp;&amp;
</span><span class='line'>            peer-&gt;tcp_ts_stamp + TCP_PAWS_MSL &gt;= get_seconds()) {
</span><span class='line'>            tp-&gt;rx_opt.ts_recent_stamp = peer-&gt;tcp_ts_stamp;
</span><span class='line'>            tp-&gt;rx_opt.ts_recent = peer-&gt;tcp_ts;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    inet-&gt;dport = usin-&gt;sin_port;
</span><span class='line'>    inet-&gt;daddr = daddr;
</span><span class='line'>
</span><span class='line'>    inet_csk(sk)-&gt;icsk_ext_hdr_len = 0;
</span><span class='line'>    if (inet-&gt;opt)
</span><span class='line'>        inet_csk(sk)-&gt;icsk_ext_hdr_len = inet-&gt;opt-&gt;optlen;
</span><span class='line'>    /* mss_clamp */
</span><span class='line'>    tp-&gt;rx_opt.mss_clamp = 536;
</span><span class='line'>
</span><span class='line'>    /* Socket identity is still unknown (sport may be zero).
</span><span class='line'>     * However we set state to SYN-SENT and not releasing socket
</span><span class='line'>     * lock select source port, enter ourselves into the hash tables and
</span><span class='line'>     * complete initialization after this.
</span><span class='line'>     */
</span><span class='line'>    tcp_set_state(sk, TCP_SYN_SENT);
</span><span class='line'>    err = inet_hash_connect(&amp;tcp_death_row, sk);
</span><span class='line'>    if (err)
</span><span class='line'>        goto failure;
</span><span class='line'>
</span><span class='line'>    err = ip_route_newports(&amp;rt, IPPROTO_TCP,
</span><span class='line'>                inet-&gt;sport, inet-&gt;dport, sk);
</span><span class='line'>    if (err)
</span><span class='line'>        goto failure;
</span><span class='line'>
</span><span class='line'>    /* OK, now commit destination to socket.  */
</span><span class='line'>    sk-&gt;sk_gso_type = SKB_GSO_TCPV4;
</span><span class='line'>    sk_setup_caps(sk, &amp;rt-&gt;u.dst);
</span><span class='line'>
</span><span class='line'>    if (!tp-&gt;write_seq)
</span><span class='line'>        tp-&gt;write_seq = secure_tcp_sequence_number(inet-&gt;saddr,
</span><span class='line'>                               inet-&gt;daddr,
</span><span class='line'>                               inet-&gt;sport,
</span><span class='line'>                               usin-&gt;sin_port);
</span><span class='line'>    /* id是IP包头的id域 */
</span><span class='line'>    inet-&gt;id = tp-&gt;write_seq ^ jiffies;
</span><span class='line'>
</span><span class='line'>    err = tcp_connect(sk);
</span><span class='line'>    rt = NULL;
</span><span class='line'>    if (err)
</span><span class='line'>        goto failure;
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>
</span><span class='line'>failure:
</span><span class='line'>    /*
</span><span class='line'>     * This unhashes the socket and releases the local port,
</span><span class='line'>     * if necessary.
</span><span class='line'>     */
</span><span class='line'>    tcp_set_state(sk, TCP_CLOSE);
</span><span class='line'>    ip_rt_put(rt);
</span><span class='line'>    sk-&gt;sk_route_caps = 0;
</span><span class='line'>    inet-&gt;dport = 0;
</span><span class='line'>    return err;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;当snum==0时，表明此时源端口没有指定，此时会随机选择一个空闲端口作为此次连接的源端口。low和high分别表示可用端口的下限和上限，remaining表示可用端口的数，注意这里的可用只是指端口可以用作源端口，其中部分端口可能已经作为其它socket的端口号在使用了，所以要循环1~remaining，直到查找到空闲的源端口。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面来看下对每个端口的检查，即//choose a valid port部分的代码。这里要先了解下tcp的内核表组成，udp的表内核表udptable只是一张hash表，tcp的表则稍复杂，它的名字是tcp_hashinfo，在tcp_init()中被初始化，这个数据结构定义如下(省略了不相关的数据)：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    struct inet_hashinfo {
</span><span class='line'>    struct inet_ehash_bucket *ehash;
</span><span class='line'>    ……
</span><span class='line'>    struct inet_bind_hashbucket *bhash;
</span><span class='line'>    ……
</span><span class='line'>    struct inet_listen_hashbucket  listening_hash[INET_LHTABLE_SIZE]
</span><span class='line'>                    ____cacheline_aligned_in_smp;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;从定义可以看出，tcp表又分成了三张表ehash, bhash, listening_hash，其中ehash, listening_hash对应于socket处在TCP的ESTABLISHED, LISTEN状态，bhash对应于socket已绑定了本地地址。三者间并不互斥，如一个socket可同时在bhash和ehash中，由于TIME_WAIT是一个比较特殊的状态，所以ehash又分成了chain和twchain，为TIME_WAIT的socket单独形成一张表。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;回到刚才的代码，现在还只是建立socket连接，使用的就应该是tcp表中的bhash。首先取得内核tcp表的bind表 – bhash，查看是否已有socket占用：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果没有，则调用inet_bind_bucket_create()创建一个bind表项tb，并插入到bind表中，跳转至goto ok代码段；
</span><span class='line'>如果有，则跳转至goto ok代码段。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;进入ok代码段表明已找到合适的bind表项(无论是创建的还是查找到的)，调用inet_bind_hash()赋值源端口inet_num。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;inet_hash_connect()函数只是对&lt;code&gt;__inet_hash_connect()&lt;/code&gt;函数进行了简单的封装。在&lt;code&gt;__inet_hash_connect()&lt;/code&gt;中如果已绑定了端口号，并且是和其他传输控制块共享绑定的端口号，则会调用check_established参数指向的函数来检查这个绑定的端口号是否可用，代码如下所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    int __inet_hash_connect(struct inet_timewait_death_row *death_row,
</span><span class='line'>        struct sock *sk, u32 port_offset,
</span><span class='line'>        int (*check_established)(struct inet_timewait_death_row *,
</span><span class='line'>        struct sock *, __u16, struct inet_timewait_sock **),
</span><span class='line'>        void (*hash)(struct sock *sk))
</span><span class='line'>{
</span><span class='line'>    struct inet_hashinfo *hinfo = death_row-&gt;hashinfo;
</span><span class='line'>    const unsigned short snum = inet_sk(sk)-&gt;num;
</span><span class='line'>    struct inet_bind_hashbucket *head;
</span><span class='line'>    struct inet_bind_bucket *tb;
</span><span class='line'>    int ret;
</span><span class='line'>    struct net *net = sock_net(sk);
</span><span class='line'>
</span><span class='line'>    if (!snum) {
</span><span class='line'>        int i, remaining, low, high, port;
</span><span class='line'>        static u32 hint;
</span><span class='line'>        u32 offset = hint + port_offset;
</span><span class='line'>        struct hlist_node *node;
</span><span class='line'>        struct inet_timewait_sock *tw = NULL;
</span><span class='line'>
</span><span class='line'>        inet_get_local_port_range(&amp;low, &amp;high);
</span><span class='line'>        remaining = (high - low) + 1;
</span><span class='line'>
</span><span class='line'>        local_bh_enable();
</span><span class='line'>        for (i = 1; i &lt;= remaining; i++) {
</span><span class='line'>            port = low + (i + offset) % remaining;
</span><span class='line'>            if (inet_is_reserved_local_port(port)
</span><span class='line'>                continue;
</span><span class='line'>            head = &amp;hinfo-&gt;bhash[inet_bhashfn(net, port, hinfo-&gt;bhash_size)];
</span><span class='line'>            spin_lock(&amp;head-&gt;lock);
</span><span class='line'>            inet_bind_bucket_for_each(tb, node, &amp;head-&gt;chain) {
</span><span class='line'>                if (net_eq(ib_net(tb), net) &amp;&amp; tb-&gt;port == port) {
</span><span class='line'>                    if (tb-&gt;fastreuse &gt;= 0)
</span><span class='line'>                        goto next_port;
</span><span class='line'>                    WARN_ON(hlist_empty(&amp;tb-&gt;owners));
</span><span class='line'>                    if (!check_established(death_row, sk, port, &amp;tw))
</span><span class='line'>                        goto ok;
</span><span class='line'>                    goto next_port;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            tb = inet_bind_bucket_create(hinfo-&gt;bind_bucket_cachep, net, head, port);
</span><span class='line'>            if (!tb) {
</span><span class='line'>                spin_unlock(&amp;head-&gt;lock);
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>            tb-&gt;fastreuse = -1;
</span><span class='line'>            tb-&gt;fastreuseport = -1;
</span><span class='line'>            goto ok;
</span><span class='line'>        next_port:
</span><span class='line'>            spin_unlock(&amp;head-&gt;lock);
</span><span class='line'>        }
</span><span class='line'>        local_bh_enable();
</span><span class='line'>
</span><span class='line'>        return -EADDRNOTAVAIL;
</span><span class='line'>
</span><span class='line'>ok:
</span><span class='line'>        hint += i;
</span><span class='line'>
</span><span class='line'>        inet_bind_hash(sk, tb, port);
</span><span class='line'>        if (sk_unhashed(sk)) {
</span><span class='line'>            inet_sk(sk)-&gt;sport = htons(port);
</span><span class='line'>            hash(sk);
</span><span class='line'>        }
</span><span class='line'>        spin_unlock(&amp;head-&gt;lock);
</span><span class='line'>        if (tw) {
</span><span class='line'>            inet_twsk_deschedule(tw, death_row);
</span><span class='line'>            inet_twsk_put(tw);
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        ret = 0;
</span><span class='line'>        goto out;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    head = &amp;hinfo-&gt;bhash[inet_bhashfn(net, snum, hinfo-&gt;bhash_size)];
</span><span class='line'>    tb  = inet_csk(sk)-&gt;icsk_bind_hash;
</span><span class='line'>    spin_lock_bh(&amp;head-&gt;lock);
</span><span class='line'>    if (sk_head(&amp;tb-&gt;owners) == sk &amp;&amp; !sk-&gt;sk_bind_node.next) {
</span><span class='line'>        hash(sk);
</span><span class='line'>        spin_unlock_bh(&amp;head-&gt;lock);
</span><span class='line'>        return 0;
</span><span class='line'>    } else {
</span><span class='line'>        spin_unlock(&amp;head-&gt;lock);
</span><span class='line'>        /* No definite answer... Walk to established hash table */
</span><span class='line'>        ret = check_established(death_row, sk, snum, NULL);
</span><span class='line'>out:
</span><span class='line'>        local_bh_enable();
</span><span class='line'>        return ret;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;(sk_head(&amp;tb-&gt;owners) == sk &amp;&amp; !sk-&gt;sk_bind_node.next)这个判断条件就是用来判断是不是只有当前传输控制块在使用已绑定的端口，条件为false时，会执行else分支，检查是否可用。这么看来，调用bind()成功并不意味着这个端口就真的可以用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;check_established参数对应的函数是&lt;code&gt;__inet_check_established()&lt;/code&gt;，在inet_hash_connect()中可以看到。在上面的代码中我们还注意到调用check_established()时第三个参数为NULL，这在后面的分析中会用到。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;__inet_check_established()&lt;/code&gt;函数中，会分别在TIME_WAIT传输控制块和除TIME_WIAT、LISTEN状态外的传输控制块中查找是已绑定的端口是否已经使用，代码片段如下所示：</span></code></pre></td></tr></table></div></figure>
    /<em> called with local bh disabled </em>/
    static int <strong>inet_check_established(struct inet_timewait_death_row <em>death_row,
                struct sock </em>sk, </strong>u16 lport,
                struct inet_timewait_sock <em><em>twp)
    {
        struct inet_hashinfo </em>hinfo = death_row->hashinfo;
        struct inet_sock </em>inet = inet_sk(sk);
        <strong>be32 daddr = inet->rcv_saddr;
        </strong>be32 saddr = inet->daddr;
        int dif = sk->sk_bound_dev_if;
        INET_ADDR_COOKIE(acookie, saddr, daddr)
        const __portpair ports = INET_COMBINED_PORTS(inet->dport, lport);
        struct net <em>net = sock_net(sk);
        unsigned int hash = inet_ehashfn(net, daddr, lport, saddr, inet->dport);
        struct inet_ehash_bucket </em>head = inet_ehash_bucket(hinfo, hash);
        spinlock_t <em>lock = inet_ehash_lockp(hinfo, hash);
        struct sock </em>sk2;
        const struct hlist_nulls_node <em>node;
        struct inet_timewait_sock </em>tw;</p>

<pre><code>    spin_lock(lock);

    /* Check TIME-WAIT sockets first. */
    sk_nulls_for_each(sk2, node, &amp;head-&gt;twchain) {
        tw = inet_twsk(sk2);


        if (INET_TW_MATCH(sk2, net, hash, acookie,
                saddr, daddr, ports, dif)) {
            if (twsk_unique(sk, sk2, twp))
                goto unique;
            else
                goto not_unique;
        }
    }
    tw = NULL;

    /* And established part... */
    sk_nulls_for_each(sk2, node, &amp;head-&gt;chain) {
        if (INET_MATCH(sk2, net, hash, acookie,
                saddr, daddr, ports, dif))
            goto not_unique;
    }

unique:
    ......
    return 0;

not_unique:
    spin_unlock(lock);
    return -EADDRNOTAVAIL;
}
</code></pre>

<pre><code>
如果是TCP套接字，twsk_uniqueue()中会调用tcp_twsk_uniqueue()来判断，返回true的条件如下所示：
</code></pre>

<pre><code>int tcp_twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
{
    const struct tcp_timewait_sock *tcptw = tcp_twsk(sktw);
    struct tcp_sock *tp = tcp_sk(sk);

    if (tcptw-&gt;tw_ts_recent_stamp &amp;&amp;
            (twp == NULL || (sysctl_tcp_tw_reuse &amp;&amp;
            get_seconds() - tcptw-&gt;tw_ts_recent_stamp &gt; 1))) {
        ......
        return 1;
    }

    return 0;
}
</code></pre>

<pre><code></code></pre>

<pre><code>/*
 * Build a SYN and send it off.
 */
int tcp_connect(struct sock *sk)
{
    struct tcp_sock *tp = tcp_sk(sk);
    struct sk_buff *buff;
    /* 初始化连接对应的INET socket结构的参数，为连接做准备 */
    tcp_connect_init(sk);
    /* 获取一个skb，由于是syn包，没有数据，所以大小是MAX_TCP_HEADER的16位对齐 */
    buff = alloc_skb_fclone(MAX_TCP_HEADER + 15, sk-&gt;sk_allocation);
    if (unlikely(buff == NULL))
        return -ENOBUFS;

    /* Reserve space for headers. */
    skb_reserve(buff, MAX_TCP_HEADER);

    tp-&gt;snd_nxt = tp-&gt;write_seq;
    /* 设置skb相关参数 */
    tcp_init_nondata_skb(buff, tp-&gt;write_seq++, TCPCB_FLAG_SYN);
    /* 设置ECN */
    TCP_ECN_send_syn(sk, buff);

    /* Send it off. */
    /* 保存该数据包的发送时间*/
    TCP_SKB_CB(buff)-&gt;when = tcp_time_stamp;
    tp-&gt;retrans_stamp = TCP_SKB_CB(buff)-&gt;when;
    skb_header_release(buff);
    /* 加入发送队列，待确认后在丢弃*/
    __tcp_add_write_queue_tail(sk, buff);
    sk-&gt;sk_wmem_queued += buff-&gt;truesize;
    sk_mem_charge(sk, buff-&gt;truesize);
    tp-&gt;packets_out += tcp_skb_pcount(buff);
    tcp_transmit_skb(sk, buff, 1, GFP_KERNEL);

    /* We change tp-&gt;snd_nxt after the tcp_transmit_skb() call
     * in order to make this packet get counted in tcpOutSegs.
     */
    tp-&gt;snd_nxt = tp-&gt;write_seq;
    tp-&gt;pushed_seq = tp-&gt;write_seq;
    TCP_INC_STATS(sock_net(sk), TCP_MIB_ACTIVEOPENS);

    /* Timer for repeating the SYN until an answer. */
    inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,
                  inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);
    return 0;
}
</code></pre>

<pre><code></code></pre>

<pre><code>/*
 * Do all connect socket setups that can be done AF independent.
 */
static void tcp_connect_init(struct sock *sk)
{
    struct dst_entry *dst = __sk_dst_get(sk);
    struct tcp_sock *tp = tcp_sk(sk);
    __u8 rcv_wscale;

    /* We'll fix this up when we get a response from the other end.
     * See tcp_input.c:tcp_rcv_state_process case TCP_SYN_SENT.
     */
    tp-&gt;tcp_header_len = sizeof(struct tcphdr) +
        (sysctl_tcp_timestamps ? TCPOLEN_TSTAMP_ALIGNED : 0);

#ifdef CONFIG_TCP_MD5SIG
    if (tp-&gt;af_specific-&gt;md5_lookup(sk, sk) != NULL)
        tp-&gt;tcp_header_len += TCPOLEN_MD5SIG_ALIGNED;
#endif

    /* If user gave his TCP_MAXSEG, record it to clamp */
    if (tp-&gt;rx_opt.user_mss)
        tp-&gt;rx_opt.mss_clamp = tp-&gt;rx_opt.user_mss;
    tp-&gt;max_window = 0;
    /* 初始化MTU probe*/
    tcp_mtup_init(sk);
    /* 设置mss */
    tcp_sync_mss(sk, dst_mtu(dst));

    if (!tp-&gt;window_clamp)
        tp-&gt;window_clamp = dst_metric(dst, RTAX_WINDOW);
    tp-&gt;advmss = dst_metric(dst, RTAX_ADVMSS);
    if (tp-&gt;rx_opt.user_mss &amp;&amp; tp-&gt;rx_opt.user_mss &lt; tp-&gt;advmss)
        tp-&gt;advmss = tp-&gt;rx_opt.user_mss;

    tcp_initialize_rcv_mss(sk);
    /* 根据接收空间大小初始化一个通告窗口 */
    tcp_select_initial_window(tcp_full_space(sk),
                  tp-&gt;advmss - (tp-&gt;rx_opt.ts_recent_stamp ? tp-&gt;tcp_header_len - sizeof(struct tcphdr) : 0),
                  &amp;tp-&gt;rcv_wnd,
                  &amp;tp-&gt;window_clamp,
                  sysctl_tcp_window_scaling,
                  &amp;rcv_wscale);

    tp-&gt;rx_opt.rcv_wscale = rcv_wscale;
    tp-&gt;rcv_ssthresh = tp-&gt;rcv_wnd;

    sk-&gt;sk_err = 0;
    sock_reset_flag(sk, SOCK_DONE);
    tp-&gt;snd_wnd = 0;
    /* 更新一些滑动窗口的成员*/
    tcp_init_wl(tp, tp-&gt;write_seq, 0);
    tp-&gt;snd_una = tp-&gt;write_seq;
    tp-&gt;snd_sml = tp-&gt;write_seq;
    tp-&gt;snd_up = tp-&gt;write_seq;
    tp-&gt;rcv_nxt = 0;
    tp-&gt;rcv_wup = 0;
    tp-&gt;copied_seq = 0;

    inet_csk(sk)-&gt;icsk_rto = TCP_TIMEOUT_INIT;
    inet_csk(sk)-&gt;icsk_retransmits = 0;
    tcp_clear_retrans(tp);
}
</code></pre>

<pre><code>
skb发送后，connect并没有返回，因为此时连接还没有建立，tcp进入等待状态，此时回到前面的inet_stream_connect函数

在发送syn后进入等待状态
</code></pre>

<pre><code>static long inet_wait_for_connect(struct sock *sk, long timeo)
{
    DEFINE_WAIT(wait);
    /* sk_sleep 保存此INET SOCKET的等待队列 */
    prepare_to_wait(sk-&gt;sk_sleep, &amp;wait, TASK_INTERRUPTIBLE);

    /* Basic assumption: if someone sets sk-&gt;sk_err, he _must_
     * change state of the socket from TCP_SYN_*.
     * Connect() does not allow to get error notifications
     * without closing the socket.
     */
    /* 定时等待知道状态变化 */
    while ((1 &lt;&lt; sk-&gt;sk_state) &amp; (TCPF_SYN_SENT | TCPF_SYN_RECV)) {
        release_sock(sk);
        timeo = schedule_timeout(timeo);
        lock_sock(sk);
        if (signal_pending(current) || !timeo)
            break;
        prepare_to_wait(sk-&gt;sk_sleep, &amp;wait, TASK_INTERRUPTIBLE);
    }
    finish_wait(sk-&gt;sk_sleep, &amp;wait);
    return timeo;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[udp checksum]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum/"/>
    <updated>2016-01-21T16:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/01/21/kernel-net-udp-sum</id>
    <content type="html"><![CDATA[<p><a href="http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/">http://wenx05124561.blog.163.com/blog/static/124000805201242032041268/</a></p>

<h4>a. 网卡设备属性</h4>

<pre><code>    #define NETIF_F_IP_CSUM     2   /* 基于IPv4的L4层checksum. */  
    #define NETIF_F_NO_CSUM     4   /* 设备可靠不需要L4层checksum. loopack. */  
    #define NETIF_F_HW_CSUM     8   /* 基于所有协议的L4层checksum*/  
    #define NETIF_F_IPV6_CSUM   16  /* 基于IPv6的L4层checksum*/  
</code></pre>

<p>通过ethtool -k eth0可以查看网卡是否支持硬件checksum，tx-checksumming: on  表明支持发送hardware checksum。</p>

<h4>b. linux UDP checksum数据结构</h4>

<pre><code>    union {
        __wsum  csum;
        struct {
            __u16   csum_start;
            __u16   csum_offset;
        };
    };
</code></pre>

<p>1） skb->csum和skb->ip_summed这两个域也是与4层校验相关的，这两个域的含义依赖于skb表示的是一个输入包还是一个输出包。</p>

<p>2） 当网卡设备能提供硬件checksum并且作为输出包的时候，表示为skb->csum_start和skb->csum_offset</p>

<p>csum_start: Offset from skb->head where checksumming should start</p>

<p>csum_offset: Offset from csum_start where checksum should be stored</p>

<p>当数据包是一个输入包时</p>

<p>skb->ip_summed表示的是四层校验的状态，下面的几个宏定义表示了设备驱动传递给4层的一些信息。</p>

<pre><code>    #define CHECKSUM_NONE 0
    #define CHECKSUM_UNNECESSARY 1
    #define CHECKSUM_COMPLETE 2
</code></pre>

<p>skb->csum:存放硬件或者软件计算的payload的checksum不包括伪头，但是是否有意义由skb->ip_summed的值决定。</p>

<p>CHECKSUM_NONE表示csum域中的校验值是无意义的，需要L4层自己校验payload和伪头。有可能是硬件检验出错或者硬件没有校验功能，协议栈软件更改如pskb_trim_rcsum函数。</p>

<p>CHECKSUM_UNNECESSARY表示网卡或者协议栈已经计算和验证了L4层的头和校验值。也就是计算了tcp udp的伪头。还有一种情况就是回环，因为在回环中错误发生的概率太低了，因此就不需要计算校验来节省cpu事件。</p>

<p>CHECKSUM_COMPLETE表示网卡已经计算了L4层payload的校验，并且csum已经被赋值，此时L4层的接收者只需要加伪头并验证校验结果。</p>

<p>1) 在L4层发现如果udp->check位段被设为0，那么skb->ip_summed直接设为CHECKSUM_UNNECESSARY，放行该报文。</p>

<p>2) 如果skb->ip_summed为CHECKSUM_COMPLETE，则把skb->csum加上伪头进行校验，成功则将skb->ip_summed设为CHECKSUM_UNNECESSARY， 放行该数据包。</p>

<p>3) 通过上述后skb->ip_summed还不是CHECKSUM_UNNECESSARY，那么重新计算伪头赋给skb->csum。</p>

<p>4) 将还不是CHECKSUM_UNNECESSARY的数据报文的payload加上skb->csum进行checksum计算，成功将设为CHECKSUM_UNNECESSARY并放行，失败则丢弃。</p>

<pre><code>    static inline int udp4_csum_init(struct sk_buff *skb, struct udphdr *uh, 
                    int proto)
    {
        const struct iphdr *iph;
        int err; 

        UDP_SKB_CB(skb)-&gt;partial_cov = 0; 
        UDP_SKB_CB(skb)-&gt;cscov = skb-&gt;len;

        if (proto == IPPROTO_UDPLITE) {
            err = udplite_checksum_init(skb, uh); 
            if (err)
                return err; 
        }    

        iph = ip_hdr(skb);
        if (uh-&gt;check == 0) { 
            skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        } else if (skb-&gt;ip_summed == CHECKSUM_COMPLETE) {
            if (!csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len,
                    proto, skb-&gt;csum))
                skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        }    
        if (!skb_csum_unnecessary(skb))
            skb-&gt;csum = csum_tcpudp_nofold(iph-&gt;saddr, iph-&gt;daddr,
                                skb-&gt;len, proto, 0);
        /* Probably, we should checksum udp header (it should be in cache
         * in any case) and data in tiny packets (&lt; rx copybreak).
         */

        return 0;
    }
</code></pre>

<pre><code>    if (udp_lib_checksum_complete(skb))
        goto csum_error;
</code></pre>

<pre><code>    static inline int udp_lib_checksum_complete(struct sk_buff *skb)
    {
        return !skb_csum_unnecessary(skb) &amp;&amp;
            __udp_lib_checksum_complete(skb);
    }

    static inline __sum16 __udp_lib_checksum_complete(struct sk_buff *skb)
    {
        return __skb_checksum_complete_head(skb, UDP_SKB_CB(skb)-&gt;cscov);
    }

    __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len)
    {
        __sum16 sum;

        sum = csum_fold(skb_checksum(skb, 0, len, skb-&gt;csum));
        if (likely(!sum)) {
            if (unlikely(skb-&gt;ip_summed == CHECKSUM_COMPLETE))
                netdev_rx_csum_fault(skb-&gt;dev);
            skb-&gt;ip_summed = CHECKSUM_UNNECESSARY;
        }
        return sum;
    }
</code></pre>

<h4>当数据包是输出包时</h4>

<p>skb->csum表示为csum_start和csum_offset，它表示硬件网卡存放将要计算的校验值的地址，和最后填充的便宜。这个域在输出包时使用，只在校验值在硬件计算的情况下才对于网卡真正有意义。硬件checksum功能只能用于非分片报文。
而此时ip_summed可以被设置的值有下面两种：</p>

<pre><code>    #define CHECKSUM_NONE       0
    #define CHECKSUM_PARTIAL    3
</code></pre>

<p>CHECKSUM_NONE 表示协议栈计算好了校验值，设备不需要做任何事。CHECKSUM_PARTIAL表示协议栈算好了伪头需要硬件计算payload checksum。</p>

<p>1）对于UDP socket开启了UDP_CSUM_NOXMIT /<em> UDP csum disabled </em>/</p>

<pre><code>    uh-&gt;check = 0；
    skb-&gt;ip_summed = CHECKSUM_NONE;
</code></pre>

<p>2）软件udp checksum
<code>
    struct iphdr *iph = ip_hdr(skb);
    struct udphdr *uh = udp_hdr(skb);
    uh-&gt;check = 0;
    skb-&gt;csum = csum_partial(skb_transport_header (skb), skb-&gt;len, 0);//skb-&gt;data指向传输层头
    uh-&gt;check = csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, iph-&gt;protocol, skb-&gt;csum);
    skb-&gt;ip_summed = CHECKSUM_NONE;
    //Todo: scatter and gather
</code></p>

<p>3)  硬件checksum: 只能是ip报文长度小于mtu的数据报(没有分片的报文)。</p>

<p>CHECKSUM_PARTIAL表示使用硬件checksum ，L4层的伪头的校验已经完毕，并且已经加入uh->check字段中，此时只需要设备计算整个头4层头的校验值。</p>

<p>（对于支持scatter and gather的报文必须要传输层头在线性空间才能使用硬件checksum功能）</p>

<pre><code>    uh-&gt;check = ~csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, skb-&gt;len, IPPROTO_UDP, 0);
    skb-&gt;csum_start = skb_transport_header (skb) - skb-&gt;head;
    skb-&gt;csum_offset = offsetof(struct udphdr, check);
    skb-&gt;ip_summed = CHECKSUM_PARTIAL;
</code></pre>

<p>最后在dev_queue_xmit发送的时候发现设备不支持硬件checksum就会进行软件计算</p>

<pre><code>    int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
                    struct netdev_queue *txq)

    {
        .......

                /* If packet is not checksummed and device does not
                 * support checksumming for this protocol, complete
                 * checksumming here.
                 */
                if (skb-&gt;ip_summed == CHECKSUM_PARTIAL) {
                    skb_set_transport_header(skb, skb-&gt;csum_start -
                            skb_headroom(skb));
                    if (!dev_can_checksum(dev, skb) &amp;&amp;
                            skb_checksum_help(skb))
                        goto out_kfree_skb;
                }
        ........
</code></pre>
]]></content>
  </entry>
  
</feed>
