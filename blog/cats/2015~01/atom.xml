<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2015~01 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2015~01/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-12-27T03:04:58+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARM汇编简单样例]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/assembly-arm-sample/"/>
    <updated>2015-01-30T15:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/assembly-arm-sample</id>
    <content type="html"><![CDATA[<h4>例一</h4>

<pre><code>    .section .data
        .align 2
        .LC0: .string "gggghhhii"

    .section .text
        .align 2
        .global main
        .type   main, %function
    main:
        stmfd   sp!, {fp, lr} 
        ldr     r0, .L0 
        bl      puts
        ldmfd   sp!, {fp, pc} 

    .L0: .word .LC0
</code></pre>

<pre><code>android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/arm-linux-androideabi-as b.s -o b.o

/home/kk/android/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ld -dynamic-linker /system/bin/linker -X -m armelf_linux_eabi -z noexecstack -z relro -z now crtbegin_dynamic.o -L/home/kk/android/android-ndk-r9d/platforms/android-19/arch-arm/usr/lib/ -L/home/kk/android/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/../lib/gcc/arm-linux-androideabi/4.6 -L/home/kk/android/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/../lib/gcc -L/home/kk/android/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/../lib/gcc/arm-linux-androideabi/4.6/../../../../arm-linux-androideabi/lib b.o -lgcc -lc -ldl -lgcc crtend_android.o -o b.out
</code></pre>

<h4>例二</h4>

<p>a.c
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int i=12;
</span><span class='line'>int j;
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>i = 34; 
</span><span class='line'>j = 56; 
</span><span class='line'>printf("Hello World\n");
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/home/kk/android/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc -I/home/kk/android/android-ndk-r9d/platforms/android-19/arch-arm/usr/include -L/home/kk/android/android-ndk-r9d/platforms/android-19/arch-arm/usr/lib/ -S a.c</span></code></pre></td></tr></table></div></figure></p>

<pre><code>    .arch armv5te
    .fpu softvfp
    .eabi_attribute 20, 1
    .eabi_attribute 21, 1
    .eabi_attribute 23, 3
    .eabi_attribute 24, 1
    .eabi_attribute 25, 1
    .eabi_attribute 26, 2
    .eabi_attribute 30, 6
    .eabi_attribute 18, 4
    .file   "a.c"
    .global i
    .data
    .align  2
    .type   i, %object
    .size   i, 4
i:
    .word   12  
    .comm   j,4,4
    .section        .rodata
    .align  2
.LC0:
    .ascii  "Hello World\000"
    .text
    .align  2
    .global main
    .type   main, %function
main:
    @ args = 0, pretend = 0, frame = 0 
    @ frame_needed = 1, uses_anonymous_args = 0 
    stmfd   sp!, {fp, lr} 
    add     fp, sp, #4
    ldr     r3, .L2 
.LPIC0:
    add     r3, pc, r3
    ldr     r2, .L2+4
    ldr     r2, [r3, r2] 
    mov     r1, #34 
    str     r1, [r2, #0] 
    ldr     r2, .L2+8
    ldr     r3, [r3, r2] 
    mov     r2, #56 
    str     r2, [r3, #0] 
    ldr     r3, .L2+12
.LPIC1:
    add     r3, pc, r3
    mov     r0, r3
    bl      puts(PLT)
    mov     r3, #0
    mov     r0, r3
    ldmfd   sp!, {fp, pc}
.L3:
    .align  2
.L2:
    .word   _GLOBAL_OFFSET_TABLE_-(.LPIC0+8)
    .word   i(GOT)
    .word   j(GOT)
    .word   .LC0-(.LPIC1+8)
    .size   main, .-main
    .ident  "GCC: (GNU) 4.6 20120106 (prerelease)"
    .section        .note.GNU-stack,"",%progbits
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARM汇编指令集]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/assembly-arm-base/"/>
    <updated>2015-01-30T10:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/assembly-arm-base</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/Neddy/archive/2012/02/03/2336698.html">http://www.cnblogs.com/Neddy/archive/2012/02/03/2336698.html</a></p>

<p>ARM汇编指令集</p>

<h4>一、 跳转指令</h4>

<p>跳转指令用于实现程序流程的跳转，在ARM程序中有两种方法可以实现程序流程的跳转：<br/>
Ⅰ.使用专门的跳转指令。<br/>
Ⅱ.直接向程序计数器PC写入跳转地址值。</p>

<p>通过向程序计数器PC写入跳转地址值，可以实现在4GB的地址空间中的任意跳转，在跳转之前结合使用<br/>
MOV LR，PC<br/>
等类似指令，可以保存将来的返回地址值，从而实现在4GB连续的线性地址空间的子程序调用。</p>

<p>ARM指令集中的跳转指令可以完成从当前指令向前或向后的32MB的地址空间的跳转，包括以下4条指令：</p>

<h5>1、  B指令</h5>

<p>B指令的格式为：<br/>
B{条件}  目标地址<br/>
B指令是最简单的跳转指令。一旦遇到一个 B 指令，ARM 处理器将立即跳转到给定的目标地址，从那里继续执行。注意存储在跳转指令中的实际值是相对当前PC值的一个偏移量，而不是一个绝对地址，它的值由汇编器来计算（参考寻址方式中的相对寻址）。它是 24 位有符号数，左移两位后有符号扩展为 32 位，表示的有效偏移为 26 位(前后32MB的地址空间)。以下指令：
<code>
    B Label         ;程序无条件跳转到标号Label处执行
         CMP R1，＃0       ;当CPSR寄存器中的Z条件码置位时，程序跳转到标号Label处执行
    BEQ Label
</code></p>

<h5>2、  BL指令</h5>

<p>BL指令的格式为：<br/>
BL{条件} 目标地址<br/>
BL 是另一个跳转指令，但跳转之前，会在寄存器R14中保存PC的当前内容，因此，可以通过将R14 的内容重新加载到PC中，来返回到跳转指令之后的那个指令处执行。该指令是实现子程序调用的一个基本但常用的手段。以下指令：
<code>
   BL   Label         ;当程序无条件跳转到标号Label处执行时，同时将当前的PC值保存到R14中
</code></p>

<h5>3、  BLX指令</h5>

<p>BLX指令的格式为：<br/>
BLX  目标地址<br/>
BLX指令从ARM指令集跳转到指令中所指定的目标地址，并将处理器的工作状态有ARM状态切换到Thumb状态，该指令同时将PC的当前内容保存到寄存器R14中。因此，当子程序使用Thumb指令集，而调用者使用ARM指令集时，可以通过BLX指令实现子程序的调用和处理器工作状态的切换。同时，子程序的返回可以通过将寄存器R14值复制到PC中来完成。</p>

<h5>4、  BX指令</h5>

<p>BX指令的格式为：<br/>
BX{条件}  目标地址<br/>
BX指令跳转到指令中所指定的目标地址，目标地址处的指令既可以是ARM指令，也可以是Thumb指令。</p>

<h4>二、数据处理指令数据处理指令可分为数据传送指令、算术逻辑运算指令和比较指令等。</h4>

<p>数据传送指令用于在寄存器和存储器之间进行数据的双向传输。<br/>
算术逻辑运算指令完成常用的算术与逻辑的运算，该类指令不但将运算结果保存在目的寄存器中，同时更新CPSR中的相应条件标志位。<br/>
比较指令不保存运算结果，只更新CPSR中相应的条件标志位。<br/>
数据处理指令共以下16条。</p>

<h5>1、    MOV指令</h5>

<p>MOV指令的格式为：<br/>
MOV{条件}{S} 目的寄存器，源操作数<br/>
MOV指令可完成从另一个寄存器、被移位的寄存器或将一个立即数加载到目的寄存器。其中S选项决定指令的操作是否影响CPSR中条件标志位的值，当没有S时指令不更新CPSR中条件标志位的值。<br/>
指令示例：
<code>
    MOV R1，R0           ;将寄存器R0的值传送到寄存器R1
    MOV PC，R14          ;将寄存器R14的值传送到PC，常用于子程序返回
    MOV R1，R0，LSL＃3    ;将寄存器R0的值左移3位后传送到R1
</code></p>

<h5>2、  MVN指令</h5>

<p>MVN指令的格式为：<br/>
MVN{条件}{S} 目的寄存器，源操作数<br/>
MVN指令可完成从另一个寄存器、被移位的寄存器、或将一个立即数加载到目的寄存器。与MOV指令不同之处是在传送之前按位被取反了，即把一个被取反的值传送到目的寄存器中。其中S决定指令的操作是否影响CPSR中条件标志位的值，当没有S时指令不更新CPSR中条件标志位的值。<br/>
指令示例：
<code>
    MVN  R0，＃0        ;将立即数0取反传送到寄存器R0中，完成后R0=-1
</code></p>

<h5>3、  CMP指令</h5>

<p>CMP指令的格式为：<br/>
CMP{条件} 操作数1，操作数2<br/>
CMP指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行比较，同时更新CPSR中条件标志位的值。该指令进行一次减法运算，但不存储结果，只更改条件标志位。标志位表示的是操作数1与操作数2的关系(大、小、相等)，例如，当操作数1大于操作操作数2，则此后的有GT 后缀的指令将可以执行。<br/>
指令示例：
<code>
    CMP    R1，R0      ;将寄存器R1的值与寄存器R0的值相减，并根据结果设置CPSR的标志位
    CMPR1，＃100       ;将寄存器R1的值与立即数100相减，并根据结果设置CPSR的标志位
</code></p>

<h5>4、  CMN指令</h5>

<p>CMN指令的格式为：<br/>
CMN{条件} 操作数1，操作数2<br/>
CMN指令用于把一个寄存器的内容和另一个寄存器的内容或立即数取反后进行比较，同时更新CPSR中条件标志位的值。该指令实际完成操作数1和操作数2相加，并根据结果更改条件标志位。<br/>
指令示例：
<code>
    CMN    R1，R0      ;将寄存器R1的值与寄存器R0的值相加，并根据结果设置CPSR的标志位
    CMNR1，＃100    ;将寄存器R1的值与立即数100相加，并根据结果设置CPSR的标志位
</code></p>

<h5>5、  TST指令</h5>

<p>TST指令的格式为：<br/>
TST{条件} 操作数1，操作数2<br/>
TST指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行按位的与运算，并根据运算结果更新CPSR中条件标志位的值。操作数1是要测试的数据，而操作数2是一个位掩码，该指令一般用来检测是否设置了特定的位。<br/>
指令示例：
<code>
    TST    R1，＃％1   ;用于测试在寄存器R1中是否设置了最低位（％表示二进制数）
    TSTR1，＃0xffe    ;将寄存器R1的值与立即数0xffe按位与，并根据结果设置CPSR的标志位
</code></p>

<h5>6、  TEQ指令</h5>

<p>TEQ指令的格式为：<br/>
TEQ{条件} 操作数1，操作数2<br/>
TEQ指令用于把一个寄存器的内容和另一个寄存器的内容或立即数进行按位的异或运算，并根据运算结果更新CPSR中条件标志位的值。该指令通常用于比较操作数1和操作数2是否相等。<br/>
指令示例：
<code>
    TEQ   R1，R2    ;将寄存器R1的值与寄存器R2的值按位异或，并根据结果设置CPSR的标志位
</code></p>

<h5>7、  ADD指令</h5>

<p>ADD指令的格式为：<br/>
ADD{条件}{S} 目的寄存器，操作数1，操作数2<br/>
ADD指令用于把两个操作数相加，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。<br/>
指令示例：
<code>
    ADD     R0，R1，R2          ; R0 = R1 + R2
    ADD     R0，R1，#256        ; R0 = R1 + 256
    ADD     R0，R2，R3，LSL#1   ; R0 = R2 + (R3 &lt;&lt; 1)
</code></p>

<h5>8、  ADC指令</h5>

<p>ADC指令的格式为：<br/>
ADC{条件}{S} 目的寄存器，操作数1，操作数2<br/>
ADC指令用于把两个操作数相加，再加上CPSR中的C条件标志位的值，并将结果存放到目的寄存器中。它使用一个进位标志位，这样就可以做比32位大的数的加法，注意不要忘记设置S后缀来更改进位标志。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。<br/>
以下指令序列完成两个128位数的加法，第一个数由高到低存放在寄存器R7～R4，第二个数由高到低存放在寄存器R11～R8，运算结果由高到低存放在寄存器R3～R0：
<code>
    ADDS     R0，R4，R8         ; 加低端的字
    ADCS     R1，R5，R9          ; 加第二个字，带进位
    ADCS     R2，R6，R10         ; 加第三个字，带进位
    ADC      R3，R7，R11        ; 加第四个字，带进位
</code></p>

<h5>9、  SUB指令</h5>

<p>SUB指令的格式为：<br/>
SUB{条件}{S} 目的寄存器，操作数1，操作数2<br/>
SUB指令用于把操作数1减去操作数2，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令可用于有符号数或无符号数的减法运算。<br/>
指令示例：
<code>
    SUB     R0，R1，R2                ; R0 = R1 - R2
    SUB     R0，R1，#256              ; R0 = R1 - 256
    SUB     R0，R2，R3，LSL#1         ; R0 = R2 - (R3 &lt;&lt; 1)
</code></p>

<h5>10、C指令</h5>

<p>C指令的格式为：<br/>
C{条件}{S} 目的寄存器，操作数1，操作数2<br/>
C指令用于把操作数1减去操作数2，再减去CPSR中的C条件标志位的反码，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令使用进位标志来表示借位，这样就可以做大于32位的减法，注意不要忘记设置S后缀来更改进位标志。该指令可用于有符号数或无符号数的减法运算。<br/>
指令示例：
<code>
    SUBS    R0，R1，R2       ; R0 = R1 - R2 - ！C，并根据结果设置CPSR的进位标志位
</code></p>

<h5>11、R指令</h5>

<p>R指令的格式为：<br/>
R{条件}{S} 目的寄存器，操作数1，操作数2<br/>
R指令称为逆向减法指令，用于把操作数2减去操作数1，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令可用于有符号数或无符号数的减法运算。<br/>
指令示例：
<code>
    R0，R1，R2              ; R0 = R2 – R1
    R0，R1，#256            ; R0 = 256 – R1
    R0，R2，R3，LSL#1       ; R0 = (R3 &lt;&lt; 1) - R2
</code></p>

<h5>12、RSC指令</h5>

<p>RSC指令的格式为：<br/>
RSC{条件}{S} 目的寄存器，操作数1，操作数2<br/>
RSC指令用于把操作数2减去操作数1，再减去CPSR中的C条件标志位的反码，并将结果存放到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令使用进位标志来表示借位，这样就可以做大于32位的减法，注意不要忘记设置S后缀来更改进位标志。该指令可用于有符号数或无符号数的减法运算。<br/>
指令示例：
<code>
    RSC     R0，R1，R2          ; R0 = R2 – R1 - ！C
</code></p>

<h5>13、AND指令</h5>

<p>AND指令的格式为：<br/>
AND{条件}{S} 目的寄存器，操作数1，操作数2<br/>
AND指令用于在两个操作数上进行逻辑与运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于屏蔽操作数1的某些位。<br/>
指令示例：
<code>
    AND R0，R0，＃3            ; 该指令保持R0的0、1位，其余位清零。
</code></p>

<h5>14、ORR指令</h5>

<p>ORR指令的格式为：<br/>
ORR{条件}{S} 目的寄存器，操作数1，操作数2<br/>
ORR指令用于在两个操作数上进行逻辑或运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于设置操作数1的某些位。<br/>
指令示例：
<code>
    ORR R0，R0，＃3         ; 该指令设置R0的0、1位，其余位保持不变。
</code></p>

<h5>15、EOR指令</h5>

<p>EOR指令的格式为：<br/>
EOR{条件}{S} 目的寄存器，操作数1，操作数2<br/>
EOR指令用于在两个操作数上进行逻辑异或运算，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。该指令常用于反转操作数1的某些位。<br/>
指令示例：
<code>
    EOR R0，R0，＃3        ; 该指令反转R0的0、1位，其余位保持不变。
</code></p>

<h5>16、BIC指令</h5>

<p>BIC指令的格式为：<br/>
BIC{条件}{S} 目的寄存器，操作数1，操作数2<br/>
BIC指令用于清除操作数1的某些位，并把结果放置到目的寄存器中。操作数1应是一个寄存器，操作数2可以是一个寄存器，被移位的寄存器，或一个立即数。操作数2为32位的掩码，如果在掩码中设置了某一位，则清除这一位。未设置的掩码位保持不变。<br/>
指令示例：
<code>
    BIC R0，R0，＃％1011    ; 该指令清除 R0 中的位 0、1、和 3，其余的位保持不变。
</code></p>

<h4>三、乘法指令与乘加指令</h4>

<p>ARM微处理器支持的乘法指令与乘加指令共有6条，可分为运算结果为32位和运算结果为64位两类，与前面的数据处理指令不同，指令中的所有操作数、目的寄存器必须为通用寄存器，不能对操作数使用立即数或被移位的寄存器，同时，目的寄存器和操作数1必须是不同的寄存器。<br/>
乘法指令与乘加指令共有以下6条：</p>

<h5>1、  MUL指令</h5>

<p>MUL指令的格式为：<br/>
MUL{条件}{S} 目的寄存器，操作数1，操作数2<br/>
MUL指令完成将操作数1与操作数2的乘法运算，并把结果放置到目的寄存器中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的有符号数或无符号数。<br/>
指令示例：
<code>
    MUL R0，R1，R2            ;R0 = R1 × R2
    MULS R0，R1，R2           ;R0 = R1 × R2，同时设置CPSR中的相关条件标志位
</code></p>

<h5>2、  MLA指令</h5>

<p>MLA指令的格式为：<br/>
MLA{条件}{S} 目的寄存器，操作数1，操作数2，操作数3<br/>
MLA指令完成将操作数1与操作数2的乘法运算，再将乘积加上操作数3，并把结果放置到目的寄存器中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的有符号数或无符号数。<br/>
指令示例：
<code>
    MLA R0，R1，R2，R3        ;R0 = R1 × R2 + R3
    MLAS  R0，R1，R2，R3      ;R0 = R1 × R2 + R3，同时设置CPSR中的相关条件标志位
</code></p>

<h5>3、  SMULL指令</h5>

<p>SMULL指令的格式为：<br/>
SMULL{条件}{S}   目的寄存器Low，目的寄存器低High，操作数1，操作数2<br/>
SMULL指令完成将操作数1与操作数2的乘法运算，并把结果的低32位放置到目的寄存器Low中，结果的高32位放置到目的寄存器High中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的有符号数。<br/>
指令示例：
<code>
    SMULL   R0，R1，R2，R3          ;R0 = （R2 × R3）的低32位
                    ;R1 = （R2 × R3）的高32位
</code></p>

<h5>4、  SMLAL指令</h5>

<p>SMLAL指令的格式为：<br/>
SMLAL{条件}{S}   目的寄存器Low，目的寄存器低High，操作数1，操作数2<br/>
SMLAL指令完成将操作数1与操作数2的乘法运算，并把结果的低32位同目的寄存器Low中的值相加后又放置到目的寄存器Low中，结果的高32位同目的寄存器High中的值相加后又放置到目的寄存器High中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的有符号数。<br/>
对于目的寄存器Low，在指令执行前存放64位加数的低32位，指令执行后存放结果的低32位。<br/>
对于目的寄存器High，在指令执行前存放64位加数的高32位，指令执行后存放结果的高32位。<br/>
指令示例：
<code>
    SMLAL   R0，R1，R2，R3          ;R0 = （R2 × R3）的低32位 ＋ R0
                    ;R1 = （R2 × R3）的高32位 ＋ R1
</code></p>

<h5>5、  UMULL指令</h5>

<p>UMULL指令的格式为：<br/>
UMULL{条件}{S}   目的寄存器Low，目的寄存器低High，操作数1，操作数2<br/>
UMULL指令完成将操作数1与操作数2的乘法运算，并把结果的低32位放置到目的寄存器Low中，结果的高32位放置到目的寄存器High中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的无符号数。<br/>
指令示例：
<code>
    UMULL   R0，R1，R2，R3          ;R0 = （R2 × R3）的低32位
                    ;R1 = （R2 × R3）的高32位
</code></p>

<h5>6、  UMLAL指令</h5>

<p>UMLAL指令的格式为：<br/>
UMLAL{条件}{S}   目的寄存器Low，目的寄存器低High，操作数1，操作数2<br/>
UMLAL指令完成将操作数1与操作数2的乘法运算，并把结果的低32位同目的寄存器Low中的值相加后又放置到目的寄存器Low中，结果的高32位同目的寄存器High中的值相加后又放置到目的寄存器High中，同时可以根据运算结果设置CPSR中相应的条件标志位。其中，操作数1和操作数2均为32位的无符号数。<br/>
对于目的寄存器Low，在指令执行前存放64位加数的低32位，指令执行后存放结果的低32位。<br/>
对于目的寄存器High，在指令执行前存放64位加数的高32位，指令执行后存放结果的高32位。<br/>
指令示例：
<code>
    UMLAL   R0，R1，R2，R3          ;R0 = （R2 × R3）的低32位 ＋ R0
                    ;R1 = （R2 × R3）的高32位 ＋ R1
</code></p>

<h4>四、程序状态寄存器访问指令</h4>

<h5>1、  MRS指令</h5>

<p>MRS指令的格式为：<br/>
MRS{条件}    通用寄存器，程序状态寄存器（CPSR或SPSR）<br/>
MRS指令用于将程序状态寄存器的内容传送到通用寄存器中。该指令一般用在以下两种情况：<br/>
Ⅰ.当需要改变程序状态寄存器的内容时，可用MRS将程序状态寄存器的内容读入通用寄存器，修改后再写回程序状态寄存器。<br/>
Ⅱ.当在异常处理或进程切换时，需要保存程序状态寄存器的值，可先用该指令读出程序状态寄存器的值，然后保存。<br/>
指令示例：
<code>
    MRS R0，CPSR                ;传送CPSR的内容到R0
    MRS R0，SPSR                ;传送SPSR的内容到R0
</code></p>

<h5>2、  MSR指令</h5>

<p>MSR指令的格式为：<br/>
MSR{条件}    程序状态寄存器（CPSR或SPSR）_&lt;域>，操作数<br/>
MSR指令用于将操作数的内容传送到程序状态寄存器的特定域中。其中，操作数可以为通用寄存器或立即数。&lt;域>用于设置程序状态寄存器中需要操作的位，32位的程序状态寄存器可分为4个域：<br/>
位[31：24]为条件标志位域，用f表示;<br/>
位[23：16]为状态位域，用s表示;<br/>
位[15：8]为扩展位域，用x表示;<br/>
位[7：0]为控制位域，用c表示;<br/>
该指令通常用于恢复或改变程序状态寄存器的内容，在使用时，一般要在MSR指令中指明将要操作的域。<br/>
指令示例：
<code>
    MSR CPSR，R0        ;传送R0的内容到CPSR
    MSR SPSR，R0        ;传送R0的内容到SPSR
    MSR CPSR_c，R0      ;传送R0的内容到SPSR，但仅仅修改CPSR中的控制位域
</code></p>

<h4>五、加载/存储指令</h4>

<p>ARM微处理器支持加载/存储指令用于在寄存器和存储器之间传送数据，加载指令用于将存储器中的数据传送到寄存器，存储指令则完成相反的操作。常用的加载存储指令如下：</p>

<h5>1、LDR指令</h5>

<p>LDR指令的格式为：<br/>
LDR{条件} 目的寄存器，&lt;存储器地址><br/>
LDR指令用于从存储器中将一个32位的字数据传送到目的寄存器中。该指令通常用于从存储器中读取32位的字数据到通用寄存器，然后对数据进行处理。当程序计数器PC作为目的寄存器时，指令从存储器中读取的字数据被当作目的地址，从而可以实现程序流程的跳转。该指令在程序设计中比较常用，且寻址方式灵活多样，请读者认真掌握。<br/>
指令示例：
<code>
    LDR R0，[R1]                ;将存储器地址为R1的字数据读入寄存器R0。
    LDR R0，[R1，R2]             ;将存储器地址为R1+R2的字数据读入寄存器R0。LDR R0，[R1，＃8]                          
                                ;将存储器地址为R1+8的字数据读入寄存器R0。
    LDR  R0，[R1，R2] ！         ;将存储器地址为R1+R2的字数据读入寄存器R0，并将新地址R1＋R2写入R1。
    LDR R0，[R1，＃8] ！          ;将存储器地址为R1+8的字数据读入寄存器R0，并将新地址R1＋8写入R1。
    LDR  R0，[R1]，R2            ;将存储器地址为R1的字数据读入寄存器R0，并将新地址R1＋R2写入R1。
    LDR  R0，[R1，R2，LSL＃2]！   ;将存储器地址为R1＋R2×4的字数据读入寄存器R0，并将新地址R1＋R2×4写入R1。
    LDRR0，[R1]，R2，LSL＃2       ;将存储器地址为R1的字数据读入寄存器R0，并将新地址R1＋R2×4写入R1。
</code></p>

<h5>2、LDRB指令</h5>

<p>LDRB指令的格式为：<br/>
LDR{条件}B 目的寄存器，&lt;存储器地址><br/>
LDRB指令用于从存储器中将一个8位的字节数据传送到目的寄存器中，同时将寄存器的高24位清零。该指令通常用于从存储器中读取8位的字节数据到通用寄存器，然后对数据进行处理。当程序计数器PC作为目的寄存器时，指令从存储器中读取的字数据被当作目的地址，从而可以实现程序流程的跳转。<br/>
指令示例：
<code>
    LDRB  R0，[R1]             ;将存储器地址为R1的字节数据读入寄存器R0，并将R0的高24位清零。
    LDRB R0，[R1，＃8]          ;将存储器地址为R1＋8的字节数据读入寄存器R0，并将R0的高24位清零。
</code></p>

<h5>3、LDRH指令</h5>

<p>LDRH指令的格式为：<br/>
LDR{条件}H 目的寄存器，&lt;存储器地址><br/>
LDRH指令用于从存储器中将一个16位的半字数据传送到目的寄存器中，同时将寄存器的高16位清零。该指令通常用于从存储器中读取16位的半字数据到通用寄存器，然后对数据进行处理。当程序计数器PC作为目的寄存器时，指令从存储器中读取的字数据被当作目的地址，从而可以实现程序流程的跳转。<br/>
指令示例：
<code>
    LDRH   R0，[R1]         ;将存储器地址为R1的半字数据读入寄存器R0，并将R0的高16位清零。
    LDRH   R0，[R1，＃8]     ;将存储器地址为R1＋8的半字数据读入寄存器R0，并将R0的高16位清零。
    LDRHR0，[R1，R2]        ;将存储器地址为R1＋R2的半字数据读入寄存器R0，并将R0的高16位清零。
</code></p>

<h5>4、STR指令</h5>

<p>STR指令的格式为：<br/>
STR{条件} 源寄存器，&lt;存储器地址><br/>
STR指令用于从源寄存器中将一个32位的字数据传送到存储器中。该指令在程序设计中比较常用，且寻址方式灵活多样，使用方式可参考指令LDR。<br/>
指令示例：
<code>
    STR R0，[R1]，＃8        ;将R0中的字数据写入以R1为地址的存储器中，并将新地址R1＋8写入R1。
    STR R0，[R1，＃8]        ;将R0中的字数据写入以R1＋8为地址的存储器中。
</code></p>

<h5>5、STRB指令</h5>

<p>STRB指令的格式为：<br/>
STR{条件}B 源寄存器，&lt;存储器地址><br/>
STRB指令用于从源寄存器中将一个8位的字节数据传送到存储器中。该字节数据为源寄存器中的低8位。<br/>
指令示例：
<code>
    STRB    R0，[R1]         ;将寄存器R0中的字节数据写入以R1为地址的存储器中。
    STRB    R0，[R1，＃8]     ;将寄存器R0中的字节数据写入以R1＋8为地址的存储器中。
</code></p>

<h5>6、STRH指令</h5>

<p>STRH指令的格式为：<br/>
STR{条件}H 源寄存器，&lt;存储器地址><br/>
STRH指令用于从源寄存器中将一个16位的半字数据传送到存储器中。该半字数据为源寄存器中的低16位。<br/>
指令示例：
<code>
    STRH   R0，[R1]             ;将寄存器R0中的半字数据写入以R1为地址的存储器中。
    STRH   R0，[R1，＃8]        ;将寄存器R0中的半字数据写入以R1＋8为地址的存储器中。
</code></p>

<h4>六、批量数据加载/存储指令</h4>

<p>ARM微处理器所支持批量数据加载/存储指令可以一次在一片连续的存储器单元和多个寄存器之间传送数据，批量加载指令用于将一片连续的存储器中的数据传送到多个寄存器，批量数据存储指令则完成相反的操作。<br/>
常用的加载存储指令如下：<br/>
LDM（或STM）指令<br/>
LDM（或STM）指令的格式为：<br/>
LDM（或STM）{条件}{类型} 基址寄存器{！}，寄存器列表{∧}<br/>
LDM（或STM）指令用于从由基址寄存器所指示的一片连续存储器到寄存器列表所指示的多个寄存器之间传送数据，该指令的常见用途是将多个寄存器的内容入栈或出栈。其中，{类型}为以下几种情况：<br/>
IA   每次传送后地址加1;<br/>
IB   每次传送前地址加1;<br/>
DA   每次传送后地址减1;<br/>
DB   每次传送前地址减1;<br/>
FD   满递减堆栈;<br/>
ED   空递减堆栈;<br/>
FA   满递增堆栈;<br/>
EA   空递增堆栈;<br/>
{！}为可选后缀，若选用该后缀，则当数据传送完毕之后，将最后的地址写入基址寄存器，否则基址寄存器的内容不改变。<br/>
基址寄存器不允许为R15，寄存器列表可以为R0～R15的任意组合。<br/>
{∧}为可选后缀，当指令为LDM且寄存器列表中包含R15，选用该后缀时表示：除了正常的数据传送之外，还将SPSR复制到CPSR。同时，该后缀还表示传入或传出的是用户模式下的寄存器，而不是当前模式下的寄存器。<br/>
指令示例：
<code>
    STMFD  R13!，{R0，R4-R12，LR}  ;将寄存器列表中的寄存器（R0，R4到R12，LR）存入堆栈。
    LDMFD  R13!，{R0，R4-R12，PC}  ;将堆栈内容恢复到寄存器（R0，R4到R12，LR）。
</code></p>

<h4>七、数据交换指令</h4>

<h5>1、SWP指令</h5>

<p>SWP指令的格式为：<br/>
SWP{条件} 目的寄存器，源寄存器1，[源寄存器2]<br/>
SWP指令用于将源寄存器2所指向的存储器中的字数据传送到目的寄存器中，同时将源寄存器1中的字数据传送到源寄存器2所指向的存储器中。显然，当源寄存器1和目的寄存器为同一个寄存器时，指令交换该寄存器和存储器的内容。<br/>
指令示例：
<code>
    SWP   R0，R1，[R2]      ;将R2所指向的存储器中的字数据传送到R0，同时将R1中的字数据传送到R2所指向的存储单元。
    SWP   R0，R0，[R1]      ;该指令完成将R1所指向的存储器中的字数据与R0中的数据交换。
</code></p>

<h5>2、SWPB指令</h5>

<p>SWPB指令的格式为：<br/>
SWP{条件}B 目的寄存器，源寄存器1，[源寄存器2]<br/>
SWPB指令用于将源寄存器2所指向的存储器中的字节数据传送到目的寄存器中，目的寄存器的高24清零，同时将源寄存器1中的字节数据传送到源寄存器2所指向的存储器中。显然，当源寄存器1和目的寄存器为同一个寄存器时，指令交换该寄存器和存储器的内容。<br/>
指令示例：
<code>
    SWPB   R0，R1，[R2]       ;将R2所指向的存储器中的字节数据传送到R0，R0的高24位清零，同时将R1中的低8位数据传送到R2所指向的存储单元。
    SWPB   R0，R0，[R1]       ;该指令完成将R1所指向的存储器中的字节数据与R0中的低8位数据交换。
</code></p>

<h4>八、移位指令（操作）</h4>

<h5>1、LSL（或ASL）操作</h5>

<p>LSL（或ASL）操作的格式为：<br/>
通用寄存器，LSL（或ASL） 操作数   <br/>
LSL（或ASL）可完成对通用寄存器中的内容进行逻辑（或算术）的左移操作，按操作数所指定的数量向左移位，低位用零来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。<br/>
操作示例
<code>
    MOV   R0, R1, LSL#2      ;将R1中的内容左移两位后传送到R0中。
</code></p>

<h5>2、LSR操作</h5>

<p>LSR操作的格式为：<br/>
通用寄存器，LSR 操作数    <br/>
LSR可完成对通用寄存器中的内容进行右移的操作，按操作数所指定的数量向右移位，左端用零来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。<br/>
操作示例：
<code>
    MOV   R0, R1, LSR#2      ;将R1中的内容右移两位后传送到R0中，左端用零来填充。
</code></p>

<h5>3、ASR操作</h5>

<p>ASR操作的格式为：<br/>
通用寄存器，ASR 操作数   <br/>
ASR可完成对通用寄存器中的内容进行右移的操作，按操作数所指定的数量向右移位，左端用第31位的值来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。<br/>
操作示例：
<code>
    MOV    R0, R1, ASR#2     ;将R1中的内容右移两位后传送到R0中，左端用第31位的值来填充。
</code></p>

<h5>4、ROR操作</h5>

<p>ROR操作的格式为：<br/>
通用寄存器，ROR 操作数     <br/>
ROR可完成对通用寄存器中的内容进行循环右移的操作，按操作数所指定的数量向右循环移位，左端用右端移出的位来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。显然，当进行32位的循环右移操作时，通用寄存器中的值不改变。<br/>
操作示例：
<code>
    MOV    R0, R1, ROR#2      ;将R1中的内容循环右移两位后传送到R0中。
</code></p>

<h5>5、RRX操作</h5>

<p>RRX操作的格式为：<br/>
通用寄存器，RRX 操作数     <br/>
RRX可完成对通用寄存器中的内容进行带扩展的循环右移的操作，按操作数所指定的数量向右循环移位，左端用进位标志位C来填充。其中，操作数可以是通用寄存器，也可以是立即数（0～31）。<br/>
操作示例：
<code>
    MOV   R0, R1, RRX#2       ;将R1中的内容进行带扩展的循环右移两位后传送到R0中。
</code></p>

<h4>九、协处理器指令</h4>

<h5>1、CDP指令</h5>

<p>CDP指令的格式为：<br/>
CDP{条件} 协处理器编码，协处理器操作码1，目的寄存器，源寄存器1，源寄存器2，协处理器操作码2。<br/>
CDP指令用于ARM处理器通知ARM协处理器执行特定的操作,若协处理器不能成功完成特定的操作，则产生未定义指令异常。其中协处理器操作码1和协处理器操作码2为协处理器将要执行的操作，目的寄存器和源寄存器均为协处理器的寄存器，指令不涉及ARM处理器的寄存器和存储器。<br/>
指令示例：
<code>
    CDP   P3，2，C12，C10，C3，4   ;该指令完成协处理器P3的初始化
</code></p>

<h5>2、LDC指令</h5>

<p>LDC指令的格式为：<br/>
LDC{条件}{L} 协处理器编码,目的寄存器，[源寄存器]<br/>
LDC指令用于将源寄存器所指向的存储器中的字数据传送到目的寄存器中，若协处理器不能成功完成传送操作，则产生未定义指令异常。其中，{L}选项表示指令为长读取操作，如用于双精度数据的传输。<br/>
指令示例：
<code>
    LDC   P3，C4，[R0]   ;将ARM处理器的寄存器R0所指向的存储器中的字数据传送到协处理器P3的寄存器C4中。
</code></p>

<h5>3、STC指令</h5>

<p>STC指令的格式为：<br/>
STC{条件}{L} 协处理器编码,源寄存器，[目的寄存器]<br/>
STC指令用于将源寄存器中的字数据传送到目的寄存器所指向的存储器中，若协处理器不能成功完成传送操作，则产生未定义指令异常。其中，{L}选项表示指令为长读取操作，如用于双精度数据的传输。<br/>
指令示例：
<code>
    STC   P3，C4，[R0]    ;将协处理器P3的寄存器C4中的字数据传送到ARM处理器的寄存器R0所指向的存储器中。
</code></p>

<h5>4、MCR指令</h5>

<p>MCR指令的格式为：<br/>
MCR{条件} 协处理器编码，协处理器操作码1，源寄存器，目的寄存器1，目的寄存器2，协处理器操作码2。<br/>
MCR指令用于将ARM处理器寄存器中的数据传送到协处理器寄存器中,若协处理器不能成功完成操作，则产生未定义指令异常。其中协处理器操作码1和协处理器操作码2为协处理器将要执行的操作，源寄存器为ARM处理器的寄存器，目的寄存器1和目的寄存器2均为协处理器的寄存器。<br/>
指令示例：
<code>
    MCR   P3，3，R0，C4，C5，6       ;该指令将ARM处理器寄存器R0中的数据传送到协处理器P3的寄存器C4和C5中。
</code></p>

<h5>5、MRC指令</h5>

<p>MRC指令的格式为：<br/>
MRC{条件} 协处理器编码，协处理器操作码1，目的寄存器，源寄存器1，源寄存器2，协处理器操作码2。<br/>
MRC指令用于将协处理器寄存器中的数据传送到ARM处理器寄存器中,若协处理器不能成功完成操作，则产生未定义指令异常。其中协处理器操作码1和协处理器操作码2为协处理器将要执行的操作，目的寄存器为ARM处理器的寄存器，源寄存器1和源寄存器2均为协处理器的寄存器。<br/>
指令示例：
<code>
    MRC   P3，3，R0，C4，C5，6        ;该指令将协处理器P3的寄存器中的数据传送到ARM处理器寄存器中。
</code></p>

<h4>十、异常产生指令</h4>

<h5>1、SWI指令</h5>

<p>SWI指令的格式为：<br/>
SWI{条件} 24位的立即数<br/>
SWI指令用于产生软件中断，以便用户程序能调用操作系统的系统例程。操作系统在SWI的异常处理程序中提供相应的系统服务，指令中24位的立即数指定用户程序调用系统例程的类型，相关参数通过通用寄存器传递，当指令中24位的立即数被忽略时，用户程序调用系统例程的类型由通用寄存器R0的内容决定，同时，参数通过其他通用寄存器传递。<br/>
指令示例：
<code>
    SWI   0x02       ;该指令调用操作系统编号位02的系统例程。
</code></p>

<h5>2、BKPT指令</h5>

<p>BKPT指令的格式为：<br/>
BKPT   16位的立即数<br/>
BKPT指令产生软件断点中断，可用于程序的调试。</p>

<h3>ARM汇编器所支持的伪指令</h3>

<p>在ARM汇编语言程序里，有一些特殊指令助记符，这些助记符与指令系统的助记符不同，没有相对应的操作码，通常称这些特殊指令助记符为伪指令，他们所完成的操作称为伪操作。伪指令在源程序中的作用是为完成汇编程序作各种准备工作的，这些伪指令仅在汇编过程中起作用，一旦汇编结束，伪指令的使命就完成。</p>

<p>在ARM的汇编程序中，有如下4种伪指令：符号定义伪指令、数据定义伪指令、汇编控制伪指令、宏指令以及其他伪指令。</p>

<h4>一、 符号定义（Symbol Definition）伪指令</h4>

<p>符号定义伪指令用于定义ARM汇编程序中的变量、对变量赋值以及定义寄存器的别名等操作。常见的符号定义伪指令有如下4种：</p>

<h5>1、  GBLA、GBLL和GBLS</h5>

<p>语法格式：<br/>
GBLA（GBLL或GBLS）  全局变量名</p>

<p>GBLA、GBLL和GBLS伪指令用于定义一个ARM程序中的全局变量，并将其初始化。其中：<br/>
GBLA伪指令用于定义一个全局的数字变量，并初始化为0;<br/>
GBLL伪指令用于定义一个全局的逻辑变量，并初始化为F（假）;<br/>
GBLS伪指令用于定义一个全局的字符串变量，并初始化为空;<br/>
由于以上三条伪指令用于定义全局变量，因此在整个程序范围内变量名必须唯一。</p>

<p>使用示例：
<code>
    GBLA    Test1               ;定义一个全局的数字变量，变量名为Test1
    Test1   SETA    0xaa        ;将该变量赋值为0xaa
    GBLL    Test2               ;定义一个全局的逻辑变量，变量名为Test2
    Test2   SETL    {TRUE}      ;将该变量赋值为真
    GBLS    Test3               ;定义一个全局的字符串变量，变量名为Test3
    Test3   SETS    “Testing”   ;将该变量赋值为“Testing”
</code></p>

<h5>2、  LCLA、LCLL和LCLS</h5>

<p>语法格式：<br/>
LCLA（LCLL或LCLS）  局部变量名</p>

<p>LCLA、LCLL和LCLS伪指令用于定义一个ARM程序中的局部变量，并将其初始化。其中：<br/>
LCLA伪指令用于定义一个局部的数字变量，并初始化为0;<br/>
LCLL伪指令用于定义一个局部的逻辑变量，并初始化为F（假）;<br/>
LCLS伪指令用于定义一个局部的字符串变量，并初始化为空;<br/>
 以上三条伪指令用于声明局部变量，在其作用范围内变量名必须唯一。</p>

<p>使用示例：
<code>
    LCLA   Test4                 ;声明一个局部的数字变量，变量名为Test4
    Test3   SETA    0xaa         ;将该变量赋值为0xaa
    LCLL    Test5                ;声明一个局部的逻辑变量，变量名为Test5
    Test4   SETL    {TRUE}       ;将该变量赋值为真
    LCLS   Test6                 ;定义一个局部的字符串变量，变量名为Test6
    Test6   SETS    “Testing”    ;将该变量赋值为“Testing”
</code></p>

<h5>3、  SETA、SETL和SETS</h5>

<p>语法格式：<br/>
变量名   SETA（SETL或SETS） 表达式</p>

<p>伪指令SETA、SETL、SETS用于给一个已经定义的全局变量或局部变量赋值。<br/>
SETA伪指令用于给一个数学变量赋值;<br/>
SETL伪指令用于给一个逻辑变量赋值;<br/>
SETS伪指令用于给一个字符串变量赋值;<br/>
其中，变量名为已经定义过的全局变量或局部变量，表达式为将要赋给变量的值。</p>

<p>使用示例：
<code>
    LCLA    Test3                ;声明一个局部的数字变量，变量名为Test3
    Test3   SETA   0xaa          ;将该变量赋值为0xaa
    LCLL    Test4                ;声明一个局部的逻辑变量，变量名为Test4
    Test4   SETL   {TRUE}        ;将该变量赋值为真
</code></p>

<h5>4、  RLIST</h5>

<p>语法格式：<br/>
名称 RLIST  {寄存器列表}<br/>
RLIST伪指令可用于对一个通用寄存器列表定义名称，使用该伪指令定义的名称可在ARM指令LDM/STM中使用。在LDM/STM指令中，列表中的寄存器访问次序为根据寄存器的编号由低到高，而与列表中的寄存器排列次序无关。</p>

<p>使用示例：
<code>
    RegList RLIST   {R0-R5，R8，R10} ;将寄存器列表名称定义为RegList，可在ARM指令LDM/STM中通过该名称访问寄存器列表。
</code></p>

<h4>二、数据定义（Data Definition）伪指令</h4>

<p>数据定义伪指令一般用于为特定的数据分配存储单元，同时可完成已分配存储单元的初始化。常见的数据定义伪指令有如下9种：</p>

<h5>1、  DCB</h5>

<p>语法格式：<br/>
标号     DCB 表达式<br/>
DCB伪指令用于分配一片连续的字节存储单元并用伪指令中指定的表达式初始化。其中，表达式可以为0～255的数字或字符串。DCB也可用“=”代替。</p>

<p>使用示例：
<code>
    Str DCB “This is a test！”  ;分配一片连续的字节存储单元并初始化。
</code></p>

<h5>2、  DCW（或DCWU）</h5>

<p>语法格式：<br/>
标号     DCW（或DCWU）   表达式<br/>
DCW（或DCWU）伪指令用于分配一片连续的半字存储单元并用伪指令中指定的表达式初始化。其中，表达式可以为程序标号或数字表达式。<br/>
用DCW分配的字存储单元是半字对齐的，而用DCWU分配的字存储单元并不严格半字对齐。</p>

<p>使用示例：
<code>
    DataTest    DCW     1，2，3  ;分配一片连续的半字存储单元并初始化。
</code></p>

<h5>3、  DCD（或DCDU）</h5>

<p>语法格式：<br/>
标号     DCD（或DCDU）   表达式</p>

<p>DCD（或DCDU）伪指令用于分配一片连续的字存储单元并用伪指令中指定的表达式初始化。其中，表达式可以为程序标号或数字表达式。DCD也可用“&amp;”代替。<br/>
用DCD分配的字存储单元是字对齐的，而用DCDU分配的字存储单元并不严格字对齐。</p>

<p>使用示例：
<code>
    DataTest   DCD     4，5，6  ;分配一片连续的字存储单元并初始化。
</code></p>

<h5>4、  DCFD（或DCFDU）</h5>

<p>语法格式：<br/>
标号     DCFD（或DCFDU） 表达式</p>

<p>DCFD（或DCFDU）伪指令用于为双精度的浮点数分配一片连续的字存储单元并用伪指令中指定的表达式初始化。每个双精度的浮点数占据两个字单元。<br/>
用DCFD分配的字存储单元是字对齐的，而用DCFDU分配的字存储单元并不严格字对齐。</p>

<p>使用示例：
<code>
    FDataTest   DCFD    2E115，-5E7 ;分配一片连续的字存储单元并初始化为指定的双精度数。
</code></p>

<h5>5、  DCFS（或DCFSU）</h5>

<p>语法格式：<br/>
标号     DCFS（或DCFSU） 表达式</p>

<p>DCFS（或DCFSU）伪指令用于为单精度的浮点数分配一片连续的字存储单元并用伪指令中指定的表达式初始化。每个单精度的浮点数占据一个字单元。<br/>
用DCFS分配的字存储单元是字对齐的，而用DCFSU分配的字存储单元并不严格字对齐。</p>

<p>使用示例：
<code>
    FDataTest   DCFS    2E5，-5E－7  ;分配一片连续的字存储单元并初始化为指定的单精度数。
</code></p>

<h5>6、  DCQ(或DCQU）</h5>

<p>语法格式：<br/>
标号     DCQ（或DCQU）   表达式</p>

<p>DCQ（或DCQU）伪指令用于分配一片以8个字节为单位的连续存储区域并用伪指令中指定的表达式初始化。<br/>
用DCQ分配的存储单元是字对齐的，而用DCQU分配的存储单元并不严格字对齐。</p>

<p>使用示例：
<code>
    DataTest    DCQ     100     ;分配一片连续的存储单元并初始化为指定的值。
</code></p>

<h5>7、  SPACE</h5>

<p>语法格式：<br/>
标号     SPACE   表达式</p>

<p>SPACE伪指令用于分配一片连续的存储区域并初始化为0。其中，表达式为要分配的字节数。SPACE也可用“％”代替。</p>

<p>使用示例：
<code>
    DataSpace   SPACE   100    ;分配连续100字节的存储单元并初始化为0。
</code></p>

<h5>8、  MAP</h5>

<p>语法格式：<br/>
MAP      表达式{，基址寄存器}</p>

<p>MAP伪指令用于定义一个结构化的内存表的首地址。MAP也可用“＾”代替。<br/>
表达式可以为程序中的标号或数学表达式，基址寄存器为可选项，当基址寄存器选项不存在时，表达式的值即为内存表的首地址，当该选项存在时，内存表的首地址为表达式的值与基址寄存器的和。<br/>
MAP伪指令通常与FIELD伪指令配合使用来定义结构化的内存表。<br/>
使用示例：
<code>
    MAP 0x100，R0       ;定义结构化内存表首地址的值为0x100＋R0。
</code></p>

<h5>9、  FILED</h5>

<p>语法格式：<br/>
标号     FIELD   表达式</p>

<p>FIELD伪指令用于定义一个结构化内存表中的数据域。FILED也可用“#”代替。<br/>
表达式的值为当前数据域在内存表中所占的字节数。<br/>
FIELD伪指令常与MAP伪指令配合使用来定义结构化的内存表。MAP伪指令定义内存表的首地址，FIELD伪指令定义内存表中的各个数据域，并可以为每个数据域指定一个标号供其他的指令引用。<br/>
注意MAP和FIELD伪指令仅用于定义数据结构，并不实际分配存储单元。</p>

<p>使用示例：
<code>
    MAP     0x100           ;定义结构化内存表首地址的值为0x100。
    A       FIELD   16      ;定义A的长度为16字节，位置为0x100
    B       FIELD   32      ;定义B的长度为32字节，位置为0x110
    S       FIELD   256     ;定义S的长度为256字节，位置为0x130
</code></p>

<h4>三、 汇编控制（Assembly Control）伪指令</h4>

<p>汇编控制伪指令用于控制汇编程序的执行流程，常用的汇编控制伪指令包括以下4条：</p>

<h5>1、  IF、ELSE、ENDIF</h5>

<p>语法格式：
<code>
    IF   逻辑表达式
         指令序列1
    ELSE
         指令序列2
    ENDIF
</code>
IF、ELSE、ENDIF伪指令能根据条件的成立与否决定是否执行某个指令序列。当IF后面的逻辑表达式为真，则执行指令序列1，否则执行指令序列2。其中，ELSE及指令序列2可以没有，此时，当IF后面的逻辑表达式为真，则执行指令序列1，否则继续执行后面的指令。<br/>
IF、ELSE、ENDIF伪指令可以嵌套使用。</p>

<p>使用示例：
<code>
    GBLL    Test                    ;声明一个全局的逻辑变量，变量名为Test
    ……
    IF  Test = TRUE
    指令序列1
    ELSE
    指令序列2
    ENDIF
</code></p>

<h5>2、  WHILE、WEND</h5>

<p>语法格式：
<code>
    WHILE    逻辑表达式
         指令序列
    WEND
</code>
WHILE、WEND伪指令能根据条件的成立与否决定是否循环执行某个指令序列。当WHILE后面的逻辑表达式为真，则执行指令序列，该指令序列执行完毕后，再判断逻辑表达式的值，若为真则继续执行，一直到逻辑表达式的值为假。<br/>
WHILE、WEND伪指令可以嵌套使用。</p>

<p>使用示例：
<code>
    GBLA    Counter            ;声明一个全局的数学变量，变量名为Counter
    Counter SETA        3      ;由变量Counter控制循环次数
    ……
    WHILE   Counter &lt; 10
    指令序列
    WEND
</code></p>

<h5>3、  MACRO、MEND</h5>

<p>语法格式：<br/>
$标号    宏名    $参数1，$参数2，…… <br/>
指令序列<br/>
MEND</p>

<p>  MACRO、MEND伪指令可以将一段代码定义为一个整体，称为宏指令，然后就可以在程序中通过宏指令多次调用该段代码。其中，$标号在宏指令被展开时，标号会被替换为用户定义的符号，宏指令可以使用一个或多个参数，当宏指令被展开时，这些参数被相应的值替换。<br/>
  宏指令的使用方式和功能与子程序有些相似，子程序可以提供模块化的程序设计、节省存储空间并提高运行速度。但在使用子程序结构时需要保护现场，从而增加了系统的开销，因此，在代码较短且需要传递的参数较多时，可以使用宏指令代替子程序。<br/>
  包含在MACRO和MEND之间的指令序列称为宏定义体，在宏定义体的第一行应声明宏的原型（包含宏名、所需的参数），然后就可以在汇编程序中通过宏名来调用该指令序列。在源程序被编译时，汇编器将宏调用展开，用宏定义中的指令序列代替程序中的宏调用，并将实际参数的值传递给宏定义中的形式参数。<br/>
MACRO、MEND伪指令可以嵌套使用。</p>

<h5>4、  MEXIT</h5>

<p>语法格式：<br/>
MEXIT<br/>
MEXIT用于从宏定义中跳转出去。</p>

<h4>四、其他常用的伪指令</h4>

<p>还有一些其他的伪指令，在汇编程序中经常会被使用，包括以下13条：</p>

<h5>1、  AREA</h5>

<p>语法格式：<br/>
AREA 段名    属性1，属性2，……<br/>
AREA伪指令用于定义一个代码段或数据段。其中，段名若以数字开头，则该段名需用“|”括起来，如|1_test|。<br/>
属性字段表示该代码段（或数据段）的相关属性，多个属性用逗号分隔。常用的属性如下：<br/>
●CODE属性：用于定义代码段，默认为READONLY。<br/>
●DATA属性：用于定义数据段，默认为READWRITE。<br/>
●READONLY属性：指定本段为只读，代码段默认为READONLY。<br/>
●READWRITE属性：指定本段为可读可写，数据段的默认属性为READWRITE。<br/>
●ALIGN属性：使用方式为ALIGN 表达式。在默认时，ELF（可执行连接文件）的代码段和数据段是按字对齐的，表达式的取值范围为0～31，相应的对齐方式为2表达式次方。<br/>
●COMMON属性：该属性定义一个通用的段，不包含任何的用户代码和数据。各源文件中同名的COMMON段共享同一段存储单元。<br/>
一个汇编语言程序至少要包含一个段，当程序太长时，也可以将程序分为多个代码段和数据段。<br/>
使用示例：
<code>
    AREA    Init，CODE，READONLY  ;该伪指令定义了一个代码段，段名为Init，属性为只读
    指令序列
</code></p>

<h5>2、  ALIGN</h5>

<p>语法格式：<br/>
ALIGN    {表达式{，偏移量}} <br/>
ALIGN伪指令可通过添加填充字节的方式，使当前位置满足一定的对其方式|。其中，表达式的值用于指定对齐方式，可能的取值为2的幂，如1、2、4、 8、16等。若未指定表达式，则将当前位置对齐到下一个字的位置。偏移量也为一个数字表达式，若使用该字段，则当前位置的对齐方式为：2的表达式次幂＋偏移量。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY，ALIEN＝3   ;指定后面的指令为8字节对齐。
    指令序列
    END
</code></p>

<h5>3、  CODE16、CODE32</h5>

<p>语法格式：<br/>
CODE16（或CODE32）<br/>
CODE16伪指令通知编译器，其后的指令序列为16位的Thumb指令。<br/>
CODE32伪指令通知编译器，其后的指令序列为32位的ARM指令。<br/>
若在汇编源程序中同时包含ARM指令和Thumb指令时，可用CODE16伪指令通知编译器其后的指令序列为16位的Thumb指令，CODE32伪指令通知编译器其后的指令序列为32位的ARM指令。因此，在使用ARM指令和Thumb指令混合编程的代码里，可用这两条伪指令进行切换，但注意他们只通知编译器其后指令的类型，并不能对处理器进行状态的切换。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    ……
    CODE32              ;通知编译器其后的指令为32位的ARM指令
    LDR R0，＝NEXT＋1    ;将跳转地址放入寄存器R0
    BX  R0              ;程序跳转到新的位置执行，并将处理器切换到Thumb工作状态
    ……
    CODE16              ;通知编译器其后的指令为16位的Thumb指令
    NEXT    LDR R3，＝0x3FF
    ……
    END                 ;程序结束
</code></p>

<h5>4、  ENTRY</h5>

<p>语法格式：<br/>
ENTRY</p>

<p>ENTRY伪指令用于指定汇编程序的入口点。在一个完整的汇编程序中至少要有一个ENTRY（也可以有多个，当有多个ENTRY时，程序的真正入口点由链接器指定），但在一个源文件里最多只能有一个ENTRY（可以没有）。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    ENTRY                         ;指定应用程序的入口点
    ……
</code></p>

<h5>5、  END</h5>

<p>语法格式：<br/>
END</p>

<p>END伪指令用于通知编译器已经到了源程序的结尾。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    ……
    END                              ;指定应用程序的结尾
</code></p>

<h5>6、  EQU</h5>

<p>语法格式：<br/>
名称     EQU 表达式{，类型}</p>

<p>EQU伪指令用于为程序中的常量、标号等定义一个等效的字符名称，类似于C语言中的＃define。其中EQU可用“*”代替。<br/>
名称为EQU伪指令定义的字符名称，当表达式为32位的常量时，可以指定表达式的数据类型，可以有以下三种类型：<br/>
CODE16、CODE32和DATA</p>

<p>使用示例：
<code>
    Test    EQU 50                ;定义标号Test的值为50
    Addr EQU 0x55，CODE32          ;定义Addr的值为0x55，且该处为32位的ARM指令。
</code></p>

<h5>7、  EXPORT（或GLOBAL）</h5>

<p>语法格式：<br/>
EXPORT       标号{[WEAK]}</p>

<p>EXPORT伪指令用于在程序中声明一个全局的标号，该标号可在其他的文件中引用。EXPORT可用GLOBAL代替。标号在程序中区分大小写，[WEAK]选项声明其他的同名标号优先于该标号被引用。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    EXPORT      Stest               ;声明一个可全局引用的标号Stest
    ……
    END     
</code></p>

<h5>8、  IMPORT</h5>

<p>语法格式：<br/>
IMPORT       标号{[WEAK]}</p>

<p>IMPORT伪指令用于通知编译器要使用的标号在其他的源文件中定义，但要在当前源文件中引用，而且无论当前源文件是否引用该标号，该标号均会被加入到当前源文件的符号表中。<br/>
标号在程序中区分大小写，[WEAK]选项表示当所有的源文件都没有定义这样一个标号时，编译器也不给出错误信息，在多数情况下将该标号置为0，若该标号为B或BL指令引用，则将B或BL指令置为NOP操作。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    IMPORT      Main                ;通知编译器当前文件要引用标号Main，
    但Main在其他源文件中定义
    ……
    END    
</code></p>

<h5>9、  EXTERN</h5>

<p>语法格式：<br/>
EXTERN       标号{[WEAK]}</p>

<p>EXTERN伪指令用于通知编译器要使用的标号在其他的源文件中定义，但要在当前源文件中引用，如果当前源文件实际并未引用该标号，该标号就不会被加入到当前源文件的符号表中。<br/>
标号在程序中区分大小写，[WEAK]选项表示当所有的源文件都没有定义这样一个标号时，编译器也不给出错误信息，在多数情况下将该标号置为0，若该标号为B或BL指令引用，则将B或BL指令置为NOP操作。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    EXTERN      Main                  ;通知编译器当前文件要引用标号Main，
    但Main在其他源文件中定义
    ……
    END       
</code></p>

<h5>10、GET（或INCLUDE）</h5>

<p>语法格式：<br/>
GET      文件名</p>

<p>GET伪指令用于将一个源文件包含到当前的源文件中，并将被包含的源文件在当前位置进行汇编处理。可以使用INCLUDE代替GET。<br/>
汇编程序中常用的方法是在某源文件中定义一些宏指令，用EQU定义常量的符号名称，用MAP和FIELD定义结构化的数据类型，然后用GET伪指令将这个源文件包含到其他的源文件中。使用方法与C语言中的“include”相似。<br/>
GET伪指令只能用于包含源文件，包含目标文件需要使用INCBIN伪指令</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    GET a1.s                     ;通知编译器当前源文件包含源文件a1.s
    GE  T   C：\a2.s            ;通知编译器当前源文件包含源文件C：\ a2.s
    ……
    END     
</code></p>

<h5>11、INCBIN</h5>

<p>语法格式：<br/>
INCBIN       文件名</p>

<p>INCBIN伪指令用于将一个目标文件或数据文件包含到当前的源文件中，被包含的文件不作任何变动的存放在当前文件中，编译器从其后开始继续处理。</p>

<p>使用示例：
<code>
    AREA    Init，CODE，READONLY
    INCBIN      a1.dat          ;通知编译器当前源文件包含文件a1.dat
    INCBIN C：\a2.txt          ;通知编译器当前源文件包含文件C：\a2.txt
    ……
    END     
</code></p>

<h5>12、RN</h5>

<p>语法格式：<br/>
名称     RN      表达式</p>

<p>RN伪指令用于给一个寄存器定义一个别名。采用这种方式可以方便程序员记忆该寄存器的功能。其中，名称为给寄存器定义的别名，表达式为寄存器的编码。</p>

<p>使用示例：
<code>
Temp    RN  R0               ;将R0定义一个别名Temp
</code></p>

<h5>13、ROUT</h5>

<p>语法格式：<br/>
{名称}   ROUT</p>

<p>ROUT伪指令用于给一个局部变量定义作用范围。在程序中未使用该伪指令时，局部变量的作用范围为所在的AREA，而使用ROUT后，局部变量的作为范围为当前ROUT和下一个ROUT之间。</p>

<hr />

<h3>4 ARM GNU常用汇编语言介绍</h3>

<h4>4.1 ARM GNU常用汇编伪指令介绍</h4>

<h5>1. abort</h5>

<p>.abort: 停止汇编<br/>
.align absexpr1,absexpr2:<br/>
以某种对齐方式,在未使用的存储区域填充值. 第一个值表示对齐方式,4, 8,16或32. 第二个表达式值表示填充的值.</p>

<h5>2. if&hellip;else&hellip;endif</h5>

<p>.if<br/>
.else<br/>
.endif: 支持条件预编译</p>

<h5>3. include</h5>

<p>.include &ldquo;file&rdquo;: 包含指定的头文件, 可以把一个汇编常量定义放在头文件中.</p>

<h5>4. comm</h5>

<p>.comm  symbol, length:在bss段申请一段命名空间,该段空间的名称叫symbol, 长度为length. Ld连接器在连接会为它留出空间.</p>

<h5>5. data</h5>

<p>.data subsection: 说明接下来的定义归属于subsection数据段.</p>

<h5>6. equ</h5>

<p>.equ symbol, expression: 把某一个符号(symbol)定义成某一个值(expression).该指令并不分配空间.</p>

<h5>7. global</h5>

<p>.global symbol: 定义一个全局符号, 通常是为ld使用.</p>

<h5>8. ascii</h5>

<p>.ascii &ldquo;string&rdquo;: 定义一个字符串并为之分配空间.</p>

<h5>9. byte</h5>

<p>.byte expressions: 定义一个字节, 并为之分配空间.</p>

<h5>10. short</h5>

<p>.short expressions: 定义一个短整型, 并为之分配空间.</p>

<h5>11. int</h5>

<p>.int expressions: 定义一个整型,并为之分配空间.</p>

<h5>12 long</h5>

<p>.long expressions: 定义一个长整型, 并为之分配空间.</p>

<h5>13 word</h5>

<p>.word expressions: 定义一个字,并为之分配空间, 4bytes.</p>

<h5>14. macro/endm</h5>

<p>.macro: 定义一段宏代码, .macro表示代码的开始, .endm表示代码的结束.</p>

<h5>15. req</h5>

<p>name .req register name: 为寄存器定义一个别名.</p>

<h5>16. code</h5>

<p>.code [16|32]: 指定指令代码产生的长度, 16表示Thumb指令, 32表示ARM指令.</p>

<h5>17. ltorg</h5>

<p>.ltorg: 表示当前往下的定义在归于当前段,并为之分配空间.</p>

<h4>4.2 ARM GNU专有符号</h4>

<h5>1. @</h5>

<p>表示注释从当前位置到行尾的字符.</p>

<h5>2.</h5>

<p>注释掉一整行.</p>

<h5>3. ;</h5>

<p>新行分隔符.</p>

<h4>4.3 操作码</h4>

<h5>1. NOP</h5>

<p>nop<br/>
空操作, 相当于MOV r0, r0</p>

<h5>2. LDR</h5>

<p>ldr <register> , = <expression><br/>
相当于PC寄存器或其它寄存器的长转移.</p>

<h5>3.ADR</h5>

<p>adr <register> <label><br/>
相于PC寄存器或其它寄存器的小范围转移.<br/>
ADRL<br/>
adrl <register> <label><br/>
相于PC寄存器或其寄存器的中范围转移.</p>

<h3>5 可执行生成说明</h3>

<h4>5.1 lds文件说明</h4>

<h5>5.1.1 主要符号说明</h5>

<ol>
<li><p>OUTPUT_FORMAT(bfdname)<br/>
指定输出可执行文件格式.</p></li>
<li><p>OUTPUT_ARCH(bfdname)<br/>
指定输出可执行文件所运行CPU平台</p></li>
<li><p>ENTRY(symbol)<br/>
指定可执行文件的入口段</p></li>
</ol>


<h5>5.1.2 段定义说明</h5>

<ol>
<li>段定义格式
<code>
 SECTIONS
 { ...
     段名 :
     {
         内容
     }
 ...
 }
</code></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grub修复]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub/"/>
    <updated>2015-01-30T09:57:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/30/system-base-fix-grub</id>
    <content type="html"><![CDATA[<p><a href="http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html">http://www.centoscn.com/CentosBug/osbug/2014/0327/2671.html</a></p>

<p>grub全称在为GRand Unified Bootloader,它的核心功能是引导内核，但是如果grub出了问题，内核无法找到，那岂不是万劫不复了，下面就介绍一下常用的修复方式。</p>

<h4>第一种情况:</h4>

<p>是由于grub中的grub.conf文件损坏，开机后直接进入到了grub>命令行模式下。下面将图解此过程</p>

<p><img src="/images/system/grub/2015-01-30-1.jpg" alt="" /></p>

<p>这时可以使用help看一下grub可支持命令有那些，以便供修复时使用。</p>

<p><img src="/images/system/grub/2015-01-30-2.jpg" alt="" /></p>

<p>第二个使用的命令是find (hd0,0)/按tab如果能补全就表示系统在此分区上。</p>

<p><img src="/images/system/grub/2015-01-30-3.jpg" alt="" /></p>

<p>各个参数说明：</p>

<p><img src="/images/system/grub/2015-01-30-4.jpg" alt="" /></p>

<p>这时要注意，当你指定内核后，但未指定内核后面的参数（ro root=(此处未指定的话)）将无法正常启动，报：请给root参数，一般情况下是系统是可以自动探测到，但这个功能并不靠谱，那么只能靠备份或你的记忆将参数补上（所以定期备份/etc/fstab、与grub.conf、是多么重要的事情，原因你懂的。）</p>

<p>如下图：</p>

<p><img src="/images/system/grub/2015-01-30-5.jpg" alt="" /></p>

<p>而这时就看到你平时的习惯了，备份相当重要</p>

<p><img src="/images/system/grub/2015-01-30-6.jpg" alt="" /></p>

<p>当正常登录系统后，将grub.conf文件重新写就可以了。（上图的完整路径是root=/dev/mapper/vg_www-lv_root，写全了就看不到了，所以在此特别说明）</p>

<p><img src="/images/system/grub/2015-01-30-7.jpg" alt="" /></p>

<p>看到title了吧</p>

<p><img src="/images/system/grub/2015-01-30-8.jpg" alt="" /></p>

<p>过了下面这张图就说明系统是可以正常启动了</p>

<p><img src="/images/system/grub/2015-01-30-9.jpg" alt="" /></p>

<p>第一种情况顺利解决!a_c</p>

<h4>第二种情况：</h4>

<p>grub损坏（最明显的提示为：Operating System not found）</p>

<p>如mbr数据损坏（注仅是bootloader损坏，分区表是好的），如果没有重新启动还可能修复，但是如果是重启后发现grub损坏，那么只能挂载光盘进入紧急救援模式。（以下将以挂载光盘说明）</p>

<p><img src="/images/system/grub/2015-01-30-10.jpg" alt="" /></p>

<p>dd执行之后的景象，是不是好惊悚a_c</p>

<p><img src="/images/system/grub/2015-01-30-11.jpg" alt="" /></p>

<p>挂载光盘进入紧急救援模式,在BIOS中将光盘设置为第一引导设备。</p>

<p><img src="/images/system/grub/2015-01-30-12.jpg" alt="" /></p>

<p>在菜单中选择"Rescue installed system"</p>

<p><img src="/images/system/grub/2015-01-30-13.jpg" alt="" /></p>

<p>之后将对：语言&mdash;-》键盘设置</p>

<p><img src="/images/system/grub/2015-01-30-14.jpg" alt="" /></p>

<p>是否启用网络（不需要，则No,如果选择了Yes将要求选择获取IP地址的方式）</p>

<p><img src="/images/system/grub/2015-01-30-15.jpg" alt="" /></p>

<p>正式进入救援模式</p>

<p><img src="/images/system/grub/2015-01-30-16.jpg" alt="" /></p>

<p>原系统己经挂载的位置，如何切换到原系统下</p>

<p><img src="/images/system/grub/2015-01-30-17.jpg" alt="" /></p>

<p>开启一个shell</p>

<p><img src="/images/system/grub/2015-01-30-18.jpg" alt="" /></p>

<p>切换到原系统</p>

<p><img src="/images/system/grub/2015-01-30-19.jpg" alt="" /></p>

<p>这时可以直接输入grub命令进入grub中（这个grub是光盘中的）</p>

<p><img src="/images/system/grub/2015-01-30-20.jpg" alt="" /></p>

<p>直接使用 help  setup会显示setup的使用方法。</p>

<p>设置root(root默认分区)如（hd0,0），此分区一定要root所在的系统分区，之后使用setup安装，命令是setup(hd0)(由于mbr并属于分区，所以将grub安装到hd0设备即可)，如果是成功了会有succeeded提示。quit退出即可</p>

<p><img src="/images/system/grub/2015-01-30-21.jpg" alt="" /></p>

<p>重启系统，取出光盘，有如下信息就表示修复完成</p>

<p><img src="/images/system/grub/2015-01-30-22.jpg" alt="" /></p>

<p>如果grub目录都损坏，无法正常启动。则可以在此模式使用grub-install &ndash;root-directory=/  /dev/sda（设备是什么就写什么）手写配置文件grub.conf即可</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux软中断机制分析]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark3/"/>
    <updated>2015-01-23T14:29:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark3</id>
    <content type="html"><![CDATA[<h3>软中断分析</h3>

<h4>1. 为什么要软中断</h4>

<p>编写驱动的时候，一个中断产生之后，内核在中断处理函数中可能需要完成很多工作。但是中断处理函数的处理是关闭了中断的。也就是说在响应中断时，系统不能再次响应外部的其它中断。这样的后果会造成有可能丢失外部中断。于是，linux内核设计出了一种架构，中断函数需要处理的任务分为两部分，一部分在中断处理函数中执行，这时系统关闭中断。另外一部分在软件中断中执行，这个时候开启中断，系统可以响应外部中断。</p>

<p>关于软件中断的理论各种书籍都有介绍，不多叙述。而要真正体会软件中断的作用就必须从代码的角度来分析。我们做工作时候讲求的是professional，当一个人在某个领域一无所知的时候，我们称他为小白，偶，非苹果电脑。小白的脑子里充满了各种问题。慢慢的当这些疑惑解释完之后，小白就脱白了。此时，我们对这个领域的基本框架有了解，但这和professional还有一定的差距。再加以时日，逐渐融会贯通该领域才能达到专业的境界。</p>

<h4>2. 什么时候触发处理软件中断</h4>

<p>说了这么多废话，赶快步入正题。初识软中断，脑子里肯定有不少的疑问，首先就是软件中断在什么地方被触发处理？这个问题的答案就是：一个硬件中断处理完成之后。下面的函数在处理完硬件中断之后推出中断处理函数，在irq_exit中会触发软件中断的处理。
```
    asmlinkage void __exception asm_do_IRQ(unsigned int irq, struct pt_regs <em>regs)
    {
        struct pt_regs </em>old_regs = set_irq_regs(regs);</p>

<pre><code>    irq_enter();

    /*
     * Some hardware gives randomly wrong interrupts.  Rather
     * than crashing, do something sensible.
     */ 
    if (irq &gt;= NR_IRQS)
        handle_bad_irq(irq, &amp;bad_irq_desc);
    else 
        generic_handle_irq(irq);

    /* AT91 specific workaround */ 
    irq_finish(irq);

    irq_exit();
    set_irq_regs(old_regs);
}
</code></pre>

<pre><code>这里要注意，invoke_softirq必须满足两个条件才能被调用到，一个就是不是在硬件中断处理过程中或者在软件中断处理中，第二个就是必须有软件中断处于pending状态。第二个好理解，有软件中断产生才去处理，没有就不处理。第一个就不好理解了。
</code></pre>

<pre><code>/*
* Exit an interrupt context. Process softirqs if needed and possible:
*/ 
void irq_exit(void)
{
    account_system_vtime(current);
    trace_hardirq_exit();
    sub_preempt_count(IRQ_EXIT_OFFSET);
    if (!in_interrupt() &amp;&amp; local_softirq_pending())
        invoke_softirq();

#ifdef CONFIG_NO_HZ
    /* Make sure that timer wheel updates are propagated */ 
    rcu_irq_exit();
    if (idle_cpu(smp_processor_id()) &amp;&amp; !in_interrupt() &amp;&amp; !need_resched())
        tick_nohz_stop_sched_tick(0);
#endif 
    preempt_enable_no_resched();
}
</code></pre>

<pre><code>在linux系统的进程数据结构里，有这么一个数据结构
</code></pre>

<pre><code>#define preempt_count() (current_thread_info()-&gt;preempt_count)，
</code></pre>

<pre><code>利用preempt_count可以表示是否处于中断处理或者软件中断处理过程中。
</code></pre>

<pre><code>#define PREEMPT_MASK    (__IRQ_MASK(PREEMPT_BITS) &lt;&lt; PREEMPT_SHIFT)
#define SOFTIRQ_MASK    (__IRQ_MASK(SOFTIRQ_BITS) &lt;&lt; SOFTIRQ_SHIFT)
#define HARDIRQ_MASK    (__IRQ_MASK(HARDIRQ_BITS) &lt;&lt; HARDIRQ_SHIFT)

#define PREEMPT_OFFSET    (1UL &lt;&lt; PREEMPT_SHIFT)
#define SOFTIRQ_OFFSET    (1UL &lt;&lt; SOFTIRQ_SHIFT)
#define HARDIRQ_OFFSET    (1UL &lt;&lt; HARDIRQ_SHIFT)

sub_preempt_count(IRQ_EXIT_OFFSET);

#define in_interrupt() (irq_count())

#define irq_count() (preempt_count() &amp; (HARDIRQ_MASK | SOFTIRQ_MASK))
</code></pre>

<pre><code>
![](/images/kernel/2015-01-23-1.png)

preempt_count的8～23位记录中断处理和软件中断处理过程的计数。如果有计数，表示系统在硬件中断或者软件中断处理过程中。系统这么设计是为了避免软件中断在中断嵌套中被调用，并且达到在单个CPU上软件中断不能被重入的目的。对于ARM架构的CPU不存在中断嵌套中调用软件中断的问题，因为ARM架构的CPU在处理硬件中断的过程中是关闭掉中断的。只有在进入了软中断处理过程中之后才会开启硬件中断，如果在软件中断处理过程中有硬件中断嵌套，也不会再次调用软中断，because硬件中断是软件中断处理过程中再次进入的，此时preempt_count已经记录了软件中断！对于其它架构的CPU，有可能在触发调用软件中断前，也就是还在处理硬件中断的时候，就已经开启了硬件中断，可能会发生中断嵌套，在中断嵌套中是不允许调用软件中断处理的。Why？我的理解是，在发生中断嵌套的时候，表明这个时候是系统突发繁忙的时候，内核第一要务就是赶紧把中断中的事情处理完成，退出中断嵌套。避免多次嵌套，哪里有时间处理软件中断，所以把软件中断推迟到了所有中断处理完成的时候才能触发软件中断。

#### 3. 软件中断的处理过程

之前我已经说到，软中断的一个很大的目的就是避免中断处理中，处理的操作过多而丢失中断。同时中断还需要考虑到一件事情就是中断处理过程过长就会影响系统响应时间。如果一个中断处理一秒钟，那你一定能感受到串口卡住的现象。从另外一方面说呢，我们又必须考虑中断处理的操作一定的优先度，毕竟是硬件触发的事务，关系到网络、块设备的效率问题。Linux内核就中断方面就必须考虑平衡这三个方面的问题。而下面我要分析的__do_softirq函数就恰似在这三者之间打太极，游刃有余，面面俱到！
</code></pre>

<pre><code>/*
* We restart softirq processing MAX_SOFTIRQ_RESTART times,
* and we fall back to softirqd after that.
*
* This number has been established via experimentation.
* The two things to balance is latency against fairness -
* we want to handle softirqs as soon as possible, but they
* should not be able to lock up the box.
*/ 
#define MAX_SOFTIRQ_RESTART 10 

asmlinkage void __do_softirq(void)
{
    struct softirq_action *h;
    __u32 pending;
    int max_restart = MAX_SOFTIRQ_RESTART;
    int cpu;

    pending = local_softirq_pending();
    account_system_vtime(current);

    __local_bh_disable((unsigned long)__builtin_return_address(0));
    trace_softirq_enter();

    cpu = smp_processor_id();
restart:
    /* Reset the pending bitmask before enabling irqs */ 
    set_softirq_pending(0);

    local_irq_enable();

    h = softirq_vec;

    do 
    {
        if (pending &amp; 1)
        {
            int prev_count = preempt_count();

            h-&gt;action(h);

            if (unlikely(prev_count != preempt_count()))
            {
                printk(KERN_ERR "huh, entered softirq %td %p" 
                       "with preempt_count %08x," 
                       " exited with %08x?\n", h - softirq_vec,
                       h-&gt;action, prev_count, preempt_count());
                preempt_count() = prev_count;
            }

            rcu_bh_qsctr_inc(cpu);
        }
        h++;
        pending &gt;&gt;= 1;
    }
    while (pending);

    local_irq_disable();

    pending = local_softirq_pending();
    if (pending &amp;&amp; --max_restart)
        goto restart;

    if (pending)
        wakeup_softirqd();

    trace_softirq_exit();

    account_system_vtime(current);
    _local_bh_enable();
}
</code></pre>

<pre><code>
__do_softirq函数处理软件中断过程如下图流程分析

4. 首先调用local_softirq_pending函数取得目前有哪些位存在软件中断

5. 调用__local_bh_disable关闭软中断，其实就是设置正在处理软件中断标记，在同一个CPU上使得不能重入__do_softirq函数

6. 重新设置软中断标记为0，set_softirq_pending重新设置软中断标记为0，这样在之后重新开启中断之后硬件中断中又可以设置软件中断位。

7. 开启硬件中断

8. 之后在一个循环中，遍历pending标志的每一位，如果这一位设置就会调用软件中断的处理函数。在这个过程中硬件中断是开启的，随时可以打断软件中断。这样保证硬件中断不会丢失。

9. 之后关闭硬件中断，查看是否又有软件中断处于pending状态，如果是，并且在本次调用__do_softirq函数过程中没有累计重复进入软件中断处理的次数超过10次，就可以重新调用软件中断处理。如果超过了10次，就调用wakeup_softirqd();唤醒内核的一个进程来处理软件中断。设立10次的限制，也是为了避免影响系统响应时间。

![](/images/kernel/2015-01-23-2.png)

#### 4. 处理软中断内核线程

之前我说到不能让CPU长时间来处理中断事务，这样会影响系统的响应时间，严重影响用户和系统之间的交互式体验。所以在之前的__do_softirq中最多将循环执行10次，那么当执行了10次仍然有软中断在pending状态，这个时候应该怎么处理呢？系统将唤醒一个软件中断处理的内核进程，在内核进程中处理pending中的软件中断。这里要注意，之前我们分析的触发软件中断的位置其实是中断上下文中，而在软中断的内核线程中实际已经是进程的上下文。

这里说的软中断上下文指的就是系统为每个CPU建立的ksoftirqd进程。

看完这个函数，我不得不佩服这个函数设计的精巧！而我更多的从中体会到其中蕴藏的一种做人的道理。那就是做人要霸道一点，太谦和太恭维不行，但是又不能横行霸道，原则的问题要公平讲理，一定的时候顾及别人的利益，好处不能一个人独吞。这就跟下面ksoftirqd处理过程一样，该狠的时候禁止抢占，其它进程别想调度到哦，但是自己占用CPU时间过长的话，也自觉的问一问是不是该释放CPU给其它进程了。

下面我们就来分析一下这个处理过程怎么就体现了上面的这种说法呢？软中断的内核进程中主要有两个大循环，外层的循环处理有软件中断就处理，没有软件中断就休眠。内层的循环处理软件中断，并每循环一次都试探一次是否过长时间占据了CPU，需要调度释放CPU给其它进程。具体的操作在注释中做了解释。
</code></pre>

<pre><code>static int ksoftirqd(void *__bind_cpu)
{
    set_current_state(TASK_INTERRUPTIBLE);

    while (!kthread_should_stop())
    {
        /*不管三七二十一首先禁止抢占，我掌握CPU，并全凭我自己掌握调度*/ 
        preempt_disable();
        if (!local_softirq_pending())
        {
            preempt_enable_no_resched();
            /*如果没有软中断在pending，那就让出CPU来吧*/ 
            schedule();
           /*我被唤醒了，首先掌握CPU，不让自己被抢占，自己决定自己的是否要调度*/ 
            preempt_disable();
        }

        __set_current_state(TASK_RUNNING);

        while (local_softirq_pending())
        {
            /* Preempt disable stops cpu going offline.
               If already offline, we'll be on wrong CPU:
               don't process */ 
            if (cpu_is_offline((long)__bind_cpu))
                goto wait_to_die;
            /*处理软中断*/ 
            do_softirq();
            /*虽然我自己掌握是否要调度，虽然我可以一直不调度，但是我是
            个正直的人，运行一段时间后我会看看是否需要调度，还其它进程运行*/ 
            preempt_enable_no_resched();
            cond_resched();
            preempt_disable();
            rcu_qsctr_inc((long)__bind_cpu);
        }
        preempt_enable();
        set_current_state(TASK_INTERRUPTIBLE);
    }
    __set_current_state(TASK_RUNNING);
    return 0;

wait_to_die:
    preempt_enable();
    /* Wait for kthread_stop */ 
    set_current_state(TASK_INTERRUPTIBLE);
    while (!kthread_should_stop())
    {
        schedule();
        set_current_state(TASK_INTERRUPTIBLE);
    }
    __set_current_state(TASK_RUNNING);
    return 0;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中断机制]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark2/"/>
    <updated>2015-01-23T14:03:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/01/23/kernel-irq-mark2</id>
    <content type="html"><![CDATA[<h4>1、</h4>

<p>cpu的中断管理和指令执行（运算器）是两套硬件，他们互相独立又有关联。</p>

<h4>2、</h4>

<p>无论中断是否允许，运算器都按自己的节奏工作，无须花时间去查询是否由中断到达。</p>

<h4>3、</h4>

<p>中断管理器则不断地探测是否有中断信号到达，若有且中断允许，则保存当前执行状态信息，然后打断当前取指序列，强行转到特定地址（中断向量）取指令，整个过程运算器并不知道，它只是忠实地执行取指电路取得的指令。<br/>
  因此，只要没有中断信号到达，就不存在cpu边走边看的问题。
  为保证正确访问临界数据区和正确执行临界代码段，操作系统一般有：关中断、关调度、信号量，还有些操作系统提供原子变量的方法，linux中广为人知的锁其实是用信号量实现的。那么，这么多的方法中，什么情况适用哪一种方法呢？是有规律的。</p>

<h5>1、原子变量</h5>

<p>  原子变量可以保证一个变量单次操作的正确性，其保护甚至比信号量还完善，信号量只能保护全局数据不被其他线程破坏，而原子变量能保证全局数据不被中断破坏。
<code>
    example1：
        atomic int a;
    int b,c;
    a = a + b + c;
</code>
上述代码中，cpu对a有一个读、修改、写的过程，这个过程如果被打断，并在其他线程中修改了a值，执行结果将出现错误，而原子变量将保证不会发生这样的错误。
原子变量不能保护一系列操作的原子性，若把上述代码改为
<code>
    example2：
    atomic int a;
    int b,c;
    a = a + b; //L1
    a = a + c; //L2
</code>
原子变量不能保证L1和L2两行程序间a不被其他线程修改，因此example2不一定能得到正确的结果。</p>

<h5>2、信号量</h5>

<p>  稍微完善一点的操作系统都提供信号量机制，用于保护临界代码。上述example2就应该用下列代码替代L1和L2：
<code>
    获取信号量；
    a = a + b; //L1
    a = a + c; //L2
    释放信号量；
</code>
当一个全局变量可能被多个线程操作时，就应该用信号量保护，注意，不能在中断中访问用信号量保护的变量。</p>

<h5>3、关调度</h5>

<p>  关调度是一种比较粗暴的方式，关调度后，操作系统不会再进行线程上下文切换，而是专心执行一个线程，但是中断仍然开着。关调度可以起到替代信号量保护全局变量的作用，但一般不这样用，太粗暴了。但是如果某一段代码的执行时间有要求，希望cpu全速执行不被打断，但又不希望关中断时，可用关调度的方法。注意，从逻辑上，关调度能替换信号量，但不能替换原子变量。</p>

<h5>4、关中断</h5>

<p>  关中断是最粗暴的一种方式，用于保证最严格的时序执行，比如某段代码要在IO上输出两个高精度脉冲，脉冲宽度2uS，间隔2uS，这种需求只能通过用精确的指令延时来实现，延时过程中，如果被中断，或者发生线程切换，将不能正确输出脉冲。从逻辑上，前面所讲的三种保护，都可以用关中断实现，只是，太粗暴了。</p>
]]></content>
  </entry>
  
</feed>
