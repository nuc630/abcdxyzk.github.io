<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: compiler | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/compiler/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-03-09T11:22:18+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[部分GCC选项]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args/"/>
    <updated>2014-12-04T17:23:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/04/compiler-gcc-args</id>
    <content type="html"><![CDATA[<h5>-Werror 和 -I 很有用</h5>

<table>
<tr bgcolor="#c0c0c0">
<th>命令</th><th>描述</th>
</tr>
<tr>
<td>-l&nbsp;<em>library</em>-l<em>library</em></td>
<td>进行链接时搜索名为library的库。例子： $ gcc test.c -lm -o test</td>
</tr>
<tr>
<td>-I<em>dir</em></td>
<td>把<em>dir</em>加入到搜索头文件的路径列表中。例子： $ gcc test.c -I../inc -o test</td>
</tr>
<tr>
<td>-L<em>dir</em></td>
<td>把<em>dir</em>加入到搜索库文件的路径列表中。例子： $ gcc -I/home/foo -L/home/foo -ltest test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em></td>
<td>预定义一个名为<em>name</em>的宏，值为1。例子： $ gcc -DTEST_CONFIG test.c -o test</td>
</tr>
<tr>
<td>-D<em>name</em>=<em>definition</em></td>
<td>预定义名为<em>name</em>，值为<em>definition</em>的宏。</td>
</tr>
<tr>
<td>-ggdb&nbsp;-ggdb<em>level</em></td>
<td>为调试器 gdb 生成调试信息。<em>level</em>可以为1，2，3，默认值为2。</td>
</tr>
<tr>
<td>-g&nbsp;-g<em>level</em></td>
<td>生成操作系统本地格式的调试信息。-g 和 -ggdb 并不太相同， -g 会生成 gdb 之外的信息。<em>level</em>取值同上。</td>
</tr>
<tr>
<td>-s</td>
<td>去除可执行文件中的符号表和重定位信息。用于减小可执行文件的大小。</td>
</tr>
<tr>
<td>-M</td>
<td>告诉预处理器输出一个适合make的规则，用于描述各目标文件的依赖关系。对于每个 源文件，预处理器输出 一个make规则，该规则的目标项(target)是源文件对应的目标文件名，依赖项(dependency)是源文件中 #include引用的所有文件。生成的规则可 以是单行，但如果太长，就用`/'-换行符续成多行。规则 显示在标准输出，不产生预处理过的C程序。</td>
</tr>
<tr>
<td>-C</td>
<td>告诉预处理器不要丢弃注释。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-P</td>
<td>告诉预处理器不要产生`#line'命令。配合`-E'选项使用。</td>
</tr>
<tr>
<td>-static</td>
<td>在支持动态链接的系统上，阻止连接共享库。该选项在其它系统上 无效。</td>
</tr>
<tr>
<td>-nostdlib</td>
<td>不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器。</td>
</tr>
<tr bgcolor="#c0c0c0">
<th>Warnings</th><th></th>
</tr>
<tr>
<td>-Wall</td>
<td>会打开一些很有用的警告选项，建议编译时加此选项。</td>
</tr>
<tr>
<td>-W&nbsp;-Wextra</td>
<td>打印一些额外的警告信息。</td>
</tr>
<tr>
<td>-w</td>
<td>禁止显示所有警告信息。</td>
</tr>
<tr>
<td>-Wshadow</td>
<td>当一个局部变量遮盖住了另一个局部变量，或者全局变量时，给出警告。很有用的选项，建议打开。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wpointer-arith</td>
<td>对函数指针或者void *类型的指针进行算术操作时给出警告。也很有用。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Wcast-qual</td>
<td>当强制转化丢掉了类型修饰符时给出警告。 -Wall 并不会打开此项。</td>
</tr>
<tr>
<td>-Waggregate-return</td>
<td>如果定义或调用了返回结构体或联合体的函数，编译器就发出警告。</td>
</tr>
<tr>
<td>-Winline</td>
<td>无论是声明为 inline 或者是指定了-finline-functions 选项，如果某函数不能内联，编译器都将发出警告。如果你的代码含有很多 inline 函数的话，这是很有用的选项。</td>
</tr>
<tr>
<td>-Werror</td>
<td>把警告当作错误。出现任何警告就放弃编译。</td>
</tr>
<tr>
<td>-Wunreachable-code</td>
<td>如果编译器探测到永远不会执行到的代码，就给出警告。也是比较有用的选项。</td>
</tr>
<tr>
<td>-Wcast-align</td>
<td>一旦某个指针类型强制转换导致目标所需的地址对齐增加时，编译器就发出警告。</td>
</tr>
<tr>
<td>-Wundef</td>
<td>当一个没有定义的符号出现在 #if 中时，给出警告。</td>
</tr>
<tr>
<td>-Wredundant-decls</td>
<td>如果在同一个可见域内某定义多次声明，编译器就发出警告，即使这些重复声明有效并且毫无差别。</td>
</tr>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gcc同时使用动态和静态链接]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/06/complier-static-dynamic-ld/"/>
    <updated>2014-11-06T14:51:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/06/complier-static-dynamic-ld</id>
    <content type="html"><![CDATA[<p>gcc &ndash;static a.c -Wl,-Bstatic -lm -Wl,-Bdynamic -lc</p>

<p>其中用到的两个选项：-Wl,-Bstatic和-Wl,-Bdynamic。这两个选项是gcc的特殊选项，它会将选项的参数传递给链接器，作为 链接器的选项。比如-Wl,-Bstatic告诉链接器使用-Bstatic选项，该选项是告诉链接器，对接下来的-l选项使用静态链 接；-Wl,-Bdynamic就是告诉链接器对接下来的-l选项使用动态链接。下面是man gcc对-Wl,option的描述，<br/>
<code>
    -Wl,option  
       Pass option as an option to the linker.  If option contains commas, it is   
       split into multiple options at the commas.  You can use this syntax to pass  
       an argument to the option.  For example, -Wl,-Map,output.map passes -Map output.map  
       to the linker.  When using the GNU linker, you can also get the same effect with   
       -Wl,-Map=output.map.  
</code>
下面是man ld分别对-Bstatic和-Bdynamic的描述，<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Bdynamic&lt;br/&gt;
</span><span class='line'>-dy&lt;br/&gt;
</span><span class='line'>-call_shared&lt;br/&gt;
</span><span class='line'>   Link against dynamic libraries. You may use this option multiple times on the&lt;br/&gt;
</span><span class='line'>   command line: it affects library searching for -l options which follow it.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;-Bstatic  
</span><span class='line'>-dn  
</span><span class='line'>-non_shared  
</span><span class='line'>-static  
</span><span class='line'>   Do not link against shared libraries. You may use this option multiple times on   
</span><span class='line'>   the command line: it affects library searching for -l options which follow it.   
</span><span class='line'>   This option also implies --unresolved-symbols=report-all.  This option can be   
</span><span class='line'>   used with -shared.  Doing so means that a shared library is being created but   
</span><span class='line'>   that all of the library's external references must be resolved by pulling in   
</span><span class='line'>   entries from static libraries.  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>值得注意的是对-static的描述：-static和-shared可以同时存在，这样会创建共享库，但该共享库引用的其他库会静态地链接到该共享库中。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[GCC制作Library--shared部分相当不错]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/11/06/compiler-gcc-lib/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-11-06T14:49:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/11/06/compiler-gcc-lib&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/alex_ww/article/details/4544207"&gt;贴自http://blog.csdn.net/alex_ww/article/details/4544207&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;Library可分成三种，static、shared与dynamically loaded。&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;1. Static libraries&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Static 链接库用于静态链接，简单讲是把一堆object檔用ar(archiver)包装集合起来，文件名以 `.a' 结尾。优点是执行效能通常会比后两者快，而且因为是静态链接，所以不易发生执行时找不到library或版本错置而无法执行的问题。缺点则是档案较大，维护度较低；例如library如果发现bug需要更新，那么就必须重新连结执行档。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1.1 编译&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;编译方式很简单，先例用 `-c' 编出 object 檔，再用 ar 包起来即可。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>____ hello.c ____
</span><span class='line'>#include
</span><span class='line'>void hello(){ printf("Hello "); }
</span><span class='line'>____ world.c ____
</span><span class='line'>#include
</span><span class='line'>void world(){ printf("world."); }
</span><span class='line'>____ mylib.h ____
</span><span class='line'>void hello();
</span><span class='line'>void world();
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ gcc -c hello.c world.c /* 编出 hello.o 与 world.o */ &lt;br/&gt;
</span><span class='line'>$ ar rcs libmylib.a hello.o world.o /* 包成 limylib.a */ &lt;br/&gt;
</span><span class='line'>这样就可以建出一个档名为 libmylib.a 的檔。输出的档名其实没有硬性规定，但如果想要配合 gcc 的 &lsquo;-l&rsquo; 参数来连结，一定要以 &lsquo;lib&rsquo; 开头，中间是你要的library名称，然后紧接着 &lsquo;.a&rsquo; 结尾。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;1.2 使用&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    ____ main.c ____
</span><span class='line'>#include "mylib.h"
</span><span class='line'>int main() {
</span><span class='line'>hello();
</span><span class='line'>world();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用上就像与一般的 object 档连结没有差别。&lt;br/&gt;
</span><span class='line'>$ gcc main.c libmylib.a&lt;br/&gt;
</span><span class='line'>也可以配合 gcc 的 `-l' 参数使用&lt;br/&gt;
</span><span class='line'>$ gcc main.c -L. -lmylib&lt;br/&gt;
</span><span class='line'>&lsquo;-Ldir&rsquo; 参数用来指定要搜寻链接库的目录，'.&lsquo; 表示搜寻现在所在的目录。通常默认会搜 /usr/lib 或 /lib 等目录。&lt;br/&gt;
</span><span class='line'>&rsquo;-llibrary' 参数用来指定要连结的链接库，'mylib' 表示要与mylib进行连结，他会搜寻library名称前加'lib'后接'.a'的档案来连结。&lt;br/&gt;
</span><span class='line'>$ ./a.out&lt;br/&gt;
</span><span class='line'>Hello world.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;2. Shared libraries&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Shared library 会在程序执行起始时才被自动加载。因为链接库与执行档是分离的，所以维护弹性较好。有两点要注意，shared library是在程序起始时就要被加载，而不是执行中用到才加载，而且在连结阶段需要有该链接库才能进行连结。&lt;br/&gt;
</span><span class='line'>首先有一些名词要弄懂，soname、real name与linker name。&lt;br/&gt;
</span><span class='line'>soname 用来表示是一个特定 library 的名称，像是 libmylib.so.1 。前面以 &lsquo;lib&rsquo; 开头，接着是该 library 的名称，然后是 &lsquo;.so&rsquo; ，接着是版号，用来表名他的界面；如果接口改变时，就会增加版号来维护兼容度。&lt;br/&gt;
</span><span class='line'>real name 是实际放有library程序的文件名，后面会再加上 minor 版号与release 版号，像是 libmylib.so.1.0.0 。&lt;br/&gt;
</span><span class='line'>一般来说，版号的改变规则是(印象中在 APress-Difinitive Guide to GCC中有提到，但目前手边没这本书)，最后缀的release版号用于程序内容的修正，接口完全没有改变。中间的minor用于有新增加接口，但相旧接口没改变，所以与旧版本兼容。最前面的version版号用于原接口有移除或改变，与旧版不兼容时。&lt;br/&gt;
</span><span class='line'>linker name是用于连结时的名称，是不含版号的 soname ，如: libmylib.so。&lt;br/&gt;
</span><span class='line'>通常 linker name与 real name是用 ln 指到对应的 real name ，用来提供弹性与维护性。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2.1 编译&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;shared library的制作过程较复杂。&lt;br/&gt;
</span><span class='line'>$ gcc -c -fPIC hello.c world.c&lt;br/&gt;
</span><span class='line'>编译时要加上 -fPIC 用来产生 position-independent code。也可以用 -fpic参数。 (不太清楚差异，只知道 -fPIC 较通用于不同平台，但产生的code较大，而且编译速度较慢)。&lt;br/&gt;
</span><span class='line'>$ gcc -shared -Wl,-soname,libmylib.so.1 -o libmylib.so.1.0.0 /&lt;br/&gt;
</span><span class='line'>hello.o world.o&lt;br/&gt;
</span><span class='line'>-shared 表示要编译成 shared library&lt;br/&gt;
</span><span class='line'>-Wl 用于参递参数给linker，因此-soname与libmylib.so.1会被传给linker处理。&lt;br/&gt;
</span><span class='line'>-soname用来指名 soname 为 limylib.so.1&lt;br/&gt;
</span><span class='line'>library会被输出成libmylib.so.1.0.0 (也就是real name)&lt;br/&gt;
</span><span class='line'>若不指定 soname 的话，在编译结连后的执行档会以连时的library档名为soname，并载入他。否则是载入soname指定的library档案。&lt;br/&gt;
</span><span class='line'>可以利用 objdump 来看 library 的 soname。&lt;br/&gt;
</span><span class='line'>$ objdump -p libmylib.so | grep SONAME&lt;br/&gt;
</span><span class='line'>SONAME libmylib.so.1&lt;br/&gt;
</span><span class='line'>若不指名-soname参数的话，则library不会有这个字段数据。&lt;br/&gt;
</span><span class='line'>在编译后再用 ln 来建立 soname 与 linker name 两个档案。&lt;br/&gt;
</span><span class='line'>$ ln -s libmylib.so.1.0.0 libmylib.so&lt;br/&gt;
</span><span class='line'>$ ln -s libmylib.so.1.0.0 libmylib.so.1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;2.2 使用&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;与使用 static library 同。&lt;br/&gt;
</span><span class='line'>$ gcc main.c libmylib.so&lt;br/&gt;
</span><span class='line'>以上直接指定与 libmylib.so 连结。&lt;br/&gt;
</span><span class='line'>或用&lt;br/&gt;
</span><span class='line'>$ gcc main.c -L. -lmylib&lt;br/&gt;
</span><span class='line'>linker会搜寻 libmylib.so 来进行连结。&lt;br/&gt;
</span><span class='line'>如果目录下同时有static与shared library的话，会以shared为主。&lt;br/&gt;
</span><span class='line'>使用 -static 参数可以避免使用shared连结。&lt;br/&gt;
</span><span class='line'>$ gcc main.c -static -L. -lmylib&lt;br/&gt;
</span><span class='line'>此时可以用 ldd 看编译出的执行档与shared链接库的相依性&lt;br/&gt;
</span><span class='line'>$ldd a.out&lt;br/&gt;
</span><span class='line'>linux-gate.so.1 =&gt; (0xffffe000)&lt;br/&gt;
</span><span class='line'>libmylib.so.1 =&gt; not found&lt;br/&gt;
</span><span class='line'>libc.so.6 =&gt; /lib/libc.so.6 (0xb7dd6000)&lt;br/&gt;
</span><span class='line'>/lib/ld-linux.so.2 (0xb7f07000)&lt;br/&gt;
</span><span class='line'>输出结果显示出该执行文件需要 libmylib.so.1 这个shared library。&lt;br/&gt;
</span><span class='line'>会显示 not found 因为没指定该library所在的目录，所找不到该library。&lt;br/&gt;
</span><span class='line'>因为编译时有指定-soname参数为 libmylib.so.1 的关系，所以该执行档会加载libmylib.so.1。否则以libmylib.so连结，执行档则会变成要求加载libmylib.so
</span><span class='line'>$ ./a.out&lt;br/&gt;
</span><span class='line'>./a.out: error while loading shared libraries: libmylib.so.1:&lt;br/&gt;
</span><span class='line'>cannot open shared object file: No such file or directory&lt;br/&gt;
</span><span class='line'>因为找不到 libmylib.so.1 所以无法执行程序。&lt;br/&gt;
</span><span class='line'>有几个方式可以处理。&lt;br/&gt;
</span><span class='line'>a. 把 libmylib.so.1 安装到系统的library目录，如/usr/lib下&lt;br/&gt;
</span><span class='line'>b. 设定 /etc/ld.so.conf ，加入一个新的library搜寻目录，并执行ldconfig&lt;br/&gt;
</span><span class='line'>更新快取&lt;br/&gt;
</span><span class='line'>c. 设定 LD_LIBRARY_PATH 环境变量来搜寻library&lt;br/&gt;
</span><span class='line'>这个例子是加入当前目录来搜寻要载作的library&lt;br/&gt;
</span><span class='line'>$ LD_LIBRARY_PATH=. ./a.out&lt;br/&gt;
</span><span class='line'>Hello world.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3. Dynamically loaded libraries&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Dynamicaaly loaded libraries 才是像 windows 所用的 DLL ，在使用到&lt;br/&gt;
</span><span class='line'>时才加载，编译连结时不需要相关的library。动态载入库常被用于像plug-ins的应用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;3.1 使用方式&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;动态加载是透过一套 dl function来处理。&lt;br/&gt;
</span><span class='line'>#include &lt;dlfcn.h&gt;&lt;br/&gt;
</span><span class='line'>void *dlopen(const char *filename, int flag);&lt;br/&gt;
</span><span class='line'>开启加载 filename 指定的 library。&lt;br/&gt;
</span><span class='line'>void *dlsym(void *handle, const char *symbol);&lt;br/&gt;
</span><span class='line'>取得 symbol 指定的symbol name在library被加载的内存地址。&lt;br/&gt;
</span><span class='line'>int dlclose(void *handle);&lt;br/&gt;
</span><span class='line'>关闭dlopen开启的handle。&lt;br/&gt;
</span><span class='line'>char *dlerror(void);&lt;br/&gt;
</span><span class='line'>传回最近所发生的错误讯息。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>____ dltest.c ____
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;dlfcn.h&gt;
</span><span class='line'>int main() {
</span><span class='line'>void *handle;
</span><span class='line'>void (*f)();
</span><span class='line'>char *error;
</span><span class='line'>/* 开启之前所撰写的 libmylib.so 链接库 */
</span><span class='line'>handle = dlopen("./libmylib.so", RTLD_LAZY);
</span><span class='line'>if( !handle ) {
</span><span class='line'>fputs( dlerror(), stderr);
</span><span class='line'>exit(1);
</span><span class='line'>}
</span><span class='line'>/* 取得 hello function 的 address */
</span><span class='line'>f = dlsym(handle, "hello");
</span><span class='line'>if(( error=dlerror())!=NULL) {
</span><span class='line'>fputs(error, stderr);
</span><span class='line'>exit(1);
</span><span class='line'>}
</span><span class='line'>/* 呼叫该 function */
</span><span class='line'>f();
</span><span class='line'>dlclose(handle);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>编译时要加上 -ldl 参数来与 dl library 连结&lt;br/&gt;
</span><span class='line'>$ gcc dltest.c -ldl&lt;br/&gt;
</span><span class='line'>结果会印出 Hello 字符串&lt;br/&gt;
</span><span class='line'>$ ./a.out&lt;br/&gt;
</span><span class='line'>Hello&lt;br/&gt;
</span><span class='line'>关于dl的详细内容请参阅 man dlopen&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[编译期间求值]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2013/11/05/compiler-cal/"/&gt;
</span><span class='line'>&lt;updated&gt;2013-11-05T14:26:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2013/11/05/compiler-cal&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;编译期求阶乘&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;c++ 中的模板可以用来计算一些值，在编译的时候就是实现计算，而不是运行的时候。&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;求阶乘 n!，一般 me 们会写个这样的程序：</span></code></pre></td></tr></table></div></figure>
    #include <iostream>
    long Factorial(long n)
    {
        return n == 0 ? 1 : n*Factorial(n-1);
    }</p>

<pre><code>int main()
{
    long fac=1, n=20;
    for(int i=1; i&lt;=n; ++i)fac *= i;
    std::cout &lt;&lt; "20! = " &lt;&lt; fac &lt;&lt; " " &lt;&lt; Factorial(20) &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>现在使用模板技术，类似于递归的方法求 20 !。
</code></pre>

<pre><code>#include &lt;iostream&gt;

template&lt;int N&gt;
class Factorial{
public:
    static const long value = N*Factorial&lt;N-1&gt;::value;
};

template&lt;&gt;
class Factorial&lt;0&gt;{
public:
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; "20! = " &lt;&lt; Factorial&lt;20&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>说明：  
  template 通常用来参数化类型，通常 class T 或是 typename T(T 用来代替一个类型的名字)，不过也可以带一个整型参数 N (貌似规定只能是整型)。  
  template &lt;&gt; 是用来特殊指定一些情形，比如上面给的 Factorial&lt;0&gt; 指定 N = 0 时的情形，这有点像递归中的 if(n==0) return 1;  
  class 类中可以带有 static const 变量，这种变量可以在类内初始化(只能是整型)；当然既是 const 变量，又是 static 变量；  
  Factorila&lt;20&gt; 实际是一个类，而 ::value 是其 static 变量；在生成Factorila&lt;20&gt; 的时候同时生成了众多的Factorila&lt;N&gt; ( N &gt;0 &amp;&amp; N &lt; 20)类；  

更多例子  
模板类，或是模版函数，或是模板成员函数，都是编译器根据程序的实际情况而生成的，需要什么就生成什么，不需要就不生成。上面的例子中， 程序中使用 Factorial&lt;20&gt; 这个类，就生成这个类，因为 Factorial&lt;20&gt; 依赖 Factorial&lt;19&gt; 所以又生成 Factorial&lt;19&gt; ，这样一直依赖下去，直到 Factorial&lt;0&gt;( me 们已经指定了)。因为是编译期生成，也是编译器求值，所以实际程序中只能使用 static const 类似的 —— 常量，而不能使用普通的 int n。所以，模板元编程中，么发使用循环，只能类似递归的技术。  
通常 me 们会将递归程序转换为循环程序，实际上循环程序基本也都可以递归解决。(是不是一定呢？O__O"…)  
求斐波那契数
</code></pre>

<pre><code>#include &lt;iostream&gt;

template &lt;long N&gt;
struct Fibonacci{
    static const long value = Fibonacci&lt;N-1&gt;::value + Fibonacci&lt;N-2&gt;::value;
};

template&lt;&gt;
struct Fibonacci&lt;0&gt;{
    static const long value = 0;
};

template&lt;&gt;
struct Fibonacci&lt;1&gt;{
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; Fibonacci&lt;12&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>第 12 个斐波那契数是 144，这是唯一一个 Fib(n) = n*n 的数。
求 1+2+3+...+n
</code></pre>

<pre><code>#include &lt;iostream&gt;

template &lt;long N&gt;
struct Sum{
    static const long value = N+Sum&lt;N-1&gt;::value;
};

template&lt;&gt;
struct Sum&lt;1&gt;{
    static const long value = 1;
};

int main()
{
    std::cout &lt;&lt; Sum&lt;100&gt;::value &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<pre><code>这个和 n! 的用法基本一样。

#### constexpr编译期求值
  模板只是在编译的时候完成工作的一种方法，实际上上面的模板元编程也只是在编译期求了一些常量而已；为了简化使用模板进行元编程的难度，c++11 引入了 constexpr 关键字 —— 声明常量或是函数，实现在编译期求值。上面的三个程序都可以大大简化：
</code></pre>

<pre><code>#include &lt;iostream&gt;

constexpr long factorial(long n)
{
    return n&lt;=1 ? 1 : n*factorial(n-1);
}
constexpr long fibonacci(long n)
{
    return n&lt;=1 ? n : fibonacci(n-1)+fibonacci(n-2);
}
constexpr long sum(long n)
{
    return n&lt;=1 ? n : n+sum(n-1);
}

int main()
{
    std::cout &lt;&lt; "10! F(12) 1+2+...+100 =&gt; " &lt;&lt; factorial(10) &lt;&lt; " " &lt;&lt; fibonacci(12) &lt;&lt; " " &lt;&lt; sum(100) &lt;&lt; std::endl;
    return 0;
}
</code></pre>

<p>```
不用多数，看应该看得懂神马意思，要提的就是 constexpr 都是编译的时候求值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[binutils(含as、ld等)静态编译]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static/"/>
    <updated>2013-10-31T14:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/31/compiler-binutil-static</id>
    <content type="html"><![CDATA[<p>binutils下载 <a href="http://ftp.gnu.org/gnu/binutils/">http://ftp.gnu.org/gnu/binutils/</a></p>

<h4>binutils静态编译：</h4>

<pre><code>    ./configure
    make LDFLAGS=-all-static
</code></pre>

<h5>原因：</h5>

<p>他们链接的时候是通过 ./libtool 完成的，在libtool里有一行提示（./libtool &ndash;help没有显示这个提示)：
<code>
    -all-static       do not do any dynamic linking at all
</code>
所以就是要libtool增加-all-static参数</p>

<h4>比较通用的静态编译方法</h4>

<pre><code>    ./configure 后加   CFLAGS=-static --enable-static LDFLAGS=-static --disable-shared
    或
    ./configure 后加   CFLAGS=-static LDFLAGS=-static
    或
    make CFLAGS=-static LDFLAGS=-static
</code></pre>
]]></content>
  </entry>
  
</feed>
