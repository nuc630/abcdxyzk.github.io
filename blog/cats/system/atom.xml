<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/system/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-11-17T15:30:21+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cpuset子系统]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/08/07/cgroup-9/"/>
    <updated>2015-08-07T17:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/08/07/cgroup-9</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/lisperl/archive/2012/05/02/2478817.html">http://www.cnblogs.com/lisperl/archive/2012/05/02/2478817.html</a></p>

<p>cpuset子系统为cgroup 中的任务分配独立 CPU（在多核系统）和内存节点。Cpuset子系统为定义了一个叫cpuset的数据结构来管理cgroup中的任务能够使用的cpu和内存节点。Cpuset定义如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct cpuset {
</span><span class='line'>    struct cgroup_subsys_state css;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    unsigned long flags; /* "unsigned long" so bitops work */
</span><span class='line'>cpumask_var_t cpus_allowed; /* CPUs allowed to tasks in cpuset */
</span><span class='line'>nodemask_t mems_allowed; /* Memory Nodes allowed to tasks */
</span><span class='line'>
</span><span class='line'>struct cpuset *parent; /* my parent */
</span><span class='line'>
</span><span class='line'>struct fmeter fmeter; /* memory_pressure filter */
</span><span class='line'>
</span><span class='line'>/* partition number for rebuild_sched_domains() */
</span><span class='line'>int pn;
</span><span class='line'>
</span><span class='line'>/* for custom sched domain */
</span><span class='line'>int relax_domain_level;
</span><span class='line'>
</span><span class='line'>/* used for walking a cpuset heirarchy */
</span><span class='line'>struct list_head stack_list;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;其中css字段用于task或cgroup获取cpuset结构。
</span><span class='line'>
</span><span class='line'>cpus_allowed和mems_allowed定义了该cpuset包含的cpu和内存节点。
</span><span class='line'>
</span><span class='line'>Parent字段用于维持cpuset的树状结构，stack_list则用于遍历cpuset的层次结构。
</span><span class='line'>
</span><span class='line'>Pn和relax_domain_level是跟Linux 调度域相关的字段，pn指定了cpuset的调度域的分区号，而relax_domain_level表示进行cpu负载均衡寻找空闲cpu的策略。
</span><span class='line'>
</span><span class='line'>除此之外，进程的task_struct结构体里面还有一个cpumask_t cpus_allowed成员，用以存储进程的cpus_allowed信息;一个nodemask_t mems_allowed成员，用于存储进程的mems_allowed信息。
</span><span class='line'>
</span><span class='line'>Cpuset子系统的实现是通过在内核代码加入一些hook代码。由于代码比较散，我们逐条分析。
</span><span class='line'>
</span><span class='line'>在内核初始化代码（即start_kernel函数）中插入了对cpuset_init调用的代码，这个函数用于cpuset的初始化。
</span><span class='line'>
</span><span class='line'>下面我们来看这个函数：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int __init cpuset_init(void)
</span><span class='line'>{
</span><span class='line'>int err = 0;
</span><span class='line'>
</span><span class='line'>if (!alloc_cpumask_var(&amp;top_cpuset.cpus_allowed, GFP_KERNEL))
</span><span class='line'>    BUG();
</span><span class='line'>
</span><span class='line'>cpumask_setall(top_cpuset.cpus_allowed);
</span><span class='line'>nodes_setall(top_cpuset.mems_allowed);
</span><span class='line'>
</span><span class='line'>fmeter_init(&amp;top_cpuset.fmeter);
</span><span class='line'>set_bit(CS_SCHED_LOAD_BALANCE, &amp;top_cpuset.flags);
</span><span class='line'>top_cpuset.relax_domain_level = -1;
</span><span class='line'>
</span><span class='line'>err = register_filesystem(&amp;cpuset_fs_type);
</span><span class='line'>if (err &lt; 0)
</span><span class='line'>    return err;
</span><span class='line'>
</span><span class='line'>if (!alloc_cpumask_var(&amp;cpus_attach, GFP_KERNEL))
</span><span class='line'>    BUG();
</span><span class='line'>
</span><span class='line'>number_of_cpusets = 1;
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cpumask_setall和nodes_setall将top_cpuset能使用的cpu和内存节点设置成所有节点。紧接着，初始化fmeter，设置top_cpuset的load balance标志。最后注册cpuset文件系统，这个是为了兼容性，因为在cgroups之前就有cpuset了，不过在具体实现时，对cpuset文件系统的操作都被重定向了cgroup文件系统。
</span><span class='line'>
</span><span class='line'>除了这些初始化工作，cpuset子系统还在do_basic_setup函数（此函数在kernel_init中被调用）中插入了对cpuset_init_smp的调用代码，用于smp相关的初始化工作。
</span><span class='line'>
</span><span class='line'>下面我们看这个函数：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void __init cpuset_init_smp(void)
</span><span class='line'>{
</span><span class='line'>cpumask_copy(top_cpuset.cpus_allowed, cpu_active_mask);
</span><span class='line'>top_cpuset.mems_allowed = node_states[N_HIGH_MEMORY];
</span><span class='line'>
</span><span class='line'>hotcpu_notifier(cpuset_track_online_cpus, 0);
</span><span class='line'>hotplug_memory_notifier(cpuset_track_online_nodes, 10);
</span><span class='line'>
</span><span class='line'>cpuset_wq = create_singlethread_workqueue("cpuset");
</span><span class='line'>BUG_ON(!cpuset_wq);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;首先，将top_cpuset的cpu和memory节点设置成所有online的节点，之前初始化时还不知道有哪些online节点所以只是简单设成所有，在smp初始化后就可以将其设成所有online节点了。然后加入了两个hook函数，cpuset_track_online_cpus和cpuset_track_online_nodes，这个两个函数将在cpu和memory热插拔时被调用。
</span><span class='line'>
</span><span class='line'>cpuset_track_online_cpus函数中调用scan_for_empty_cpusets函数扫描空的cpuset，并将其下的进程移到其非空的parent下，同时更新cpuset的cpus_allowed信息。cpuset_track_online_nodes的处理类似。
</span><span class='line'>
</span><span class='line'>那cpuset又是怎么对进程的调度起作用的呢？
</span><span class='line'>
</span><span class='line'>这个就跟task_struct中cpu_allowed字段有关了。首先，这个cpu_allowed和进程所属的cpuset的cpus_allowed保持一致；其次，在进程被fork出来的时候，进程继承了父进程的cpuset和cpus_allowed字段；最后，进程被fork出来后，除非指定CLONE_STOPPED标记，都会被调用wake_up_new_task唤醒，在wake_up_new_task中有：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cpu = select_task_rq(rq, p, SD_BALANCE_FORK, 0);
</span><span class='line'>set_task_cpu(p, cpu);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;即为新fork出来的进程选择运行的cpu，而select_task_rq会调用进程所属的调度器的函数，对于普通进程，其调度器是CFS，CFS对应的函数是select_task_rq_fair。在select_task_rq_fair返回选到的cpu后，select_task_rq会对结果和cpu_allowed比较：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (unlikely(!cpumask_test_cpu(cpu, &amp;p-&gt;cpus_allowed) ||
</span><span class='line'> !cpu_online(cpu)))
</span><span class='line'>cpu = select_fallback_rq(task_cpu(p), p);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这就保证了新fork出来的进程只能在cpu_allowed中的cpu上运行。
</span><span class='line'>
</span><span class='line'>对于被wake up的进程来说，在被调度之前，也会调用select_task_rq选择可运行的cpu。
</span><span class='line'>
</span><span class='line'>这就保证了进程任何时候都只会在cpu_allowed中的cpu上运行。
</span><span class='line'>
</span><span class='line'>最后说一下，如何保证task_struct中的cpus_allowd和进程所属的cpuset中的cpus_allowed一致。首先，在cpu热插拔时，scan_for_empty_cpusets会更新task_struct中的cpus_allowed信息，其次对cpuset下的控制文件写入操作时也会更新task_struct中的cpus_allowed信息,最后当一个进程被attach到其他cpuset时，同样会更新task_struct中的cpus_allowed信息。
</span><span class='line'>
</span><span class='line'>在cpuset之前，Linux内核就提供了指定进程可以运行的cpu的方法。通过调用sched_setaffinity可以指定进程可以运行的cpu。Cpuset对其进行了扩展，保证此调用设定的cpu仍然在cpu_allowed的范围内。在sched_setaffinity中，插入了这样两行代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cpuset_cpus_allowed(p, cpus_allowed);
</span><span class='line'>cpumask_and(new_mask, in_mask, cpus_allowed);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;其中cpuset_cpus_allowed返回进程对应的cpuset中的cpus_allowed，cpumask_and则将cpus_allowed和调用sched_setaffinity时的参数in_mask相与得出进程新的cpus_allowed。
</span><span class='line'>
</span><span class='line'>通过以上代码的嵌入，Linux内核实现了对进程可调度的cpu的控制。下面我们来分析一下cpuset对memory节点的控制。
</span><span class='line'>
</span><span class='line'>Linux中内核分配物理页框的函数有6个:alloc_pages,alloc_page,__get_free_pages,__get_free_page,get_zeroed_page,__get_dma_pages,这些函数最终都通过alloc_pages实现，而alloc_pages又通过__alloc_pages_nodemask实现，在__alloc_pages_nodemask中，调用get_page_from_freelist从zone list中分配一个page，在get_page_from_freelist中调用cpuset_zone_allowed_softwall判断当前节点是否属于mems_allowed。通过附加这样一个判断，保证进程从mems_allowed中的节点分配内存。
</span><span class='line'>
</span><span class='line'>Linux在cpuset出现之前，也提供了mbind, set_mempolicy来限定进程可用的内存节点。Cpuset子系统对其做了扩展，扩展的方法跟扩展sched_setaffinity类似，通过导出cpuset_mems_allowed，返回进程所属的cupset允许的内存节点，对mbind，set_mempolicy的参数进行过滤。
</span><span class='line'>
</span><span class='line'>最后让我们来看一下，cpuset子系统最重要的两个控制文件：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{
</span><span class='line'>.name = "cpus",
</span><span class='line'>.read = cpuset_common_file_read,
</span><span class='line'>.write_string = cpuset_write_resmask,
</span><span class='line'>.max_write_len = (100U + 6 * NR_CPUS),
</span><span class='line'>.private = FILE_CPULIST,
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>.name = "mems",
</span><span class='line'>.read = cpuset_common_file_read,
</span><span class='line'>.write_string = cpuset_write_resmask,
</span><span class='line'>.max_write_len = (100U + 6 * MAX_NUMNODES),
</span><span class='line'>.private = FILE_MEMLIST,
</span><span class='line'>},
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>通过cpus文件，我们可以指定进程可以使用的cpu节点，通过mems文件，我们可以指定进程可以使用的memory节点。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这两个文件的读写都是通过cpuset_common_file_read和cpuset_write_resmask实现的，通过private属性区分。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在cpuset_common_file_read中读出可用的cpu或memory节点；在cpuset_write_resmask中则根据文件类型分别调用update_cpumask和update_nodemask更新cpu或memory节点信息。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[memory子系统]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/08/07/cgroup-8/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-08-07T17:22:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/08/07/cgroup-8&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.cnblogs.com/lisperl/archive/2012/04/28/2474872.html"&gt;http://www.cnblogs.com/lisperl/archive/2012/04/28/2474872.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;memory 子系统可以设定 cgroup 中任务使用的内存限制，并自动生成由那些任务使用的内存资源报告。memory子系统是通过linux的resource counter机制实现的。下面我们就先来看一下resource counter机制。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;resource counter是内核为子系统提供的一种资源管理机制。这个机制的实现包括了用于记录资源的数据结构和相关函数。Resource counter定义了一个res_counter的结构体来管理特定资源，定义如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>struct res_counter {
</span><span class='line'>    unsigned long long usage;
</span><span class='line'>    unsigned long long max_usage;
</span><span class='line'>    unsigned long long limit;
</span><span class='line'>    unsigned long long soft_limit;
</span><span class='line'>    unsigned long long failcnt; /*
</span><span class='line'>    spinlock_t lock;
</span><span class='line'>    struct res_counter *parent;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Usage用于记录当前已使用的资源，max_usage用于记录使用过的最大资源量，limit用于设置资源的使用上限，进程组不能使用超过这个限制的资源，soft_limit用于设定一个软上限，进程组使用的资源可以超过这个限制，failcnt用于记录资源分配失败的次数，管理可以根据这个记录，调整上限值。Parent指向父节点，这个变量用于处理层次性的资源管理。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;除了这个关键的数据结构，resource counter还定义了一系列相关的函数。下面我们来看几个关键的函数。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    void res_counter_init(struct res_counter *counter, struct res_counter *parent)
</span><span class='line'>{
</span><span class='line'>    spin_lock_init(&amp;counter-&gt;lock);
</span><span class='line'>    counter-&gt;limit = RESOURCE_MAX;
</span><span class='line'>    counter-&gt;soft_limit = RESOURCE_MAX;
</span><span class='line'>    counter-&gt;parent = parent;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个函数用于初始化一个res_counter。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;第二个关键的函数是int res_counter_charge(struct res_counter *counter, unsigned long val, struct res_counter **limit_fail_at)。当资源将要被分配的时候，资源就要被记录到相应的res_counter里。这个函数作用就是记录进程组使用的资源。在这个函数中有：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    for (c = counter; c != NULL; c = c-&gt;parent) {
</span><span class='line'>    spin_lock(&amp;c-&gt;lock);
</span><span class='line'>    ret = res_counter_charge_locked(c, val);
</span><span class='line'>    spin_unlock(&amp;c-&gt;lock);
</span><span class='line'>    if (ret &lt; 0) {
</span><span class='line'>        *limit_fail_at = c;
</span><span class='line'>        goto undo;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在这个循环里，从当前res_counter开始，从下往上逐层增加资源的使用量。我们来看一下res_counter_charge_locked这个函数，这个函数顾名思义就是在加锁的情况下增加使用量。实现如下：</span></code></pre></td></tr></table></div></figure>
    {
        if (counter->usage + val > counter->limit) {
            counter->failcnt++;
            return -ENOMEM;
        }</p>

<pre><code>    counter-&gt;usage += val;
    if (counter-&gt;usage &gt; counter-&gt;max_usage)
        counter-&gt;max_usage = counter-&gt;usage;
    return 0;
}
</code></pre>

<pre><code>首先判断是否已经超过使用上限，如果是的话就增加失败次数，返回相关代码；否则就增加使用量的值，如果这个值已经超过历史最大值，则更新最大值。

第三个关键的函数是void res_counter_uncharge(struct res_counter *counter, unsigned long val)。当资源被归还到系统的时候，要在相应的res_counter减轻相应的使用量。这个函数作用就在于在于此。实现如下：
</code></pre>

<pre><code>for (c = counter; c != NULL; c = c-&gt;parent) {
    spin_lock(&amp;c-&gt;lock);
    res_counter_uncharge_locked(c, val);
    spin_unlock(&amp;c-&gt;lock);
}
</code></pre>

<pre><code>从当前counter开始，从下往上逐层减少使用量，其中调用了res_counter_uncharge_locked，这个函数的作用就是在加锁的情况下减少相应的counter的使用量。

有这些数据结构和函数，只需要在内核分配资源的时候，植入相应的charge函数，释放资源时，植入相应的uncharge函数，就能实现对资源的控制了。

介绍完resource counter，我们再来看memory子系统是利用resource counter实现对内存资源的管理的。

memory子系统定义了一个叫mem_cgroup的结构体来管理cgroup相关的内存使用信息，定义如下：
</code></pre>

<pre><code>struct mem_cgroup {
    struct cgroup_subsys_state css;
    struct res_counter res;
    struct res_counter memsw;
    struct mem_cgroup_lru_info info;
    spinlock_t reclaim_param_lock;
    int prev_priority;
    int last_scanned_child;
    bool use_hierarchy;
    atomic_t oom_lock;
    atomic_t refcnt;
    unsigned int swappiness;
    int oom_kill_disable;
    bool memsw_is_minimum;
    struct mutex thresholds_lock;
    struct mem_cgroup_thresholds thresholds;
    struct mem_cgroup_thresholds memsw_thresholds;
    struct list_head oom_notify;
    unsigned long  move_charge_at_immigrate;
    struct mem_cgroup_stat_cpu *stat;
};
</code></pre>

<pre><code>跟其他子系统一样，mem_cgroup也包含了一个cgroup_subsys_state成员，便于task或cgroup获取mem_cgroup。

mem_cgroup中包含了两个res_counter成员，分别用于管理memory资源和memory+swap资源，如果memsw_is_minimum为true，则res.limit=memsw.limit，即当进程组使用的内存超过memory的限制时，不能通过swap来缓解。

use_hierarchy则用来标记资源控制和记录时是否是层次性的。

oom_kill_disable则表示是否使用oom-killer。

oom_notify指向一个oom notifier event fd链表。

另外memory子系统还定义了一个叫page_cgroup的结构体：
</code></pre>

<pre><code>struct page_cgroup {
    unsigned long flags;
    struct mem_cgroup *mem_cgroup;
    struct page *page;
    struct list_head lru; /* per cgroup LRU list */
};
</code></pre>

<pre><code>此结构体可以看作是mem_map的一个扩展，每个page_cgroup都和所有的page关联，而其中的mem_cgroup成员，则将page与特定的mem_cgroup关联起来。

我们知道在linux系统中，page结构体是用来管理物理页框的，一个物理页框对应一个page结构体，而每个进程中的task_struct中都有一个mm_struct来管理进程的内存信息。每个mm_struct知道它属于的进程，进而知道所属的mem_cgroup，而每个page都知道它属于的page_cgroup，进而也知道所属的mem_cgroup，而内存使用量的计算是按cgroup为单位的，这样以来，内存资源的管理就可以实现了。

memory子系统既然是通过resource counter实现的，那肯定会在内存分配给进程时进行charge操作的。下面我们就来看一下这些charge操作：

1.page fault发生时，有两种情况内核需要给进程分配新的页框。一种是进程请求调页（demand paging），另一种是copy on write。内核在handle_pte_fault中进行处理。其中，do_linear_fault处理pte不存在且页面线性映射了文件的情况，do_anonymous_page处理pte不存在且页面没有映射文件的情况，do_nonlinear_fault处理pte存在且页面非线性映射文件的情况，do_wp_page则处理copy on write的情况。其中do_linear_fault和do_nonlinear_fault都会调用__do_fault来处理。Memory子系统则__do_fault、do_anonymous_page、do_wp_page植入mem_cgroup_newpage_charge来进行charge操作。

2.内核在handle_pte_fault中进行处理时，还有一种情况是pte存在且页又没有映射文件。这种情况说明页面之前在内存中，但是后面被换出到swap空间了。内核用do_swap_page函数处理这种情况，memory子系统在do_swap_page加入了mem_cgroup_try_charge_swapin函数进行charge。mem_cgroup_try_charge_swapin是处理页面换入时的charge的，当执行swapoff系统调用（关掉swap空间），内核也会执行页面换入操作，因此mem_cgroup_try_charge_swapin也被植入到了相应的函数中。

3.当内核将page加入到page cache中时，也需要进行charge操作，mem_cgroup_cache_charge函数正是处理这种情况，它被植入到系统处理page cache的add_to_page_cache_locked函数中。

4.最后mem_cgroup_prepare_migration是用于处理内存迁移中的charge操作。

除了charge操作，memory子系统还需要处理相应的uncharge操作。下面我们来看一下uncharge操作：

1.mem_cgroup_uncharge_page用于当匿名页完全unmaped的时候。但是如果该page是swap cache的话，uncharge操作延迟到mem_cgroup_uncharge_swapcache被调用时执行。

2.mem_cgroup_uncharge_cache_page用于page cache从radix-tree删除的时候。但是如果该page是swap cache的话，uncharge操作延迟到mem_cgroup_uncharge_swapcache被调用时执行。

3.mem_cgroup_uncharge_swapcache用于swap cache从radix-tree删除的时候。Charge的资源会被算到swap_cgroup，如果mem+swap controller被禁用了，就不需要这样做了。

4.mem_cgroup_uncharge_swap用于swap_entry的引用数减到0的时候。这个函数主要在mem+swap controller可用的情况下使用的。

5.mem_cgroup_end_migration用于内存迁移结束时相关的uncharge操作。

Charge函数最终都是通过调用__mem_cgroup_try_charge来实现的。在__mem_cgroup_try_charge函数中，调用res_counter_charge(&amp;mem-&gt;res, csize, &amp;fail_res)对memory进行charge，调用res_counter_charge(&amp;mem-&gt;memsw, csize, &amp;fail_res)对memory+swap进行charge。

Uncharge函数最终都是通过调用__do_uncharge来实现的。在__do_uncharge中，分别调用res_counter_uncharge(&amp;mem-&gt;res,PAGE_SIZE)和res_counter_uncharge(&amp;mem-&gt;memsw, PAGE_SIZE)来uncharge memory和memory+swap。

跟其他子系统一样，memory子系统也实现了一个cgroup_subsys。
</code></pre>

<pre><code>struct cgroup_subsys mem_cgroup_subsys = {
    .name = "memory",
    .subsys_id = mem_cgroup_subsys_id,
    .create = mem_cgroup_create,
    .pre_destroy = mem_cgroup_pre_destroy,
    .destroy = mem_cgroup_destroy,
    .populate = mem_cgroup_populate,
    .can_attach = mem_cgroup_can_attach,
    .cancel_attach = mem_cgroup_cancel_attach,
    .attach = mem_cgroup_move_task,
    .early_init = 0,
    .use_id = 1,
};
</code></pre>

<pre><code>Memory子系统中重要的文件有
</code></pre>

<pre><code>memsw.limit_in_bytes
{
    .name = "memsw.limit_in_bytes",
    .private = MEMFILE_PRIVATE(_MEMSWAP, RES_LIMIT),
    .write_string = mem_cgroup_write,
    .read_u64 = mem_cgroup_read,
},
</code></pre>

<pre><code>这个文件用于设定memory+swap上限值。

Limit_in_bytes
</code></pre>

<pre><code>{
    .name = "limit_in_bytes",
    .private = MEMFILE_PRIVATE(_MEM, RES_LIMIT),
    .write_string = mem_cgroup_write,
    .read_u64 = mem_cgroup_read,
},
</code></pre>

<p>```
这个文件用于设定memory上限值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ns子系统]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/08/07/cgroup-7/"/>
    <updated>2015-08-07T17:20:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/08/07/cgroup-7</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/lisperl/archive/2012/04/26/2471776.html">http://www.cnblogs.com/lisperl/archive/2012/04/26/2471776.html</a></p>

<p>ns子系统是一个比较特殊的子系统。特殊在哪儿呢，首先ns子系统没有自己的控制文件，其次ns子系统没有属于自己的状态信息，这点从ns子系统的ns_cgroup的定义可以看出：
<code>
    struct ns_cgroup {
        struct cgroup_subsys_state css;
    };
</code>
它只有一个cgroup_subsys_state成员。</p>

<p>最后ns子系统的实现也比较简单，只是提供了一个ns_cgroup_clone函数，在copy_process和unshare_nsproxy_namespaces被调用。而ns_cgroup_clone函数本身的实现也很简单，只是在当前的cgroup下创建了一个子cgroup，该子cgroup完全clone了当前cgroup的信息，然后将当前的进程移到新建立的cgroup中。</p>

<p>这样看来，好像ns子系统没什么意义，其实不然。要想了解ns子系统的意义，就要分析一下ns_cgroup_clone被调用的时机了。我们来看copy_process中的代码：
<code>
    if (current-&gt;nsproxy != p-&gt;nsproxy) {
        retval = ns_cgroup_clone(p, pid);
        if (retval)
            goto bad_fork_free_pid;
    }
</code>
copy_process是在do_fork中被调用的，作用在于为子进程复制父进程的相关信息。这段意思就是当前进程（即父进程）和子进程的命名空间不同时，调用ns_cgroup_clone。这样以来，ns子系统的作用就清楚了，ns子系统实际上是提供了一种同命名空间的进程聚类的机制。具有相同命名空间的进程会在相同cgroup中。</p>

<p>那什么时候，父进程fork出的子进程会拥有不同的命名空间呢，这就设计到了Linux的命名空间的机制了，在这里就不详细讲了。简单说来就是，在调用fork时，加入了特殊flag（比如NEWPID,NEWNS）时，内核会为子进程创建不同的命令空间。</p>

<p>除了这种情况外，ns_cgroup_clone在unshare_nsproxy_namespaces用到了。unshare_nsproxy_namespaces函数被sys_unshare调用，实际上是对unshare系统调用的实现。当指定相应标记时，unshare系统调用会为调用的进程创建不同的命名空间，因此调用ns_cgroup_clone为其创建新的cgroup。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[freezer子系统]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/08/07/cgroup-6/"/>
    <updated>2015-08-07T17:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/08/07/cgroup-6</id>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/lisperl/archive/2012/04/25/2469587.html">http://www.cnblogs.com/lisperl/archive/2012/04/25/2469587.html</a></p>

<p>freezer子系统用于挂起和恢复cgroup中的进程。freezer有一个控制文件：freezer.state，将FROZEN写入该文件，可以将cgroup中的进程挂起，将THAWED写入该文件，可以将已挂起的进程恢复。该文件可能读出的值有三种，其中两种就是前面已提到的FROZEN和THAWED，分别代表进程已挂起和已恢复（正常运行），还有一种可能的值为FREEZING，显示该值表示该cgroup中有些进程现在不能被frozen。当这些不能被frozen的进程从该cgroup中消失的时候，FREEZING会变成FROZEN，或者手动将FROZEN或THAWED写入一次。</p>

<p>Freezer子系统用来管理cgroup状态的数据结构：
<code>
    struct freezer {
        struct cgroup_subsys_state css;
        enum freezer_state state;
        spinlock_t lock; /* protects _writes_ to state */
    };
</code></p>

<p>其中内嵌一个cgroup_subsys_state，便于从cgroup或task获得freezer结构，另一个字段存储cgroup当前的状态。</p>

<p>Freezer子系统是通过对freezer.state文件进行写入来控制进程的，那我们就从这个文件的cftype定义出发。</p>

<pre><code>    static struct cftype files[] = {
        {
            .name = "state",
            .read_seq_string = freezer_read,
            .write_string = freezer_write,
        },
    };
</code></pre>

<p>从文件读取是freezer_read实现的，该函数比较简单，主要就是从freezer结构体从读出状态，但是对FREEZING状态做了特殊处理：
<code>
    state = freezer-&gt;state;
    if (state == CGROUP_FREEZING) {
        /* We change from FREEZING to FROZEN lazily if the cgroup was
         * only partially frozen when we exitted write. */
        update_freezer_state(cgroup, freezer);
        state = freezer-&gt;state;
    }
</code>
如果是FREEZING状态，则需要更新状态（因为之前不能frozen的进程可能已经不在了）。我们来看update_freezer_state：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgroup_iter_start(cgroup, &amp;it);
</span><span class='line'>while ((task = cgroup_iter_next(cgroup, &amp;it))) {
</span><span class='line'>    ntotal++;
</span><span class='line'>    if (is_task_frozen_enough(task))
</span><span class='line'>        nfrozen++;
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/*
</span><span class='line'> * Transition to FROZEN when no new tasks can be added ensures
</span><span class='line'> * that we never exist in the FROZEN state while there are unfrozen
</span><span class='line'> * tasks.
</span><span class='line'> */
</span><span class='line'>if (nfrozen == ntotal)
</span><span class='line'>freezer-&gt;state = CGROUP_FROZEN;
</span><span class='line'>else if (nfrozen &gt; 0)
</span><span class='line'>freezer-&gt;state = CGROUP_FREEZING;
</span><span class='line'>else
</span><span class='line'>freezer-&gt;state = CGROUP_THAWED;
</span><span class='line'>cgroup_iter_end(cgroup, &amp;it);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这里对该cgroup所有的进程迭代了一遍，分别统计进程数和已经frozen的进程数，然后根据统计结果改变状态。
</span><span class='line'>
</span><span class='line'>下面我们来看对freezer.state写入的情况，该情况由freezer_write来处理，该函数中从写入值获取目标状态，然后调用freezer_change_state(cgroup, goal_state)来完成操作。在freezer_change_state中，根据goal_state分别调用不同的实现函数：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;switch (goal_state) {
</span><span class='line'>case CGROUP_THAWED:
</span><span class='line'>unfreeze_cgroup(cgroup, freezer);
</span><span class='line'>break;
</span><span class='line'>case CGROUP_FROZEN:
</span><span class='line'>retval = try_to_freeze_cgroup(cgroup, freezer);
</span><span class='line'>break;
</span><span class='line'>default:
</span><span class='line'>BUG();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我们先来看frozen的情况，该情况由try_to_freeze_cgroup来处理，该函数中有：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;freezer-&gt;state = CGROUP_FREEZING;
</span><span class='line'>cgroup_iter_start(cgroup, &amp;it);
</span><span class='line'>while ((task = cgroup_iter_next(cgroup, &amp;it))) {
</span><span class='line'>if (!freeze_task(task, true))
</span><span class='line'>    continue;
</span><span class='line'>if (is_task_frozen_enough(task))
</span><span class='line'>    continue;
</span><span class='line'>if (!freezing(task) &amp;&amp; !freezer_should_skip(task))
</span><span class='line'>    num_cant_freeze_now++;
</span><span class='line'>}
</span><span class='line'>cgroup_iter_end(cgroup, &amp;it);
</span><span class='line'>
</span><span class='line'>return num_cant_freeze_now ? -EBUSY : 0;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;首先将当前状态设成CGROUP_FREEZING，然后对cgroup中的进程进行迭代，while循环中对进程进行freeze操作，如果成功直接进行下一次迭代，如果不成功则进行进一步的判断，如果是进程已经frozen了，那也直接进行下一次迭代，如果不是，则进行计数。最后根据计数结果进行返回，如果所有进程都顺利frozen，则返回0，否则返回-EBUSY表示有进程不能被frozen。
</span><span class='line'>
</span><span class='line'>下面我们来看free_task这个函数，在这个函数中对task进行freeze操作。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (!freezing(p)) {
</span><span class='line'>rmb();
</span><span class='line'>if (frozen(p))
</span><span class='line'>    return false;
</span><span class='line'>
</span><span class='line'>if (!sig_only || should_send_signal(p))
</span><span class='line'>    set_freeze_flag(p);
</span><span class='line'>else
</span><span class='line'>    return false;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>if (should_send_signal(p)) {
</span><span class='line'>if (!signal_pending(p))
</span><span class='line'>    fake_signal_wake_up(p);
</span><span class='line'>} else if (sig_only) {
</span><span class='line'>return false;
</span><span class='line'>} else {
</span><span class='line'>wake_up_state(p, TASK_INTERRUPTIBLE);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return true;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;首先检查进程是不是已经被标记为正在freezing，如果不是再做判断。如果进程已经被frozen，则返回false。如果进程不是sig_only的或者可以发送信号（即进程无PF_FREEZER_NOSIG 标记），则设置进程的TIF_FREEZE标记。
</span><span class='line'>
</span><span class='line'>然后根据进程是否有PF_FREEZER_NOSIG 标记进行进一步处理，如果无这个标记，则给进程发送一个信号，唤醒进程，让进程处理TIF_FREEZE，即进行freeze操作，如果有这个标记，则如果进程是sig_only的，返回false（即不能完成free操作），否则直接唤醒进程去处理TIF_FREEZE。
</span><span class='line'>
</span><span class='line'>总结一下，对于我们这个freezer子系统的调用来说，sig_only=true，那么能成功的执行过程就是set_freeze_flag(p)-&gt;fake_signal_wake_up(p)。
</span><span class='line'>
</span><span class='line'>下面我们来看thaw 进程的情况，该情况由unfreeze_cgroup处理，在unfreeze_cgroup中有
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cgroup_iter_start(cgroup, &amp;it);
</span><span class='line'>while ((task = cgroup_iter_next(cgroup, &amp;it))) {
</span><span class='line'>thaw_process(task);
</span><span class='line'>}
</span><span class='line'>cgroup_iter_end(cgroup, &amp;it);
</span><span class='line'>
</span><span class='line'>freezer-&gt;state = CGROUP_THAWED;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;对该cgroup中所有的进程调用thaw_process，我们来看thaw_process。该函数中有：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (__thaw_process(p) == 1) {
</span><span class='line'>task_unlock(p);
</span><span class='line'>wake_up_process(p);
</span><span class='line'>return 1;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;其中__thaw_process中
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (frozen(p)) {
</span><span class='line'>p-&gt;flags &amp;= ~PF_FROZEN;
</span><span class='line'>return 1;
</span><span class='line'>}
</span><span class='line'>clear_freeze_flag(p);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;如果进程已经frozen，则清掉其frozen标记，如果不是的话，说明进程已经设置了TIF_FREEZE，但还没有frozen，所以只需要清掉TIF_FREEZE即可。
</span><span class='line'>
</span><span class='line'>回到thaw_process中，清掉了相关标记后，只需要唤醒进程，然后内核会自动处理。
</span><span class='line'>
</span><span class='line'>最后，我们再来看看freezer子系统结构体的定义：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct cgroup_subsys freezer_subsys = {
</span><span class='line'>.name = "freezer",
</span><span class='line'>.create = freezer_create,
</span><span class='line'>.destroy = freezer_destroy,
</span><span class='line'>.populate = freezer_populate,
</span><span class='line'>.subsys_id = freezer_subsys_id,
</span><span class='line'>.can_attach = freezer_can_attach,
</span><span class='line'>.attach = NULL,
</span><span class='line'>.fork = freezer_fork,
</span><span class='line'>.exit = NULL,
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>这里说一下can_attach，can_attach是在一个进程加入到一个cgroup之前调用的，检查是否可以attach，freezer_can_attach中对cgroup当前的状态做了检查，如果是frozen就返回错误，这说明不能将一个进程加入到一个frozen的cgroup。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[devices子系统]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/08/07/cgroup-5/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-08-07T16:54:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/08/07/cgroup-5&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://www.cnblogs.com/lisperl/archive/2012/04/24/2468170.html"&gt;http://www.cnblogs.com/lisperl/archive/2012/04/24/2468170.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用devices 子系统可以允许或者拒绝cgroup中的进程访问设备。devices子系统有三个控制文件：devices.allow,devices.deny,devices.list。devices.allow用于指定cgroup中的进程可以访问的设备,devices.deny用于指定cgroup中的进程不能访问的设备，devices.list用于报告cgroup中的进程访问的设备。devices.allow文件中包含若干条目，每个条目有四个字段：type、major、minor 和 access。type、major 和 minor 字段中使用的值对应 Linux 分配的设备。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;type指定设备类型：&lt;br/&gt;
</span><span class='line'>a - 应用所有设备，可以是字符设备，也可以是块设备&lt;br/&gt;
</span><span class='line'>b- 指定块设备&lt;br/&gt;
</span><span class='line'>c - 指定字符设备&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;major和minor指定设备的主次设备号。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;access 则指定相应的权限：&lt;br/&gt;
</span><span class='line'>r - 允许任务从指定设备中读取&lt;br/&gt;
</span><span class='line'>w - 允许任务写入指定设备&lt;br/&gt;
</span><span class='line'>m - 允许任务生成还不存在的设备文件&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;devices子系统是通过提供device whilelist 来实现的。与其他子系统一样，devices子系统也有一个内嵌了cgroup_subsystem_state的结构来管理资源。在devices子系统中，这个结构是：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>struct dev_cgroup {
</span><span class='line'>    struct cgroup_subsys_state css;
</span><span class='line'>    struct list_head whitelist;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个结构体除了通用的cgroup_subsystem_state之外，就只有一个链表指针，而这个链表指针指向了该cgroup中的进程可以访问的devices whilelist。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面我们来看一下devices子系统如何管理whilelist。在devices子系统中，定义了一个叫dev_whitelist_item的结构来管理可以访问的device，对应于devices.allow中的一个条目。这个结构体的定义如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>struct dev_whitelist_item {
</span><span class='line'>    u32 major, minor;
</span><span class='line'>    short type;
</span><span class='line'>    short access;
</span><span class='line'>    struct list_head list;
</span><span class='line'>    struct rcu_head rcu;
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;major，minor用于指定设备的主次设备号，type用于指定设备类型，type取值可以是：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define DEV_BLOCK 1
</span><span class='line'>#define DEV_CHAR  2
</span><span class='line'>#define DEV_ALL   4
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对应于之前devices.allow文件中三种情况。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;access用于相应的访问权限,access取值可以是:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define ACC_MKNOD 1
</span><span class='line'>#define ACC_READ  2
</span><span class='line'>#define ACC_WRITE 4
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>也和之前devices.allow文件中的情况对应。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;List字段用于将该结构体连到相应的dev_cgroup中whitelist指向的链表。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;通过以上数据结构，devices子系统就能管理一个cgroup的进程可以访问的devices了。 光有数据结构还不行，还要有具体实现才行。devices子系统通过实现两个函数供内核调用来实现控制cgroup中的进程能够访问的devices。首先我们来第一个函数：</span></code></pre></td></tr></table></div></figure>
    int devcgroup_inode_permission(struct inode <em>inode, int mask)
    {
        struct dev_cgroup </em>dev_cgroup;
        struct dev_whitelist_item *wh;</p>

<pre><code>    dev_t device = inode-&gt;i_rdev;
    if (!device)
        return 0;
    if (!S_ISBLK(inode-&gt;i_mode) &amp;&amp; !S_ISCHR(inode-&gt;i_mode))
        return 0;

    rcu_read_lock();

    dev_cgroup = task_devcgroup(current);

    list_for_each_entry_rcu(wh, &amp;dev_cgroup-&gt;whitelist, list) {
        if (wh-&gt;type &amp; DEV_ALL)
            goto found;
        if ((wh-&gt;type &amp; DEV_BLOCK) &amp;&amp; !S_ISBLK(inode-&gt;i_mode))
            continue;
        if ((wh-&gt;type &amp; DEV_CHAR) &amp;&amp; !S_ISCHR(inode-&gt;i_mode))
            continue;
        if (wh-&gt;major != ~0 &amp;&amp; wh-&gt;major != imajor(inode))
            continue;
        if (wh-&gt;minor != ~0 &amp;&amp; wh-&gt;minor != iminor(inode))
            continue;

        if ((mask &amp; MAY_WRITE) &amp;&amp; !(wh-&gt;access &amp; ACC_WRITE))
            continue;
        if ((mask &amp; MAY_READ) &amp;&amp; !(wh-&gt;access &amp; ACC_READ))
            continue;
        found:
            rcu_read_unlock();
        return 0;
    }

    rcu_read_unlock();

    return -EPERM;
}
</code></pre>

<pre><code>我们来简单分析一下这个函数，首先如果该inode对应的不是devices，直接返回0，如果既不是块设备也不是字符设备，也返回0，因为devices只控制块设备和字符设备的访问，其他情况不管。接着获得当前进程的dev_cgroup，然后在dev_cgroup中whitelist指针的链表中查找，如果找到对应设备而且mask指定的权限和设备的权限一致就返回0，如果没有找到就返回错误。

这个函数是针对inode节点存在的情况，通过对比权限来控制cgroup中的进程能够访问的devices。还有一个情况是inode不存在，在这种情况下，一个进程要访问一个设备就必须通过mknod建立相应的设备文件。为了达到对这种情况的控制，devices子系统导出了第二个函数：
</code></pre>

<pre><code>int devcgroup_inode_mknod(int mode, dev_t dev)
{
    struct dev_cgroup *dev_cgroup;
    struct dev_whitelist_item *wh;

    if (!S_ISBLK(mode) &amp;&amp; !S_ISCHR(mode))
        return 0;

    rcu_read_lock();

    dev_cgroup = task_devcgroup(current);

    list_for_each_entry_rcu(wh, &amp;dev_cgroup-&gt;whitelist, list) {
        if (wh-&gt;type &amp; DEV_ALL)
            goto found;
        if ((wh-&gt;type &amp; DEV_BLOCK) &amp;&amp; !S_ISBLK(mode))
            continue;
        if ((wh-&gt;type &amp; DEV_CHAR) &amp;&amp; !S_ISCHR(mode))
            continue;
        if (wh-&gt;major != ~0 &amp;&amp; wh-&gt;major != MAJOR(dev))
            continue;
        if (wh-&gt;minor != ~0 &amp;&amp; wh-&gt;minor != MINOR(dev))
            continue;

        if (!(wh-&gt;access &amp; ACC_MKNOD))
            continue;
        found:
            rcu_read_unlock();
        return 0;
    }

    rcu_read_unlock();

    return -EPERM;
}
</code></pre>

<pre><code>这个函数的实现跟第一个函数类似，这里就不赘述了。

下面我们再来看一下devices子系统本身的一些东西。跟其他子系统一样，devices同样实现了一个cgroup_subsys：
</code></pre>

<pre><code>struct cgroup_subsys devices_subsys = {
    .name = "devices",
    .can_attach = devcgroup_can_attach,
    .create = devcgroup_create,
    .destroy = devcgroup_destroy,
    .populate = devcgroup_populate,
    .subsys_id = devices_subsys_id,
};
</code></pre>

<pre><code>
devices相应的三个控制文件：
</code></pre>

<pre><code>static struct cftype dev_cgroup_files[] = {
    {
        .name = "allow",
        .write_string  = devcgroup_access_write,
        .private = DEVCG_ALLOW,
    },
    {
        .name = "deny",
        .write_string = devcgroup_access_write,
        .private = DEVCG_DENY,
    },
    {
        .name = "list",
        .read_seq_string = devcgroup_seq_read,
        .private = DEVCG_LIST,
    },
};
</code></pre>

<pre><code>
其中allow和deny都是通过devcgroup_access_write实现的，只是通过private字段区分，因为二者的实现逻辑有相同的地方。devcgroup_access_write最终通过调用devcgroup_update_access来实现。在devcgroup_update_access根据写入的内容构造一个dev_whitelist_item ，然后根据文件类型做不同的处理：
</code></pre>

<pre><code>switch (filetype) {
    case DEVCG_ALLOW:
        if (!parent_has_perm(devcgroup, &amp;wh))
            return -EPERM;
        return dev_whitelist_add(devcgroup, &amp;wh);
    case DEVCG_DENY:
        dev_whitelist_rm(devcgroup, &amp;wh);
        break;
    default:
        return -EINVAL;
}
</code></pre>

<p>```
allow的话，就将item加入whitelist，deny的话，就将item从whitelist中删去。</p>
]]></content>
  </entry>
  
</feed>
