<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: assembly~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/assembly~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-11-17T15:30:21+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test指令]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/21/assembly-base-test/"/>
    <updated>2015-07-21T15:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/21/assembly-base-test</id>
    <content type="html"><![CDATA[<p>TEST对两个参数(目标，源)执行AND逻辑操作,并根据结果设置标志寄存器,结果本身不会保存。TEST AX,BX 与 AND AX,BX 命令有相同效果</p>

<p>语法: TEST R/M, R/M/DATA</p>

<p>影响标志: C,O,P,Z,S(其中C与O两个标志会被设为0)</p>

<p>结果: 执行AND逻辑操作结果为0则设置ZF零标志为1</p>

<p>TEST的一个非常普遍的用法是用来测试一方寄存器是否为空:
<code>
    TEST ECX, ECX
    JZ SOMEWHERE
</code>
如果ECX为零,设置ZF零标志为1,JZ跳转</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86—EFLAGS寄存器详解]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/05/06/assembly-x86-falgs/"/>
    <updated>2014-05-06T14:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/05/06/assembly-x86-falgs</id>
    <content type="html"><![CDATA[<p>  鉴于EFLAGS寄存器的重要性，所以将这一部分内容从处理器体系结构及寻址模式一文中单独抽出另成一文，这部分内容主要来自Intel Developer Mannual，在后续的内核系列中遇到的许多和EFLAGS寄存器有关的内容将直接从本文引用。众所周知，IA-32体系结构为通用系统(general system)提供了16个基本的程序执行寄存器：包含一些通用目的寄存器(General-purpose registers)、段寄存器(Segment registers)以及EFLAGS和EIP寄存器，而后两者对于程序的执行来说可谓至关重要。</p>

<p>  其中EIP寄存器主要用于存放当前代码段即将被执行的下一条指令的偏移，但其本质上并 不能直接被指令直接访问。 【it is controlled implicitly by control-transfer instructions (such as JMP, Jcc, CALL, and RET), interrupts, and exceptions.】 很显然，这个寄存器指令由控制转移指令、中断及异常所控制。 【The only way to read the EIP register is to execute a CALL instruction and then read the value of the return instruction pointer from the procedure stack.The EIP register can be loaded indirectly by modifying the value of a return instruction pointer on the procedure stack and executing a return instruction (RET or IRET)】  这里也已经说的很清楚了，读操作通过执行call指令并取得栈中所存放的地址来实现，而写操作则通过修改程序栈中的返回指令指针并执行RET/IRET指 令来完成，因此尽管这个寄存器相当重要，但其实并不是操作系统在实现过程中所需关注的焦点。</p>

<p>  相对来讲，EFLAGS寄存器对于操作系统则重要得多。EFLAGS(program status and control) register主要用于提供程序的状态及进行相应的控制， 【The EFLGAS register report on the status of the program being executed and allows limited(application-program level) control of the process.】 在64-bit模式下，EFLGAS寄存器被扩展为64位的RFLGAS寄存器，高32位被保留，而低32位则与EFLAGS寄存器相同。</p>

<p>  32位的EFLAGS寄存器包含一组状态标志、系统标志以及一个控制标志。在x86处理器初始化之后，EFLAGS寄存器的状态值为0000 0002H。 第1、3、5、15以及22到31位均被保留，这个寄存器中的有些标志通过使用特殊的通用指令可以直接被修改，但并没有指令能够检查或者修改整个寄存器。 通过使用LAHF/SAHF/PUSHF/POPF/POPFD等指令，可以将EFLAGS寄存器的标志位成组移到程序栈或EAX寄存器，或者从这些设施 中将操作后的结果保存到EFLAGS寄存器中。在EFLAGS寄存器的内容被传送到栈或是EAX寄存器后，可以通过位操作指令(BT, BTS, BTR, BTC)检查或修改这些标志位。当调用中断或异常处理程序时，处理器将在程序栈上自动保存EFLAGS的状态值。若 在中断或异常处理时发生任务切换，那么EFLAGS寄存器的状态将被保存在TSS中 【the state of the EFLAGS register is saved in the TSS for the task being suspended.】 ，注意是将要被挂起的本次任务的状态。</p>

<p><img src="/images/assembly/2014-05-06.jpg" alt="" /></p>

<h5>1、状态标志(Status Flags)</h5>

<p>EFLAGS寄存器的状态标志(0、2、4、6、7以及11位)指示算术指令（如ADD, SUB, MUL以及DIV指令）的结果，这些状态标志的作用如下：
<code>
    CF(bit 0) [Carry flag]   若算术操作产生的结果在最高有效位(most-significant bit)发生进位或借位则将其置1，反之清零。这个标志指示无符号整型运算的溢出状态，这个标志同样在多倍精度运算(multiple-precision arithmetic)中使用。
    PF(bit 2) [Parity flag]   如果结果的最低有效字节(least-significant byte)包含偶数个1位则该位置1，否则清零。
    AF(bit 4) [Adjust flag]   如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。这个标志在BCD(binary-code decimal)算术运算中被使用。
    ZF(bit 6) [Zero flag]   若结果为0则将其置1，反之清零。
    SF(bit 7) [Sign flag]   该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负)
    OF(bit 11) [Overflow flag]   如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。
</code>
在这些状态标志中，只有CF标志能够通过使用STC, CLC以及CMC指令被直接修改，或者通过位指令(BT, BTS, BTR以及BTC)将指定的位拷贝至CF标志中。</p>

<p>这些状态标志允许单个的算术操作产生三种不同数据类型的结果：无符号整型，有符号整型 以及BCD整型。如果把该结果当做无符号整型，那么CF标志指示越界(out-of-range)状态——即进位或借位，如果被当做有符号整型，则OF标 志指示进位或借位，若作为BCD数，那么AF标志指示进位或借位。SF标志指示有符号整数的符号位，ZF指示结果为零。此外在执行多倍精度算术运算时，CF标志用来将一次运算过程中带进位的加法(ADC)或带借位的减法(SBB)产生的进位或借位传递到下一次运算过程中。</p>

<h5>2、DF标志(DF flag)</h5>

<p>这个方向标志(位于EFLAGS寄存器的第10位)控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减（从高地址向低地址方向处理字符串），清除该标志则使得串指令自动递增。STD以及CLD指令分 别用于设置以及清除DF标志。</p>

<h5>3、系统标志以及IOPL域(System Flags and IOPL Field)</h5>

<p>EFLAGS寄存器中的这部分标志用于控制操作系统或是执行操作，它们不允许被应用程序所修改。这些标志的作用如下：
<code>
    TF(bit 8) [Trap flag]   将该位设置为1以允许单步调试模式，清零则禁用该模式。
    IF(bit 9) [Interrupt enable flag]   该标志用于控制处理器对可屏蔽中断请求(maskable interrupt requests)的响应。置1以响应可屏蔽中断，反之则禁止可屏蔽中断。
    IOPL(bits 12 and 13) [I/O privilege level field]   指示当前运行任务的I/O特权级(I/O privilege level)，正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能允许访问I/O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。
    NT(bit 14) [Nested task flag]   这个标志控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。
    RF(bit 16) [Resume flag]   控制处理器对调试异常的响应。
    VM(bit 17) [Virtual-8086 mode flag]   置1以允许虚拟8086模式，清除则返回保护模式。
    AC(bit 18) [Alignment check flag]   该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。
    VIF(bit 19) [Virtual interrupt flag]   该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)
    VIP(bit 20) [Virtual interrupt pending flag]   该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。【Software sets and clears this flag; the processor only reads it.】与VIF标志结合使用。
    ID(bit 21) [Identification flag]   程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[尾调用 尾递归]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/12/30/assembly-tail-call/"/>
    <updated>2013-12-30T10:50:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/12/30/assembly-tail-call</id>
    <content type="html"><![CDATA[<h4>尾调用</h4>

<p>尾调用大概是这么一种情况：<br/>
  函数A里面调用了函数B。<br/>
  函数B执行后，函数A马上返回。<br/>
  也就是说调用函数B（并返回执行结果）是函数A所做的最后一件事。<br/>
  相当于执行完函数B后，函数A也就执行完。<br/>
因此在执行函数B时，函数A的栈帧其实是已经大部分没用了，可以被修改或覆盖。编译器可以利用这一点进行优化，函数B执行后直接返回到函数A的调用者。</p>

<p>这里有一点需要注意：它是来自于编译器的优化。 这一点点的优化对于普通的尾调用来说可能意义不大，但是对于尾递归来说就很重要了。</p>

<h4>尾递归</h4>

<p>尾递归是一种基于尾调用形式的递归，相当于前面说的函数B就是函数A本身。</p>

<p>普通递归会存在的一些问题是，每递归一层就会消耗一定的栈空间，递归过深还可能导致栈溢出，同时又是函数调用，免不了push来pop去的，消耗时间。</p>

<p>采用尾调用的形式来实现递归，即尾递归，理论上可以解决普通递归的存在的问题。因为下一层递归所用的栈帧可以与上一层有重叠（利用jmp来实现），局部变量可重复利用，不需要额外消耗栈空间，也没有push和pop。</p>

<p>再次提一下，它的实际效果是来自于编译器的优化（目前的理解）。在使用尾递归的情况下，编译器觉得合适就会将递归调用优化成循环。目前大多数编译器 都是支持尾递归优化的。有一些语言甚至十分依赖于尾递归（尾调用），比如erlang或其他函数式语言（传说它们为了更好的处理 continuation-passing style）。</p>

<p>假如不存在优化，大家真刀真枪进行函数调用，那尾递归是毫无优势可言的，甚至还有缺点——代码写起来不直观。</p>

<p>现代编译器的优化能力很强悍，很多情况下编译器优化起来毫不手软（于是有了volatile）。但有时编译器又很傲娇，你需要主动给它一点信号，它才肯优化。尾递归就相当于传递一个信号给编译器，尽情优化我吧！</p>

<h4>测试</h4>

<p>为了验证尾递归优化，可以写个小程序进行测试。在VS2010下将使用/O1或以上的优化选项，一般就会尾递归优化。Gcc3.2.2（这版本好旧）下一般需要使用-O2优化选项。<br/>
先看看普通递归：
<code>
    // 递归
    int factorial(int n)
    {
        if(n &lt;= 2)
        {
            return 1;
        }
        else
        {
            return factorial(n-1) + factorial(n-2);
        }
    }
</code>
其汇编代码：
<code>
0100401371    push   %ebp
0200401372    mov    %esp,%ebp
0300401374    push   %ebx
0400401375    sub    $0x14,%esp
0500401378    cmpl   $0x2,0x8(%ebp)
060040137C    jg     0x401385 &lt;factorial+20&gt;
070040137E    mov    $0x1,%eax
0800401383    jmp    0x4013a4 &lt;factorial+51&gt;
0900401385    mov    0x8(%ebp),%eax
1000401388    dec    %eax
1100401389    mov    %eax,(%esp)
120040138C    call   0x401371 &lt;factorial&gt;
1300401391    mov    %eax,%ebx
1400401393    mov    0x8(%ebp),%eax
1500401396    sub    $0x2,%eax
1600401399    mov    %eax,(%esp)
170040139C    call   0x401371 &lt;factorial&gt;
18004013A1    lea    (%ebx,%eax,1),%eax
19004013A4    add    $0x14,%esp
20004013A7    pop    %ebx
21004013A8    leave
22004013A9    ret
</code>
在0040138C,0040139C这些位置，我们看到递归仍然是使用call指令，那么尾递归在汇编角度是怎么处理的呢？<br/>
尾递归：<br/>
<code>
int factorial_tail(int n,int acc1,int acc2)
{
    if (n &lt; 2)
    {
        return acc1;
    }
    else
    {
        return factorial_tail(n-1,acc2,acc1+acc2);
    }
}
</code>
其汇编代码：
<code>
0100401381    push   %ebp
0200401382    mov    %esp,%ebp
0300401384    sub    $0x18,%esp
0400401387    cmpl   $0x1,0x8(%ebp)
050040138B    jg     0x401392 &lt;factorial_tail+17&gt;
060040138D    mov    0xc(%ebp),%eax
0700401390    jmp    0x4013b2 &lt;factorial_tail+49&gt;
0800401392    mov    0x10(%ebp),%eax
0900401395    mov    0xc(%ebp),%edx
1000401398    lea    (%edx,%eax,1),%eax
110040139B    mov    0x8(%ebp),%edx
120040139E    dec    %edx
130040139F    mov    %eax,0x8(%esp)
14004013A3    mov    0x10(%ebp),%eax
15004013A6    mov    %eax,0x4(%esp)
16004013AA    mov    %edx,(%esp)
17004013AD    call   0x401381 &lt;factorial_tail&gt;
18004013B2    leave
19004013B3    ret
</code>
在00401390位置上，尾递归是直接使用jmp实现循环跳转。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出指令编码之三：64位计算]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode/"/>
    <updated>2013-12-23T17:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/12/23/assembly-opcode</id>
    <content type="html"><![CDATA[<p><a href="http://www.pediy.com/kssd/pediy10/77824.html">http://www.pediy.com/kssd/pediy10/77824.html</a></p>

<p>  AMD 在x86体系的32位计算扩展为64位计算，这是通过什么来实现的？它是怎样设计的？具体细节是什么？这就是这一节要讲解的。</p>

<h4>一、硬件编程资源</h4>

<p>　　了解现在processor提供编程资源是很重要的，对要进一步学习提供材料，下面分别讲解x86的编程资源和x64的编程资源。</p>

<h5>1、x86的32位编程资源</h5>

<pre><code>●  8个32位通用寄存器：EAX、ECX、EDX、EBX、ESP、EBP、ESI、EDI
　　　这些寄存器还可分解为8个8位寄存器：AL、CL、DL、BL、AH、CH、DH、BH
　　　和8个16位寄存器：AX、CX、DX、BX、SP、BP、SI、DI
●  6个段寄存器：ES、CS、SS、DS、FS、GS
●  32位的EFLAGS 标志位寄存器
●  32位的指令指针寄存器EIP
●  8个64位MMX寄存器
●  8个128位XMM寄存器
●  还有就是32位的寻址空间（Virtual Address Space）
</code></pre>

<h5>2、x64的64位编程资源</h5>

<pre><code>●  32位通用寄存器被扩展至64位，除了原有的8个寄存器，新增8个寄存器，共16个通用寄存器：RAX、RCX、RDX、RBX、RSP、RBP、RSI、RDI、R8、R9、R10、R11、R12、R13、R14、R15
●  保留了原有的6个寄存器，但是作用被限制
●  32位的标志寄存器被扩展为64位的标志寄存器RELAGS
●  8个64位MMX寄存器不变
●  新增8个XMM寄存器，共16个XMM寄存器
●  还有就是64位的寻址空间（Virtaul Address Space）
</code></pre>

<h4>二、寄存器编码（或者说ID值）</h4>

<pre><code>●  16个64位通用寄存器是： 0000 ~ 1111，也就是：0 ~ 15
　　　　8个32位通用寄存器是：　000 ~ 111 也就是：0 ~ 7
●  6个段寄存器的编码是：000 ~ 101　也就是：0 ~ 5
●  MMX寄存器编码是： 000 ~ 111　也就是：0 ~ 7
●  16个XMM寄存器编码是： 0000 ~ 1111 也就是：0 ~ 15
　　　　8个XMM寄存器编码是：000 ~ 111 也就是：0 ~ 7
</code></pre>

<p>所谓寄存器编码是寄存器对应的二进制编码，按顺序来定义，看下面的表格：</p>

<pre><code>RAX/ES/MMX0/XMM0　-&gt;  0000
RCX/CS/MMX1/XMM1  -&gt;  0001
RDX/SS/MMX2/XMM2  -&gt;  0010
RBX/DS/MMX3/XMM3  -&gt;  0011
RSP/FS/MMX4/XMM4   -&gt;  0100
RBP/GS/MMX5/XMM5  -&gt;  0101
RSI/MMX6/XMM6      -&gt;  0110
RDI/MMX7/XMM7     -&gt;  0111
R8/XMM8 　 -&gt;  1000
R9/XMM9 　 -&gt;  1001
R10/XMM10  -&gt;  1010
R11/XMM11  -&gt;  1011
R12/XMM12  -&gt;  1100
R13/XMM13  -&gt;  1101
R14/XMM14  -&gt;  1110
R15/XMM15  -&gt;  1111
</code></pre>

<p>  RAX ~ RDI　与　EAX ~ EDI　的编码是相同的，这里有一个情况是，EAX ~ EDI的编码是3位，为什么RAX~RDI的编码却是4位呢？这就是下面要讲到的REX prefix会将寄存器编码进行扩展。</p>

<h4>三、  开启64位计算的基石（REX prefix）</h4>

<p>　　AMD64体系的64位计算是这样设计：操作数的Default Operand-Size是32位，而Address-Size是固定为64位的，这里就引发3个问题要解决的：
<code>
●  问题1：当要访问是64位的寄存器时，那么必须要有一种机制去开启或者说确认访问的寄存器是64位的。
●  问题2：而要访问的内存操作数寄存器寻址的话，那么也必须要去开启或确认寄存器是64位的以及访问新增寄存的问题。
●  问题3：如何去访问新增加的几个寄存器呢？那么也必须要有方法去访问增加的寄存器？
</code>
  那么在64位Long模式下，为什么不将操作数的Default Operand-Size设计为64位呢？那是由于体系限制，本来AMD64就是在 x86的基础上扩展为64位的。x86体系当初设计时就没想到有会被扩展到64位的时候。所以在Segment-Descriptor（段描述符）里就没 有可以扩展为64位的标志位。DS.D位只有置1时是32位，清0时为16位，这两种情况。</p>

<p>  AMD在保持兼容的大提前下，只好令谋计策，AMD的解决方案是：增加一个64位模式下特有Prefix，以起到扩展访问64位的能力。这就是 REX prefix。</p>

<h5>1、REX prefix 的具体格式及含义</h5>

<p>  REX prefix的取值范围是：40 ~ 4F（0100 0000 ~ 0100 1111），来看下原来opcode取值范围的40 ~ 4F的是什么指令：<br/>
  Opcode为40 ~ 47在x86下是inc eax ~ inc edi　指令，48 ~ 4F在x86下是dec eax ~ dec edi　指令。<br/>
  在64位模式下，40 ~ 4F 就已经不是指令而变身为 prefix了。</p>

<h6>1.1  REX prefix字节的组成部分：</h6>

<pre><code>●  bit0：REX.B
●  bit1：REX.X
●  bit2：REX.R
●  bit3：REX.W
●  bit4 ~ bit7：此域固定为0100，也就是高半字节为4。
</code></pre>

<p>★  REX.W域是设定操作数的大小（Operand-Size），当REX.W为1时，操作数是64位，为0时，操作数的大小是缺省大小（Default Opeand-Size）。这就解决了访问64位寄存器的问题。</p>

<p>★  REX.R域是用于扩展ModRM字节中的R（Reg）域，ModRM中的Reg域除了对Opcode的补充外，是用来定义寄存器的编码，即寄存器 值。REX.R将原来3位的寄存器ID（000 ~ 111）扩展为4位（0000 ~ 1111），这就解决了访新增寄存器的问题。</p>

<p>★  REX.X域是用于扩展SIB字节中的Index域，SIB中的Index域是指明Index 寄存器的编码，即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域是用于扩展ModRM字节中的r/m域和SIB中的Base域，SIB中的Base域指明Base寄存器编码即ID值。这就解决了寄存器寻址内存中使用新增寄存器的问题。</p>

<p>★  REX.B域的另一个作用是：若指令中没有ModRM和SIB，也就是在Opcode中直接给出寄存器ID值，REX.B起到扩展寄存器的作用。</p>

<h6>1.2、下面使用几个例子来说明问题：</h6>

<p>例1：指令 mov eax, 1　　
这条指令的Default Operand-Size是32位，在32位下它的机器编码是：b8 01 00 00 00（其5个字节）若改成64位编码时，变成 mov rax, 1。<br/>
　　此时，它的机器编码是 48 b8 01 00 00 00 00 00 00 00 （共10个字节）<br/>
  在这里48 就是 REX prefix字节，即：0100 1000　它的各个域值是：REX.W = 1，定义操作数是64位的，REX.R = 0、REX.X = 0、 REX.B = 0　这条指令不需要ModRM和SIB字节，所以RXB域都为0。<br/>
　　这里有个值得思考的地方，若 REX.W域为0时，这条指令的操作数是32位的，也就是说，机器编码：40 b8 01 00 00 00（其6个字节）是与 b8 01 00 00 00结果一样的，都是mov eax, 1</p>

<p>例2：指令：mov rax, r14<br/>
　　这是一条常见64位指令，源寄存器是r14，目标寄存器是rax 它的机器编码是：<br/>
　　　4c 89 f0（共3个字节）<br/>
在这个编码里4c是REX prefix，89是opcode，f0是ModRM。<br/>
REX Prefix的值是4c （0100 1100），其中REX.W = 1，REX.R = 1，XB都为0。<br/>
ModRM的值是F0（11-110-000），Mod=11，Reg=110, R/M = 000，在这里先不讲ModRM的含义，在后面的章节再详述。在这条指令里，Reg表示源操作数r14的ID值。<br/>
r14是新增加寄存器，所以需要REX.R进行扩展，得出最终寄存器的ID值，1+110 = 1110，这是r14寄存器的ID值，从而得出正确的编码。</p>

<p>例3：回到序言里的例子：mov word ptr es:[eax + ecx * 8 + 0x11223344], 0x12345678<br/>
作为例子，我将它改为64位指令，如下：<br/>
mov qword ptr [rax + rcx * 8 + 0x11223344], 0x12345678<br/>
操作数大小变为64位，而base 寄存器和index寄存器都改为64位，disp（offset）和imme（值不变），为啥不变？在以后的章节会有详述。</p>

<p>好，现在来看看指令怎么译：<br/>
<code>
(1)  REX.W：　要置为 1 以扩展64位大小。
(2)  REX.B：  由于base不是新增的寄存器，所以置为 0
(3)  REX.X：　由于index 也不是新增的寄存器，所以置为 0
(4)  REX.R：　源操作数和目标作数不是寄存器，所以置为 0
</code></p>

<p>所以，REX prefix就等于 48（0100 1000）<br/>
故，整条指令编码是：48 c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例4：我将上面的例子再改一改，变为：mov qword ptr [r8 + r9 * 8 + 0x11223344], 0x12345678<br/>
那么，看看这指令怎么译：
<code>
（1）  REX.W：置1，使用64位大小
（2）  REX.B：base寄存器是r8，是新增寄存器，所以置为1
（3）  REX.X：index寄存器是r9，是新增寄存器，所以置为1
（4）  REX.R：操作数中没有寄存器，所在置为0
</code>
所以，REX　prefix就等于（0100 1011）4b<br/>
故，整条指令编码是：4b c7 84 c8 44 33 22 11 78 56 34 12（共12个字节）</p>

<p>例5：看看这条指令 mov r8, 1
<code>
（1）  REX.W：置1
（2）  REX.B：访问Opcode中的寄存器ID值，它是新增寄存器，所为置1
（3）  REX.X：置0
（4）  REX.R：置0
</code>
所以，REX是 49（0100 1001）<br/>
故整条指令编码是：49 b8 01 00 00 00 00 00 00 00</p>

<h5>2、REX prefix补充说明</h5>

<p>（1）关于顺序：REX一定是在x86 prefix之后，而在Opcode之前。<br/>
（2）关于冲突：当x86 prefix和 REX prefix同时出现，而又出现冲突时，REX的优先权要优于 x86 prefix，<br/>
  举个例子：指令 mov r8, 1<br/>
  若出现以下编码怎么办：66 49 b8 01 00 00 00 00 00 00 00　既有66 又有49，那么结果66会被忽略，也就等于：49 b8 01 00 00 00 00 00 00 00。<br/>
  而对于 66 b8 01 00 00 00 00 00 00 00　这个编码来说：会被解析为：mov ax, 1<br/>
  去掉了49这个REX prefix操作数被调整为 16　位。<br/>
（3）关于原来Opcode码，由于40 ~ 4F被作为 REX prefix，那么原指令inc reg/dec reg，只能使用 FF/0　和 FF/1　这两个Opcode了。<br/>
（4）缺省操作数大小（Default Operand-Size）<br/>
  64位绝大部分缺省操作数是32位的，但有一部分是64位的，依赖于rsp的寻址和短跳转（near jmp/near call）是64位的。<br/>
  如下指令：push r8<br/>
  REX值是41（0100 0001），即REX.W为0，使用default opearnd-size<br/>
  它的编码是 41 ff f0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC内嵌汇编]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/08/15/assembly-base-4/"/>
    <updated>2013-08-15T14:12:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/08/15/assembly-base-4</id>
    <content type="html"><![CDATA[<p>  内核代码绝大部分使用C语言编写，只有一小部分使用汇编语言编写，例如与特定体系结构相关的代码和对性能影响很大的代码。GCC提供了内嵌汇编的功能，可以在C代码中直接内嵌汇编语言语句，大大方便了程序设计。</p>

<h3>一、基本内嵌汇编</h3>

<p>  GCC提供了很好的内嵌汇编支持，最基本的格式是：<br/>
<code>__asm__ __volatile__</code>(汇编语句模板);</p>

<h4>1、<strong>asm</strong></h4>

<p>  <code>__asm__</code>是GCC关键字asm的宏定义：<br/>
<code>#define __asm__ asm</code><br/>
  <code>__asm__</code>或asm用来声明一个内嵌汇编表达式，所以任何一个内嵌汇编表达式都是以它开头的，是必不可少的。</p>

<h4>2、汇编语句模板</h4>

<p> “汇编语句模板”是一组插入到C程序中的汇编指令(可以是单个指令，也可以是一组指令)。每条指令都应该由双引号括起，或者整组指令应该由双引号括起。每条指令还应该用一个定界符结尾。有效的定界符为换行符(\n)和分号(;)。\n后可以跟一个制表符(\t)作为格式化符号，增加GCC在汇编文件中生成的指令的可读性。</p>

<p>  上述原则可以归结为：<br/>
①任意两个指令间要么被分号(;)分开，要么被放在两行；<br/>
②放在两行的方法既可以通过\n的方法来实现，也可以真正的放在两行；<br/>
③可以使用一对或多对双引号，每对双引号里可以放任意多条指令，所有的指令都必须放到双引号中。<br/>
  在基本内嵌汇编中，“汇编语句模板”的书写的格式和你直接在汇编文件中使用汇编语言编程没有什么不同，你可以在其中定义标号(Label)，定义对齐(.align n)，定义段(.section name)。例如：
<code>
    __asm__(".align 2\n\t"
    "movl %eax, %ebx\n\t"
    "test %ebx, %ecx\n\t"
    "jne error\n\t"
    "sti\n\t"
    "error: popl %edi\n\t"
    "subl %ecx, %ebx");
</code>
建议大家都使用这种格式来写内嵌汇编代码。</p>

<h4>3、<strong>volatile</strong></h4>

<p>  <code>__volatile__</code>是GCC关键字volatile的宏定义：<br/>
<code>#define __volatile__ volatile</code><br/>
  <code>__volatile__</code>或<code>volatile</code>是可选的。如果不想让GCC的优化改动你的内嵌汇编代码，你最好在前面都加上<code>__volatile__</code>。</p>

<h3>二、带C语言表达式的内嵌汇编</h3>

<p>  在内嵌汇编中，可以将C语言表达式指定为汇编指令的操作数，而且不用去管如何将C语言表达式的值读入哪个寄存器，以及如何将计算结果写回C变量，你只要告诉程序中C语言表达式与汇编指令操作数之间的对应关系即可，GCC会自动插入代码完成必要的操作。</p>

<p>  通常嵌入到C代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到扩展的内嵌汇编格式：<br/>
<code>__asm__ __volatile__</code>(汇编语句模板 : 输出部分 : 输入部分 : 破坏描述部分);</p>

<p>  内嵌汇编表达式包含4个部分，各部分由“:”分隔。这4个部分都不是必须的，任何一个部分都可以为空，其规则为：<br/>
①如果“破坏描述部分”为空，则其前面的“:”必须省略。比如：<br/>
<code>__asm__("mov %%eax, %%ebx" : :);</code>。
②如果“汇编语句模板”为空，则“输出部分”，“输入部分”以及“破坏描述部分”可以不为空，也可以为空。比如：<br/>
<code>__asm__("" : : : "memory");</code>。
③如果“输出部分”，“输入部分”以及“破坏描述部分”都为空，“输出部分”和“输入部分”之前的“:”既可以省略，也可以不省略。如果都省略，则此汇编退化为一个基本内嵌汇编，否则，仍然是一个带有C语言表达式的内嵌汇编。<br/>
④如果“输入部分”和“破坏描述部分”为空，但“输出部分”不为空，“输入部分”前的“:”既可以省略，也可以不省略。<br/>
⑤如果后面的部分不为空，而前面的部分为空，则前面的“:”都必须保留，否则无法说明不为空的部分究竟是第几部分。<br/>
⑥如果“破坏描述部分”不为空，而“输出部分”和“输入部分”都为空，则“输出部分”和“输入部分”前的“:”都必须保留。<br/>
  从上面的规则可以看到另外一个事实，区分一个内嵌汇编是基本格式的还是扩展格式的，其规则在于在“汇编语句模板”后面是否有“:”的存在，如果没有则是基本格式的，否则，就是扩展格式的。<br/>
  这两种格式对寄存器语法的要求不同：基本格式要求寄存器前只能使用一个%，这一点和原生汇编相同；而扩展格式则要求寄存器前必须使用两个%%。比如：<br/>
<code>__asm__("mov %%eax, %%ebx" :)</code><br/>
和<br/>
<code>__asm__("mov %eax, %ebx")</code><br/>
都是正确的写法，而<br/>
<code>__asm__("mov %eax, %ebx" :)</code><br/>
和<br/>
<code>__asm__("mov %%eax, %%ebx")</code><br/>
都是错误的写法。任何只带一个“%”的标识符都看成是操作数，而不是寄存器。</p>

<h4>1、内嵌汇编举例</h4>

<p>  使用内嵌汇编，要先编写汇编语句模板，然后将C语言表达式与指令的操作数相关联，并告诉GCC对这些操作有哪些约束条件。例如在下面的汇编语句：<br/>
<code>__asm__("movl %1, %0" : "=r"(result) : "m"(input));</code><br/>
“movl %1,%0”是指令模板；“%0”和“%1”代表指令的操作数，称为占位符，内嵌汇编靠它们将C语言表达式与指令操作数相对应。指令模板后面用圆括号括起来的是C语言表达式，本例中只有两个：“result”和“input”，他们按照在输出部分和输入部分出现的顺序分别与指令操作数“%0”，“%1”对应；注意对应顺序：第一个C语言表达式对应“%0”；第二个表达式对应“%1”，依次类推。在每个操作数前面有一个用双引号括起来的字符串，字符串的内容是对该操作数的约束或者说要求。“result”前面的约束字符串是“=r”，其中“=”表示“result”在指令中是只写的(输出操作数)，“r”表示需要将“result”与某个通用寄存器相关联，先将操作数的值读入寄存器，然后在指令中使用相应寄存器，而不是“result”本身，当然指令执行完后需要将寄存器中的值存入变量“result”，从表面上看好像是指令直接对“result”进行操作，实际上GCC做了隐式处理，这样我们可以少写一些指令。“input”前面的“r”表示该表达式需要先放入某个寄存器，然后在指令中使用该寄存器参加运算。<br/>
  由此可见，C语言表达式或者变量与寄存器的关系由GCC自动处理，我们只需使用约束字符串指导GCC如何处理即可。<br/>
  内联汇编的重要性体现在它能够灵活操作，而且可以使其输出通过C变量显示出来。因为它具有这种能力，所以<code>__asm__</code>可以用作汇编指令和包含它的C程序之间的接口。</p>

<h4>2、汇编语句模板</h4>

<p>◆操作数<br/>
  C语言表达式可用作内嵌汇编中的汇编指令的操作数。在汇编指令通过对C语言表达式进行操作来执行有意义的作业的情况下，操作数是扩展格式的内嵌汇编的主要特性。<br/>
  每个操作数都由操作数约束字符串指定，后面跟着用圆括号括起来的C语言表达式，例如：<br/>
&ldquo;constraint&rdquo;(C expression)<br/>
操作数约束的主要功能是确定操作数的寻址方式。</p>

<p>◆占位符<br/>
  在扩展格式的内嵌汇编的“汇编语句模板”中，操作数由占位符引用。如果总共有n个操作数(包括输入和输出)，那么第一个输出操作数的编号为0，逐项递增，总操作数的数目限制在10个(%0、%1、…、%9)。<br/>
  如果要处理很多输入和输出操作，数字型的占位符很快就会变得混乱。为了使条理清晰，GNU编译器(从版本3.1开始)允许声明替换的名称作为占位符。<br/>
  替换的名称在“输入部分”和“输出部分”中声明。格式如下：<br/>
<code>[name] "constraint"(C expression)</code>
  声明name后，使用%[name]的形式替换内嵌汇编代码中相应的数字型占位符。如下面所示：
<code>
    __asm__("cmoveq %1, %2, %[result]"
    : [result] "=r"(result)
    : "r"(test), "r"(new), "[result]"(old));
</code>
  在内嵌汇编中使用占位符表示的操作数，总被视为long型(4个字节) ，但对其施加的操作根据指令可以是字或者字节，当把操作数当作字或者字节使用时，默认为低字或者低字节。对字节操作可以显式的指明是低字节还是高字节。方法是在%和序号之间插入一个字母，“b”代表低字节，“h”代表高字节，例如：%h1。</p>

<p>必须使用占位符的情况：
我们看一看下面这个例子：
<code>
    __asm__("addl %1, %0"
    : "=a"(out)
    : "m"(in1), "a"(in2));
</code>
①首先，我们看一看上例中的第1个输入操作表达式"m"(in1)，它被GCC替换之后，表现为addl address_of_in1, %%eax，in1的地址是什么？编译时才知道。所以我们完全无法直接在指令中去写出in1的地址，这时使用占位符，交给GCC在编译时进行替代，就可以解决这个问题。所以这种情况下，我们必须使用占位符。<br/>
②其次，如果上例中的输出操作表达式"=a"(out)改为"=r"(out)，那么out究竟会使用哪个寄存器只有到编译时才能通过GCC来决定，既然在我们写代码的时候，我们不知道究竟哪个寄存器被选择，我们也就不能直接在指令中写出寄存器的名称，而只能通过占位符替代来解决。</p>

<h4>3、输出部分</h4>

<p>  “输出部分”用来指定当前内嵌汇编语句的输出。我们看一看这个例子：<br/>
<code>__asm__("movl %%cr0, %0" : "=a"(cr0));</code><br/>
这个内嵌汇编语句的输出部分为"=r"(cr0)，它是一个“操作表达式”，更具体地在这里叫作“输出操作表达式”，指定了一个输出操作。“输出操作表达式”由两部分组成，这两部分都是必不可少的：<br/>
①圆括号括起来的部分是一个C语言表达式，用来保存内嵌汇编的一个输出值，其操作就等于C的赋值表达式cr0 = output_value，因此，圆括号中的输出表达式只能是C的左值表达式。那么右值output_value从何而来呢？<br/>
②答案是双引号中的内容，被称作“操作约束”(Operation Constraint)，在这个例子中操作约束为"=a"，它包含两个约束：等号(=)和字母a，其中等号(=)说明圆括号中左值表达式cr0是Write-Only的，只能够被作为当前内嵌汇编的输出，而不能作为输入。而字母a是寄存器EAX/AX/AL的简写，说明cr0的值要从EAX寄存器中获取，也就是说cr0 = %eax，最终这一点被转化成汇编语句就是movl %eax, address_of_cr0。<br/>
  另外，需要特别说明的是，很多文档都声明，所有输出操作的操作约束必须包含一个等号(=)，但GCC的文档中却很清楚的声明，并非如此。因为等号(=)约束说明当前的表达式是Write-Only的，但另外还有一个符号——加号(+)用来说明当前表达式是Read-Write的，如果一个操作约束中没有给出这两个符号中的任何一个，则说明当前表达式是Read-Only的。因为对于输出操作来说，肯定是必须是可写的，而等号(=)和加号(+)都表示可写，只不过加号(+) 同时也表示是可读的。所以对于一个输出操作来说，其操作约束只需要有等号(=)或加号(+)中的任意一个就可以了。二者的区别是：等号(=)表示当前操作表达式指定了一个纯粹的输出操作，而加号(+)则表示当前操作表达式不仅仅只是一个输出操作还是一个输入操作。但无论是等号(=)约束还是加号(+)约束所约束的操作表达式都只能放在“输出部分”中，而不能被用在“输入部分”中。<br/>
  在“输出部分”中可以有多个输出操作表达式，多个操作表达式中间必须用逗号(,)分开。</p>

<h4>4、输入部分</h4>

<p>  “输入部分”的内容用来指定当前内嵌汇编语句的输入。我们看一看这个例子：<br/>
<code>__asm__("movl %0, %%db7" : : "a"(cpu-&gt;db7));</code><br/>
例中“输入部分”的内容为一个表达式"a"(cpu->db7)，被称作“输入操作表达式”，用来表示一个对当前内嵌汇编的输入。<br/>
  像输出操作表达式一样，一个输入操作表达式也分为两部分：带圆括号的部分(cpu->db7)和带双引号的部分"a"。这两部分对于一个内嵌汇编输入操作表达式来说也是必不可少的。<br/>
  圆括号中的表达式cpu->db7是一个C语言的表达式，它不必是一个左值表达式，也就是说它不仅可以是放在C赋值操作左边的表达式，还可以是放在C赋值操作右边的表达式。所以它可以是一个变量，一个数字，还可以是一个复杂的表达式。比如上例可以改为：<br/>
<code>
    __asm__("movl %0, %%db7" : : "a"(foo));
    __asm__("movl %0, %%db7" : : "a"(0x1000));
    __asm__("movl %0, %%db7" : : "a"(x*y/z));
</code>
  双引号中的部分是约束部分，和输出操作表达式约束不同的是，它不允许指定加号(+)约束和等号(=)约束，也就是说它只能是默认的Read-Only的。约束中必须指定一个寄存器约束，例中的"a"表示当前输入变量cpu->db7要通过寄存器%eax输入到当前内嵌汇编中。<br/>
  在“输入部分”中可以有多个输入操作表达式，多个操作表达式中间必须用逗号(,)分开。</p>

<h4>5、操作约束</h4>

<p>  前面提到过，在内嵌汇编中的每个操作数都应该由操作数约束字符串描述，后面跟着用圆括号括起来的C语言表达式。操作数约束主要是确定指令中操作数的寻址方式。约束也可以指定：<br/>
①是否允许操作数位于寄存器中，以及它可以包括在哪些类型的寄存器中<br/>
②操作数是否可以是内存引用，以及在这种情况下使用哪些类型的寻址方式<br/>
③操作数是否可以是立即数</p>

<p>  约束字符必须与指令对操作数的要求相匹配，否则产生的汇编代码将会有错，在这个例子中：<br/>
<code>__asm__("movl %1,%0" : "=r"(result) : "r"(input));</code><br/>
如果将那两个"r"，都改为"m"(“m”表示操作数是内存引用)编译后得到的结果是：<br/>
movl input, result<br/>
很明显这是一条非法指令(mov不允许内存到内存的操作)。</p>

<p>  每一个输入和输出操作表达式都必须指定自己的操作约束，下面是在80x86平台上可能使用的操作约束：<br/>
◆寄存器约束<br/>
  当你当前的输入或输出需要借助一个寄存器时，你需要为其指定一个寄存器约束。你可以直接指定一个寄存器的名字，比如：<br/>
<code>__asm__("movl %0, %%cr0" : : "eax"(cr0));</code><br/>
也可以指定一个缩写，比如：<br/>
<code>__asm__("movl %0, %%cr0" : : "a"(cr0));</code><br/>
如果你指定一个缩写，比如“a”，则GCC将会根据当前操作表达式中C语言表达式的类型决定使用%eax，还是%ax或%al。比如：<br/>
<code>
    unsigned short shrt;
    __asm__("mov %0，%%bx" : : "a"(shrt));
</code>
由于变量shrt是16-bit short类型，则编译出来的汇编代码中，会让此变量使用%ax寄存器。<br/>
  无论是输入还是输出的操作表达式，都可以使用寄存器约束。</p>

<p>◆内存约束<br/>
  如果一个输入或输出操作表达式的C语言表达式表现为一个内存地址，并且不想借助于任何寄存器，则可以使用内存约束。比如：<br/>
<code>__asm__("lidt %0" : "=m"(idt_addr));</code><br/>
  使用内存方式进行输入输出时，由于不借助寄存器，所以GCC不会按照你的声明对其作任何的输入输出处理。GCC只会直接拿来用，究竟对这个C语言表达式而言是输入还是输出，完全依赖与你写在“汇编语句模板”中的指令对其操作的指令。<br/>
  当操作数位于内存中时，任何对它们执行的操作都将在内存位置中直接发生，所以，对于内存约束类型的操作表达式而言，放在“输入部分”还是放在“输出部分”，对编译结果是没有任何影响的，既然对于内存约束类型的操作表达式来说，GCC不会自动为它做任何事情，那么放在哪儿也就无所谓了。但从程序员的角度而言，为了增强代码的可读性，最好能够把它放在符合实际情况的地方。</p>

<p>◆立即数约束<br/>
  如果一个输入或输出操作表达式的C语言表达式是一个数字常数，并且不想借助于任何寄存器，则可以使用立即数约束。<br/>
  由于立即数在C中只能作为右值，所以对于使用立即数约束的操作表达式而言，只能放在“输入部分”。比如：<br/>
<code>__asm__("movl %0, %%eax" : : "i"(100));</code></p>

<p>◆匹配约束<br/>
  匹配约束符是一位数字：“0”，“1”，…，“9”，表示它约束的C表达式分别与占位符%0，%1，…，%9相对应的C变量匹配。例如使用“0”作为%1的约束字符，那么%0和%1表示同一个C变量。</p>

<p>  在某些情况下，一个变量既要充当输入操作数，也要充当输出操作数。可以通过使用匹配约束在内嵌汇编中的“输入部分”指定这种情况。<br/>
<code>__asm__("incl %0" : "=a"(var) : "0"(var));</code><br/>
  在上面的示例中，寄存器%eax既用作输入变量，也用作输出变量。将输入变量var读取到%eax，执行inc指令后将更新了值的%eax再次存储在var中。这里的"0"指定与第0个输出变量相同的约束。即，它指定var的输出实例只应该存储在%eax中。</p>

<p>该约束可以用于以下情况：<br/>
①输入从变量中读取，或者变量被修改后，修改写回到同一变量中<br/>
②不需要将输入操作数和输出操作数的实例分开<br/>
使用匹配约束最重要的意义在于它们可以导致有效地使用可用寄存器。</p>

<p>  i386指令集中许多指令的操作数是读写型的，例如：<br/>
addl %1, %0<br/>
它先读取%0与%1原来的值然后将两者的值相加，并把结果存回%0，因此操作数%0是读写型操作数。老版本的GCC对这种类型操作数的支持不是很好，它将操作数严格分为输入和输出两种，分别放在输入部分和输出部分，而没有一个单独部分描述读写型操作数。<br/>
<code>__asm__("addl %1, %0" : "=r"(result) : "r"(input));</code><br/>
上例使用“r”约束的输出变量，GCC会分配一个寄存器，然后用该寄存器替换占位符，但是在使用该寄存器之前并不将result变量的值先读入寄存器，GCC认为所有输出变量以前的值都没有用处，也就没有必要将其读入寄存器(这可能是因为AT&amp;T汇编源于RISC架构处理器的原故，在RISC处理器中大部分指令的输入输出明显分开，而不像CISC那样一个操作数既做输入又做输出，例如：<br/>
add r0, r1, r2<br/>
r0和r1是输入，r2是输出，输入和输出分开，不使用输入输出型操作数。这种情况下GCC理所当然认为所有输出变量以前的值都没有用处，也就没有必要先将输出操作数的值读入寄存器r2了)。<br/>
  上面的内嵌汇编指令不能奏效，因为需要在执行addl之前把result的值入寄存器。因此在GCC中读写型的操作数需要在输入和输出部分分别描述，靠匹配约束符将两者关联到一起。注意仅在输入和输出部分使用相同的C变量，但是不用匹配约束符，例如：<br/>
<code>__asm__("addl %2, %0" : "=r"(result) : "r"(result), "m"(input));</code><br/>
产生的代码很可能不对。<br/>
  看上去上面的代码可以正常工作，因为我们知道%0和%1都和result相关，应该使用同一个寄存器，但是GCC并不去判断%0和%1是否和同一个C语言表达式或变量相关联(这样易于产生与内嵌汇编相应的汇编代码)，因此%0和%1使用的寄存器可能不同。<br/>
  使用匹配约束符后，GCC知道应将对应的操作数放在同一个位置(同一个寄存器或者同一个内存变量)。使用匹配约束字符的代码如下：<br/>
<code>__asm__("addl %2,%0" : "=r"(result) : "0"(result), "m"(input));</code><br/>
相应的汇编代码为：<br/>
<code>
      movl $0, _result
      movl $1, _input
      movl _result, %edx
      movl %edx, %eax
    #APP
      addl _input, %eax
    #NO_APP
      movl %eax, %edx
      movl %edx, _result
</code>
可以看到与result相关的寄存器是%edx，在执行指令addl之前先从%edx将result读入%eax，执行之后需要将结果从%eax读入%edx，最后存入result中。这里我们可以看出GCC处理内嵌汇编中输出操作数的一点点信息：addl并没有使用%edx，可见它不是简单的用result对应的寄存器%edx去替换%0，而是先分配一个寄存器，执行运算，最后才将运算结果存入对应的变量，因此GCC是先看该占位符对应的变量的约束符，发现是一个输出型寄存器变量，就为它分配一个寄存器，此时没有去管对应的C变量，最后GCC知道还要将寄存器的值写回变量，与此同时，它发现该变量与%edx关联，因此先存入%edx，再存入变量。</p>

<p>  在新版本的GCC中增加了一个约束字符“+”，它表示操作数是读写型的，GCC知道应将变量值先读入寄存器，然后计算，最后写回变量，而无需在输入部分再去描述该变量。<br/>
<code>__asm__("addl %1, %0" : "+r"(result) : "m"(input));</code><br/>
产生的汇编代码如下：
<code>
      movl $0,_result
      movl $1,_input
      movl _result,%eax
    #APP
      addl _input,%eax
    #NO_APP
      movl %eax,_result
    L2:
      movl %ebp,%esp
</code>
处理的比使用匹配约束符的情况还要好，省去了好几条汇编代码。</p>

<p>◆修饰符
  等号(=)和加号(+)用于对输出操作表达式的修饰，一个输出操作表达式要么被等号(=)修饰，要么被加号(+)修饰，二者必居其一。使用等号(=)说明此输出操作表达式是Write-Only的，使用加号(+)说明此输出操作表达式是Read-Write的。它们必须是输出操作表达式约束字符串中的第一个字符。比如："a=&ldquo;(var)是非法的，而&rdquo;+g"(var)则是合法的。<br/>
  当使用加号(+)的时候，此输出操作表达式等价于使用等号(=)约束再加上一个输入操作表达式。比如：<br/>
<code>__asm__("incl %0" : "+a"(var));</code><br/>
等价于<br/>
<code>__asm__("incl %0" : "=a"(var) : "0"(var));</code></p>

<p>  像等号(=)和加号(+)修饰符一样，符号(&amp;)也只能用于对输出操作表达式的修饰。<br/>
  约束符“&amp;”表示输入和输出操作数不能使用相同的寄存器，这样可以避免很多错误。举一个例子，下面代码的作用是将函数foo的返回值存入变量ret中：<br/>
<code>__asm__("call foo; movl %%edx, %1" : "=a"(ret) : "r"(bar));</code><br/>
我们知道函数的int型返回值存放在%eax中，但是GCC编译的结果是输入和输出同时使用了寄存器%eax，如下：<br/>
<code>
      movl bar, %eax
    #APP
      call foo
      movl %ebx, %eax
    #NO_APP
      movl %eax, ret
</code>
结果显然不对，原因是GCC并不知道%eax中的值是我们所要的。避免这种情况的方法是使用“&amp;”修饰符，这样bar就不会再使用%eax寄存器，因为已被ret指定使用。<br/>
<code>__asm__("call foo; movl %%edx, %1" : "=&amp;a"(ret) : "r"(bar));</code></p>

<h4>6、破坏描述部分</h4>

<p>  有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。如果希望GCC在编译时能够将这一点考虑进去。那么你就可以在“破坏描述部分”声明这些寄存器或内存。</p>

<p>  这种情况一般发生在一个寄存器出现在“汇编语句模板”，但却不是由输入或输出操作表达式所指定的，也不是在一些输入或输出操作表达式使用"r"、"g"约束时由GCC为其选择的，同时此寄存器被“汇编语句模板”中的指令修改，而这个寄存器只是供当前内嵌汇编临时使用的情况。比如：<br/>
<code>__asm__("movl %0, %%ebx" : : "a"(foo) : "%ebx");</code><br/>
寄存器%ebx出现在“汇编语句模板”中，并且被movl指令修改，但却未被任何输入或输出操作表达式指定，所以你需要在“破坏描述部分”指定"%ebx"，以让GCC知道这一点。</p>

<p>  因为你在输入或输出操作表达式所指定的寄存器，或当你为一些输入或输出操作表达式使用"r"、"g"约束，让GCC为你选择一个寄存器时，GCC对这些寄存器是非常清楚的——它知道这些寄存器是被修改的，你根本不需要在“破坏描述部分”再声明它们。但除此之外，GCC对剩下的寄存器中哪些会被当前的内嵌汇编修改一无所知。所以如果你真的在当前内嵌汇编语句中修改了它们，那么就最好“破坏描述部分”中声明它们，让GCC针对这些寄存器做相应的处理。否则有可能会造成寄存器的不一致，从而造成程序执行错误。</p>

<p>  在“破坏描述部分”中指定这些寄存器的方法很简单，你只需要将寄存器的名字使用双引号引起来。如果有多个寄存器需要声明，你需要在任意两个声明之间用逗号隔开。比如：<br/>
<code>__asm__("movl %0, %%ebx; popl %%ecx" : : "a"(foo) : "%ebx", "%ecx" );</code><br/>
  注意准备在“破坏描述部分”声明的寄存器必须使用完整的寄存器名称，在寄存器名称前面使用的“%”是可选的。<br/>
  另外需要注意的是，如果你在“破坏描述部分”声明了一个寄存器，那么这个寄存器将不能再被用做当前内嵌汇编语句的输入或输出操作表达式的寄存器约束，如果输入或输出操作表达式的寄存器约束被指定为"r"或"g"，GCC也不会选择已经被声明在“破坏描述部分”中的寄存器。比如：<br/>
<code>__asm__("movl %0, %%ebx" : : "a"(foo) : "%eax", "%ebx");</code><br/>
此例中，由于输出操作表达式"a"(foo)的寄存器约束已经指定了%eax寄存器，那么再在“破坏描述部分”中指定"%eax"就是非法的。编译时，GCC会给出编译错误。</p>

<p>  除了寄存器的内容会被改变，内存的内容也可以被修改。如果一个“汇编语句模板”中的指令对内存进行了修改，或者在此内嵌汇编出现的地方内存内容可能发生改变，而被改变的内存地址你没有在其输出操作表达式使用"m"约束，这种情况下你需要在“破坏描述部分”使用字符串"memory"向GCC声明：“在这里，内存发生了或可能发生了改变”。例如：<br/>
```
    void * memset(void * s, char c, size_t count)
    {
        <strong>asm</strong>(&ldquo;cld\n\t&rdquo;
        &ldquo;rep\n\t&rdquo;
        &ldquo;stosb&rdquo;
        : /<em> no output </em>/
        : &ldquo;a&rdquo;&copy;, &ldquo;D&rdquo;(s), &ldquo;c&rdquo;(count)
        : &ldquo;%ecx&rdquo;, &ldquo;%edi&rdquo;, &ldquo;memory&rdquo;);</p>

<pre><code>    return s;
}
</code></pre>

<p>```
  此例实现了标准函数库memset，其内嵌汇编中的stosb对内存进行了改动，而其被修改的内存地址s被指定装入%edi，没有任何输出操作表达式使用了"m"约束，以指定内存地址s处的内容发生了改变。所以在其“破坏描述部分”使用"memory"向GCC声明：内存内容发生了变动。</p>

<p>  如果一个内嵌汇编语句的“破坏描述部分”存在"memory"，那么GCC会保证在此内嵌汇编之前，如果某个内存的内容被装入了寄存器，那么在这个内嵌汇编之后，如果需要使用这个内存处的内容，就会直接到这个内存处重新读取，而不是使用被存放在寄存器中的拷贝。因为这个时候寄存器中的拷贝已经很可能和内存处的内容不一致了。</p>

<p>  当一个“汇编语句模板”中包含影响eflags寄存器中的条件标志，那么需要在“破坏描述部分”中使用"cc"来声明这一点。这些指令包括adc，div，popfl，btr，bts等等，另外，当包含call指令时，由于你不知道你所call的函数是否会修改条件标志，为了稳妥起见，最好也使用"cc"。</p>
]]></content>
  </entry>
  
</feed>
