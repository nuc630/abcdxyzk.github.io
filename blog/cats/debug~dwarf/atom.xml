<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~dwarf | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~dwarf/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-22T11:40:38+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[修改elf文件标记的源码路径debugedit，find-debuginfo]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/03/debug-debugedit/"/>
    <updated>2014-11-03T18:10:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/03/debug-debugedit</id>
    <content type="html"><![CDATA[<pre><code>    yum install rpm-build
    sudo apt-get install rpm
</code></pre>

<p>/usr/lib/rpm/debugedit 用来改变源码查找路径。
```
    $ /usr/lib/rpm/debugedit
    Usage: debugedit [OPTION&hellip;]
      -b, &ndash;base-dir=STRING      base build directory of objects
      -d, &ndash;dest-dir=STRING      directory to rewrite base-dir into
      -l, &ndash;list-file=STRING     file where to put list of source and header file
                             names
      -i, &ndash;build-id             recompute build ID note and print ID on stdout</p>

<pre><code>Help options:
  -?, --help                 Show this help message
  --usage                    Display brief usage message
</code></pre>

<pre><code>base-dir 长度要大等于 dest-dir  
-i 输出build-id  
-l 输出源编译文件位置，便于有需要的人打包

debugedit 会在.debug_info .debug_abbrev .debug_line .debug_str中将base_dir目录替换为dest_dir目录。  
* 需要注意，如果base_dir是路径中除文件名的部分，则.debug_line中的The Directory Table的目录和.debug_info中的DW_AT_comp_dir(指向.debug_str的内容)不会替换。  
如：  
.debug_line中的Table中有一个目录为`/root/Desktop`，如果用 `-b /root/Desktop`则匹配不上这条。  
* 因为：debugedit在匹配的时候在base_dir后面加了一个'/'  
其他部分能替换是因为他们存的是文件路径，不是文件夹路径  

--------

.debug_str段保存着所有全局变量的名字，以0x00作为每一个全局变量名的结束。  
在其它段来调用名字时，是以其在.debug_str段的偏移量来实现的  
gcc -g /root/Desktop/a.c -o /root/Desktop/a.out  
用绝对路径编译，在.debug_str段中就会存下源文件路径，.debug_info的DW_TAG_compile_unit中的DW_AT_name对应.debug_str中的偏移。  
</code></pre>

<pre><code>$ objdump --dwarf=str a.out
....
  0x00000000 474e5520 4320342e 342e3720 32303132 GNU C 4.4.7 2012
  0x00000010 30333133 20285265 64204861 7420342e 0313 (Red Hat 4.
  0x00000020 342e372d 3429006c 6f6e6720 756e7369 4.7-4).long unsi
  0x00000030 676e6564 20696e74 002f726f 6f742f44 gned int./root/D
  0x00000040 65736b74 6f702f61 2e630075 6e736967 esktop/a.c.unsig
  0x00000050 6e656420 63686172 006d6169 6e006c6f ned char.main.lo
  0x00000060 6e672069 6e74002f 726f6f74 2f446573 ng int./root/Des
  0x00000070 6b746f70 0073686f 72742075 6e736967 ktop.short unsig
  0x00000080 6e656420 696e7400 73686f72 7420696e ned int.short in
  0x00000090 7400                                t.


$ objdump --dwarf=info a.out
.....
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt; c&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C 4.4.7 20120313 (Red Hat 4.4.7-4)
    &lt;10&gt;   DW_AT_language    : 1        (ANSI C)
    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x39): /root/Desktop/a.c
    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x67): /root/Desktop
    &lt;19&gt;   DW_AT_low_pc      : 0x4004c4
    &lt;21&gt;   DW_AT_high_pc     : 0x40051c
    &lt;29&gt;   DW_AT_stmt_list   : 0x0
</code></pre>

<pre><code>-----------------------------------------
</code></pre>

<pre><code>$ /usr/lib/rpm/debugedit -b /root/Desktop -d /usr/src /root/Desktop/a.out
</code></pre>

<pre><code>
----------------------------------------
</code></pre>

<pre><code>$ objdump --dwarf=str a.out
...
  0x00000000 474e5520 4320342e 342e3720 32303132 GNU C 4.4.7 2012
  0x00000010 30333133 20285265 64204861 7420342e 0313 (Red Hat 4.
  0x00000020 342e372d 3429006c 6f6e6720 756e7369 4.7-4).long unsi
  0x00000030 676e6564 20696e74 002f7573 722f7372 gned int./usr/sr
  0x00000040 632f612e 63002f61 2e630075 6e736967 c/a.c./a.c.unsig
  0x00000050 6e656420 63686172 006d6169 6e006c6f ned char.main.lo
  0x00000060 6e672069 6e74002f 726f6f74 2f446573 ng int./root/Des
  0x00000070 6b746f70 0073686f 72742075 6e736967 ktop.short unsig
  0x00000080 6e656420 696e7400 73686f72 7420696e ned int.short in
  0x00000090 7400                                t.


$ objdump --dwarf=info a.out

...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt; c&gt;   DW_AT_producer    : (indirect string, offset: 0x0): GNU C 4.4.7 20120313 (Red Hat 4.4.7-4)
    &lt;10&gt;   DW_AT_language    : 1        (ANSI C)
    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x39): /usr/src/a.c
    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x67): /root/Desktop
    &lt;19&gt;   DW_AT_low_pc      : 0x4004c4
    &lt;21&gt;   DW_AT_high_pc     : 0x40051c
    &lt;29&gt;   DW_AT_stmt_list   : 0x0
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libdwarf 安装使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/10/15/debug-libdwarf/"/>
    <updated>2014-10-15T18:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/10/15/debug-libdwarf</id>
    <content type="html"><![CDATA[<p>下载<a href="http://www.prevanders.net/dwarf.html">http://www.prevanders.net/dwarf.html</a></p>

<p>依赖<a href="http://directory.fsf.org/wiki/Libelf">http://directory.fsf.org/wiki/Libelf</a></p>

<p>dwarf格式文档<a href="http://www.dwarfstd.org/Home.php">http://www.dwarfstd.org/Home.php</a></p>

<h4>动态编译</h4>

<p>直接./configure，make就好。
<code>
    ./configure
    make
</code></p>

<h4>静态编译</h4>

<p>比较新的版本要替换 optind 和 opterr ，因为会和libc.a冲突
<code>
    find . -name '*.[c|h]' -exec sed -i -e 's/optind/optind_kk/g' {} \;
    find . -name '*.[c|h]' -exec sed -i -e 's/opterr/opterr_kk/g' {} \;
</code></p>

<p>先动态编译，为了生成libdwarf/libdwarf.a
<code>
    ./configure
    make
</code></p>

<p>静态编译
<code>
    rm -rf dwarfdump/dwarfdump
    make CFLAGS+="-static -I`pwd`/libdwarf -I`pwd`/dwarfdump" LDFLAGS+="-static -L`pwd`/libdwarf -ldwarf -lelf"
</code></p>

<p>使用
<code>
    ./dwarfdump/dwarfdump -Wc -S match=dev_queue_xmit /tmp/vmlinux
</code>
获取vmlinux中dev_queue_xmit函数的.debug信息</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通用寄存器编码表]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/09/25/debug-regs-to-num/"/>
    <updated>2014-09-25T18:14:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/09/25/debug-regs-to-num</id>
    <content type="html"><![CDATA[<ul>
<li>来源：systemtap-2.4/runtime/loc2c-runtime.h

<h4>x86_64</h4>

<pre><code>  #define pt_dwarf_register_0(regs)       regs-&gt;rax
  #define pt_dwarf_register_1(regs)       regs-&gt;rdx
  #define pt_dwarf_register_2(regs)       regs-&gt;rcx
  #define pt_dwarf_register_3(regs)       regs-&gt;rbx
  #define pt_dwarf_register_4(regs)       regs-&gt;rsi
  #define pt_dwarf_register_5(regs)       regs-&gt;rdi
  #define pt_dwarf_register_6(regs)       regs-&gt;rbp
  #define pt_dwarf_register_7(regs)       regs-&gt;rsp
  #define pt_dwarf_register_8(regs)       regs-&gt;r8
  #define pt_dwarf_register_9(regs)       regs-&gt;r9
  #define pt_dwarf_register_10(regs)      regs-&gt;r10
  #define pt_dwarf_register_11(regs)      regs-&gt;r11
  #define pt_dwarf_register_12(regs)      regs-&gt;r12
  #define pt_dwarf_register_13(regs)      regs-&gt;r13
  #define pt_dwarf_register_14(regs)      regs-&gt;r14
  #define pt_dwarf_register_15(regs)      regs-&gt;r15
</code></pre></li>
</ul>


<h4>i386</h4>

<pre><code>    #define pt_dwarf_register_0(regs)       regs-&gt;eax
    #define pt_dwarf_register_1(regs)       regs-&gt;ecx
    #define pt_dwarf_register_2(regs)       regs-&gt;edx
    #define pt_dwarf_register_3(regs)       regs-&gt;ebx
    #define pt_dwarf_register_4(regs)       (user_mode(regs) ? regs-&gt;esp : (long)&amp;regs-&gt;esp)
    #define pt_dwarf_register_5(regs)       regs-&gt;ebp
    #define pt_dwarf_register_6(regs)       regs-&gt;esi
    #define pt_dwarf_register_7(regs)       regs-&gt;edi
</code></pre>

<ul>
<li><a href="http://www.mouseos.com/x64/extend64.html">http://www.mouseos.com/x64/extend64.html</a> 这里的是错的，改正后如下
<code>
寄存器编码    8    16    32    64
000    al    ax    eax    rax
001    dl    dx    edx    rdx
010    cl    cx    ecx    rcx
011    bl    bx    ebx    rbx
100    ?    si    esi    rsi
101    ?    di    edi    rdi
110    ?    bp    ebp    rbp
111    ?    sp    esp    rsp
1000    r8b    r8w    r8d    r8
1001    r9b    r9w    r9d    r9
1010    r10b    r10w    r10d    r10
1011    r11b    r11w    r11d    r11
1100    r12b    r12w    r12d    r12
1101    r13b    r13w    r13d    r13
1110    r14b    r14w    r14d    r14
1111    r15b    r15w    r15d    r15
</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BFD or dwarf? article]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/11/29/debug-dwarf-article/"/>
    <updated>2013-11-29T17:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/11/29/debug-dwarf-article</id>
    <content type="html"><![CDATA[<p><a href="http://blog.techveda.org/howsourcedebuggerswork/">http://blog.techveda.org/howsourcedebuggerswork/</a></p>

<p><a href="http://bbs.sjtu.edu.cn/bbscon,board,Security,file,M.1134227822.A.html">http://bbs.sjtu.edu.cn/bbscon,board,Security,file,M.1134227822.A.html</a></p>

<p><a href="http://blog.csdn.net/warriorpaw/article/details/8660704">http://blog.csdn.net/warriorpaw/article/details/8660704</a></p>

<p><a href="http://blog.csdn.net/rrerre/article/details/6843539">http://blog.csdn.net/rrerre/article/details/6843539</a></p>

<p><a href="http://blog.csdn.net/rrerre/article/details/6639484">http://blog.csdn.net/rrerre/article/details/6639484</a></p>

<p><a href="http://dwarfstd.org/doc/Dwarf3.pdf">http://dwarfstd.org/doc/Dwarf3.pdf</a></p>

<p>dwarf2解析 <a href="http://hi.baidu.com/tag/dwarf2%E8%A7%A3%E6%9E%90/feeds">http://hi.baidu.com/tag/dwarf2%E8%A7%A3%E6%9E%90/feeds</a></p>
]]></content>
  </entry>
  
</feed>
