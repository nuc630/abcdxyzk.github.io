<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~ksplice | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~ksplice/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-05-11T20:15:01+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[理解Ksplice执行过程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice-detail/"/>
    <updated>2016-03-29T16:00:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice-detail</id>
    <content type="html"><![CDATA[<p><a href="http://m.blog.chinaunix.net/uid-29280350-id-4717510.html">http://m.blog.chinaunix.net/uid-29280350-id-4717510.html</a></p>

<p><a href="http://m.blog.chinaunix.net/uid-29280350-id-4906197.html">http://m.blog.chinaunix.net/uid-29280350-id-4906197.html</a></p>

<hr />

<p>注：在Linux-3.0.0 到 linux-3.8.0上能够正常运行，超过3.8.13就会导致系统桌面崩溃</p>

<h3>1.Ksplice-create</h3>

<p>Ksplice-create用于创建补丁文件，根据用户提供的不同的更新文件，ksplice-create有三种不同的途径：<br/>
  1）Patch文件<br/>
  2）Diffext指定新文件的后缀<br/>
  3）使用git指定新的标记</p>

<p>同时，ksplice-create还需要指定orig_config_dir（指定config的目录），在该目录下要有以下几个文件：<br/>
  1）当前run内核的System.map<br/>
  2）当前run内核的.config<br/>
  3）当前run内核的modules库下的build链接<br/>
以上三项缺一不可。</p>

<h4>1.1配置</h4>

<p>根据配置变量，组织make命令：
<code>
    make -rR
</code></p>

<p>如果定义了jobs
<code>
    -jn
</code></p>

<p>如果定义了verbose level</p>

<pre><code>    V=1 否则 -s
</code></pre>

<p>make_ksplice 变量：
<code>
    @make -f $datadir/Makefile.ksplice @kbuild_flags
</code></p>

<p>如果定义了build_modules
<code>
    KSPLICE_BUILD_MODULES=1
</code></p>

<h4>1.2 Revert</h4>

<p>配置变量完成后，ksplice-create会查找linux内核代码目录下是否会存在<em>.KSPLICE_presrc文件，存在该类型的文件则表明在该linux内核目录下曾制作过补丁文件，因此需要先将代码恢复为原始代码。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>my @revert_flags=(&ldquo;KSPLICE_MODE=revert&rdquo;);
</span><span class='line'>    Revert_orig()
</span><span class='line'>        Find出&lt;/em&gt;.KSPLICE_presrc的文件，将之恢复为原始文件
</span><span class='line'>        执行命令：make -rR -f Makefile.ksplice KSPLICE_MODE=revert&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;进入Makefile.ksplice文件：
</span><span class='line'>Makefile.ksplice默认目标是__ksplice，
</span><span class='line'>__ksplice: $(ksplice-deps) $(ksplice-dirs)
</span><span class='line'>    @:
</span><span class='line'>
</span><span class='line'>目标只是依赖两个dirs，没有具体的执行命令，所有的执行命令都是在依赖中执行的。对于ksplice-dirs的命令：
</span><span class='line'>
</span><span class='line'>$(ksplice-dirs):
</span><span class='line'>    $(Q) $(MAKE) $(build)=$(@:_ksplice_%=%)
</span><span class='line'>    其中
</span><span class='line'>    build := -f $(ksplice-makefile) obj
</span><span class='line'>
</span><span class='line'>    所以命令展开就是：
</span><span class='line'>    make -f /usr/local/share/ksplice/Makefile.ksplice obj=arch/x86/crypto
</span><span class='line'>
</span><span class='line'>    又再次进入makefile.ksplice，这次传入了obj。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>revert的作用就是把.ksplice_pre的文件执行cmd_ksplice-revert。
</span><span class='line'>
</span><span class='line'>最后通过$(call cmd, ksplice-revert)调用
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cmd_ksplice-revert = touch -r ksplice-revert-stamp $(@:_ksplice-revert_%=%); \
</span><span class='line'>mv $(@:_ksplice-revert_%=%) $(@:_ksplice-revert_%.KSPLICE_pre=%)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;在然后根据ksplice-clean-files把ksplice生成的文件clean掉。
</span><span class='line'>
</span><span class='line'>#### 1.3 SNAP
</span><span class='line'>
</span><span class='line'>执行完revert之后，重新回到ksplice-create文件中继续执行
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@snap_flags = (“KSPLICE_MODE=snap”);
</span><span class='line'>runval_raw(@make_ksplice,@snap_flags)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;展开即为：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;执行命令：make -rR -f Makefile.ksplice KSPLICE_MODE=snap
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>进入Makefile.ksplice文件：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ifeq ($(KSPLICE_MODE),snap)
</span><span class='line'>$(obj)/%.o.KSPLICE: $(obj)/%.o FORCE
</span><span class='line'>$(if $(strip $(wildcard $&lt;.KSPLICE_pre) $(filter $&lt;, $?)), \
</span><span class='line'>    $(call cmd, ksplice-snap))
</span><span class='line'>else
</span><span class='line'>    $(obj)/%. o.KSPLICE:$(obj)/%.o
</span><span class='line'>    $(call cmd, ksplice-diff)
</span><span class='line'>endif
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其中
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cmd_ksplice-snap = $(ksplice-script) snap $@
</span><span class='line'>cmd_ksplice-diff = $(ksplice-script) diff $@
</span><span class='line'>ksplice-scrript = $(dir $(ksplice-makefile))ksplice-obj.pl
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>进入ksplice-obj.pl文件中:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sub do_snap {
</span><span class='line'>my ($out) = @_;
</span><span class='line'>my ($obj) = $out = ~ /^(.*)\.KSPLICE$/ or die;
</span><span class='line'>die if (!-e $obj);
</span><span class='line'>unlink "$obj.KSPLICE_pre" if (-e "$obj.KSPLICE_pre");
</span><span class='line'>empty_diff($out);
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sub empty_diff {
</span><span class='line'>my ($out) = @_;
</span><span class='line'>my ($obj) = $out =~ /^(.*)\.KSPLICE$/ or die;
</span><span class='line'>unlink "$obj.KSPLICE_new_code" if (-e "$obj.KSPLICE_new_code");
</span><span class='line'>unlink "$obj.KSPLICE_old_code" if (-e "$obj.KSPLICE_old_code");
</span><span class='line'>open OUT, '&gt;', "$out.tmp";
</span><span class='line'>close OUT;
</span><span class='line'>rename "$out.tmp", $out;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>snap的工作就是生成一个.o.KSPLICE空文件，函数empty_diff就是用来生成空文件的。.o.KSPLICE文件用来作为一个标志位，只是为了后续diff阶段，如果有不同的.o就会把.o.KSPLICE中写入1，最后遍历所有的.o.KSPLICE，哪些为1就知道哪些有差异了。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sub do_diff {
</span><span class='line'>my ($out) = @_;
</span><span class='line'>my ($obj) = $out =~ /^(.*)\.KSPLICE$/ or die;
</span><span class='line'>my $obj_pre = "$obj.KSPLICE_pre";
</span><span class='line'>die if (!-e $obj);
</span><span class='line'>die "Patch creates new object $obj" if (!-e $obj_pre);
</span><span class='line'>if (system('cmp', '-s', '--', $obj_pre, $obj) == 0) {
</span><span class='line'>    unlink $obj_pre;
</span><span class='line'>    return empty_diff($out);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>runval("$libexecdir/ksplice-objmanip", $obj, "$obj.KSPLICE_new_code", "keep-new-code", "$obj.KSPLICE_pre", $ENV{KSPLICE_KID});
</span><span class='line'>return empty_diff($out) if (!-e "$obj.KSPLICE_new_code");
</span><span class='line'>
</span><span class='line'>open OUT, '&gt;', "$out.tmp";
</span><span class='line'>print OUT "1\n";
</span><span class='line'>close OUT;
</span><span class='line'>rename "$out.tmp", $out;
</span><span class='line'>runval("$libexecdir/ksplice-objmanip", $obj_pre, "$obj.KSPLICE_old_code", "keep-old-code");
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>无论snap还是diff都是要创建目标.o.KSPLICE, 但是动作不一样，并且snap是FORCE，diff不是强制的，最关键的就是打了patch之后，就会重新生成patch对应的.o，此时依赖条件更新了，就会执行diff命令。
</span><span class='line'>
</span><span class='line'>#### 1.4 创建ksplice模块
</span><span class='line'>
</span><span class='line'>将kmodsrc目录拷贝到tmp目录下，执行命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@make_kmodsrc = (@make, "-C", $kernel_headers_dir, "M=$kmodsrc", "KSPLICE_KID=$kid", "KSPLICE_VERSION=1.0", "map_printk=$map_printk");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>编译内核模块，然后make modules_install，
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@make_kmodsrc_install = (@make_kmodsrc, qw(modules_install --old-file=_modinst_post --old-file=_emodinst_post), "MAKE=make --old-file=_modinst_post --old-file=_emodinst_post", "INSTALL_MOD_STRIP=1", "MODLIB=$tmpdir/ksplice-modules");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 1.5 PATCH
</span><span class='line'>
</span><span class='line'>将准备的patch文件更新到内核中：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;runval_infile($patchfile, "patch", @patch_opt, "-bz", ".KSPLICE_presrc")；
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>-bz的意思：  
</span><span class='line'>-b 备份原始文件  
</span><span class='line'>-z 是用.KSPLICE_presrc为后缀备份原始文件。  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>要注意patch文件中各个文件的行号等内容要对齐，不然patch文件无法更新到内核源码中（要每个文件都要检查，并确认patch文件可用）。
</span><span class='line'>
</span><span class='line'>打上补丁后，执行：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;make_ksplice KSPLICE_MODE=diff
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 1.6 DIFF
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;my @diff_flags = ("KSPLICE_MODE=diff")
</span><span class='line'>runval_raw(@make_ksplice, @diff_flags);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>即执行命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;make -rR -f Makefile.ksplice KSPLICE_MODE=diff
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>进入Makefile.ksplice文件：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ifeq ($(KSPLICE_MODE),diff)
</span><span class='line'>define ksplice-cow-check
</span><span class='line'>    $(if $(strip $(1)),$(if $(filter-out %.KSPLICE,$@),$(if $(wildcard $@),$(if $(wildcard $@.KSPLICE_pre),,$(call cmd,ksplice-cow)))))$(1)
</span><span class='line'>endef
</span><span class='line'>
</span><span class='line'>define ksplice-add-cow-check
</span><span class='line'>    $(v) = $$(call ksplice-cow-check,$(value $(v)))
</span><span class='line'>endef
</span><span class='line'>
</span><span class='line'>ksplice-cow-eval += $(foreach v,if_changed if_changed_dep if_changed_rule,$(ksplice-add-cow-check))
</span><span class='line'>endif   # KSPLICE_MODE
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其中
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cmd_ksplice-cow = cp -a $@ $@.KSPLICE_pre
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>diff比较的是.o.KSPLICE_pre 和 新编译的.o，从do_diff的实现来看，在diff之前，KSPLICE_pre就已经生成了，生成KSPLICE_pre的命令只有cmd-ksplice-cow, 即diff操作的结果。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$KSPLICE_MODE ?= diff
</span><span class='line'>ifeq ($(KSPLICE_MODE),snap)
</span><span class='line'>$(obj)/%.o.KSPLICE: $(obj)/%.o FORCE
</span><span class='line'>    $(if $(strip $(wildcard $&lt;.KSPLICE_pre) $(filter $&lt;, $?)), \
</span><span class='line'>        $(call cmd, ksplice-snap))
</span><span class='line'>else
</span><span class='line'>$(obj)/%. o.KSPLICE:$(obj)/%.o
</span><span class='line'>$(call cmd, ksplice-diff)
</span><span class='line'>endif
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;在此处调用
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cmd_ksplice-diff=$(ksplice-script) diff $@
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>进入ksplice-obj.pl中调用函数do_diff
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sub do_diff {
</span><span class='line'>my ($out) = @_;
</span><span class='line'>my ($obj) = $out =~ /^(.*)\.KSPLICE$/ or die;
</span><span class='line'>my $obj_pre = "$obj.KSPLICE_pre";
</span><span class='line'>die if (!-e $obj);
</span><span class='line'>die "Patch creates new object $obj" if (!-e $obj_pre);
</span><span class='line'>if (system('cmp', '-s', '--', $obj_pre, $obj) == 0) {
</span><span class='line'>    unlink $obj_pre;
</span><span class='line'>    return empty_diff($out);
</span><span class='line'>}
</span><span class='line'>runval("$libexecdir/ksplice-objmanip", $obj, "$obj.KSPLICE_new_code", "keep-new-code", "$obj.KSPLICE_pre", $ENV{KSPLICE_KID});
</span><span class='line'>return empty_diff($out) if (!-e "$obj.KSPLICE_new_code");
</span><span class='line'>
</span><span class='line'>open OUT, '&gt;', "$out.tmp";
</span><span class='line'>print OUT "1\n";
</span><span class='line'>close OUT;
</span><span class='line'>rename "$out.tmp", $out;
</span><span class='line'>
</span><span class='line'>runval("$libexecdir/ksplice-objmanip", $obj_pre, "$obj.KSPLICE_old_code", "keep-old-code");
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>此处有三个关键点，第一system系统调用cmp，比较$(obj)和$obj_pre之间的不同，第二通过调用ksplice-objmanip（即objmanip）生成new_code，并且在.o.KSPLICE_pre中写入标志位1，第三步调用ksplice-objmanip（即objmanip）将未打patch之前的代码生成old_code。第二步和第三步进入到C文件objmanip.c的main()函数中，根据传入的参数的不同，调用不同的函数，最后生成new和old。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#### 1.7 模块编译
</span><span class='line'>
</span><span class='line'>命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;runstr（qw(find -name *.KSPLCE* !  ( - name *.KSPLICE -empty ) ! -name .*.KSPLICE.cmd -print0)）
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>找出所有*.KSPLICE*非空的文件，将读入的内容保存到@modules中。对MOD的处理是在KSPLICE_KMODSRC中生成的。
</span><span class='line'>
</span><span class='line'>命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;runval(@make_ksplice, "KSPLICE_MODE=modinst", "MODLIB=$tmpdir/modules", "INSTALL_MOD_STRIP=1", "modules=@modulepaths");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在Makefile.ksplice中，对modinst的处理是：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ifeq ($(KSPLICE_MODE),modinst)
</span><span class='line'>ksplice-deps += ksplice_modinst
</span><span class='line'>PHONY += ksplice_modinst
</span><span class='line'>ksplice_modinst:
</span><span class='line'>$(Q) $(MAKE) –f $(srctree)/scripts/Makefile.modinst
</span><span class='line'>endif
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这里的Makefile.modinst和Makefile.modpost都是内核script中的Makefile。
</span><span class='line'>
</span><span class='line'>在ksplice-create中分别调用了两次make_kmodsrc， 第一次编译出ksplice.ko模块，第二次传入参数KSPLICE_MODULES=@modules 生成new.ko 和 old.ko文件。在kmodsrc目录中的Makefile中，第一次编译的是KSPLICE_CORE:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;KSPLICE_CORE = ksplice-$(KSPLICE_KID)
</span><span class='line'>obj-m += $(KSPLICE_CORE).o
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>实际上最终编译生成ksplice-kid.ko 还是依靠的obj-m的方法编译的。
</span><span class='line'>
</span><span class='line'>第二次编译的时候传入的modules，同时KSPLICE_SKIP_CORE=1，表示不编译ksplice.ko
</span><span class='line'>
</span><span class='line'>在ksplice-create中，执行命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;runval(@make_kmodsrc, "KSPLICE_MODULES=@modules", "KSPLICE_SKIP_CORE=1");
</span><span class='line'>runval(@make_kmodsrc_install, "KSPLICE_MODULES=@modules", "KSPLICE_SKIP_CORE=1");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在kmodsrc/Makefile中：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ifneq ($(KSPLICE_MODULES),)
</span><span class='line'>$(foreach mod,$(KSPLICE_MODULES),$(obj)/new-code-$(target).o): $(obj)/%.o: $ (src)/new_code_loader.c FORCE
</span><span class='line'>$(call if_changed_rule,cc_o_c)
</span><span class='line'>$(foreach mod,$(KSPLICE_MODULES),$(obj)/old-code-$(target).o): $(obj)/%.o: $ (src)/old_code_loader.c FORCE
</span><span class='line'>$(call if_changed_rule,cc_o_c)
</span><span class='line'>endif
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>以new为例：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$(KSPLICE)-n-objs = $(ksplice-new-code-objs)
</span><span class='line'>ksplice-new-code-objs = new-code-$(target).o collect-new-code-$(mod).o
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>new.ko由new-code-mod.o 和 collect-new-code-$(mod).o 组成。
</span><span class='line'>
</span><span class='line'>new-code-mod.o的命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$(foreach mod,$(KSPLICE_MODULES),$(obj)/new-code-$(target).o): $(obj)/%.o: \
</span><span class='line'>$ (src)/new_code_loader.c FORCE
</span><span class='line'>$(call if_changed_rule,cc_o_c)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>collect-new-code-$(mod).o的命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$(obj)/collect-new-code-%.o: $(obj)/%.o.KSPLICE_new_code $(obj)/ksplice.lds     FORCE
</span><span class='line'>$(call if_changed,ksplice-collect)
</span><span class='line'>cmd_ksplice-collect = \
</span><span class='line'>$(ksplice-script) finalize $&lt; $&lt;.final $* &amp;&amp; \
</span><span class='line'>$(LD) --script=$(obj)/ksplice.lds -r -o $@ $&lt;.final
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>collect的命令最后调用do_finalize生成mod.final，再结合ksplice.lds 生成collect-new-code-mod.o
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>### 2.ksplice-apply
</span><span class='line'>
</span><span class='line'>#### 2.1 校验补丁文件
</span><span class='line'>
</span><span class='line'>第一，执行命令：chdir(unpack_update($file))
</span><span class='line'>
</span><span class='line'>其中 unpack_update()在文件Ksplice.pm中，首先检测使用的补丁文件是否是目录，如果是则返回到ksplice-apply文件中；如果是压缩文件则将其解压到/tmp/临时目录下，然后将路径返回到ksplice-apply文件中。
</span><span class='line'>
</span><span class='line'>第二，检测目标路径中是否存在contents文件，不存在就退出ksplice-apply程序。
</span><span class='line'>
</span><span class='line'>第三，检测当前系统/sys/moudle下面是否已经加载了该补丁文件。
</span><span class='line'>
</span><span class='line'>在上述操作中，如果有不满足要求的，通过设置apply_errors来输出错误信息。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#### 2.2 加载补丁文件
</span><span class='line'>
</span><span class='line'>执行命令load_module($change-&gt;{new_code_file})
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;sub load_module {
</span><span class='line'>my ($module, @params) = @_;
</span><span class='line'>push @modules_loaded, ($module =~ m/^(.)\.ko$/);
</span><span class='line'>if (runval_raw("insmod", $module, @params) != 0){
</span><span class='line'>    pop @modules_loaded;
</span><span class='line'>    child_error();
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>return 1;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>在函数load_module()中调用系统函数insmod来加载ko文件。如果在加载过程中出现错误，由insmod返回错误信息。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[内核热补丁技术揭秘]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice-base/"/&gt;
</span><span class='line'>&lt;updated&gt;2016-03-29T15:51:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice-base&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://ruby-china.org/topics/20680"&gt;https://ruby-china.org/topics/20680&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下述为UCloud资深工程师邱模炯在InfoQ架构师峰会上的演讲——《UCloud云平台的内核实践》中非常受关注的内核热补丁技术的一部分。给大家揭开了UCloud云平台内核技术的神秘面纱。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;如何零代价修复海量服务器的Linux内核缺陷？&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于一个拥有成千上万台服务器的公司，Linux内核缺陷导致的死机屡见不鲜。让工程师们纠结的是，到底要不要通过给服务器升级内核来修复缺陷？升级意味者服务器重启、业务中断以及繁重的准备工作；不升级则担心服务器死机，同样造成业务中断和繁重的善后工作。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;而在今天的云计算时代，一台宿主机往往运行多个云主机，每一次重启不管是主动升级还是被动死机，都意味着中断其上运行的所有云主机。因此，宿主机内核缺陷的修复更加棘手。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;而作为一个支撑着上万家企业用户IT基础架构的云服务商，UCloud云平台上的海量宿主机又是如何修复内核缺陷的呢？&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;邱模炯透露，如果按照传统的重启方式来修复，那么无论是对于UCloud或是用户，都意味着繁重的运维和业务中断。但是，UCloud通过“内核热补丁技术”——即给运行中的内核打上二进制补丁，UCloud已经做到了零代价免重启修复海量服务器的内核缺陷！目前为止，UCloud对所发现的上游内核10+个缺陷全以热补丁方式修复，累计数万台次，无一例失败且无任何副作用；理论上避免了相应次数的宿主机重启及所隐含的云主机业务中断。这项技术在UCloud已经成熟。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;UCloud内核热补丁技术揭秘&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;UCloud的热补丁技术基于多年前的开源ksplice加以定制优化而来，通过加载一个特殊准备的热补丁模块来修复内核。其过程如下图所示：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/debug/2016-03-29-1.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;热补丁模块由ksplice程序编译生成，包含有缺陷的二进制指令和修复后的二进制指令（这些二进制按函数级别组织）；模块加载后，自动定位到内核的缺陷处并以修复指令动态替换缺陷指令。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ksplice热补丁模块的创建原理见下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/debug/2016-03-29-2.jpg" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;首先获取一份运行中内核对应的源码并编译出二进制，称为pre对象；打上源码补丁再次编译，称为post对象。而运行中的内核二进制称为run对象。post和pre逐条指令比较并找出存在差异的函数，之后把这些差异合并为内核模块形式的热补丁。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;创建好的热补丁模块在加载到内核时还会做些检验工作：对比pre和run对象。只有通过检验才能成功加载进内核。pre-run比较的目的是为了辨别编译过程差异是否过大以致于不能打入post对象的热补丁；更重要的是，从pre-run差异中提取的关键信息才能把post对象的热补丁顺利打入运行中内核。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;热补丁模块加载到内核后，便自动进行内核修复。也就是使用热补丁中的二进制指令替换有缺陷的二进制指令。这里ksplice利用了Linux内核的stop_machine机制：停止所有CPU的执行，只留下主CPU进行二进制指令替换。值得注意的是，stop_machine后如果发现任何一个线程栈的内容与热补丁存在冲突，就需要退出指令替换以避免系统崩溃。所以并非所有热补丁都能打入内核，有些频繁使用的内核函数（如schedule, hrtimer相关）就无法热补丁，重试次数再多也无济于事。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ksplice同时支持对内核和模块进行热补丁，也支持热补丁后叠加热补丁，灵活方便。不过也存在一些缺陷：stop_machine期间整个系统处于中断状态，虽然单次中断小于1ms，但有些时候多次重试的累计中断也不小；另外，有些频繁使用的函数无法打入热补丁。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;kpatch和kgraft&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;kpatch和kgraft均是近期新出现的内核热补丁技术，前者属于Redhat公司，后者SuSE。两者原理和ksplice大致相同，都想合并进Linux内核，内核社区正在争议对比。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;kpatch原理和前面讲的ksplice很接近。最大的区别在于二进制指令替换，stop_machine停止所有CPU执行后ksplice直接修改，而kpatch则借助ftrace机制来触发替换。目前的实现上，kpatch有较大局限性，不支持对模块打热补丁，不支持函数静态变量等。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;kgraft原理也基本一样。主要的差异有两点：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1）热补丁生成方法不同；&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2）热补丁打入内核过程里kgraft用到了RCU渐进方法。得益于RCU方法，kgraft无需像ksplice和kpatch一样调用stop_machine并检查线程栈的冲突。不过它的缺点也缘于RCU，涉及到数据结构改变时，kgraft更难通过编写辅助代码打入热补丁，这限制了kgraft的应用范围。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有关kpatch和kgraft的详细情况请分别参考Redhat和SuSE网站的技术资料。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;除了免重启修复，热补丁还用于内核开发过程的性能分析和故障定位。比如，加上性能统计代码生成热补丁，就可以在线分析感兴趣的性能问题；加入额外调试代码捕捉运行中内核的异常。这些非常有用，更是海量服务器里捕捉不可重现内核异常的不二法宝。由于热补丁不需要重启服务器，既可打入也可撤销，所以不会有副作用。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;UCloud对开源Ksplice的优化主要在以下三个方面：&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;支持高版本内核&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;热补丁技术与内核紧密耦合。不同版本的内核在指令结构体，符合表结构体和一些特性上（比如早期内核没有ftrace）有所不同，直接影响热补丁成败。UCloud研究了各版本内核的区别，使得同一份ksplice支持各个版本的Linux内核。值得一提的是，解决了ftrace与ksplice不兼容的问题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;允许热修复频繁调用的函数&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;不管什么样的热补丁技术，两种类型的内核函数难以热补丁：频繁使用的内核函数如schedule, hrtimer；经常处于线程栈内核部分顶部的函数，如sys_poll, sys_read。UCloud更改了ksplice相关内核代码和用户态工具，成功解除了这些限制，比如UCloud现网服务器已打入了三个hrtimer热补丁。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;减少业务中断时间&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ksplice是在stop_machine后替换二进制指令的。虽然单次stop_machine对业务造成的中断在一毫秒左右，但有些频繁使用的内核函数需要大量重试才能碰到合适的热补丁时机，于是会造成最长达上百毫秒的中断。UCloud在此做过一点优化，使得业务中断时间控制在十毫秒级别。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;海量服务器环境下热补丁技术可用来零代价且无副作用地修复内核缺陷，而且内核开发也因热补丁能走得更远更好。以前因为缺乏辅助分析手段和惧怕内核BUG，即使适合在内核实现的特性也被告诫移到用户态实现，然而有了热补丁，相关观念也可以适当调整，内核开发也可以更加大胆和跳脱。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[ksplice 使用]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice/"/&gt;
</span><span class='line'>&lt;updated&gt;2016-03-29T15:23:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2016/03/29/debug-ksplice&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;-ffunction-sections, -fdata-sections会使compiler为每个function和data item分配独立的section。 &ndash;gc-sections会使ld删除没有被使用的section。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行内核不用加-ffunction-sections -fdata-sections。(加-fdata-sections内核会起不来)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;centos6内核使用&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clone代码 &lt;a href="https://github.com/jirislaby/ksplice"&gt;https://github.com/jirislaby/ksplice&lt;/a&gt; reset到第一个0.9.9.1，根据错误作修改。最终能用的版本 &lt;a href="https://github.com/abcdxyzk/ksplice"&gt;https://github.com/abcdxyzk/ksplice&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="/download/debug/ksplice.git.tar.gz"&gt;ksplice.git.tar.gz&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;运行内核&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行内核编译的时候需要关闭'Kernel Function Tracer'，这个要先关闭'Trace max stack'&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    make menuconfig
</span><span class='line'>
</span><span class='line'>Kernel hacking  ---&gt;
</span><span class='line'>  Tracers  ---&gt;
</span><span class='line'>    Kernel Function Tracer
</span><span class='line'>    ...
</span><span class='line'>    Trace max stack
</span><span class='line'>    ...
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;ksplice 内核&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;按下面步骤做即可&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;kernel_source_dir 一份一样的纯源码目录，如果指向运行内核的源码会把它重新编译&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;confdir目录下的 build 指向运行内核的 kernel-devel&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;flags 空文件&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    WHAT DO I NEED?
</span><span class='line'>---------------
</span><span class='line'>* System.map and .config from your running kernel (a build dir at best)
</span><span class='line'>* sources of your running kernel
</span><span class='line'>* toolkit used to build your running kernel (or as much akin as possible)
</span><span class='line'>* and finally: the patch to be applied
</span><span class='line'>
</span><span class='line'>STEP BY STEP HOWTO
</span><span class='line'>------------------
</span><span class='line'>1. create a configuration dir to prepare the build
</span><span class='line'>   a) put there System.map
</span><span class='line'>   b) put there a build dir named "build" (or a link if you have one already)
</span><span class='line'>   c) create flags file there with flags passed to make during the normal
</span><span class='line'>      kernel build, like O=path, typically the "build" dir [optional]
</span><span class='line'>
</span><span class='line'>2. run ksplice-create to create a binary patch
</span><span class='line'>   $ ksplice-create --patch=patch --config=confdir -j X kernel_source_dir
</span><span class='line'>   where
</span><span class='line'>     patch is a diff to be applied (and create a binary patch for)
</span><span class='line'>     confdir is a dir from step 1.
</span><span class='line'>     kernel_source_dir is a dir with kernel sources
</span><span class='line'>     -j means how many jobs (X) to run in parallel [optional]
</span><span class='line'>   Additionally --description may be supplied. It is shown by ksplice-view
</span><span class='line'>   later.
</span><span class='line'>
</span><span class='line'>3. run ksplice-apply to update your running kernel
</span><span class='line'>   your binary patch is ready, so it can be applied:
</span><span class='line'>   ksplice-apply ksplice-ID.tar.gz
</span><span class='line'>
</span><span class='line'>4. check the applied patches by ksplice-view
</span><span class='line'>
</span><span class='line'>5. remove patches by ksplice-undo
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一个样例&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tcp_ipv4.patch</span></code></pre></td></tr></table></div></figure>
    diff &ndash;git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
    index b25bd26..35f57ab 100644
    &mdash; a/net/ipv4/tcp_ipv4.c
    +++ b/net/ipv4/tcp_ipv4.c
    @@ -1615,6 +1615,14 @@ int tcp_v4_rcv(struct sk_buff *skb)</p>

<pre><code>    th = tcp_hdr(skb);
    iph = ip_hdr(skb);
+
+   if (ntohs(th-&gt;dest) == 6688) {
+       printk("%pI4:%d %pI4:%d ksplice drop\n",
+               &amp;iph-&gt;saddr, ntohs(th-&gt;source),
+               &amp;iph-&gt;daddr, ntohs(th-&gt;dest));
+       goto discard_it;
+   }
+
    TCP_SKB_CB(skb)-&gt;seq = ntohl(th-&gt;seq);
    TCP_SKB_CB(skb)-&gt;end_seq = (TCP_SKB_CB(skb)-&gt;seq + th-&gt;syn + th-&gt;fin +
                    skb-&gt;len - th-&gt;doff * 4);
</code></pre>

<pre><code>
kktest
</code></pre>

<pre><code>ls -l -a kktest
total 2436
drwxr-xr-x  2 root root    4096 Mar 29 13:59 .
drwxr-xr-x 14 root root    4096 Mar 29 15:08 ..
lrwxrwxrwx  1 root root      56 Mar 29 10:09 build -&gt; /usr/src/kernels/2.6.32-kktest/
-rw-r--r--  1 root root   82013 Mar 29 10:09 .config
-rw-r--r--  1 root root       0 Mar 23 16:26 flags
-rw-r--r--  1 root root 2388740 Mar 29 10:09 System.map
</code></pre>

<pre><code>
#### 执行命令
</code></pre>

<pre><code># ksplice-create --patch=kkpatch/tcp_ipv4.patch --config=kktest /opt/chenjk/kernel/kernel-2.6.32-kktest_ksplice/
...
Ksplice update tarball written to ksplice-syt40kp6.tar.gz
</code></pre>

<pre><code></code></pre>

<pre><code># ksplice-apply ksplice-syt40kp6.tar.gz
Done!
$ dmesg
comm=migration/1
ksplice: Update syt40kp6 applied successfully
</code></pre>

<pre><code></code></pre>

<pre><code># ksplice-view
syt40kp6: no description available

# ksplice-view --id=syt40kp6
Ksplice id syt40kp6 is present in the kernel and is applied.

Here is the source code patch associated with this update:
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index b25bd26..35f57ab 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1615,6 +1615,14 @@ int tcp_v4_rcv(struct sk_buff *skb)

        th = tcp_hdr(skb);
        iph = ip_hdr(skb);
+
+       if (ntohs(th-&gt;dest) == 6688) {
+               printk("%pI4:%d %pI4:%d ksplice drop\n",
+                               &amp;iph-&gt;saddr, ntohs(th-&gt;source),
+                               &amp;iph-&gt;daddr, ntohs(th-&gt;dest));
+               goto discard_it;
+       }
+
        TCP_SKB_CB(skb)-&gt;seq = ntohl(th-&gt;seq);
        TCP_SKB_CB(skb)-&gt;end_seq = (TCP_SKB_CB(skb)-&gt;seq + th-&gt;syn + th-&gt;fin +
                                    skb-&gt;len - th-&gt;doff * 4);
</code></pre>

<pre><code></code></pre>

<pre><code>ksplice-undo syt40kp6
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
