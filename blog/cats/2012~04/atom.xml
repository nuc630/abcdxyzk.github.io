<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~04 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~04/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-15T20:09:33+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[避免僵死进程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/21/lang-c-fork/"/>
    <updated>2012-04-21T19:45:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/21/lang-c-fork</id>
    <content type="html"><![CDATA[<h4>一 两次fork避免僵死进程</h4>

<p>如果在一个进程A中启动了一个子进程B，但是B的执行时间可能很长，也可能很短。因此，既不希望A调用wait或者waitpid来等待B的完成（如果B执行时间太长，A的时间就耗费在等待B的完成了，虽然waitpid有WNOHANG选项，但免不了多次调用waitpid来看B是否完成）；也不希望如果B执行时间太短了，然后A又不用wait或waitpid去获取B的退出状态，那么B就一直处于僵死状态直到A终止（这样造成了资源的浪费）。</p>

<p>此时，可以使用一个小trick。就是调用两次fork，让B的父进程变成init进程（pid=1的那个进程，所有孤儿进程的父进程）。这样，A进程可以想干嘛干嘛去，B进程也可以想执行多久就执行多久了。
<code>
    #include &lt;unistd.h&gt;
    #include &lt;sys/wait.h&gt;
    int main()
    {
        pid_t pid;
        if((pid=fork())&lt;0)
        {
            printf("fork 1 error\n");
            exit(-1);
        }
        else if(pid==0）//第一个子进程
        {
            if((pid=fork())&lt;0)
            {
                printf("fork 2 error\n");
                exit(-1);
            }
            else if(pid&gt;0)//第二次fork产生的子进程（第二个子进程）的父进程，其实就是第一次fork产生的子进程（第一个子进程）
            {
                exit(0);//第一个子进程结束，那么它的子进程（第二个子进程）将由init进程领养，init进程成为第二个子进程的父进程
            }
            //第二个子进程（就是我们前面说的B进程）可以做他想做的事情了
            ................
        }
        if(waitpid(pid,NULL,0)!=pid)//获取第一个子进程的终止状态，不让它变成僵死进程
        printf("waitpid error\n");
        //父进程（就是我们前面说的A进程）也可以做他想做的事情了
        .........
        return 0;
    }
</code></p>

<h4>二</h4>

<p>父进程可以忽略 SIGCLD 软中断而不必要 wait()。可以这样做到(在支持它的系统上,比如Linux):　
<code>
    main()　　
    {　　
        signal(SIGCLD, SIG_IGN); /* now I don't have to wait()! */　　
        .......　　
        fork();　　
        fork();　　
        fork(); /* Rabbits, rabbits, rabbits! */　　
    ｝
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设置线程的栈空间]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/21/lang-c-set-thread-stack/"/>
    <updated>2012-04-21T19:32:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/21/lang-c-set-thread-stack</id>
    <content type="html"><![CDATA[<h1>include &lt;pthread.h></h1>

<pre><code>    pthread_attr_t thread_attr;
    size_t stack_size;
    int status;

    status = pthread_attr_init (&amp;thread_attr);
    if (status != 0)
        err_abort (status, "Create attr");

    status = pthread_attr_setdetachstate (&amp;thread_attr, PTHREAD_CREATE_DETACHED);

    if (status != 0)
        err_abort (status, "Set detach");
    //通常出现的问题之一，下面的宏没有定义
    #ifdef _POSIX_THREAD_ATTR_STACKSIZE
        //得到当前的线程栈大小
        status = pthread_attr_getstacksize (&amp;thread_attr, &amp;stack_size);
        if (status != 0)
            err_abort (status, "Get stack size");
        printf ("Default stack size is %u; minimum is %u\n", stack_size, PTHREAD_STACK_MIN);

        //设置当前的线程的大小
        status = pthread_attr_setstacksize (&amp;thread_attr, PTHREAD_STACK_MIN*1024);
        if (status != 0)
            err_abort (status, "Set stack size");

        //得到当前的线程栈的大小
        status = pthread_attr_getstacksize (&amp;thread_attr, &amp;stack_size);
        if (status != 0)
            err_abort (status, "Get stack size");
        printf ("Default stack size is %u; minimum is %u\n", stack_size, PTHREAD_STACK_MIN);
    #endif
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[curl模拟post]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/18/command-curl-post/"/>
    <updated>2012-04-18T10:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/18/command-curl-post</id>
    <content type="html"><![CDATA[<p>经常会遇到需要post提交东西的时候<br/>
这时候用curl是非常方便的<br/>
例子：
<code>
curl -A "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" \
-e "http://www.xxx.com/poll.shtml" \
-d "2880[]=105&amp;pid=2880&amp;p=最佳&amp;count=1&amp;receipt=1&amp;poll=投票" \
http://survey.xxx.com/poll/poll.php
</code>
这里
<code>-A "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"</code><br/>
的意思就是申明自己用的是windows2000下的ie6的浏览器；</p>

<p><code>-e "http://www.xxx.com/poll.shtml"</code>
的意思就是refer是这个页面；</p>

<p>-d后面的参数都是将用post方式提交到服务器去的</p>

<p>最后面的就是将要post到的url地址</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[on DUPLICATE KEY UPDATE]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/12/mysql-duplicate/"/>
    <updated>2012-04-12T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/12/mysql-duplicate</id>
    <content type="html"><![CDATA[<p>MySQL 当记录不存在时插入，当记录存在时更新
网上基本有三种解决方法。</p>

<h4>第一种：</h4>

<h5>示例一：插入多条记录</h5>

<p>假设有一个主键为 client_id 的 clients 表，可以使用下面的语句：
<code>
INSERT INTO clients
(client_id,client_name,client_type)
SELECTsupplier_id,supplier_name,'advertising'
FROMsuppliers
WHEREnotexists(select*fromclients
whereclients.client_id=suppliers.supplier_id);
</code></p>

<h5>示例一：插入单条记录</h5>

<pre><code>INSERTINTOclients
(client_id,client_name,client_type)
SELECT10345,'IBM','advertising'
FROMdual
WHEREnotexists(select*fromclients
whereclients.client_id=10345);
</code></pre>

<p>使用 dual 做表名可以让你在 select 语句后面直接跟上要插入字段的值，即使这些值还不存在当前表中。</p>

<h4>第二种：</h4>

<pre><code>INSERT 中ON DUPLICATE KEY UPDATE的使用
</code></pre>

<p>如果您指定了ON DUPLICATE KEY UPDATE，并且插入行后会导致在一个UNIQUE或PRIMARY KEY中出现重复值，则执行旧行UPDATE。例如，如果列a被定义为UNIQUE，并且包含值1，则以下两个语句具有相同的效果：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3)      -&gt;ON DUPLICATE KEY UPDATE c=c+1;mysql&gt;UPDATE table SET c=c+1 WHERE a=1;
</code>
如果行作为新记录被插入，则受影响行的值为1；如果原有的记录被更新，则受影响行的值为2。</p>

<p>注释：如果列b也是唯一列，则INSERT与此UPDATE语句相当：
<code>
mysql&gt;UPDATE table SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;
</code>
如果a=1 OR b=2与多个行向匹配，则只有一个行被更新。通常，您应该尽量避免对带有多个唯一关键字的表使用ON DUPLICATE KEY子句。</p>

<p>您可以在UPDATE子句中使用VALUES(col_name)从INSERT&hellip;UPDATE语句的INSERT部分引用列值。换句话说，如果没有发生重复关键字冲突，则UPDATE子句中的VALUES(col_name)可以引用被插入的col_name的值。本函数特别适用于多行插入。VALUES()函数只在INSERT&hellip;UPDATE语句中有意义，其它时候会返回NULL。</p>

<p>示例：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)      -&gt;ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);
</code></p>

<p>本语句与以下两个语句作用相同：
<code>
mysql&gt;INSERT INTO table (a,b,c) VALUES (1,2,3)      -&gt;ON DUPLICATE KEY UPDATE c=3;mysql&gt;INSERT INTO table (a,b,c) VALUES (4,5,6)      -&gt;ON DUPLICATE KEY UPDATE c=9;
</code>
当您使用ON DUPLICATE KEY UPDATE时，DELAYED选项被忽略。</p>

<h4>第三种：</h4>

<h5>REPLACE语句</h5>

<p>我们在使用时可能会经常遇到这种情况。如果一个表在一个字段上建立了唯一索引，当我们再向这个表中使用已经存在的键值插入一条记录，那将会抛出一个主键冲突的错误。当然，我们可能想用新记录的值来覆盖原来的记录值。如果使用传统的做法，必须先使用DELETE语句删除原先的记录，然后再使用INSERT插入新的记录。而在MySQL中为我们提供了一种新的解决方案，这就是REPLACE语句。使用REPLACE插入一条记录时，如果不重复，REPLACE就和INSERT的功能一样，如果有重复记录，REPLACE就使用新记录的值来替换原来的记录值。</p>

<p>使用REPLACE的最大好处就是可以将DELETE和INSERT合二为一，形成一个原子操作。这样就可以不必考虑在同时使用DELETE和INSERT时添加事务等复杂操作了。</p>

<p>在使用REPLACE时，表中必须有唯一索引，而且这个索引所在的字段不能允许空值，否则REPLACE就和INSERT完全一样的。</p>

<p>在执行REPLACE后，系统返回了所影响的行数，如果返回1，说明在表中并没有重复的记录，如果返回2，说明有一条重复记录，系统自动先调用了DELETE删除这条记录，然后再记录用INSERT来插入这条记录。如果返回的值大于2，那说明有多个唯一索引，有多条记录被删除和插入。</p>

<p>REPLACE的语法和INSERT非常的相似，如下面的REPLACE语句是插入或更新一条记录。
<code>
REPLACE INTO users (id,name,age) VALUES(123, '赵本山', 50);
</code>
插入多条记录：
<code>
REPLACE INTO users(id, name, age)
VALUES(123, '赵本山', 50), (134,'Mary',15);
</code>
REPLACE也可以使用SET语句
<code>
REPLACE INTO users SET id = 123, name = '赵本山', age = 50;
</code>
上面曾提到REPLACE可能影响3条以上的记录，这是因为在表中有超过一个的唯一索引。在这种情况下，REPLACE将考虑每一个唯一索引，并对每一个索引对应的重复记录都删除，然后插入这条新记录。假设有一个table1表，有3个字段a, b, c。它们都有一个唯一索引。
<code>
CREATE TABLE table1(a INT NOT NULL UNIQUE,b INT NOT NULL UNIQUE,c INT NOT NULL UNIQUE);
</code>
假设table1中已经有了3条记录
<code>
a b c
1 1 1
2 2 2
3 3 3
</code>
下面我们使用REPLACE语句向table1中插入一条记录。
<code>
REPLACE INTO table1(a, b, c) VALUES(1,2,3);
</code>
返回的结果如下
<code>
Query OK, 4 rows affected (0.00 sec)
</code>
在table1中的记录如下
<code>
a b c
1 2 3
</code>
我们可以看到，REPLACE将原先的3条记录都删除了，然后将（1, 2, 3）插入。总结：虽然没有具体测试，感觉第一种最费资源了（只是感觉），不过你要是没有主键的话也只能用他了。第二种和第三种的区别是：1)insert是先尝试插入，若主键存在则更新。REPLACE是先尝试插入，若主键存在则删除原纪录再插入。2)如果有多个唯一关键字发生冲突(不同关键字的冲突发生在不同记录),比如现在有2个字段2条记录冲突了(没条记录冲突一个字段)，则insert是选择排序后在前面的一条进行更新，REPLACE是删除那两条记录，然后插入新记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 触发器]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/04/10/mysql-trigger/"/>
    <updated>2012-04-10T17:07:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/04/10/mysql-trigger</id>
    <content type="html"><![CDATA[<h4>一.语法：</h4>

<p>Create trigger 触发器名 before|after 触发事件
     On 表名 for each row 执行语句
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; create trigger books_trig1 beforeinsert
</span><span class='line'>   -&gt; on users for each row
</span><span class='line'>   -&gt; insert into trigger_time values(now());
</span><span class='line'>Query OK, 0 rows affected (0.05 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; desc users;
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>|Field    |Type       | Null | Key | Default |Extra         |
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>| user_id   |int(10)    | NO   | PRI |NULL    |auto_increment |
</span><span class='line'>| user_name | varchar(50) | NO  |    |        |               |
</span><span class='line'>| user_pwd  | varchar(20) |NO  |    |        |               |
</span><span class='line'>|email    | varchar(50) | NO  |    |        |               |
</span><span class='line'>+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;+&mdash;&ndash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>4 rows in set (0.02 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; insert into usersvalues(null,&lsquo;helloc&rsquo;,&lsquo;hello&rsquo;,&lsquo;&lt;a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x68;&#101;&#108;&#108;&#x6f;&#64;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;"&gt;&#x68;&#101;&#x6c;&#108;&#111;&#64;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;&lt;/a&gt;&rsquo;);
</span><span class='line'>Query OK, 1 row affected (0.05 sec)
</span><span class='line'>mysql&gt; select * from users;
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>| user_id | user_name | user_pwd |email       |
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>|     10 | helloc    |hello    | |
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&ndash;+
</span><span class='line'>1 row in set (0.00 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from trigger_time;
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>|datetimes          |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>| 2011-10-29 16:27:33 |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>1 row in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></p>

<h4>二.创建有多个执行语句的触发器:</h4>

<p>语法：Create trigger 触发器名 before|after 触发事件<br/>
     On 表名 for each row<br/>
     Begin<br/>
         执行语句列表<br/>
     End<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; delimiter&amp;&amp;
</span><span class='line'>mysql&gt; create trigger books_trig2 after delete
</span><span class='line'>   -&gt; on users for each row
</span><span class='line'>   -&gt; begin
</span><span class='line'>   -&gt;  insert into trigger_timevalues(now());
</span><span class='line'>   -&gt;  insert into trigger_timevalues(now());
</span><span class='line'>   -&gt; end&amp;&amp;
</span><span class='line'>Query OK, 0 rows affected (0.01 sec)
</span><span class='line'>mysql&gt; delimiter ;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; delete from users
</span><span class='line'>   -&gt; where user_id = 10;
</span><span class='line'>Query OK, 1 row affected (0.06 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from users;
</span><span class='line'>Empty set (0.00 sec)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mysql&gt; select * from trigger_time;
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>|datetimes          |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>| 2011-10-29 16:27:33 |
</span><span class='line'>| 2011-10-29 16:41:16 |
</span><span class='line'>| 2011-10-29 16:41:16 |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+
</span><span class='line'>3 rows in set (0.00 sec)</span></code></pre></td></tr></table></div></figure></p>

<h4>三.查看触发器：</h4>

<p>语法：Show Triggers;</p>

<pre><code>mysql&gt; show triggers\G
*************************** 1. row***************************
  Trigger: books_trig1
    Event:INSERT
    Table:users
Statement: insert into trigger_time values(now())
   Timing: BEFORE
  Created: NULL
 sql_mode:NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  Definer:
*************************** 2. row***************************
  Trigger: books_trig2
    Event:DELETE
    Table:users
Statement: begin
       insert into trigger_time values(now());
       insert into trigger_time values(now());
end
   Timing: AFTER
  Created: NULL
 sql_mode:NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
  Definer:
2 rows in set (0.00 sec)
</code></pre>

<p>也可在triggers表中查看触发器信息：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; select * frominformation_schema.triggers\G&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  --where trigger_name=‘触发器名';
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt; 1. row&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;
</span><span class='line'>          TRIGGER_CATALOG: NULL
</span><span class='line'>           TRIGGER_SCHEMA: books
</span><span class='line'>             TRIGGER_NAME: books_trig1
</span><span class='line'>       EVENT_MANIPULATION: INSERT
</span><span class='line'>     EVENT_OBJECT_CATALOG: NULL
</span><span class='line'>      EVENT_OBJECT_SCHEMA: books
</span><span class='line'>       EVENT_OBJECT_TABLE: users
</span><span class='line'>             ACTION_ORDER: 0
</span><span class='line'>         ACTION_CONDITION: NULL
</span><span class='line'>         ACTION_STATEMENT: insert into trigger_time values(now())
</span><span class='line'>       ACTION_ORIENTATION: ROW
</span><span class='line'>            ACTION_TIMING: BEFORE
</span><span class='line'>ACTION_REFERENCE_OLD_TABLE: NULL
</span><span class='line'>ACTION_REFERENCE_NEW_TABLE: NULL
</span><span class='line'>  ACTION_REFERENCE_OLD_ROW: OLD
</span><span class='line'>  ACTION_REFERENCE_NEW_ROW: NEW
</span><span class='line'>                  CREATED: NULL
</span><span class='line'>                 SQL_MODE: NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
</span><span class='line'>                  DEFINER:
</span><span class='line'>&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt; 2. row&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;
</span><span class='line'>          TRIGGER_CATALOG: NULL
</span><span class='line'>           TRIGGER_SCHEMA: books
</span><span class='line'>             TRIGGER_NAME: books_trig2
</span><span class='line'>       EVENT_MANIPULATION: DELETE
</span><span class='line'>     EVENT_OBJECT_CATALOG: NULL
</span><span class='line'>      EVENT_OBJECT_SCHEMA: books
</span><span class='line'>       EVENT_OBJECT_TABLE: users
</span><span class='line'>             ACTION_ORDER: 0
</span><span class='line'>         ACTION_CONDITION: NULL
</span><span class='line'>         ACTION_STATEMENT: begin
</span><span class='line'>       insert into trigger_time values(now());
</span><span class='line'>       insert into trigger_time values(now());
</span><span class='line'>end
</span><span class='line'>       ACTION_ORIENTATION: ROW
</span><span class='line'>            ACTION_TIMING: AFTER
</span><span class='line'>ACTION_REFERENCE_OLD_TABLE: NULL
</span><span class='line'>ACTION_REFERENCE_NEW_TABLE: NULL
</span><span class='line'>  ACTION_REFERENCE_OLD_ROW: OLD
</span><span class='line'>  ACTION_REFERENCE_NEW_ROW: NEW
</span><span class='line'>                  CREATED: NULL
</span><span class='line'>                 SQL_MODE: NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
</span><span class='line'>                  DEFINER:
</span><span class='line'>2 rows in set (1.61 sec)</span></code></pre></td></tr></table></div></figure></p>

<p>四.触发器的作用：
  在MySQL中，触发器执行的顺序是Before触发器、表操作（insert、update和delete）和After触发器。</p>

<p>五.删除触发器：
  DROP TRIGGER触发器名;</p>

<p>例如
<code>
delimiter |
create trigger submit_update
after update
on submit
for each row
begin
if OLD.status&lt;&gt;40 AND NEW.status=40 then
    update contestinfo set accept = accept+1 where contestinfo.contestid=NEW.contestid and contestinfo.pid=NEW.pid;
elseif OLD.status=40 AND NEW.status&lt;&gt;40 then
    update contestinfo set accept = accept-1 where contestinfo.contestid=NEW.contestid and contestinfo.pid=NEW.pid;
end if;
end
|
delimiter ;
</code></p>
]]></content>
  </entry>
  
</feed>
