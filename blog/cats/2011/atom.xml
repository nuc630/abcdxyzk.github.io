<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2011 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2011/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-08T14:17:09+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[strace跟踪系统调用和信号]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/12/09/tools-strace/"/>
    <updated>2011-12-09T00:16:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/12/09/tools-strace</id>
    <content type="html"><![CDATA[<p>  strace 用来截取程序发出的系统调用并将其显示出来。被 strace 跟踪的程序，可以是从 strace 命令运行的，也可以是系统上已经运行的进程。strace 是调试汇编语言和高级语言程序时价值无法估量的工具。</p>

<p>  为了简单起见(不让 strace 输出太多内容)，这里使用 strace 截取 <a href="http://www.groad.net/bbs/read.php?tid-2622.html">http://www.groad.net/bbs/read.php?tid-2622.html</a> 中“系统调用返回值“ 里的示例程序：<br/>
<code>
$ strace ./syscall2
execve("./syscall2", ["./syscall2"], [/* 43 vars */]) = 0
getpid()                                = 2467
getuid()                                = 1000
getgid()                                = 1000
_exit(0)                                = ?
</code>
上面，左侧一列显示了系统调用名称，右侧显示系统调用生成的返回值。</p>

<p>高级 strace 参数：
<code>
参数      描述
-c      统计每个系统调用的时间、调用和错误
-d      显示 strace 的一些调试输出
-e      指定输出的过滤表达式
-f      在创建子进程的时候跟踪它们
-ff     如果写入到输出文件，则把每个子进程写入到单独的文件中
-i      显示执行系统调用时的指令指针
-o      把输出写入到指定文件
-p      附加到由PID指定的现有进程
-q      抑制关于附加和分离的消息
-r      对每个系统调用显示一个相对的时间戳
-t      把时间添加到每一行
-tt     把时间添加到每一行，包括微秒
-ttt        添加epoch形式的时间(从1970年1月1日开始的秒数)，包括微秒
-T      显示每个系统调用花费的时间
-v      显示系统调用信息的不经省略版本(详细的)
-x      以十六进制格式显示所有非ASCII字符
-xx     以十六进制格式显示所有字符串
</code>
其中，-e 参数很方便，因为它可以用于只显示系统调用的子集，而不是全部。-e 参数格式为：<br/>
<code>trace=call_list</code><br/>
上面，call_list 是系统调用清单。如上面的程序，如果我们只希望看到系统调用 getuid 和 getgid，那么可以：<br/>
<code>
$ strace -e trace=getpid,getgid ./syscall2
getpid()                                = 2653
getgid()                                = 1000
</code>
注意，上面的 getpid 和 getgid 之间以逗号相隔，不能再有其它符号，包括空格。</p>

<p>使用 -o 参数可以将结果导出到一个文件中，如将跟踪 id 这个命令时，可以：
<code>
$ strace -o outfile id
uid=1000(beyes) gid=1000(beyes) 组=4(adm),20(dialout),24(cdrom),46(plugdev),105(lpadmin),119(admin),122(sambashare),1000(beyes)
</code>
从输出看出，id 指令也运行了，并在当前目录下生成 outfile 文件，在 outfile 文件里，列出了 id 指令所调用的系统调用。这些系统调用非常多，总共有278次之多。为了帮助组织这些调用信息，我们尝试使用 -c 参数，这时结果会按照时间排列调用：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ strace -c id
</span><span class='line'>uid=1000(beyes) gid=1000(beyes) 组=4(adm),20(dialout),24(cdrom),46(plugdev),105(lpadmin),119(admin),122(sambashare),1000(beyes)
</span><span class='line'>% time     seconds  usecs/call     calls    errors syscall&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  -nan    0.000000           0        17           read
</span><span class='line'>  -nan    0.000000           0         1           write
</span><span class='line'>  -nan    0.000000           0        44         3 open
</span><span class='line'>  -nan    0.000000           0        47           close
</span><span class='line'>  -nan    0.000000           0         1           execve
</span><span class='line'>  -nan    0.000000           0         9         9 access
</span><span class='line'>  -nan    0.000000           0         3           brk
</span><span class='line'>  -nan    0.000000           0        18           munmap
</span><span class='line'>  -nan    0.000000           0        10           mprotect
</span><span class='line'>  -nan    0.000000           0        20           _llseek
</span><span class='line'>  -nan    0.000000           0        51           mmap2
</span><span class='line'>  -nan    0.000000           0        40           fstat64
</span><span class='line'>  -nan    0.000000           0         1           getuid32
</span><span class='line'>  -nan    0.000000           0         1           getgid32
</span><span class='line'>  -nan    0.000000           0         1           geteuid32
</span><span class='line'>  -nan    0.000000           0         1           getegid32
</span><span class='line'>  -nan    0.000000           0         2           getgroups32
</span><span class='line'>  -nan    0.000000           0         1           fcntl64
</span><span class='line'>  -nan    0.000000           0         1           set_thread_area
</span><span class='line'>  -nan    0.000000           0         1           statfs64
</span><span class='line'>  -nan    0.000000           0         4           socket
</span><span class='line'>  -nan    0.000000           0         4         4 connect&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;100.00    0.000000                   278        16 total
</span><span class='line'>&lt;code&gt;
</span><span class='line'>从上面的输出结果可以看到，调用 open 时发生了 3 次错误，调用 connect 时发生了 4 次错误。为了进一步跟踪这些错误，可以将它们单独挑选出来：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>$ strace -e trace=open,connect id
</span><span class='line'>open(&ldquo;/etc/ld.so.cache&rdquo;, O_RDONLY)      = 3
</span><span class='line'>open(&ldquo;/lib/libselinux.so.1&rdquo;, O_RDONLY)  = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libc.so.6&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libdl.so.2&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/proc/filesystems&rdquo;, O_RDONLY|O_LARGEFILE) = 3
</span><span class='line'>open(&ldquo;/proc/filesystems&rdquo;, O_RDONLY|O_LARGEFILE) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/locale-archive&rdquo;, O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)
</span><span class='line'>open(&ldquo;/usr/share/locale/locale.alias&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_IDENTIFICATION&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/gconv/gconv-modules.cache&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_MEASUREMENT&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_TELEPHONE&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_ADDRESS&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_NAME&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_PAPER&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_MESSAGES&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_MESSAGES/SYS_LC_MESSAGES&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_MONETARY&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_COLLATE&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_TIME&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_NUMERIC&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/lib/locale/zh_CN.utf8/LC_CTYPE&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/usr/share/locale/zh_CN/LC_MESSAGES/coreutils.mo&rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span><span class='line'>open(&ldquo;/usr/share/locale/zh/LC_MESSAGES/coreutils.mo&rdquo;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span><span class='line'>open(&ldquo;/usr/share/locale-langpack/zh_CN/LC_MESSAGES/coreutils.mo&rdquo;, O_RDONLY) = 3
</span><span class='line'>connect(3, {sa_family=AF_FILE, path=&ldquo;/var/run/nscd/socket&rdquo;}, 110) = -1 ENOENT (No such file or directory)
</span><span class='line'>connect(3, {sa_family=AF_FILE, path=&ldquo;/var/run/nscd/socket&rdquo;}, 110) = -1 ENOENT (No such file or directory)
</span><span class='line'>open(&ldquo;/etc/nsswitch.conf&rdquo;, O_RDONLY)    = 3
</span><span class='line'>open(&ldquo;/etc/ld.so.cache&rdquo;, O_RDONLY)      = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libnss_compat.so.2&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libnsl.so.1&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/etc/ld.so.cache&rdquo;, O_RDONLY)      = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libnss_nis.so.2&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/lib/tls/i686/cmov/libnss_files.so.2&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/etc/passwd&rdquo;, O_RDONLY|O_CLOEXEC) = 3
</span><span class='line'>connect(3, {sa_family=AF_FILE, path=&ldquo;/var/run/nscd/socket&rdquo;}, 110) = -1 ENOENT (No such file or directory)
</span><span class='line'>connect(3, {sa_family=AF_FILE, path=&ldquo;/var/run/nscd/socket&rdquo;}, 110) = -1 ENOENT (No such file or directory)
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/proc/sys/kernel/ngroups_max&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/proc/sys/kernel/ngroups_max&rdquo;, O_RDONLY) = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>open(&ldquo;/etc/group&rdquo;, O_RDONLY|O_CLOEXEC)  = 3
</span><span class='line'>uid=1000(beyes) gid=1000(beyes) 组=4(adm),20(dialout),24(cdrom),46(plugdev),105(lpadmin),119(admin),122(sambashare),1000(beyes)</span></code></pre></td></tr></table></div></figure>
从输出结果(红色加亮部分)可以知道错误在哪里了。</p>

<h4>附加到正在运行的程序</h4>

<p>strace 的另一个非常好的特性是监视已经运行在系统上的程序的能力。-p 参数可以把 strace 附加到一个 PID 并且捕获系统调用。下面程序可以在后台运行，并且这个程序将维持运行一段时间，在此期间我们用 strace 来捕获它。<br/>
程序代码：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.section.data
</span><span class='line'>timespec:
</span><span class='line'>.int5,0
</span><span class='line'>output:
</span><span class='line'>.ascii"This is a test/n"
</span><span class='line'>output_end:
</span><span class='line'>.equlen,output_end-output&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.section.bss
</span><span class='line'>.lcommrem,8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.section.text
</span><span class='line'>.global_start
</span><span class='line'>_start:
</span><span class='line'>nop
</span><span class='line'>movl$10,%ecx&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;loop1:
</span><span class='line'>pushl%ecx
</span><span class='line'>movl$4,%eax
</span><span class='line'>movl$1,%ebx
</span><span class='line'>movl$output,%ecx
</span><span class='line'>movl$len,%edx
</span><span class='line'>int$0x80&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;movl$162,%eax
</span><span class='line'>movl$timespec,%ebx
</span><span class='line'>movl$rem,%ecx
</span><span class='line'>int$0x80
</span><span class='line'>popl%ecx
</span><span class='line'>looploop1
</span><span class='line'>
</span><span class='line'>movl$1,%eax
</span><span class='line'>movl$0,%ebx
</span><span class='line'>int$0x80
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;程序中使用了 nanosleep() 这个系统调用函数。在一个终端里后台运行这个函数：  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;./nanostrace &amp;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;然后使用 ps 命令得到此进程的 PID 值，接着可以用 strace 来跟踪了：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;$ strace -p 3069
</span><span class='line'>Process 3069 attached - interrupt to quit
</span><span class='line'>restart_syscall(&lt;&hellip; resuming interrupted call &hellip;&gt;) = 0
</span><span class='line'>write(1, &ldquo;This is a test/n&rdquo;, 15)        = 15
</span><span class='line'>nanosleep({5, 0}, 0x80490d0)            = 0
</span><span class='line'>write(1, &ldquo;This is a test/n&rdquo;, 15)        = 15
</span><span class='line'>nanosleep({5, 0}, 0x80490d0)            = 0
</span><span class='line'>write(1, &ldquo;This is a test/n&rdquo;, 15)        = 15
</span><span class='line'>nanosleep({5, 0}, 0x80490d0)            = 0
</span><span class='line'>write(1, &ldquo;This is a test/n&rdquo;, 15)        = 15
</span><span class='line'>nanosleep({5, 0}, 0x80490d0)            = 0
</span><span class='line'>_exit(0)                                = ?</span></code></pre></td></tr></table></div></figure>
由上可见，程序中使用了 write, nanosleep, exit 3个系统调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最简单点对点通信样例]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/12/08/lang-c-socket-simple/"/>
    <updated>2011-12-08T16:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/12/08/lang-c-socket-simple</id>
    <content type="html"><![CDATA[<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;arpa/inet.h&gt;
    #define MAXLINE 4096

    #include &lt;sys/ioctl.h&gt;
    #include &lt;net/if.h&gt;
    #include &lt;net/if_arp.h&gt;

    #include &lt;pthread.h&gt;

    int send_to_port = 6667;
    int self_port = 6666;

    void *get(void *data)
    {
        int listenfd, connfd;
        struct sockaddr_in servaddr;

        if( (listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1 ) {
            printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        memset(&amp;servaddr, 0, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(self_port);

        if( bind(listenfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) == -1) {
            printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        if( listen(listenfd, 10) == -1) {
            printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        char buff[4096];
        int n;
        while(1)
        {
            if( (connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1) {
                printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
                return 0;
            }
            n = recv(connfd, buff, MAXLINE, 0);
            buff[n] = '\0';
            printf("recv msg from server: %s", buff);

            close(connfd);
        }
        return 0;
    }

    char server_addr[333];

    void *sent(void *data)
    {
        int sockfd, n;
        struct sockaddr_in servaddr;
        char sendline[4096];

        while(1)
        {
            fgets(sendline, 4096, stdin);

            if( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
                printf("create socket error: %s(errno: %d)\n", strerror(errno),errno);
                return 0;
            }

            memset(&amp;servaddr, 0, sizeof(servaddr));
            servaddr.sin_family = AF_INET;
            servaddr.sin_port = htons(send_to_port);
            if( inet_pton(AF_INET, server_addr, &amp;servaddr.sin_addr) &lt;= 0) {
                printf("inet_pton error for %s\n", server_addr);
                return 0;
            }

            if( connect(sockfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) &lt; 0) {
                printf("connect error: %s(errno: %d)\n",strerror(errno),errno);
                return 0;
            }

            if( send(sockfd, sendline, strlen(sendline), 0) &lt; 0) {
                printf("send msg error: %s(errno: %d)\n", strerror(errno), errno);
            }
            close(sockfd);
        }
        return 0;
    }

    int main(int argc, char** argv)
    {
        if( argc != 2) {
            printf("usage: ./client &lt;ip_address&gt;\n");
            return 0;
        }
        strcpy(server_addr, argv[1]);

        pthread_t th1, th2;
        void *retval;
        pthread_create(&amp;th1, NULL, get, 0);
        pthread_create(&amp;th2, NULL, sent, 0);
        pthread_join(th1, &amp;retval);
        pthread_join(th2, &amp;retval);
        return 0;
    }
</code></pre>

<p>编译：g++ client.cpp -o client -lpthread<br/>
运行：./client xx.xx.xx.xx</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;errno.h&gt;
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netinet/in.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;arpa/inet.h&gt;
    #define MAXLINE 4096

    #include &lt;sys/ioctl.h&gt;
    #include &lt;net/if.h&gt;
    #include &lt;net/if_arp.h&gt;

    #include &lt;pthread.h&gt;

    int send_to_port = 6666;
    int self_port = 6667;

    void *get(void *data)
    {
        int listenfd, connfd;
        struct sockaddr_in servaddr;

        if( (listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1 ) {
            printf("create socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        memset(&amp;servaddr, 0, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(self_port);

        if( bind(listenfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) == -1) {
            printf("bind socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        if( listen(listenfd, 10) == -1) {
            printf("listen socket error: %s(errno: %d)\n",strerror(errno),errno);
            return 0;
        }

        char buff[4096];
        int n;
        while(1)
        {
            if( (connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1) {
                printf("accept socket error: %s(errno: %d)",strerror(errno),errno);
                return 0;
            }
            n = recv(connfd, buff, MAXLINE, 0);
            buff[n] = '\0';
            printf("recv msg from client: %s", buff);

            close(connfd);
        }
        return 0;
    }

    char server_addr[333];

    void *sent(void *data)
    {
        int sockfd, n;
        struct sockaddr_in servaddr;
        char sendline[4096];

        while(1)
        {
            fgets(sendline, 4096, stdin);

            if( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
                printf("create socket error: %s(errno: %d)\n", strerror(errno),errno);
                return 0;
            }

            memset(&amp;servaddr, 0, sizeof(servaddr));
            servaddr.sin_family = AF_INET;
            servaddr.sin_port = htons(send_to_port);
            if( inet_pton(AF_INET, server_addr, &amp;servaddr.sin_addr) &lt;= 0) {
                printf("inet_pton error for %s\n", server_addr);
                return 0;
            }

            if( connect(sockfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) &lt; 0) {
                printf("connect error: %s(errno: %d)\n",strerror(errno),errno);
                return 0;
            }

            if( send(sockfd, sendline, strlen(sendline), 0) &lt; 0) {
                printf("send msg error: %s(errno: %d)\n", strerror(errno), errno);
            }
            close(sockfd);
        }
        return 0;
    }

    int main(int argc, char** argv)
    {
        if( argc != 2) {
            printf("usage: ./server &lt;ip_address&gt;\n");
            return 0;
        }
        strcpy(server_addr, argv[1]);

        pthread_t th1, th2;
        void *retval;
        pthread_create(&amp;th1, NULL, get, 0);
        pthread_create(&amp;th2, NULL, sent, 0);
        pthread_join(th1, &amp;retval);
        pthread_join(th2, &amp;retval);
        return 0;
    }
</code></pre>

<p>编译：g++ server.cpp -o server -lpthread<br/>
运行：./server xx.xx.xx.xx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Socket编程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/12/02/lang-c-socket/"/>
    <updated>2011-12-02T15:33:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/12/02/lang-c-socket</id>
    <content type="html"><![CDATA[<p>本文的主要内容如下：
<code>
    1、网络中进程之间如何通信？
    2、Socket是什么？
    3、socket的基本操作
        3.1、socket()函数
        3.2、bind()函数
        3.3、listen()、connect()函数
        3.4、accept()函数
        3.5、read()、write()函数等
        3.6、close()函数
    4、socket中TCP的三次握手建立连接详解
    5、socket中TCP的四次握手释放连接详解
    6、一个例子（实践一下）
</code></p>

<h4>1、网络中进程之间如何通信？</h4>

<p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：
<code>
    消息传递（管道、FIFO、消息队列）
    同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）
    共享内存（匿名的和具名的）
    远程过程调用（Solaris门和Sun RPC）
</code>
但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。</p>

<p>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。</p>

<p>使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX  BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说“一切皆socket”。</p>

<h4>2、什么是Socket？</h4>

<p>上面我们已经知道网络中的进程是通过socket来通信的，那什么是socket呢？socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –> 读写write/read –> 关闭close”模式来操作。</p>

<p>我的理解就是Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭），这些函数我们在后面进行介绍。</p>

<p>socket一词的起源<br/>
在组网领域的首次使用是在1970年2月12日发布的文献IETF RFC33中发现的，撰写者为Stephen Carr、Steve Crocker和Vint Cerf。<br/>
根据美国计算机历史博物馆的记载，Croker写道：“命名空间的元素都可称为套接字接口。<br/>
一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。”<br/>
计算机历史博物馆补充道：“这比BSD的套接字接口定义早了大约12年。”</p>

<h4>3、socket的基本操作</h4>

<p>既然socket是“open—write/read—close”模式的一种实现，那么socket就提供了这些操作对应的函数接口。
下面以TCP为例，介绍几个基本的socket接口函数。</p>

<h5>3.1、socket()函数intsocket(int domain, int type, int protocol);</h5>

<p>socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而socket()用于创建一个socket描述符（socket descriptor），它唯一标识一个socket。</p>

<p>这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p>

<p>正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：
<code>
    domain：即协议域，又称为协议族（family）。
    常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。
    协议族决定了socket的地址类型，在通信中必须采用对应的地址，
    如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。
    type：指定socket类型。常用的socket类型有，
    SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等（socket的类型有哪些？）。
    protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，
    它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议（这个协议我将会单独开篇讨论！）。
</code>
注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。<br/>
当protocol为0时，会自动选择type类型对应的默认协议。<br/>
当我们调用socket创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。</p>

<h5>3.2、bind()函数</h5>

<p>正如上面所说bind()函数把一个地址族中的特定地址赋给socket。<br/>
例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。<br/>
<code>intbind(int sockfd, conststruct sockaddr *addr, socklen_t addrlen);</code><br/>
函数的三个参数分别为：<br/>
<code>
    sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。
    bind()函数就是将给这个描述字绑定一个名字。
    addr：一个conststruct sockaddr *指针，指向要绑定给sockfd的协议地址。
    这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是：
    struct sockaddr_in {
        sa_family_t sin_family; /* address family: AF_INET */
        in_port_t sin_port; /* port in network byte order */
        struct in_addr sin_addr; /* internet address */
    };/* Internet address. */
    struct in_addr {
        uint32_t s_addr; /* address in network byte order */
    };
    ipv6对应的是：
    struct sockaddr_in6 {
        sa_family_t sin6_family; /* AF_INET6 */
        in_port_t sin6_port; /* port number */
        uint32_t sin6_flowinfo; /* IPv6 flow information */
        struct in6_addr sin6_addr; /* IPv6 address */
        uint32_t sin6_scope_id; /* Scope ID (new in 2.4) */
    };
    struct in6_addr {
        unsignedchar s6_addr[16]; /* IPv6 address */
    };
    Unix域对应的是：
    #define UNIX_PATH_MAX 108
    struct sockaddr_un {
        sa_family_t sun_family; /* AF_UNIX */
        char sun_path[UNIX_PATH_MAX]; /* pathname */
    };
    addrlen：对应的是地址的长度。
</code>
通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。</p>

<p>这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。</p>

<h6>网络字节序与主机字节序</h6>

<p>主机字节序就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的Big-Endian和Little-Endian的定义如下：<br/>
　　a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。<br/>
　　b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p>

<p>网络字节序：4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。<br/>
这种传输次序称作大端字节序。由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。<br/>
字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p>

<p>所以：在将一个地址绑定到socket的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是Big-Endian。由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给socket。</p>

<h5>3.3、listen()、connect()函数</h5>

<p>如果作为一个服务器，在调用socket()、bind()之后就会调用listen()来监听这个socket，如果客户端这时调用connect()发出连接请求，服务器端就会接收到这个请求。<br/>
<code>
intlisten(int sockfd, int backlog);intconnect(int sockfd, conststruct sockaddr *addr, socklen_t addrlen);
</code>
listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的最大连接个数。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为被动类型的，等待客户的连接请求。<br/>
connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。</p>

<h5>3.4、accept()函数</h5>

<p>TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。<br/>
<code>
intaccept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
</code>
accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果accpet成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的TCP连接。</p>

<p>注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为监听socket描述字；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p>

<h5>3.5、read()、write()等函数</h5>

<p>万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信！网络I/O操作有下面几组：
<code>
    read()/write()
    recv()/send()
    readv()/writev()
    recvmsg()/sendmsg()
    recvfrom()/sendto()
</code>
我推荐使用recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：
<code>
    #include &lt;unistd.h&gt;
    ssize_t read(int fd, void *buf, size_t count);
    ssize_t write(int fd, constvoid *buf, size_t count);
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    ssize_t send(int sockfd, constvoid *buf, size_t len, int flags);
    ssize_t recv(int sockfd, void *buf, size_t len, int flags);
    ssize_t sendto(int sockfd, constvoid *buf, size_t len, int flags, conststruct sockaddr *dest_addr, socklen_t addrlen);
    ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);
    ssize_t sendmsg(int sockfd, conststruct msghdr *msg, int flags);
    ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
</code>
read函数是负责从fd中读取内容.当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。</p>

<p>write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数。失败时返回-1，并设置errno变量。</p>

<p>在网络程序中，当我们向套接字文件描述符写时有俩种可能。1)write的返回值大于0，表示写了部分或者是全部的数据。2)
返回的值小于0，此时出现了错误。我们要根据错误类型来处理。如果错误为EINTR表示在写的时候出现了中断错误。
如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接)。</p>

<p>其它的我就不一一介绍这几对I/O函数了，具体参见man文档或者baidu、Google，下面的例子中将使用到send/recv。</p>

<h5>3.6、close()函数</h5>

<p>在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，
好比操作完打开的文件要调用fclose关闭打开的文件。
<code>
    #include &lt;unistd.h&gt;
    int close(int fd);
</code>
close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。
该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。
注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。</p>

<h4>4、socket中TCP的三次握手建立连接详解</h4>

<p>我们知道tcp建立连接要进行“三次握手”，即交换三个分组。大致流程如下：
<code>
    客户端向服务器发送一个SYN J
    服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1
    客户端再想服务器发一个确认ACK K+1
</code>
只有就完了三次握手，但是这个三次握手发生在socket的那几个函数中呢？请看下图：</p>

<p><img src="/images/lang/2011-12-02-1.png" alt="" /><br/>
图1、socket中发送的TCP三次握手</p>

<p>从图中可以看出，当客户端调用connect时，触发了连接请求，向服务器发送了SYN J包，这时connect进入阻塞状态；<br/>
服务器监听到连接请求，即收到SYN J包，调用accept函数接收请求向客户端发送SYN K ，ACK J+1，这时accept进入阻塞状态；<br/>
客户端收到服务器的SYN K ，ACK J+1之后，这时connect返回，并对SYN K进行确认；<br/>
服务器收到ACK K+1时，accept返回，至此三次握手完毕，连接建立。<br/>
总结：客户端的connect在三次握手的第二个次返回，而服务器端的accept在三次握手的第三次返回。</p>

<h4>5、socket中TCP的四次握手释放连接详解</h4>

<p>上面介绍了socket中TCP的三次握手建立过程，及其涉及的socket函数。现在我们介绍socket中的四次握手释放连接的过程，请看下图：</p>

<p><img src="/images/lang/2011-12-02-2.png" alt="" /><br/>
图2、socket中发送的TCP四次握手</p>

<p>图示过程如下：<br/>
<code>
    某个应用进程首先调用close主动关闭连接，这时TCP发送一个FIN M；
    另一端接收到FIN M之后，执行被动关闭，对这个FIN进行确认。它的接收也作为文件结束符传递给应用进程，
    因为FIN的接收意味着应用进程在相应的连接上再也接收不到额外数据；
    一段时间之后，接收到文件结束符的应用进程调用close关闭它的socket。这导致它的TCP也发送一个FIN N；
    接收到这个FIN的源发送端TCP对它进行确认。
</code>
这样每个方向上都有一个FIN和ACK。</p>

<h4>6、一个例子（实践一下）</h4>

<p>说了这么多了，动手实践一下。下面编写一个简单的服务器、客户端（使用TCP）——服务器端一直监听本机的6666号端口，
如果收到连接请求，将接收请求并接收客户端发来的消息；客户端与服务器端建立连接并发送一条消息。</p>

<h5>服务器端代码：</h5>

<pre><code>    #include&lt;stdio.h&gt;
    #include&lt;stdlib.h&gt;
    #include&lt;string.h&gt;
    #include&lt;errno.h&gt;
    #include&lt;sys/types.h&gt;
    #include&lt;sys/socket.h&gt;
    #include&lt;netinet/in.h&gt;
    #include&lt;unistd.h&gt;
    #include&lt;arpa/inet.h&gt;

    #define MAXLINE 4096

    int main(int argc, char** argv)
    {
        int listenfd, connfd;
        struct sockaddr_in servaddr;
        char buff[4096];
        int n;

        if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
            printf("create socket error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        memset(&amp;servaddr, 0, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        servaddr.sin_port = htons(6666);
        if (bind(listenfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) == -1) {
            printf("bind socket error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        if (listen(listenfd, 10) == -1) {
            printf("listen socket error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        printf("======waiting for client's request======\n");
        while (1) {
            if ((connfd = accept(listenfd, (struct sockaddr*)NULL, NULL)) == -1){
                printf("accept socket error: %s(errno: %d)", strerror(errno), errno);
                continue;
            }

            n = recv(connfd, buff, MAXLINE, 0);
            buff[n] ='\0';
            printf("recv msg from client: %s\n", buff);
            close(connfd);
        }
        close(listenfd);
        return 0;
    }
</code></pre>

<h5>客户端代码：</h5>

<pre><code>    #include&lt;stdio.h&gt;
    #include&lt;stdlib.h&gt;
    #include&lt;string.h&gt;
    #include&lt;errno.h&gt;
    #include&lt;sys/types.h&gt;
    #include&lt;sys/socket.h&gt;
    #include&lt;netinet/in.h&gt;
    #include&lt;unistd.h&gt;
    #include&lt;arpa/inet.h&gt;

    #define MAXLINE 4096

    int main(int argc, char** argv)
    {
        int sockfd, n;
        char recvline[4096], sendline[4096];
        struct sockaddr_in servaddr;
        if (argc != 2) {
            printf("usage: ./client &lt;ipaddress&gt;\n");
            exit(0);
        }
        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
            printf("create socket error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        memset(&amp;servaddr, 0, sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_port = htons(6666);
        if (inet_pton(AF_INET, argv[1], &amp;servaddr.sin_addr) &lt;= 0) {
            printf("inet_pton error for %s\n", argv[1]);
            exit(0);
        }
        if (connect(sockfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr)) &lt; 0) {
            printf("connect error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        printf("send msg to server: \n");
        fgets(sendline, 4096, stdin);
        if (send(sockfd, sendline, strlen(sendline), 0) &lt; 0) {
            printf("send msg error: %s(errno: %d)\n", strerror(errno), errno);
            exit(0);
        }
        close(sockfd);
        return 0;
    }
</code></pre>

<p>当然上面的代码很简单，也有很多缺点，这就只是简单的演示socket的基本函数使用。其实不管有多复杂的网络程序，都使用的这些基本函数。上面的服务器使用的是迭代模式的，即只有处理完一个客户端请求才会去处理下一个客户端的请求，这样的服务器处理能力是很弱的，现实中的服务器都需要有并发处理能力！为了需要并发处理，服务器需要fork()一个新的进程或者线程去处理请求等。</p>

<p>——本文只是介绍了简单的socket编程。
更为复杂的需要自己继续深入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用内存作Linux下的临时文件夹]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/12/02/system-tmpfs/"/>
    <updated>2011-12-02T15:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/12/02/system-tmpfs</id>
    <content type="html"><![CDATA[<p>从理论上来说，内存的读写速度是硬盘的几十倍，性能应该会有所提升</p>

<p>在一些访问量比较高的系统上，通过把一些频繁访问的文件，比如session 放入内存中，能够减少很多的iowait，大大提高服务器的性能</p>

<p>在/etc/fstab中加入一行：
<code>
none /tmp tmpfs defaults 0 0
</code>
重启后生效</p>

<p>或者在/etc/rc.local中加入
<code>
mount tmpfs /tmp -t tmpfs -o size=128m
</code>
其中size=128m 表示/tmp最大能用128m<br/>
或<br/>
<code>
mount tmpfs /tmp -t tmpfs
</code>
不限制大小，这种情况可以用到2G内存，用 df -h 可以看到
<code>
tmpfs                 2.0G   48M  2.0G   3% /tmp
</code>
注：不管哪种方式，只要linux重启，/tmp下的文件全部消失</p>

<p>  另外，在一个正在运行的系统上运行 mount tmpfs /tmp -t tmpfs  会导致 /tmp下原来的所有文件都会被“覆盖”掉，之所以加个“”，因为这种覆盖只是暂时的，如果 umount /tmp的话，原来的文件还能再访问。</p>

<p>  因为这些文件会被“覆盖”，比如原来的session mysql.sock等文件就不能访问了，用户的登陆信息就会丢失，mysql数据库也无法连接了(如果mysql.sock位于/tmp下的话)。
正确的做法是，先把/tmp下的所有文件临时mv到一个别的目录，mount tmpfs之后，再mv回来</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux signal 处理]]></title>
    <link href="http://abcdxyzk.github.io/blog/2011/12/02/system-base-signal/"/>
    <updated>2011-12-02T15:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2011/12/02/system-base-signal</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sina.com.cn/s/blog_6f92c8fc0100x6i5.html">原文</a></p>

<p>贴一部分：</p>

<h5>总结</h5>

<p>信号分成两种：<br/>
regularsignal( 非实时信号 ), 对应的编码值为 [1,31]<br/>
real timesignal 对应的编码值为 [32,64]</p>

<p>编码为 0 的信号 不是有效信号，只用于检查是当前进程否有发送信号的 权限 ，并不真正发送。</p>

<p>线程会有自己的悬挂信号队列 , 并且线程组也有一个信号悬挂队列 .
信号悬挂队列保存 task 实例接收到的信号 , 只有当该信号被处理后它才会从悬挂队列中卸下 .</p>

<p>信号悬挂队列还有一个对应的阻塞信号集合 , 当一个信号在阻塞信号集合中时 ,task 不会处理该被阻塞的信号 ( 但是该信号依旧在悬挂队列中 ). 当阻塞取消时 , 它会被处理 .</p>

<h5>对一个信号 , 要三种处理方式 :</h5>

<p>忽略该信号 ;<br/>
采用默认方式处理 ( 调用系统指定的信号处理函数 );<br/>
使用用户指定的方式处理 ( 调用用户指定的信号处理函数 ).</p>

<p>对于某些信号只能采用默认的方式处理 (eg:SIGKILL,SIGSTOP).<br/>
信号处理可以分成两个阶段 : 信号产生并通知到接收方 (generation), 接收方进行处理 (deliver)
&hellip;&hellip;&hellip;</p>

<h4>简介</h4>

<p>Unix 为了允许用户态进程之间的通信而引入signal. 此外, 内核使用signal 给进程通知系统事件.近30 年来,signal 只有很小的变化 .
以下我们先介绍linuxkernel 如何处理signal, 然后讨论允许进程间 exchange 信号的系统调用.</p>

<p>The Role of Signals</p>

<p>signal 是一种可以发送给一个进程或一组进程的短消息( 或者说是信号 , 但是这么容易和信号量混淆). 这种消息通常只是一个整数 , 而不包含额外的参数 .<br/>
linux 提供了很多种signal, 这些signal 通过宏来标识( 这个宏作为这个信号的名字). 并且这些宏的名字的开头是SIG.eg: 宏SIGCHLD , 它对应的整数值为17, 用来表示子进程结束时给父进程发送的消息 ( 即当子进程结束时应该向父进程发送标识符为17 的signal/ 消息/ 信号) .宏SIGSEGV, 它对应的整数值为11, 当进程引用一个无效的物理地址时( 内核) 会向进程发送标识符为11 的signal/ 消息/ 信号 ( 参考linux 内存管理的页错误异常处理程序, 以及linux 中断处理).<br/>
信号有两个目的:<br/>
1. 使一个进程意识到一个特殊事件发生了( 不同的事件用不同的signal 标识)
2. 并使目标进程进行相应处理(eg: 执行的信号处理函数 , signalhandler). 相应的处理也可以是忽略它 .</p>

<p>当然 , 这两个目的不是互斥的 , 因为通常一个进程意识到一个事件发生后就会执行该事件相应的处理函数 .</p>

<p>下表是linux2.6 在80x86 上的前31 个signals 及其相关说明 . 这些信号中有些是体系结构相关的(eg:SIGCHLD,SIGSTOP), 有些则专门了某些体系结构才存在的(eg:SIGSTKFLT)( 可以参考中断处理 , 里面也列出了一些异常对应的signal).
<code>
The first 31 signals in Linux/i386
Signal name
Default action
Comment
POSIX
1
SIGHUP
Terminate
Hang up controlling terminal or process
Yes
2
SIGINT
Terminate
Interrupt from keyboard
Yes
3
SIGQUIT
Dump
Quit from keyboard
Yes
4
SIGILL
Dump
Illegal instruction
Yes
5
SIGTRAP
Dump
Breakpoint for debugging
No
6
SIGABRT
Dump
Abnormal termination
Yes
6
SIGIOT
Dump
Equivalent to SIGABRT
No
7
SIGBUS
Dump
Bus error
No
8
SIGFPE
Dump
Floating-point exception
Yes
9
SIGKILL
Terminate
Forced-process termination
Yes
10
SIGUSR1
Terminate
Available to processes
Yes
11
SIGSEGV
Dump
Invalid memory reference
Yes
12
SIGUSR2
Terminate
Available to processes
Yes
13
SIGPIPE
Terminate
Write to pipe with no readers
Yes
14
SIGALRM
Terminate
Real-timerclock
Yes
15
SIGTERM
Terminate
Process termination
Yes
16
SIGSTKFLT
Terminate
Coprocessor stack error
No
17
SIGCHLD
Ignore
Child process stopped or terminated, or got signal if traced
Yes
18
SIGCONT
Continue
Resume execution, if stopped
Yes
19
SIGSTOP
Stop
Stop process execution
Yes
20
SIGTSTP
Stop
Stop process issued from tty
Yes
21
SIGTTIN
Stop
Background process requires input
Yes
22
SIGTTOU
Stop
Background process requires output
Yes
23
SIGURG
Ignore
Urgent condition on socket
No
24
SIGXCPU
Dump
CPU time limit exceeded
No
25
SIGXFSZ
Dump
File size limit exceeded
No
26
SIGVTALRM
Terminate
Virtual timer clock
No
27
SIGPROF
Terminate
Profile timer clock
No
28
SIGWINCH
Ignore
Window resizing
No
29
SIGIO
Terminate
I/O now possible
No
29
SIGPOLL
Terminate
Equivalent to SIGIO
No
30
SIGPWR
Terminate
Power supply failure
No
31
SIGSYS
Dump
Bad system call
No
31
SIGUNUSED
Dump
Equivalent to SIGSYS
No
</code>
上述signal 称为regularsignal . 除此之外,POSIX 还引入了另外一类singal 即real-timesignal . real timesignal 的标识符的值从32 到64. 它们与reagularsignal 的区别在于每一次发送的real timesignal 都会被加入悬挂信号队列，所以多次发送的real timesignal 会被缓存起来( 而不会导致后面的被忽略掉) . 而同一种( 即标识符一样)regularsignal 不会被缓存,即如果同一个signal 被发送多次 , 它们只有一个会被放入接受进程的悬挂队列 .</p>

<p>虽然linux kernel 并没有使用real timesignal. 但是它也( 通过特殊的系统调用) 支持posix定义的realtime signal.</p>

<p>有很多系统调用可以给进程发送singal, 也有很多系统调可以指定进程在接收某一个signal 时应该如何响应( 即实行哪一个函数). 下表给出了这类系统调用:( 关于这些系统调用的更多信息参考下文)
<code>
System call
Description
kill( )
Send a signal to a thread group
tkill( )
Send a signal to a process
tgkill( )
Send a signal to a process in a specific thread group
sigaction( )
Change the action associated with a signal
signal( )
Similar to sigaction( )
sigpending( )
Check whether there are pending signals
sigprocmask( )
Modify the set of blocked signals
sigsuspend( )
Wait for a signal
rt_sigaction( )
Change the action associated with a real-time signal
rt_sigpending( )
Check whether there are pending real-time signals
rt_sigprocmask( )
Modify the set of blocked real-time signals
rt_sigqueueinfo( )
Send a real-time signal to a thread group
rt_sigsuspend( )
Wait for a real-time signal
rt_sigtimedwait( )
Similar to rt_sigsuspend( )
</code>
signal 可能在任意时候被发送给一个状态未知的进程 . 当信号被发送给一个当前并不正在执行的进程时, 内核必须把先把该信号保存直到该进程恢复执行.(to do ???????)
被阻塞的信号尽管会被加入进程的悬挂信号队列 , 但是在其被解除阻塞之前不会被处理(deliver),Blockinga signal (described later) requires that delivery of the signal beheld off until it is later unblocked,which acer s the problemof signals being raised before they can be delivered.</p>

<h4>内核把信号传送分成两个阶段:</h4>

<p>signalgeneration: 内核更新信号的目的进程的相关数据结构 , 这样该进程就能知道它接收到了一个信号. 觉得称为收到信号阶段更恰当. 这个generation 翻译成目的进程接收也不错 .</p>

<p>signaldelivery(): 内核强制目的进程处理接收到的信号，这主要是通过修改进程的执行状态或者在目的进程中执行信号处理函数来实现的 . 觉得称为处理收到的信号阶段更恰当 . diliver 这里翻译成处理更恰当 .
deliver 的翻译: 有很多个 , 估计翻译成incomputing 比较合理</p>

<p>一个genearatedsignal 最多只能deliver 一次( 即一个信号最多只会被处理一次) . signal 是可消耗资源 , 一旦一个signal 被deliver, 那么所有进程对它的引用都会被取消 .
已经产生但是还未被处理(deliver) 的信号称为pendingsignal ( 悬挂信号). 对于regularsignal, 在某一个时刻 , 一种signal 在一个进程中只能有一个实例( 因为进程没有用队列缓存其收到的signal) . 因为有31 种regualarsignal , 所以一个进程某一个时刻可以有31 个各类signal 的实例. 此外因为linux 进程对realtimesignal 采用不同的处理方式, 它会保存接收到的realtimesignal 的实例 , 所以可以同时有很多同种signal 的实例 .</p>

<h5>问题: 不同种类的信号的优先级( 从值较小的开始处理) .</h5>

<p>一般而言 , 一个信号可能会被悬挂很长是时间( 即一个进程收到一个信号后 , 该信号有可能在该进程里很久 , 因为进程没空来处理它), 主要有如下因素:<br/>
1. 信号通常被当前进程处理 . Signalsare usually delivered only to the currently running process (thatis, to the current process).<br/>
2. 某种类型的信号可能被本进程阻塞. 只有当其被取消阻塞好才会被处理 .<br/>
3. 当一个进程执行某一种信号的处理函数时 , 一般会自动阻塞这种信号 , 等处理完毕后才会取消阻塞 . 这意味着一个信号处理函数不会被同种信号阻塞 .</p>

<p>尽管信号在概念上很直观 , 但是内核的实现却相当复杂. 内核必须:<br/>
1. 记录一个进程阻塞了哪些信号<br/>
2. 当从核心态切换到用户态时 , 检查进程是否接受到了signal.( 几乎每一次时钟中断都要干这样的事 , 费时吗?).<br/>
3. 检查信号是否可以被忽略. 当如下条件均满足时则可被忽略:<br/>
1). 目标进程未被其它进程traced( 即PT_PTRACED==0). 但一个被traced 的进程收到一个信号时 , 内核停止目标线程 , 并且给tracing 进程发送信号SIGCHLD.tracing 进程可能会通过SIGCONT来恢复traced 进程的执行<br/>
2). 目标进程未阻塞该信号 .<br/>
3). 信号正被目标进程忽略( 或者由于忽略是显式指定的或者由于忽略是默认操作).<br/>
4. 处理信号 . 这可能需要切换到信号处理函数</p>

<p>此外, linux 还需要处理BSD, SystemV 中signal 语义的差异性 . 另外 , 还需要遵守POSIX 的定义 .</p>

<h4>处理信号的方式 (Actions Performed uponDelivering a Signal)</h4>

<p>一个进程可以采用三中方式来响应它接收到的信号:<br/>
1.(ignore) 显示忽略该信号<br/>
2.(default) 调用默认的函数来响应该信号( 这些默认的函数由内核定义) , 一般这些默认的函数都分成如下几种( 采用哪一种取决于信号的类型 , 参考前面的表格):
<code>
Terminate: The process is terminated(killed)
Dump: The process is terminated (killed) and a core file containingits execution context is created, if possible; this file may beused for debug purposes.
Ignore:The signal is ignored.
Stop:The process is stopped, i.e., put in the TASK_STOPPEDstate.
Continue:If the process was stopped (TASK_STOPPED), it is put intothe TASK_RUNNING state.
</code>
3.(catch) 调用相应的信号处理函数 ( 这个信号处理函数通常是程序员在运行时指定的). 这意味着进程需要在执行时显式地指明它需要catch 哪一种信号. 并且指明其处理函数 . catch 是一种主动处理的措施 .</p>

<p>注意上述的三个处理方式被标识为:ignore, default,catch. 这三个处理方式以后会通过这三个标识符引用 .</p>

<p>注意阻塞一个信号和忽略一个信号是不同 , 一个信号被阻塞是就当前不会被处理 , 即一个信号只有在解除阻塞后才会被处理 . 忽略一个信号是指采用忽略的方式来处理该信号( 即对该信号的处理方式就是什么也不做) .</p>

<p>SIGKILL 和SIGSTOP 这两个信号不能忽略 , 不能阻塞 , 不能使用用户定义的函数(caught) . 所以总是执行它们的默认行为 . 所以 , 它们允许具有恰当特权级的用户杀死别的进程, 而不必在意被杀进程的防护措施 ( 这样就允许高特权级用户杀死低特权级的用户占用大量cpu 的时间) .</p>

<p>注: 有两个特殊情况. 第一 , 任意进程都不能给进程0( 即swapper 进程) 发信号 . 第二 , 发给进程1 的信号都会被丢弃(discarded), 除非它们被catch. 所以进程 0 不会死亡, 进程1 仅在int 程序结束时死亡 .</p>

<p>一个信号对一个进程而言是致命的(fatal) , 当前仅当该信号导致内核杀死该进程 . 所以,SIGKILL 总是致命的. 此外 , 如果一个进程对一个信号的默认行为是terminate 并且该进程没有catch 该信号 , 那么该信号对这个进程而言也是致命的 . 注意 , 在catch 情况下 , 如果一个进程的信号处理函数自己杀死了该进程 , 那么该信号对这个进程而言不是致命的 , 因为不是内核杀死该进程而是进程的信号处理函数自己杀死了该进程.</p>

<h4>POSIX 信号以及多线程程序</h4>

<p>POSIX1003.1 标准对多线程程序的信号处理有更加严格的要求: <br/>
( 由于linux 采用轻量级进程来实现线程 , 所以对linux 的实现也会有影响)<br/>
1. 多线程程序的所有线程应该共享信号处理函数 , 但是每一个线程必须有自己的maskof pending and blocked signals<br/>
2. POSIX 接口kill( ), sigqueue() 必须把信号发给线程组 , 而不是指定线程. 另外内核产生的SIGCHLD,SIGINT, or SIGQUIT 也必须发给线程组 .<br/>
3. 线程组中只有有一个线程来处理(deliver) 的共享的信号就可以了 . 下问介绍如何选择这个线程 .<br/>
4. 如果线程组收到一个致命的信号 , 内核要杀死线程组的所有线程, 而不是仅仅处理该信号的线程 .</p>

<p>为了遵从POSIX 标准,linux2.6 使用轻量级进程实现线程组.</p>

<p>下文中 , 线程组表示OS 概念中的进程, 而线程表示linux 的轻量级进程. 进程也( 更多地时候)表示linux 的轻量级进程 . 另外每一个线程有一个私有的悬挂信号列表 , 线程组共享一个悬挂信号列表 .</p>
]]></content>
  </entry>
  
</feed>
