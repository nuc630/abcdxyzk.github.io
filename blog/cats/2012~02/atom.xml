<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~02 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~02/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-21T17:24:08+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[html基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/27/lang-html-base/"/>
    <updated>2012-02-27T15:27:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/27/lang-html-base</id>
    <content type="html"><![CDATA[<h4>html 单选按钮且默认选中</h4>

<pre><code>    &lt;input type="radio" name="state" value="ok"checked="true" /&gt;正常
    &lt;input type="radio" name="state" value="history"/&gt;历史 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git分布式版本控制系统]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/25/tools-git-base/"/>
    <updated>2012-02-25T14:44:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/25/tools-git-base</id>
    <content type="html"><![CDATA[<h4>【GIT 基础】</h4>

<p>GIT 使用 SHA-1哈希码（40个字符）来标识提交，同时保证本次提交后整体（一个快照）的完整性。</p>

<h5>文件状态：</h5>

<p>文件状态分为：未跟踪(untracked) 和已跟踪 (tracked)，已跟踪又分为三种状态：已暂存（staged），已修改（modified），已提交（committed）</p>

<p>一般过程如下：
<code>
0） 用 git pull 下载远程代码库代码
1） 新建文件，该文件状态为“未跟踪”，位于工作区；
2） 用 git add a.txt 加入该文件，状态变为已跟踪的“已暂存”，位于暂存区；
3） 用 git commit a.txt -m "ha" 提交该文件，状态变为“已提交”，位于代码库（repository ）
4） 用 git push 提交到远程代码库
</code>
注意：用 git status 查看目前所有文件的状态。</p>

<h5>GIT 配置：</h5>

<p>三种配置范围类型：
<code>
1）所有用户 --system，  存在 /etc/gitconfig 文件中。(对windows来说，是msysgit 的安装目录)
2）本用户 --global，   存在 ~/.gitconfig 文件中。（对windows 来说，是 C:\Documents andSettings\$USER）
3）本项目            存在 .git/config 文件中。
</code>
注意：后面的重载前面的。例如：用&ndash;global设置，可以在所有项目中使用这个设置；如果有一个项目你想使用一个特别的设置，就可以使用不带参数的git config 重新设置，则它只作用于这个项目。如果用 git config &ndash;list 查看这些设置，可能会列出多个，但最后那个起作用。</p>

<h6>用户信息</h6>

<p>$ git config &ndash;global user.name &ldquo;John Doe&rdquo;<br/>
$ git config &ndash;global user.email<br/>
文本编辑器<br/>
$ git config &ndash;global core.editor vim<br/>
查看配置信息<br/>
$ git config &ndash;list<br/>
或者只看一个信息：<br/>
$ git config <key></p>

<h4>【常用操作】</h4>

<h5>基本</h5>

<pre><code>$ git grep XXX                      查看某个关键字
$ git init                      初始化仓库，如果该目录有文件，则都会处于“未跟踪”状态的。
$ git clone git://github.com/schacon/grit.git mygrit    克隆仓库，并换个名字
说明： 
    通过git clone获取的远端git库，只包含了远端git库的当前工作分支。
    如果想获取其它分支信息，需要使用 “git branch –r” 来查看， 
    如果需要将远程的其它分支代码也获取过来，可以使用命令 “ git checkout -b 本地分支名 远程分支名”，
    其中，远程分支名为 “git branch –r” 所列出的分支名， 一般是诸如“origin/分支名”的样子。
    如果本地分支名已经存在， 则不需要“-b”参数。
$ git add readme.txt                    跟踪一个新文件：                                                 
说明： 
    1) 跟踪之后，该文件状态是“已暂存”的。 （Changes to be committed:）
    2) 修改一个已暂存的文件，该文件会出现在两个记录区中。
    3) 如果跟踪错了，想把他删除（不删除工作区的），则用 git rm --cachedreadme.txt。
       状态变成“未跟踪”，如果该文件已经修改了，则加  -f参数强行删除暂存区的文件（已修改的文件不被覆盖）。
$ git commit -m "fix bug1"              提交更新

$ git diff                      查看尚未暂存的更新，比较“已修改”和“已暂存（或已提交）”。
$ git diff --cached 或 $ git diff --staged     查看尚未提交的更新，比较“已暂存”和已提交。
$ git rm -f a.a                     强行移除修改后文件(从暂存区和工作区中删除)
$ git mv file1 file2                    改名（只改工作区和暂存区）
$ git stash                     将你当前未提交到本地（和服务器）的代码推入到Git的栈中 
$ git stash apply                   将Git的栈中代码恢复
$ git commit --file notefile                从文件中取注释
$ git checkout A.java                   抛弃已修改，用已提交覆盖，此命令对已暂存文件没作用。 
$ git rm --cached A.java                移除已跟踪文件，恢复到“未跟踪”，如果文件已修改，则需-f，并且不覆盖修改过的内容。 
</code></pre>

<h5>后悔药</h5>

<pre><code>$ git reset HEAD readme.txt             取消已暂存的文件（已暂存到已修改）
$ git reset --hard HEAD                 重置所有修改，就像没有修改过一样。
$ git reset --hard HEAD~3               最新的3次提交全部重置，就像没有提交过一样。
说明：
    --hard reset后再执行 git push origin HEAD --force 也将删除远程的提交。
</code></pre>

<h5>历史查看：</h5>

<pre><code>$ git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e 显示具体的某次的改动的修改
$ git log                       查看提交历史(全部）
$ git log --stat                    查看提交历史，并显示统计信息
$ git log -p -2                     查看最近2次提交历史并查看差异
$ git log --since=2.weeks               查看最近2周内提交历史
$ git log --since="2008-09-14"              查看某个时刻之后的提交历史
$ git log --until="2008-09-14"              查看某个时刻以前的提交历史
$ git log --author="stupid"             查看某个作者的提交历史
$ git log --pretty=oneline              列出所有改动历史
$ git log --pretty=format:"%h - %an, %ar : %s"      查看提交历史，并格式化显示
例如：
    $ git log --pretty=format:"%h - %an, %ar : %s"
    ca82a6d - Scott Chacon, 11 months ago : changed the versionnumber
    085bb3b - Scott Chacon, 11 months ago : removed unnecessary testcode
    a11bef0 - Scott Chacon, 11 months ago : first commit

%H 提交对象（commit）的完整哈希字串
%h 提交对象的简短哈希字串
%T 树对象（tree）的完整哈希字串
%t 树对象的简短哈希字串
%P 父对象（parent）的完整哈希字串
%p 父对象的简短哈希字串
%an 作者（author）的名字
%ar 作者修订日期，按多久以前的方式显示
%cn 提交者(committer)的名字
%cr 提交日期，按多久以前的方式显示
%s 提交说明

$ git log --pretty=format:"%h %s" --graph查看提交历史，并图形化显示
例如：
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' ofgit://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local

其它：
--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
--name-only 仅在提交信息后显示已修改的文件清单。
--name-status 显示新增、修改、删除的文件清单。
--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph 显示 ASCII 图形表示的分支合并历史。
--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和format（后跟指定格式）。
</code></pre>

<h5>忽略某些文件——很有用</h5>

<p>在.gitignore 文件中加入需要忽略的内容
<code>
*.a         # 忽略所有 .a 结尾的文件
!lib.a          # 但lib.a 除外
/TODO           # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/          # 忽略build/ 目录下的所有文件
doc/*.txt       # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
</code>
注意：.gitignore 文件放在工程的根目录即可，但是要把它用 git add 加入跟踪或者提交。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[irssi]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/18/tools-irssi/"/>
    <updated>2012-02-18T13:01:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/18/tools-irssi</id>
    <content type="html"><![CDATA[<p>首先连接服务器，用/connect server-name</p>

<ol>
<li><p>/nick <name><br/>
选择一个没有重名的用户。（重名会有提示）</p></li>
<li><p>/msg nickserv register <password> <e-mail><br/>
通过email认证后：</p></li>
<li>/msg nickserv identify <password></li>
</ol>


<p>使用log:<br/>
1.使用pgUP,pgDn键可以实现记录的翻页。<br/>
2./goto 12:00, /goto end<br/>
3./lastlog nickname 查看nickname所说的话！<br/>
4./away暂时离开，/away查看离开时段的聊天记录。</p>

<p>－－－－－－－－－－－－－</p>

<h4>【日常操作】</h4>

<pre><code>(1) /nick &lt;昵称&gt; ，修改昵称
(2) /join #&lt;频道&gt; ，加入一个频道
(3) /wc，离开当前频道
(4) /part &lt;频道&gt; &lt;消息&gt;，退出频道，不加频道名退出当前频道，后面可以跟退出原因。
(5) /disconnect &lt;服务器&gt;，断开一个服务器
(6) /quit 或者 /exit，退出 irssi，结束IRC会话。
(7) /msg &lt;昵称&gt; &lt;消息&gt;，向某人发私消息（新开窗口）
(8) /query &lt;昵称&gt; &lt;消息&gt;，向某人发私消息（新开窗口且转换到这个窗口）
(9) /say &lt;昵称&gt; &lt;消息&gt;，向某人说话（不新开窗口）
(10) /notice &lt;昵称&gt; &lt;消息&gt;，向指定人发出注意消息
(11) /me &lt;动作&gt;，在当前聊天室窗口中做出动作。 如做出晕倒动作：/me 晕倒
(12) /away &lt;原因&gt;，留下信息说明暂时离开，别人向你发出私聊时将会返回此消息，再重新输入 /away（不指定参数）则解除离开状态。
(13) /ignore &lt;昵称&gt;，忽略某人的聊天内容
(14) /set autolog on，自动保存聊天记录
</code></pre>

<h4>【窗口操作】</h4>

<pre><code>(1) Alt+1~0，对应1~10的频道编号
(2) Alt+q~p，对应11~20的频道编号
(3) Ctrl+n/p，切换上/下一个频道
(4) PageUP/PageDn，切换上/下页讯息
(5) /window close，关闭当前窗口
(6) /window close &lt;数字&gt;，关闭指定编号的窗口
(7) /window list，窗口列表
</code></pre>

<h4>【查询信息】</h4>

<pre><code>(1) /list，频道列表
(2) /names [#聊天室]，列出当前服务器或指定聊天室下的所有人员名称（无法列出隐藏人员）
(3) /who，查看频道的所有人
(4) /whois [昵称]，查看某人的基本资料
(5) /ison &lt;别名1&gt; &lt;别名2&gt; ...查询指定别名是否在线
(6) /info，查询服务器信息
(7) /admin，查询当前服务器上的Admin
(8) /lusers，查询当前服务器上的统计信息
(9) /motd，查询当前服务器今日的统计信息
(10) /links，查询当前的服务器，解析当前的有几个服务器。
</code></pre>

<h4>【提示信息】</h4>

<p>[Act: 1,3,6,9,10]：这些数字提示各个频道上对话情况：[灰白色] 表示有人登录或登出，[白色] 代表有人在此channel上说话，[灰红色] 代表对话中提起你的名字或呼叫你。</p>

<h4>【转换编码】</h4>

<p>/recode add #&lt;频道> &lt;编码>，加入此频道编码格式<br/>
/recode，查看加入的编码列表</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[screen]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/18/tools-screen/"/>
    <updated>2012-02-18T12:53:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/18/tools-screen</id>
    <content type="html"><![CDATA[<h4>断开控制台而不结束会话-Screen</h4>

<p>设想一下，你通过 ssh 连接到了一台服务器，接着你开始编译一个软件。这或许要占用你一个小时甚至更多的时间，突然！你需要离开，或者是断开网络了~<br/>
怎么办？下次再重新编译一次么？还有例外一种办法~（当然，我指的不是一开始放在后台运行。）<br/>
Screen！</p>

<h4>一、启动 Screen</h4>

<p>下载配置文件<a href="/download/tools/screenrc">screenrc</a>，放到~/.screenrc，注意要加一个.号。然后启动 Screen 再简单不过了，在 Shell 中运行 screen ，按回车，就进入 Screen 输入环境了。</p>

<h4>二、给 Screen 的指令</h4>

<p>和VIM类似，当你想给 Screen 发送指令，而不是给 shell 输入指令的时候需要用到特定的组合键：Ctrl-A 。（这类似于 VIM 中的 ESC。）当你执行Ctrl-A 后就可以引起 Screen 的注意了。</p>

<h4>三、我在 Screen 中么？</h4>

<p>通过 screen -list 调用 screen 可以看到类似如下界面：<br/>
这标明你正处于 Screen 中。并且进程号是8941。</p>

<h4>四、还有哪些命令？</h4>

<p>通过 Ctrl-A and ? 的方式你可以看到如下列表：<br/>
ok！一切都明了了！</p>

<h4>五、离开</h4>

<p>这时我需要离开那台正在编译软件的主机了，通过 Ctrl+A and D。我们脱离了 screen。但是 screen 依然在后台运行着。</p>

<h4>六、归来</h4>

<p>当你回到这台主机，并想重新进入之前的 screen 时，以前看到的 进程号（PID）就要发挥作用了。<br/>
通过命令：<br/>
screen -r pid<br/>
就可以回到之前的Screen了。<br/>
如果你觉得记住 PID 是一件很麻烦的事情，也可以使用 -S 参数：<br/>
scree  -S latteye<br/>
这样就可以打开一个名为 latteye 的会话，下次连接时使用：<br/>
screen -r latteye <br/>
即可。</p>

<h4>七、特殊情况</h4>

<p>有些时候我们离开 screen 并不是那么正常，不一定会按 Ctrl-a + D 来离开 Screen，比如网络突然断开的时候。<br/>
这个时候，若我们重新回到主机，则通过 -r 参数是无法连接 screen 的，我们还需要 -d 的帮助：<br/>
screen -d -r pid</p>

<hr />

<p>命令其实超简单的：<br/>
直接在终端上输入 screen , 这个时候，服务器端会启一个新的终端，但这个终端，与之前的普通终端不一样，它不隶属于 sshd 进程组，这样，当本地终端关闭后，服务器终端不会被 kill。<br/>
当然，优点还不止这么些，在服务器终端里执行任务时，你甚至可以随时地切换到本地终端做些其他事情，然后，要回去时，再恢复到刚才已经打开的服务器终端里，如果刚才的任务没有结束，还可以继续执行任务。<br/>
操作步骤：<br/>
首先，进入 screen -S sessionname终端。(sessionname是为了区分你的session)<br/>
然后按 ctrl + a，再按 d键暂时退出终端。<br/>
当要返回时， 先查看刚才的终端进程ID， screen -list<br/>
或直接<br/>
 screen -r xx(刚才的sessionname)就可以了 <br/>
当然，当你开了很多个session后，打算关闭几个session，可以进入到session后，exit一下就可以了.<br/>
<code>
    Ctrl + a + ?    显示所有键绑定信息
    Ctrl + a + w    显示所有窗口列表
    Ctrl + a + a    切换到之前显示的窗口
    Ctrl + a + c    创建一个新的运行shell的窗口并切换到该窗口
    Ctrl + a + n    切换到下一个窗口
    Ctrl + a + p    切换到前一个窗口(与C-a n相对)
    Ctrl + a + 0..9 切换到窗口0..9
    Ctrl + a + a    发送 C-a到当前窗口
    Ctrl + a + d    暂时断开screen会话
    Ctrl + a + k    杀掉当前窗口
    Ctrl + a + [ 或 Ctrl + a + Esc 进入拷贝/回滚模式
                 Space 第一次按为标记copy区起点，第二次按为终点
    Ctrl + a + ]    把刚刚在 copy mode 选定的内容贴上
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jni 编程]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/02/15/lang-java-jni/"/>
    <updated>2012-02-15T20:22:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/02/15/lang-java-jni</id>
    <content type="html"><![CDATA[<h4>jni 编译：</h4>

<p>g++ -L /usr/lib/jvm/default-java/jre/lib/amd64/server -o judge judge.cpp -ljvm</p>

<h4>jni 运行：</h4>

<p>以root身份把库路径加入/etc/ld.so.conf或在/etc/ld.so.conf.d中创建特定的.conf文件，然后运行 ldconfig更新/etc/ld.so.cache。例如：在/etc/ld.so.conf.d下创建文件jvm.conf写入
<code>
/usr/lib/jvm/default-java/jre/lib/amd64
/usr/lib/jvm/default-java/jre/lib/amd64/server
</code></p>

<h4>jni</h4>

<p>  GetFieldID是得到java类中的参数ID，GetMethodID得到java类中方法的ID，它们只能调用类中声明为 public的参数或方法。使用如下：
<code>
jfieldID topicFieldId = env-&gt;GetFieldID(objectClass,"name", "Ljava/lang/String;");
jmethodID getcName=env-&gt;GetMethodID(objectClass,"getcatName","()Ljava/lang/String;");
</code>
第一参数是Java 类对象。第二个参数是参数（或方法名），第三个参数是该参数（或方法）的签名。第三个参数由以下方法得到。
有类
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Cat {
</span><span class='line'>    private int catNumber;
</span><span class='line'>    String catName;
</span><span class='line'>    public Cat(int i,String name){catNumber=i;catName=name;}
</span><span class='line'>    public String getCatName () {
</span><span class='line'>        return this.catName;
</span><span class='line'>    }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    public void setCatName (String catName) {
</span><span class='line'>    this.catName=catName;
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;查看 Cat类进入到Cat所在目录 先用javac Cat.java进行编译 然后输入命令：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Javap –s Cat
</span><span class='line'>&lt;code&gt;
</span><span class='line'>得到Cat方法getcatName 的签名是()Ljava/lang/String，Cat类中的参数是private 所以它没有签名。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>options[0].optionString = &ldquo;-Djava.class.path=./tmp/1&rdquo;;</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
