<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/blog/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-01-12T16:14:03+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby字符串处理函数]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string/"/>
    <updated>2014-12-14T15:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-string</id>
    <content type="html"><![CDATA[<h5>1.返回字符串的长度</h5>

<pre><code>str.length =&gt; integer
</code></pre>

<h5>2.字符串索引index</h5>

<pre><code>str.index(substring [, offset])   =&gt; fixnum or nil
str.index(fixnum [, offset])      =&gt; fixnum or nil
str.index(regexp [, offset])      =&gt; fixnum or nil

Returns the index of the first occurrence of the given substring, character (fixnum), 
or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
it specifies the position in the string to begin the search.

   "hello".index('e')             #=&gt; 1
   "hello".index('lo')            #=&gt; 3
   "hello".index('a')             #=&gt; nil
   "hello".index(101)             #=&gt; 1
   "hello".index(/[aeiou]/, -3)   #=&gt; 4
</code></pre>

<h6>从尾到头rindex</h6>

<pre><code>str.rindex(substring [, fixnum])   =&gt; fixnum or nil
str.rindex(fixnum [, fixnum])   =&gt; fixnum or nil
str.rindex(regexp [, fixnum])   =&gt; fixnum or nil

Returns the index of the last occurrence of the given substring, character (fixnum), 
or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, 
it specifies the position in the string to end the search---characters beyond this point will not be considered.

   "hello".rindex('e')             #=&gt; 1
   "hello".rindex('l')             #=&gt; 3
   "hello".rindex('a')             #=&gt; nil
   "hello".rindex(101)             #=&gt; 1
   "hello".rindex(/[aeiou]/, -2)   #=&gt; 1
</code></pre>

<h5>3.判断字符串中是否包含另一个串</h5>

<pre><code>str.include? other_str =&gt; true or false
"hello".include? "lo"   #=&gt; true
"hello".include? "ol"   #=&gt; false
"hello".include? ?h     #=&gt; true
</code></pre>

<h5>4.字符串插入</h5>

<pre><code>str.insert(index, other_str) =&gt; str
"abcd".insert(0, 'X')    #=&gt; "Xabcd"
"abcd".insert(3, 'X')    #=&gt; "abcXd"
"abcd".insert(4, 'X')    #=&gt; "abcdX"
"abcd".insert(-3, 'X')
-3, 'X')   #=&gt; "abXcd"
"abcd".insert(-1, 'X')   #=&gt; "abcdX"
</code></pre>

<h5>5.字符串分隔,默认分隔符为空格</h5>

<pre><code>str.split(pattern=$;, [limit]) =&gt; anArray
" now's the time".split        #=&gt; ["now's", "the", "time"]
"1, 2.34,56, 7".split(%r{,\s*}) #=&gt; ["1", "2.34", "56", "7"]
"hello".split(//)               #=&gt; ["h", "e", "l", "l", "o"]
"hello".split(//, 3)            #=&gt; ["h", "e", "llo"]
"hi mom".split(%r{\s*})         #=&gt; ["h", "i", "m", "o", "m"]
"mellow yellow".split("ello")   #=&gt; ["m", "w y", "w"]
"1,2,,3,4,,".split(',')         #=&gt; ["1", "2", "", "3", "4"]
"1,2,,3,4,,".split(',', 4)      #=&gt; ["1", "2", "", "3,4,,"]
</code></pre>

<h5>6.字符串替换</h5>

<pre><code>str.gsub(pattern, replacement) =&gt; new_str
str.gsub(pattern) {|match| block } =&gt; new_str
"hello".gsub(/[aeiou]/, '*')              #=&gt; "h*ll*"     #将元音替换成*号
"hello".gsub(/([aeiou])/, '&lt;\1&gt;')         #=&gt; "h&lt;e&gt;ll&lt;o&gt;"   #将元音加上尖括号,\1表示保留原有字符???
"hello".gsub(/./) {|s| s[0].to_s + ' '}   #=&gt; "104 101 108 108 111 "
</code></pre>

<p>ruby中带“!&ldquo;和不带&rdquo;!&ldquo;的方法的最大的区别就是带”!"的会改变调用对象本身了。比方说str.gsub(/a/, &lsquo;b&rsquo;)，不会改变str本身，只会返回一个新的str。而str.gsub!(/a/, &lsquo;b&rsquo;)就会把str本身给改了。<br/>
但是gsub和gsub!还有另外一个不同点就是，gsub不管怎么样都会返回一个新的字符串，而gsub!只有在有字符被替换的情况下才会返回一个新的字符串，假如说没有任何字符被替换，gsub!只会返回nil.</p>

<h6>字符串替换二:</h6>

<pre><code>str.replace(other_str) =&gt; str
s = "hello"         #=&gt; "hello"
s.replace "world"   #=&gt; "world"
</code></pre>

<h5>7.字符串删除:</h5>

<pre><code>str.delete([other_str]+) =&gt; new_str
"hello".delete "l","lo"        #=&gt; "heo"
"hello".delete "lo"            #=&gt; "he"
"hello".delete "aeiou", "^e"   #=&gt; "hell"
"hello".delete "ej-m"          #=&gt; "ho"
</code></pre>

<h5>8.去掉前和后的空格</h5>

<pre><code>str.lstrip =&gt; new_str
" hello ".lstrip   #=&gt; "hello "
"hello".lstrip       #=&gt; "hello"
</code></pre>

<h5>9.字符串匹配</h5>

<pre><code>str.match(pattern) =&gt; matchdata or nil
</code></pre>

<h5>10.字符串反转</h5>

<pre><code>str.reverse =&gt; new_str
"stressed".reverse   #=&gt; "desserts"
</code></pre>

<h5>11.去掉重复的字符</h5>

<pre><code>str.squeeze([other_str]*) =&gt; new_str
"yellow moon".squeeze                  #=&gt; "yelow mon" #默认去掉串中所有重复的字符
" now   is the".squeeze(" ")         #=&gt; " now is the" #去掉串中重复的空格
"putters shoot balls".squeeze("m-z")   #=&gt; "puters shot balls" #去掉指定范围内的重复字符
</code></pre>

<h5>12.转化成数字</h5>

<pre><code>str.to_i=&gt; str
"12345".to_i             #=&gt; 12345
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby基础]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base/"/>
    <updated>2014-12-14T14:55:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-ruby-base</id>
    <content type="html"><![CDATA[<h4>Find</h4>

<p><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html">http://ruby-doc.org/stdlib-1.9.3/libdoc/find/rdoc/Find.html</a></p>

<pre><code>require 'find'
total_size = 0
Find.find(ENV["HOME"]) do |path|
  if FileTest.directory?(path)
    if File.basename(path)[0] == ?.
      Find.prune       # Don't look any further into this directory.
    else
      next
    end
  else
    total_size += FileTest.size(path)
  end
end
</code></pre>

<h4>Time</h4>

<pre><code>p Time.parse(“2002-03-17”)       #=&gt; Sun Mar 17 00:00:00 +0800[v2] 2002
p Time.now        # =&gt;Mon Oct 20 06:02:10 JST 2003
p Time.now.to_a      # =&gt; [10, 2, 6, 20, 10, 2003, 1, 293,false, "JST"]
p Time.now.to_f      # =&gt; 1418540681.0154862
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[liquid用法笔记]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid/"/>
    <updated>2014-12-14T14:54:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/12/14/blog-jekyll-liquid</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/dont27/article/details/38097581">原文</a></p>

<ul>
<li>注意本文代码中的 <code>{ {</code>,<code>{ %</code>,<code>% }</code>,<code>} }</code>,<code>{ { {</code>,<code>} } }</code> 中间的空格都要去掉才能执行</li>
</ul>


<p>在折腾github上博客的时候, 遇到一些jekyll, 正确来说应该是Liquid用法的问题。
于是一系列搜索之后终于找到了比较容易理解的<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">文档>></a></p>

<p>关于Liquid的语法使用，看完一遍，就能愉快的在github上继续折腾博客了。有些看不大懂，没翻译，都是自己的见解，有些根本用不上就不解释了。</p>

<h5>Liquid有两种标记类型： Output 和 Tag.</h5>

<p>  Output标记，用于输出文本，格式采用 <code>{ { 两个尖括号包围 } }</code><br/>
  Tag标记，用于执行命令或者处理 格式: <code>{ % 一对尖括号内一对百分号 % }</code></p>

<p>我的见解是: 类比jsp格式, Output相当于 &lt;%=variable>，即输出变量值;<br/>
Tag相当于&lt;% int i=2 ;%>,一种数据处理,但不做输出效果.</p>

<h4>Output</h4>

<p>例子:
<code>
Hello { {name} }
Hello { {user.name} }
Hello { { 'tobi' } }
</code></p>

<h5>高级Output: Filters//过滤器</h5>

<p>Filters过滤器,数据处理的操作方法.<br/>
过滤器的第一个参数，往往是过滤器运算符'|&lsquo;左边的Output，而过滤器的返回值，是通过过滤运算符右边的操作所得到的，过滤器可以叠加操作，最终得到该Output所要输出的值。(这段我见解，翻译不过来 = =)<br/>
如下：<br/>
<code>
Hello { { 'tobi' | upcase } }
Hello tobi has { { 'tobi' | size } } letters!
Hello { { 'now' | date: "%Y %h" } }
</code></p>

<h5>标准过滤器</h5>

<pre><code>    date - 格式化时间
    capitalize - 输出字符串，字符串（句子）首字母大写 e.g. 假设tb为"hello world"{ { tb|capitalize } } #=&gt; 'Hello world'
    downcase - 转换小写
    upcase - 转换大写
    first - 获取数组的第一个元素
    last - 获取数组的最后一个元素
    join - 用指定的字符拼接数组元素
    sort - 排序数组
    map - map/collect an array on a given property
    size - 返回数组大小
    escape - 转移字符串
    escape_once - returns an escaped version of html without affecting existing escaped entities
    strip_html - 除去字符串中的html标签?
    strip_newlines - 除去字符串中的回车?
    newline_to_br - 将所有的回车"\n" 转换成"&lt;br /&gt;"?
    replace - 替换所有匹配内容 e.g.{ { 'forfor' | replace:'for', 'bar' } } #=&gt; 'barbar'
    replace_first - 替换第一个匹配内容 e.g.{ { 'forfor' | replace_first:'for', 'bar' } } #=&gt; 'barfor'
    remove - 移除所有匹配内容 e.g.{ { 'forbarforbar' | remove:'for'} } #=&gt; 'barbar'
    remove_first - 移除第一个匹配内容 e.g.{ { 'forbarforbar' | remove_first:'for'} } #=&gt; 'barforbar'
    truncate - truncate a string down to x characters
    truncatewords - truncate a string down to x words
    prepend - 在字符串前面加上内容 e.g.{ {'bar'|prepend:'far'} } #=&gt; 'farbar'
    append - 字符串后面加上内容 e.g.{ {'bar'|append: 'foo'} }#=&gt; 'barfoo'
    minus - 减法 e.g. { {4|minus:2} } #=&gt;2
    plus - 加法 e.g. { { 4|plus:2} } #=&gt; 6
    times - 乘法 e.g. { {10|times:2} } #=&gt; 20
    divided_by - 除法 e.g. { { 10 | divided_by:2} } #=&gt; 5
    split - 分割字符串 e.g.{ { "a~b" | split:'~'} } #=&gt; ['a','b']
    modulo - 取余 e.g. { { 3 | modulo:2 } } #=&gt; 1
</code></pre>

<h4>Tags</h4>

<p>Tag在模板中起到处理逻辑的作用。<br/>
下面是目前支持的Tag:
<code>
    assign - 定义变量 e.g. { % assign tt = 1 % } 定义了变量tt数值为1
    capture - Block tag为变量赋值 e.g.{ % capture dont % }{ { tt } }{ % endcapture % } 将tt的值赋给 dont
    case - Block tag its the standard case...when block
    comment - Block tag 注释
    cycle - Cycle is usually used within a loop to alternate between values, like colors or DOM classes.
    for - for循环block
    if - 判断block
    include - 引入模板
    raw - 转义内容tag e.g.{ % raw % }{ { this } }{ % endraw% } #=&gt; '{ { this } }'
    unless - Mirror of if statement
</code></p>

<h5>Comments</h5>

<p>注释隐藏
<code>
We made 1 million dollars { % comment % } in losses { % endcomment % } this year
Raw
</code>
当包裹内容出现冲突语法时，不会执行其处理。
<code>
    { % raw % }
      In Handlebars, { { this } } will be HTML-escaped, but { { { that } } } will not.
    { % endraw % }
</code></p>

<h5>if/else</h5>

<p>e.g.
<code>
    { % if user % }
      Hello { { user.name } }
    { % endif % }
</code>
<code>
    # Same as above
    { % if user != null % }
      Hello { { user.name } }
    { % endif % }
</code></p>

<pre><code>    { % if user.name != 'tobi' % }
      Hello non-tobi
    { % endif % }
</code></pre>

<pre><code>    # Same as above
    { % unless user.name == 'tobi' % }
      Hello non-tobi
    { % endunless % }
</code></pre>

<pre><code>    { % if user.payments.size &gt; 0  % }
       you paid !
    { % endif % }
</code></pre>

<h5>Case Statement</h5>

<p>多条件
<code>
    { % case condition % }
    { % when 1 % }
    hit 1
    { % when 2 or 3 % }
    hit 2 or 3
    { % else % }
    ... else ...
    { % endcase % }
</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ % case template % }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{ % when 'label' % }
</span><span class='line'> // { { label.title } }
</span><span class='line'>{ % when 'product' % }
</span><span class='line'> // { { product.vendor | link_to_vendor } } / { { product.title } }
</span><span class='line'>{ % else % }
</span><span class='line'> // { {page_title} }
</span><span class='line'>{ % endcase % }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### Cycle
</span><span class='line'>循环列举
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>{ % cycle 'one', 'two', 'three' % }
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;结果：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;one
</span><span class='line'>two
</span><span class='line'>three
</span><span class='line'>one
</span><span class='line'>&lt;code&gt;
</span><span class='line'>可以通过命名分组：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>{ % cycle &lsquo;group 1&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 1&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 2&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>{ % cycle &lsquo;group 2&rsquo;: &lsquo;one&rsquo;, &lsquo;two&rsquo;, &lsquo;three&rsquo; % }
</span><span class='line'>&lt;code&gt;
</span><span class='line'>结果：
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>one
</span><span class='line'>two
</span><span class='line'>one
</span><span class='line'>two</span></code></pre></td></tr></table></div></figure></p>

<h5>for 循环</h5>

<p>循环集合：
<code>
    { % for item in array % }
      { { item } }
    { % endfor % }
</code>
遍历hash时：item[0]包含键，item[1]包含值
<code>
    { % for item in hash % }
      { { item[0] } }: { { item[1] } }
    { % endfor % }
</code>
for循环时，下列变量可以辅助使用：
<code>
forloop.length      # =&gt; length of the entire for loop
forloop.index       # =&gt; index of the current iteration
forloop.index0      # =&gt; index of the current iteration (zero based)
forloop.rindex      # =&gt; how many items are still left?
forloop.rindex0     # =&gt; how many items are still left? (zero based)
forloop.first       # =&gt; is this the first iteration?
forloop.last        # =&gt; is this the last iteration?
</code>
还有一些变量可以用来处理循环时选择性处理：<br/>
limit:int - 限制遍历个数<br/>
offset:int - 从第n个数开始遍历
<code>
    # array = [1,2,3,4,5,6]
    { % for item in array limit:2 offset:2 % }
      { { item } }
    { % endfor % }
    # results in 3,4
</code>
反序遍历：
<code>
    { % for item in collection reversed % }
    { {item} }
    { % endfor % }
</code>
除了遍历集合，还可以定义一个范围的数字来遍历：
<code>
    # if item.quantity is 4...
    { % for i in (1..item.quantity) % }
      { { i } }
    { % endfor % }
    # results in 1,2,3,4
</code></p>

<h5>变量赋值</h5>

<p>赋值变量：
```
    { % assign name = &lsquo;freestyle&rsquo; % }</p>

<pre><code>{ % for t in collections.tags % }{ % if t == name % }
  &lt;p&gt;Freestyle!&lt;/p&gt;
{ % endif % }{ % endfor % }
</code></pre>

<pre><code>还可以赋值布尔值：
</code></pre>

<pre><code>{ % assign freestyle = false % }

{ % for t in collections.tags % }{ % if t == 'freestyle' % }
  { % assign freestyle = true % }
{ % endif % }{ % endfor % }

{ % if freestyle % }
  &lt;p&gt;Freestyle!&lt;/p&gt;
{ % endif % }
</code></pre>

<pre><code>赋值处理过的数据：可以用capture
</code></pre>

<pre><code>{ % capture attribute_name % }{ { item.title | handleize } }-{ { i } }-color{ % endcapture % }

  &lt;label for="{ { attribute_name } }"&gt;Color:&lt;/label&gt;
  &lt;select name="attributes[{ { attribute_name } }]" id="{ { attribute_name } }"&gt;
    &lt;option value="red"&gt;Red&lt;/option&gt;
    &lt;option value="green"&gt;Green&lt;/option&gt;
    &lt;option value="blue"&gt;Blue&lt;/option&gt;
  &lt;/select&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll的一些全局变量]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll/"/>
    <updated>2014-11-27T13:30:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/27/blog-octopress-jekyll</id>
    <content type="html"><![CDATA[<p><a href="http://jekyllrb.com/docs/variables/">http://jekyllrb.com/docs/variables/</a><br/>
octopress是基于jekyll，所以也可以用这些内容</p>

<h4>Variables</h4>

<p>Jekyll traverses your site looking for files to process. Any files with YAML front matter are subject to processing. For each of these files, Jekyll makes a variety of data available via the Liquid templating system. The following is a reference of the available data.</p>

<h5>Global Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site</p></td>
      <td><p>
          Sitewide information + configuration settings from
          _config.yml. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>page</p></td>
      <td><p>
        Page specific information + the <a href="../frontmatter/">YAML front
        matter</a>. Custom variables set via the YAML Front Matter will be
        available here. See below for details.
      </p></td>
    </tr>
    <tr>
      <td><p>content</p></td>
      <td><p>
        In layout files, the rendered content of the Post or Page being wrapped.
        Not defined in Post or Page files.
      </p></td>
    </tr>
    <tr>
      <td><p>paginator</p></td>
      <td><p>
        When the paginate configuration option is set, this
        variable becomes available for use. 
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Site Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>site.time</p></td>
      <td><p>
        The current time (when you run the jekyll command).
      </p></td>
    </tr>
    <tr>
      <td><p>site.pages</p></td>
      <td><p>
        A list of all Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.posts</p></td>
      <td><p>
        A reverse chronological list of all Posts.
      </p></td>
    </tr>
    <tr>
      <td><p>site.related_posts</p></td>
      <td><p>
        If the page being processed is a Post, this contains a list of up to ten
        related Posts. By default, these are low quality but fast to compute.
        For high quality but slow to compute results, run the
        jekyll command with the --lsi (latent semantic
        indexing) option.
      </p></td>
    </tr>
    <tr>
      <td><p>site.static_files</p></td>
      <td><p>
        A list of all static files (i.e. files not processed by Jekyll's
        converters or the Liquid renderer). Each file has three properties:
        path, modified_time and extname.
      </p></td>
    </tr>
    <tr>
      <td><p>site.html_pages</p></td>
      <td><p>
        A list of all HTML Pages.
      </p></td>
    </tr>
    <tr>
      <td><p>site.collections</p></td>
      <td><p>
        A list of all the collections.
      </p></td>
    </tr>
    <tr>
      <td><p>site.data</p></td>
      <td><p>
        A list containing the data loaded from the YAML files located in the _data directory.
      </p></td>
    </tr>
    <tr>
      <td><p>site.documents</p></td>
      <td><p>
        A list of all the documents in every collection.
      </p></td>
    </tr>
    <tr>
      <td><p>site.categories.CATEGORY</p></td>
      <td><p>
        The list of all Posts in category CATEGORY.
      </p></td>
    </tr>
    <tr>
      <td><p>site.tags.TAG</p></td>
      <td><p>
        The list of all Posts with tag TAG.
      </p></td>
    </tr>
    <tr>
      <td><p>site.[CONFIGURATION_DATA]</p></td>
      <td><p>
        All the variables set via the command line and your
        _config.yml are available through the site
        variable. For example, if you have url: http://mysite.com
        in your configuration file, then in your Posts and Pages it will be
        stored in site.url. Jekyll does not parse changes to
        _config.yml in watch mode, you must restart
        Jekyll to see changes to variables.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Page Variables</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>page.content</p></td>
      <td><p>
        The content of the Page, rendered or un-rendered depending upon
        what Liquid is being processed and what page is.
      </p></td>
    </tr>
    <tr>
      <td><p>page.title</p></td>
      <td><p>
        The title of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.excerpt</p></td>
      <td><p>
        The un-rendered excerpt of the Page.
      </p></td>
    </tr>
    <tr>
      <td><p>page.url</p></td>
      <td><p>
        The URL of the Post without the domain, but
        with a leading slash, e.g.
        /2008/12/14/my-post.html
      </p></td>
    </tr>
    <tr>
      <td><p>page.date</p></td>
      <td><p>
        The Date assigned to the Post. This can be overridden in a Post’s front
        matter by specifying a new date/time in the format
        YYYY-MM-DD HH:MM:SS (assuming UTC), or
        YYYY-MM-DD HH:MM:SS +/-TTTT (to specify a time zone using
        an offset from UTC. e.g. 2008-12-14 10:30:00 +0900).
      </p></td>
    </tr>
    <tr>
      <td><p>page.id</p></td>
      <td><p>
        An identifier unique to the Post (useful in RSS feeds). e.g.
        /2008/12/14/my-post
      </p></td>
    </tr>
    <tr>
      <td><p>page.categories</p></td>
      <td><p>
        The list of categories to which this post belongs. Categories are
        derived from the directory structure above the _posts
        directory. For example, a post at
        /work/code/_posts/2008-12-24-closures.md would have this
        field set to ['work', 'code']. These can also be specified
        in the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.tags</p></td>
      <td><p>
        The list of tags to which this post belongs. These can be specified in
        the <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.path</p></td>
      <td><p>
        The path to the raw post or page. Example usage: Linking back to the
        page or post’s source on GitHub. This can be overridden in the
        <a href="../frontmatter/">YAML Front Matter</a>.
      </p></td>
    </tr>
    <tr>
      <td><p>page.next</p></td>
      <td><p>
        The next post relative to the position of the current post in
        site.posts. Returns nil for the last entry.
      </p></td>
    </tr>
    <tr>
      <td><p>page.previous</p></td>
      <td><p>
        The previous post relative to the position of the current post in
        site.posts. Returns nil for the first entry.
      </p></td>
    </tr>
  </tbody>
</table>


<h5>Paginator</h5>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p>paginator.per_page</p></td>
      <td><p>Number of Posts per page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.posts</p></td>
      <td><p>Posts available for that page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_posts</p></td>
      <td><p>Total number of Posts.</p></td>
    </tr>
    <tr>
      <td><p>paginator.total_pages</p></td>
      <td><p>Total number of Pages.</p></td>
    </tr>
    <tr>
      <td><p>paginator.page</p></td>
      <td><p>The number of the current page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page</p></td>
      <td><p>The number of the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.previous_page_path</p></td>
      <td><p>The path to the previous page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page</p></td>
      <td><p>The number of the next page.</p></td>
    </tr>
    <tr>
      <td><p>paginator.next_page_path</p></td>
      <td><p>The path to the next page.</p></td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress优化]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/11/25/octopress-5/"/>
    <updated>2014-11-25T23:34:33+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/11/25/octopress-5</id>
    <content type="html"><![CDATA[<h4>octopress优化</h4>

<p>能够让octopress在50篇文章下跑进5s，不优化要跑60s左右<br/>
300篇15s左右</p>

<h5>运行过程</h5>

<p>看octopress目录下的Rakefile，里面有generate，preview，watch等。<br/>
输入rake generate是就是按照Rakefile中<code>task :generate do</code>执行的。<br/>
最主要的两条：
<code>
    system "compass compile --css-dir #{source_dir}/stylesheets"
    system "jekyll build"
</code>
第一条是编译css，第二条是生成文章。</p>

<!--more-->


<p>第一条不知道如何优化，略过。<br/>
第二条接着执行到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/commands/build.rb<br/>
文件的init_with_program -> process -> build然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/command.rb文件的process_site然后到<br/>
/usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb文件的process，<br/>
process代码如下：
<code>
    47     def process
    48       reset
    49       read
    50       generate
    51       render
    52       cleanup
    53       write
    54     end
</code>
这里的函数都在这个文件里，主要费时在generate和render。</p>

<h6>1. generate</h6>

<p>generate会执行octopress/plugins目录下的tag_generator.rb和category_generator.rb，<br/>
这两个文件的write_tag_indexes和write_category_indexes分别回构建tag和category的分类首页。<br/>
所以tag和category越多构建越慢。
<code>
    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:255:in `block in post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:254:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:224:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:100:in `write_category_index'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:112:in `block in write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `each'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:111:in `write_category_indexes'
    from /home/kk/kk/github/octopress/plugins/category_generator.rb:141:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:280:in `block in generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:279:in `generate'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:50:in `process'
</code></p>

<h6>2. render</h6>

<pre><code>    from /home/kk/kk/github/octopress/plugins/rubypants.rb:261:in `to_html'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:31:in `post_filter'
    from /home/kk/kk/github/octopress/plugins/octopress_filters.rb:41:in `post_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:249:in `block in pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:248:in `pre_render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/octopress-hooks-2.2.1/lib/octopress-hooks.rb:222:in `do_layout'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/page.rb:122:in `render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:299:in `block in render'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `each'
    from /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb:298:in `render'
</code></pre>

<p>都是慢在octopress/plugins/rubypants.rb的to_html函数。</p>

<h5>优化</h5>

<h6>1、to_html函数的tokenize和gsub很慢。</h6>

<p>to_html函数只是把一些' &ldquo;之类的转成html，试了一下不执行to_html，diff出来差别不大，页面上显示也都还OK。单纯的&lt;在其他地方已经转好了。<br/>
所以octopress/plugins/octopress_filters.rb中不执行to_html</p>

<h6>2、每次计算侧边栏太慢</h6>

<p>所有页面都是按照其layout的格式找对应source/_layout/下的模板来生成的。<br/>
注意post.html和page.html的最后都有 <code>{ { include_array XXX } }</code>, 这就是说每个页面都要运行plugins/include_array.rb中的render(context)来生成侧边栏。<br/>
但是侧边栏应该是(?)都一样的。所以改成隔一定时间计算一次
<code>
     26     @@caltime = 0
     27     @@retstore = ""
     28     def render(context)
     29         if Time.now.to_f - @@caltime &lt; context.registers[:site].config['recaltime']
     30                 return @@retstore;
     31         end
     32         @@caltime = Time.now.to_f
    ...
     58       @@retstore = rtn
</code>
为什么要隔一段时间？因为在preview中有改动任何文件就会重新生成一次，这时侧边栏也要重新计算</p>

<h6>3、减小文件大小</h6>

<p>我的侧边栏有二级目录，整个侧边栏比较大，50篇时已经有20k。所以将侧边栏独立成一个文件，用js来load。<br/>
plugins/include_array.rb中加：
<code>
    59       fp = File.new('sidebar.html', 'w');
    60       fp.puts(rtn);
    61       fp.puts('&lt;script src="http://abcdxyzk.github.io/javascripts/category.js" type="text/javascript"&gt;&lt;/script&gt;');
    62       fp.puts('&lt;script type="text/javascript"&gt; hadOpenDiv();&lt;/script&gt;');
    63       fp.close();
</code>
source/<em>layout/post.html和source/</em>layout/page.html的最后部分改成：
<code>
    35 &lt;aside class="sidebar" id='load_sidebar'&gt;
    36 &lt;/aside&gt;
    37 &lt;script type="text/javascript"&gt;
    38   $('#load_sidebar').load('/sidebar.html');
    39 &lt;/script&gt;
</code>
因为source/index.html里也有 <code>{ { include_array XXX } }</code>，所以不用担心不执行plugins/include_array.rb。<br/>
问题1：就是"最近评论"要从_config.yml中的default_asides:中移到source/index.html中。因为js load进的文件中的document.write不执行了。这也就是为什么source/index.html不采用js load。如果是<code>&lt;aside&gt;</code>中增加div用来load的话，侧边栏缩到底部就没有三列的效果。<br/>
问题2：sidebar.html要写到主目录，source/sidebar.html中用ln软链接到sidebar.html。因为如果在watch状态直接写到source/目录的话，他就会再次认为文件有改变，又重新生成。造成在不断生成的死循环。细节是在Rakefile文件的generate和preview中先加软链接再运行其他
<code>
    56 task :generate do
    57   system('&gt;`pwd`/sidebar.html')
    58   system('ln -f -s `pwd`/sidebar.html `pwd`/source/sidebar.html')
</code></p>

<h5>优化效果</h5>

<p>在文件中加入时间输出代码
<code>
    p "    #{ __FILE__} line:#{__LINE__} time:#{Time.now.to_f}"
</code>
50篇文章，40个tag，61个category，运行如下：
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1416933869.1204205"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1416933870.019113"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1416933870.7509217"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1416933871.8838022"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1416933871.8838577"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1416933872.389736"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1416933872.4271524"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1416933873.8506286"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1416933873.9671116"
    "total = 4.846851825714111"
</code>
total = 4.846851825714111，不优化要60s左右。</p>

<p>300篇
<code>
    kk@kk-laptop:~/kk/github/octopress(source)$ rake generate
    ## Generating Site with Jekyll
    "/home/kk/kk/github/octopress/Rakefile line:62 time:1426179501.0918927"
    identical source/stylesheets/screen.css
    "/home/kk/kk/github/octopress/Rakefile line:64 time:1426179502.0703895"
    Configuration file: /home/kk/kk/github/octopress/_config.yml
                Source: source
           Destination: public
          Generating...
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:110 time:1426179503.376222"
    "    /home/kk/kk/github/octopress/plugins/category_generator.rb line:114 time:1426179508.2033086"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:93 time:1426179508.2033658"
    "    /home/kk/kk/github/octopress/plugins/tag_generator.rb line:97 time:1426179508.3304708"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:297 time:1426179508.3851612"
    "    /usr/local/lib/ruby/gems/2.1.0/gems/jekyll-2.5.1/lib/jekyll/site.rb line:301 time:1426179515.877446"
                        done.
     Auto-regeneration: disabled. Use --watch to enable.
    "/home/kk/kk/github/octopress/Rakefile line:66 time:1426179516.2085445"
    "total = 15.116710424423218"
</code></p>
]]></content>
  </entry>
  
</feed>
