<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~systemtap | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~systemtap/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-10-31T23:58:56+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SystemTap---嵌入C代码]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/01/debug-systemtap-with-c/"/>
    <updated>2015-06-01T15:36:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/01/debug-systemtap-with-c</id>
    <content type="html"><![CDATA[<ul>
<li>访问参数的值是以STAP_ARG_+参数名的形式，返回值<code>STAP_RETVALUE=xxx</code>，这种方式是最新版本的SystemTap中的方式。1.7及更早的版本是通过THIS->+参数名的方式, 返回值<code>THIS-&gt;__returnval=xxx</code></li>
</ul>


<hr />

<p><a href="http://www.4byte.cn/learning/53860.html">http://www.4byte.cn/learning/53860.html</a></p>

<p>  SystemTap支持guru模式，通过-g选项来以这种模式执行SystemTap脚本。在guru模式下，嵌入的C代码在“%{&ldquo;和“%}"标记之间，这些代码会原封不动地放到生成的模块中。嵌入的C代码不仅可以作为函数体，还可以出现在SystemTap描述中（例如函数等），示例如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%{
</span><span class='line'>    #include &lt;linux/in.h&gt;
</span><span class='line'>    #include &lt;linux/ip.h&gt;
</span><span class='line'>%} /&lt;em&gt; &lt;&ndash; top level &lt;/em&gt;/&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;function read_iphdr:long(skb:long)
</span><span class='line'>%{
</span><span class='line'>struct iphdr *iph = ip_hdr((struct sk_buff *)STAP_ARG_skb);
</span><span class='line'>STAP_RETVALUE = (long)iph;
</span><span class='line'>%}
</span><span class='line'>
</span><span class='line'>/* Determines whether an IP packet is TCP, based on the iphdr: */
</span><span class='line'>function is_tcp_packet:long(iphdr)
</span><span class='line'>{
</span><span class='line'>protocol = @cast(iphdr, "iphdr")-&gt;protocol
</span><span class='line'>return (protocol == %{ IPPROTO_TCP %}) /* &lt;-- expression */
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>probe begin {
</span><span class='line'>printf("SystemTap start!\n");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>probe kernel.function("ip_local_deliver") {
</span><span class='line'>iph = read_iphdr(pointer_arg(1));
</span><span class='line'>printf("tcp packet ? %s\n", is_tcp_packet(iph) ? "yes" : "no");
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>在这里read_iphdr函数就是使用嵌入的C代码作为函数体，is_tcp_packet中是作为systemtap辅助函数中的一部分。
</span><span class='line'>
</span><span class='line'>在使用嵌入C代码作为函数体的函数中，访问参数的值是以STAP_ARG_+参数名的形式，这种方式是最新版本的SystemTap中的方式。1.7及更早的版本是通过THIS-&gt;+参数名的方式。CentOS6.4中的SystemTap版本是1.8，所以你如果在SystemTap脚本中仍然使用老的访问方式会报错。同样，最新的设置返回值的方式是STAP_RETVALUE，1.7及更早的版本是THIS-&gt;__retvalue。
</span><span class='line'>
</span><span class='line'>由于在guru模式下，SystemTap对嵌入的C代码没有做任何的处理，所以如果在C代码中出现异常的访问或者其他错误，就会导致内核crash。不过SystemTap提供了kread宏来安全地访问指针，如下所示：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct net_device *dev;
</span><span class='line'>char *name;
</span><span class='line'>dev = kread(&amp;(skb-&gt;dev));
</span><span class='line'>name = kread(&amp;(dev-&gt;name));
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;还有一点要特别注意，所有的SystemTap函数和probe都是在关闭中断下执行，所以在所有嵌入的C代码中都不能睡眠！&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[SystemTap Beginner]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/06/01/debug-systemtap-beginner/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-06-01T15:03:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/06/01/debug-systemtap-beginner&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/kafeiflynn/article/details/6429976"&gt;http://blog.csdn.net/kafeiflynn/article/details/6429976&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;SystemTap&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;应用：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  对管理员，SystemTap可用于监控系统性能，找出系统瓶颈，而对于开发者，可以查看他们的程序运行时在linux系统内核内部的运行情况。主要用于查看内核空间事件信息，对用户空间事件的探测，目前正加紧改进。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;安装&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1、SystemTap的安装及使用需要针对正在使用的内核安装相应的kernel-devel、kernel-debuginfo和kernel-debuginfo-common包，以插入探针。&lt;br/&gt;
</span><span class='line'>2、安装SystemTap和SystemTap-runtime包&lt;br/&gt;
</span><span class='line'>3、使用如下命令测试一下：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    stap -v -e 'probe vfs.read {printf("read performed/n"); exit()}'
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;为目标机产生SystemTap instrumentation:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这样就可以在一台机器上为多种内核产生SystemTap instrumentation，而且目标机上只安装SystemTap-runtime即可。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;操作如下：&lt;br/&gt;
</span><span class='line'>1.在目标机上安装systemtap-runtime RPM包；&lt;br/&gt;
</span><span class='line'>2.使用uname –r查看目标机内核；&lt;br/&gt;
</span><span class='line'>3.在host system上安装SystemTap；&lt;br/&gt;
</span><span class='line'>4.在host system上安装目标机内核及相关RPMs&lt;br/&gt;
</span><span class='line'>5.在host name上运行命令：&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>stap -r kernel_version script -m module_name
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;6.把新产生的模块拷贝到目标机，并运行如下命令：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>staprun module_name.ko
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意：host system和目标机架构及操作系统版本必须一致。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;运行SystemTap脚本&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行stap和staprun需要被授以权限，一般用户需要运行SystemTap，则需要被加入到以下用户组的一个：&lt;br/&gt;
</span><span class='line'>1、stapdev：用stap编译SystemTap脚本成内核模块，并加载进内核；&lt;br/&gt;
</span><span class='line'>2、stapusr：仅能运行staprun加载/lib/modules/kernel_version/systemtap/目录下模块。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;SystemTap Flight Recorder模式&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该模式允许长时间运行SystemTap脚本，但仅focus on 最近的输出，有2个变种：in-memory和file模式，两种情况下SystemTap都作为后台进程运行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;In-memory模式：&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    stap -F iotime.stp
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;一旦脚本启动后，你可以看到以下输出信息以辅助命令重新连到运行中的脚本：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>Disconnecting from systemtap module.
</span><span class='line'>To reconnect, type "staprun -A stap_5dd0073edcb1f13f7565d8c343063e68_19556"
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>当感兴趣的事件发生时，可以重新连接到运行中的脚本，并在内存Buffer中输出最近的数据并持续输出：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>staprun -A stap_5dd0073edcb1f13f7565d8c343063e68_19556
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>内存Buffer默认1MB，可以使用-S选项，例如-S2指定为2MB
</span><span class='line'>&lt;code&gt;
</span><span class='line'>File Flight Recorder
</span><span class='line'>stap -F -o /tmp/pfaults.log -S 1,2  pfaults.stp
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>命令结果输出到/tmp/pfaults.log.[0-9]，每个文件1MB，并且仅保存最近的两个文件，-S指定了第一个参数：每个输出文件大小1MB，第二个参数：仅保留最近的两个文件，systemtap在pfaults.log后面加.[0-9]后缀。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;该命令的输出是systemtap脚本进程ID，使用如下命令可以终止systemtap脚本&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    kill -s SIGTERM 7590
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行</span></code></pre></td></tr></table></div></figure>
    ls –sh /tmp/pfaults.log.*</p>

<pre><code>1020K /tmp/pfaults.log.5    44K /tmp/pfaults.log.6
</code></pre>

<pre><code>
#### SystemTap如何工作

SystemTap的基本工作原理就是：event/handler，运行systemtap脚本产生的加载模块时刻监控事件的发生，一旦发生，内核就调用相关的handler处理。

一运行一个SystemTap脚本就会产生一个SystemTap session：  
1.SystemTap检查脚本以及所使用的相关tapset库；  
2.SystemTap将脚本转换成C语言文件，并运行C语言编译器编译之创建一个内核模块；  
3.SystemTap加载该模块，从而使用所有探针(events和handlers)；  
4.事件发生时，执行相关handlers  
5.一旦SystemTap session停止，则探针被禁止，该内核模块被卸载。  

探针：event及其handler，一个SystemTap脚本可以包含多个探针。

SystemTap脚本以.stp为扩展名，其基本格式如下所示：
</code></pre>

<pre><code>probe event {statements}
</code></pre>

<pre><code>
允许一个探针内多个event，以,隔开，任一个event发生时，都会执行statements，各个语句之间不需要特殊的结束符号标记。而且可以在一个statements block中包含其他的statements block。

函数编写：
</code></pre>

<pre><code>function function_name(arguments) {statements}

probe event {function_name(arguments)}
</code></pre>

<pre><code>
#### SystemTap Event

可大致划分为synchronous和asynchronous。

##### 同步事件：

执行到定位到内核代码中的特定位置时触发event

1.syscall.system_call  
系统调用入口和exit处：syscall.system_call和syscall.system_call.return，比如对于close系统调用：syscall.close和syscall.close.return

2.vfs.file_operation  
vfs.file_operation和vfs.file_operation.return

3.kernel.function("function")  
如：kernel.function(“sys_open”)和kernel.function(“sys_open”).return

可使用*来代表wildcards：
</code></pre>

<pre><code>probe kernel.function("*@net/socket.c") { }
probe kernel.function("*@net/socket.c").return { }
</code></pre>

<pre><code>
代表了net/socket.c中所有函数的入口和exit口。

4.kernel.trace("tracepoint")  
2.6.30及newer为内核中的特定事件定义了instrumentation，入kernel.trace(“kfree_skb”)代表内核中每次网络buffer被释放掉时的event。

5.module("module").function("function")
</code></pre>

<pre><code>probe module("ext3").function("*") { }
probe module("ext3").function("*").return { }
</code></pre>

<pre><code>
系统内核模块多存放在/lib/modules/kernel_version

#### Asynchronous Events

不绑定到内核的特定指令或位置处。包括：  
1、begin：SystemTap session开始时触发，当SystemTap脚本开始运行时触发；  
2、end ：SystemTap session终止时触发；  
3、timer事件：  
</code></pre>

<pre><code>probe timer.s(4)
{
    printf("hello world/n")
}
</code></pre>

<pre><code>
• timer.ms(milliseconds)  
• timer.us(microseconds)  
• timer.ns(nanoseconds)  
• timer.hz(hertz)  
• timer.jiffies(jiffies)

可查看man stapprobes来查看其它支持的events

#### SystemTap Handler/Body

支持的函数：  
1、  printf ("format string/n", arguments)，%s：字符串，%d数字，以 , 隔开；  
2、  tid()：当前线程ID；  
3、  uid()：当前用户ID；  
4、  cpu()：当前CPU号；  
5、  gettimeofday_s()：自从Epoch开始的秒数；  
6、  ctime()将从Unix Epoch开始的秒数转换成date；  
7、  pp()：描述当前被处理的探针点的字符串；  
8、  thread_indent()：  
</code></pre>

<pre><code>probe kernel.function("*@net/socket.c")
{
    printf ("%s -&gt; %s/n", thread_indent(1), probefunc())
}

probe kernel.function("*@net/socket.c").return
{
    printf ("%s &lt;- %s/n", thread_indent(-1), probefunc())
}

0 ftp(7223): -&gt; sys_socketcall
1159 ftp(7223):  -&gt; sys_socket
2173 ftp(7223):   -&gt; __sock_create
2286 ftp(7223):    -&gt; sock_alloc_inode
2737 ftp(7223):    &lt;- sock_alloc_inode
3349 ftp(7223):    -&gt; sock_alloc
3389 ftp(7223):    &lt;- sock_alloc
3417 ftp(7223):   &lt;- __sock_create
4117 ftp(7223):   -&gt; sock_create
4160 ftp(7223):   &lt;- sock_create
4301 ftp(7223):   -&gt; sock_map_fd
4644 ftp(7223):    -&gt; sock_map_file
4699 ftp(7223):    &lt;- sock_map_file
4715 ftp(7223):   &lt;- sock_map_fd
4732 ftp(7223):  &lt;- sys_socket
4775 ftp(7223): &lt;- sys_socketcall
</code></pre>

<pre><code>
  函数thread_indent()只有1个参数：代表对线程的”indentation counter”的增减数，即系统调用显示的步数，返回字符串(自从第一次调用thread_indent()以来的描述：进程名(进程ID))

9、name  
标记系统调用的名字，仅用于syscall.system_call中。

10、target()  
与stap script -x process ID or stap script -c command联合使用，如果想在脚本中获得进程ID或命令可以如此做
</code></pre>

<pre><code>probe syscall.* {
    if (pid() == target())
        printf("%s/n", name)
}
</code></pre>

<pre><code>
#### SystemTap Handler构造

##### 变量
1、不必事先声明，直接使用即可，由SystemTap自动判断其属于string还是integer，整数则默认为0，默认在probe中声明的是local变量  
2、在各个probe之间共享的变量使用global声明  
</code></pre>

<pre><code>global count_jiffies, count_ms
probe timer.jiffies(100) { count_jiffies ++ }
probe timer.ms(100) { count_ms ++ }
probe timer.ms(12345)
{
    hz=(1000*count_jiffies) / count_ms
    printf ("jiffies:ms ratio %d:%d =&gt; CONFIG_HZ=%d/n",
        count_jiffies, count_ms, hz)
    exit()
}
</code></pre>

<pre><code>
##### Target变量

Probe event可以映射到代码的实际位置，如kernel.function(“function”)、kernel.statement(“statement”)，这允许使用target变量来记录代码中指定位置处可视变量的值。

运行如下命令：可以显示指定vfs_read处可视target变量
</code></pre>

<pre><code>stap -L 'kernel.function("vfs_read")'
</code></pre>

<pre><code>
显示
</code></pre>

<pre><code>kernel.function("vfs_read@fs/read_write.c:277") $file:struct file* $buf:char* $count:size_t

$pos:loff_t*
</code></pre>

<pre><code>
每个target变量以$开头：变量类型。如果是结构体类型，则SystemTap可以使用-&gt;来查看其成员。对基本类型，integer或string，SystemTap有函数可以直接读取address处的值，如：
</code></pre>

<pre><code># 好像有时对于小于8位的函数，会取出8为长度的值
kernel_char(address)
Obtain the character at address from kernel memory.

kernel_short(address)
Obtain the short at address from kernel memory.

kernel_int(address)
Obtain the int at address from kernel memory.

kernel_long(address)
Obtain the long at address from kernel memory

kernel_string(address)
Obtain the string at address from kernel memory.

kernel_string_n(address, n)
Obtain the string at address from the kernel memory and limits the string to n bytes.
</code></pre>

<pre><code>
##### 打印target变量
</code></pre>

<pre><code>$$vars：类似sprintf("parm1=%x ... parmN=%x var1=%x ... varN=%x", parm1, ..., parmN, var1, ..., varN)，目的是打印probe点处的每个变量；

$$locals：$$vars子集，仅打印local变量；

$$parms：$$vars子集，仅包含函数参数；

$$return：仅在return probes存在，类似sprintf("return=%x", $return)，如果没有返回值，则是空串
</code></pre>

<pre><code>
例子如下：
</code></pre>

<pre><code>stap -e 'probe kernel.function("vfs_read") {printf("%s/n", $$parms); exit(); }'
</code></pre>

<pre><code>
函数vfs_read有4个参数：file、buf、count和pos，输出如下：
</code></pre>

<pre><code>file=0xffff8800b40d4c80 buf=0x7fff634403e0 count=0x2004 pos=0xffff8800af96df48
</code></pre>

<pre><code>如果你想知道数据结构里面的成员信息，可以在”$$params”后面加一个”$”，如下所示：
</code></pre>

<pre><code>stap -e 'probe kernel.function("vfs_read") {printf("%s/n", $$parms$); exit(); }'
</code></pre>

<pre><code>输出如下：
</code></pre>

<pre><code>file={.f_u={...}, .f_path={...}, .f_op=0xffffffffa06e1d80, .f_lock={...}, .f_count={...}, .f_flags=34818, buf="" count=8196 pos=-131938753921208
</code></pre>

<pre><code>
仅一个”$”表示，不展开数据结构域成员，如想展开，则需使用”$$”
</code></pre>

<pre><code>stap -e 'probe kernel.function("vfs_read") {printf("%s/n", parms); exit(); }'
</code></pre>

<pre><code>
输出受限于最大字符串大小：
</code></pre>

<pre><code>file={.f_u={.fu_list={.next=0xffff8801336ca0e8, .prev=0xffff88012ded0840}, .fu_rcuhead={.next=0xffff8801336ca0e8
</code></pre>

<pre><code>
##### 强制类型转换

大多数情况下，SystemTap都可以从debuginfo中获得变量类型，但对于代码中void指针则debuginfo中类型信息不可用，同样probe handler里面的类型信息在function里面也不可用，怎么办呢？

SystemTap函数参数使用long来代替typed pointer，SystemTap的@cast操作可以指出对象正确类型：
</code></pre>

<pre><code>function task_state:long (task:long)
{
    return @cast(task, "task_struct", "kernel&lt;linux/sched.h&gt;")-&gt;state
}
</code></pre>

<pre><code>
第一个参数是指向对象的指针， 第二个参数是将该对象(参数1)要强制类型转换成的类型，第三个参数指出类型定义的出处，是可选的。

##### 检查Target变量可用性

随着代码运行，变量可能失效，因此需要用@defined来判断该变量是否可用：
</code></pre>

<pre><code>probe vm.pagefault = kernel.function("__handle_mm_fault@mm/memory.c") ?,

kernel.function("handle_mm_fault@mm/memory.c") ?
{
    name = "pagefault"
    write_access = (@defined($flags) ? $flags &amp; FAULT_FLAG_WRITE : $write_access)
    address = $address
}
</code></pre>

<pre><code>
##### 条件语句
</code></pre>

<pre><code>if (condition)
    statement1
else
    statement2
</code></pre>

<pre><code></code></pre>

<pre><code>global countread, countnonread
probe kernel.function("vfs_read"),kernel.function("vfs_write")
{
    if (probefunc()=="vfs_read")
        countread ++
    else
        countnonread ++
}

probe timer.s(5) { exit() }

probe end
{
    printf("VFS reads total %d/n VFS writes total %d/n", countread, countnonread)
}
</code></pre>

<pre><code>
##### 循环语句
</code></pre>

<pre><code>while (condition)
    statement

for (initialization; conditional; increment) statement
</code></pre>

<pre><code>
##### 比较：
</code></pre>

<pre><code>==、&gt;=、&lt;=、!=
</code></pre>

<pre><code>
##### 命令行参数：
使用$标志着希望输入的是integer类型命令行参数，@：string
</code></pre>

<pre><code>probe kernel.function(@1) { }
probe kernel.function(@1).return { }
</code></pre>

<pre><code>
#### 关联数组

关联数组一般在multiple probes里面处理，所以必须声明为global，不管是在一个还是多个probes里面用，要读取数组成员值，可以：
</code></pre>

<pre><code>array_name[index_expression]
</code></pre>

<pre><code>如下所示：
</code></pre>

<pre><code>foo["tom"] = 23
foo["dick"] = 24
foo["harry"] = 25
</code></pre>

<pre><code>
一个索引可以包含最多9个索引表达式，用 , 隔开：
</code></pre>

<pre><code>device[pid(),execname(),uid(),ppid(),"W"] = devname
</code></pre>

<pre><code>
##### SystemTap的数组操作

###### 赋值：
</code></pre>

<pre><code>array_name[index_expression] = value
</code></pre>

<pre><code>例子：索引和值可以使用handler function：
</code></pre>

<pre><code>foo[tid()] = gettimeofday_s()
</code></pre>

<pre><code>
每次触发这个语句，多次后就会构成一个关联数组，如果tid()返回值在foo索引中已有一个，则用新值代替旧值。

###### 读取数组值：
</code></pre>

<pre><code>delta = gettimeofday_s() - foo[tid()]
</code></pre>

<pre><code>
如果无法找到指定”索引”对应的值，则数组读返回0(int)或null/empty值(string)

###### 增加关联数组值
</code></pre>

<pre><code>array_name[index_expression] ++
</code></pre>

<pre><code>
处理数组的多个成员：
</code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname()] ++
}

probe timer.s(3)
{
    foreach (count in reads)
    printf("%s : %d /n", count, reads[count])
}
</code></pre>

<pre><code>
这个foreach无序打印所有reads数组值，如果想升序/降序，则需要使用升序(+)、降序(-)，也可以限制处理的数组数目：
</code></pre>

<pre><code>probe timer.s(3)
{
    foreach (count in reads- limit 10)
    printf("%s : %d /n", count, reads[count])
}
</code></pre>

<pre><code>
##### Clearing/Deleting数组和数组成员
</code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname()] ++
}

probe timer.s(3)
{
    foreach (count in reads)
    printf("%s : %d /n", count, reads[count])

    delete reads
}
</code></pre>

<pre><code>
使用delete操作来删除数组成员或整个数组。
</code></pre>

<pre><code>global reads, totalreads
probe vfs.read
{
    reads[execname()] ++
    totalreads[execname()] ++
}

probe timer.s(3)
{
    printf("=======/n")
    foreach (count in reads-)
        printf("%s : %d /n", count, reads[count])
    delete reads
}

probe end
{
    printf("TOTALS/n")
    foreach (total in totalreads-)
    printf("%s : %d /n", total, totalreads[total])
}
</code></pre>

<pre><code>
在if语句中使用数组：
</code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname()] ++
}

probe timer.s(3)
{
    printf("=======/n")
    foreach (count in reads-)
    if (reads[count] &gt;= 1024)
        printf("%s : %dkB /n", count, reads[count]/1024)
    else
        printf("%s : %dB /n", count, reads[count])
}
</code></pre>

<pre><code>
##### 检查成员

可以检查是否一个指定健是数组键值：
</code></pre>

<pre><code>if([index_expression] in array_name) statement
</code></pre>

<pre><code></code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname()] ++
}

probe timer.s(3)
{
    printf("=======/n")
    foreach (count in reads+)
        printf("%s : %d /n", count, reads[count])
    if(["stapio"] in reads) {
        printf("stapio read detected, exiting/n")
        exit()
    }
}
</code></pre>

<pre><code>
##### 计算统计集合

统计集合用于收集数值的统计信息，用于计算新值
</code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname()] &lt;&lt;&lt; count
}
</code></pre>

<pre><code>
操作符&lt;&lt;&lt;用于将count返回的值存放在read数组中execname()相关的值中，即一个键值关联多个相关值。

为计算统计信息，使用@extractor(variable/array index expression)，extractor可以是如下integer extractor：
</code></pre>

<pre><code>count：@count(writes[execname()])返回存放在writes数组中某单一键值对应的值数目；
sum：@sum(writes[execname()])返回在writes数组中某单一键值对应的值的和
min：最小值
max：最大值
avg：variable/array作为索引的统计集合中数据的平均值
</code></pre>

<pre><code></code></pre>

<pre><code>global reads
probe vfs.read
{
    reads[execname(),pid()] &lt;&lt;&lt; 1
}

probe timer.s(3)
{
    foreach([var1,var2] in reads)
    printf("%s (%d) : %d /n", var1, var2, @count(reads[var1,var2]))
}
</code></pre>

<p>```</p>

<h4>Tapsets</h4>

<p>Tapsets是脚本库，里面预写好了probes和functions可以被SystemTap脚本调用，tapsets也使用.stp作为后缀，默认位于：/usr/share/systemtap/tapset，但无法直接运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ubuntu安装systemtap]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/04/28/debug-ubuntu-stap/"/>
    <updated>2015-04-28T14:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/04/28/debug-ubuntu-stap</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/ustc_dylan/article/details/7079876">http://blog.csdn.net/ustc_dylan/article/details/7079876</a></p>

<h4>1. 从源安装systemtap</h4>

<pre><code>    $ sudo apt-get install systemtap
</code></pre>

<h4>2. 安装kernel-debug-info</h4>

<p>由于ubuntu 桌面版默认没有安装kernel-debug-info，所以安装了systemtap后仍然不能够追踪内核信息，因此需要手动安装kernel-debug-info包。</p>

<h5>（1）查看当前内核版本</h5>

<pre><code>    $ uname -a
    Linux kk-desktop 2.6.32-73-generic #141-Ubuntu SMP Tue Mar 10 17:15:10 UTC 2015 x86_64 GNU/Linux
</code></pre>

<h5>（2）下载对应内核版本的debug-info package</h5>

<p><a href="http://ddebs.ubuntu.com/pool/main/l/linux/">http://ddebs.ubuntu.com/pool/main/l/linux/</a></p>

<p><a href="http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-2.6.32-73-generic-dbgsym_2.6.32-73.141_amd64.ddeb">http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-2.6.32-73-generic-dbgsym_2.6.32-73.141_amd64.ddeb</a></p>

<h4>3. 安装kernel-debug-info</h4>

<pre><code>    $ sudo dpkg -i linux-image-2.6.32-73-generic-dbgsym_2.6.32-73.141_amd64.ddeb
</code></pre>

<p>经过以上安装配置后，就可以跟踪监控内核信息了，但是现在还不能跟踪linux内核模块的信息，因为，systemtap对linux内核模块的跟踪是通过libelf库来查找
/usr/lib/debug目录下以.ko.dedug结尾的模块，但是linux发行版通常将linux模块的扩展名修改为.ko。</p>

<h4>4. 安装elfutils并进行相应配置</h4>

<pre><code>    $ sudo apt-get install elfutils
</code></pre>

<pre><code>    # 这些似乎不用
    for file in `find /usr/lib/debug-name'*.ko' -print`
    do
        buildid=`eu-readelf-n $file| grep Build.ID:| awk '{print $3}'`
        dir=`echo $buildid| cut-c1-2`
        fn=`echo $buildid| cut-c3-`
        rm -fr /usr/lib/debug/.build-id
        mkdir -p/usr/lib/debug/.build-id/$dir
        ln -s $file/usr/lib/debug/.build-id/$dir/$fn
        ln -s $file/usr/lib/debug/.build-id/$dir/${fn}.debug
    done
</code></pre>

<h4>5. 写个例子测试下</h4>

<pre><code>    $ sudo stap -ve 'probe begin { log("hello world") exit() }'
</code></pre>

<p>如果能够打印出hello world，说明安装配置成功!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[systemtap article]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article/"/>
    <updated>2013-10-28T16:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/28/debug-stap-article</id>
    <content type="html"><![CDATA[<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html">http://wenku.baidu.com/view/9045426048d7c1c708a1452d.html</a></p>

<p><a href="http://www.cnblogs.com/hazir/p/systemtap_introduction.html">http://www.cnblogs.com/hazir/p/systemtap_introduction.html</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/WarStories">https://sourceware.org/systemtap/wiki/WarStories</a></p>

<p><a href="http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html">http://www.cnblogs.com/wangkangluo1/archive/2012/06/26/2562971.html</a></p>

<p><a href="http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html">http://www.ibm.com/developerworks/cn/linux/l-systemtap/index.html</a></p>

<p><a href="http://blog.yufeng.info/archives/855">http://blog.yufeng.info/archives/855</a></p>

<p><a href="http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml">http://www.360doc.com/content/12/0523/15/7982302_213133871.shtml</a></p>

<p><a href="https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps">https://sourceware.org/systemtap/wiki/AddingUserSpaceProbingToApps</a></p>

<p><a href="http://www.docin.com/p-610001474.html">http://www.docin.com/p-610001474.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-7585066-id-2048719.html">http://blog.chinaunix.net/uid-7585066-id-2048719.html</a></p>

<p><a href="http://blog.chinaunix.net/uid-20568790-id-1632313.html">http://blog.chinaunix.net/uid-20568790-id-1632313.html</a></p>

<p>wiki翻译</p>

<p><a href="http://blog.csdn.net/linyt/article/details/5204841">http://blog.csdn.net/linyt/article/details/5204841</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何知道文件被那个进程写]]></title>
    <link href="http://abcdxyzk.github.io/blog/2013/10/10/debug-stap-inodewatch/"/>
    <updated>2013-10-10T16:27:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2013/10/10/debug-stap-inodewatch</id>
    <content type="html"><![CDATA[<p>一个文件正在被进程写 我想查看这个进程 文件一直在增大 找不到谁在写 使用lsof也没找到</p>

<p>这个问题挺有普遍性的，解决方法应该很多，这里我给大家提个比较直观的方法。</p>

<p>linux下每个文件都会在某个块设备上存放，当然也都有相应的inode, 那么透过vfs.write我们就可以知道谁在不停的写入特定的设备上的inode。</p>

<p>幸运的是systemtap的安装包里带了inodewatch.stp，位于/usr/local/share/doc/systemtap/examples/io目录下，就是用来这个用途的。</p>

<p>我们来看下代码：</p>

<p>$ cat inodewatch.stp
```
    #! /usr/bin/env stap</p>

<pre><code>probe vfs.write, vfs.read
{
    # dev and ino are defined by vfs.write and vfs.read
    if (dev == MKDEV($1,$2) # major/minor device
        &amp;&amp; ino == $3)
    printf ("%s(%d) %s 0x%x/%u\n",
        execname(), pid(), probefunc(), dev, ino)
}
</code></pre>

<pre><code>这个脚本的使用方法如下： stap  inodewatch.stp major minor ino

下面我们构造个场景： dd不停的写入一个文件，查出这个文件的ino, 以及它所在设备的major, minor, 运行stap脚本就可以得到答案。

场景交代好了，我们来演示下：
</code></pre>

<pre><code>$ pwd
/home/chuba
$ df
Filesystem           1K-blocks      Used Available Use% Mounted on
...
/dev/sdb1            1621245336 825209568 713681236  54% /home
...
$ ls -al /dev/sdb1
brw-rw---- 1 root disk 8, 17 Oct 24 11:22 /dev/sdb1 
$ rm -f test.dat &amp;&amp; dd if=/dev/zero of=test.dat
^C9912890+0 records in
9912890+0 records out
5075399680 bytes (5.1 GB) copied, 26.8189 s, 189 MB/s
</code></pre>

<pre><code>这个终端模拟文件的不停写入，同时在另外一个终端查验谁干的。这里我们已经知道设备的major/minor为8/17
</code></pre>

<pre><code>$ stat -c '%i' test.dat
25337884
$ sudo stap /usr/local/share/doc/systemtap/examples/io/inodewatch.stp 8 17 25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
dd(740) vfs_write 0x800011/25337884
...
</code></pre>

<p>```
看到了吧，dd是罪魁祸首，pid是740</p>
]]></content>
  </entry>
  
</feed>
