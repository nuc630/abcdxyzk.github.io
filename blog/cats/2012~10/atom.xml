<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2012~10 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2012~10/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2016-05-11T20:15:01+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eclipse生成jar包]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar/"/>
    <updated>2012-10-29T11:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/29/lang-java-eclipse-jar</id>
    <content type="html"><![CDATA[<h4>第一：普通类导出jar包</h4>

<p>普通类就是指此类包含main方法，并且没有用到别的jar包。<br/>
1.在eclipse中选择你要导出的类或者package，右击，选择Export子选项；<br/>
2.在弹出的对话框中，选择java文件&mdash;选择JAR file，单击next；<br/>
3.在JAR file后面的文本框中选择你要生成的jar包的位置以及名字，注意在Export generated class files and resources和Export java source files and resources前面打上勾，单击next; <br/>
4.单击两次next按钮，到达JAR Manifest Specification。注意在最底下的Main class后面的文本框中选择你的jar包的入口类。单击Finish，完成。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>

<h4>第二、你所要导出的类里边用到了别的jar包。</h4>

<p>比如说你写的类连接了数据库，用到数据库驱动包oracl.jar.。<br/>
1.先把你要导出的类按照上面的步骤导出形成jar包，比如叫test.jar<br/>
2.新建一个文件夹main，比如在D盘根目录下；<br/>
3.把test.jar和oracl.jar拷贝到main文件下，右击test.jar，解压到当前文件夹。把META-INF\MANIFEST.MF剪切到另外一个地方 （比如是桌面！） ；<br/>
4.右击oracl.jar，解压到当前文件夹。<br/>
5.在dos环境下，进入到D盘的main文件夹下，执行 jar cvfm new.jar meta-inf/manifest.mf .，不要忘了最后面的点。<br/>
6.用压缩工具打开你新生成的new.jar，用你放在桌面的META-INF\MANIFEST.MF覆盖new.jar原有。</p>

<p>运行 java -jar 名字.jar，检测运行是否正确。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计git提交行数的脚本]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines/"/>
    <updated>2012-10-16T14:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/16/tools-git-count-lines</id>
    <content type="html"><![CDATA[<p>可以保存为count.sh运行 ./count.sh your_name
```
    #!/bin/sh
    insert=0
    delete=0
    git log&ndash;author=$1&ndash;shortstat&ndash;pretty=format:&ldquo;&rdquo;|sed/^$/d >.tmp.count</p>

<pre><code>whilereadline ;do
current=`echo$line|awk-F',''{printf $2}'|awk'{printf $1}'`
insert=`expr$insert+ $current`
current=`echo$line|awk-F',''{printf $3}'|awk'{printf $1}'`
delete=`expr$delete+ $current`
done&lt;.tmp.count

rm .tmp.count
echo$1$insertinsertions, $deletedeletions
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[异或值最大]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/11/alg-xor-or-not/"/>
    <updated>2012-10-11T11:43:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/11/alg-xor-or-not</id>
    <content type="html"><![CDATA[<p><a href="http://acm.hust.edu.cn:8080/judge/problem/viewProblem.action?id=18669">http://acm.hust.edu.cn:8080/judge/problem/viewProblem.action?id=18669</a></p>

<p><a href="http://acm.sgu.ru/problem.php?contest=0&amp;problem=275">http://acm.sgu.ru/problem.php?contest=0&amp;problem=275</a></p>

<h4>275. To xor or not to xor</h4>

<p>time limit per test: 0.5 sec.<br/>
memory limit per test: 65536 KB</p>

<p>input: standard<br/>
output: standard</p>

<p>The sequence of non-negative integers  A1, A2, &hellip;, AN is given. You are to find some subsequence Ai1, Ai2, &hellip;, Aik(1 &lt;= i1&lt; i2&lt; &hellip; &lt; ik&lt;= N) such, that Ai1XOR Ai2XOR &hellip; XOR Aikhas a maximum value.</p>

<h5>Input</h5>

<p>The first line of the input file contains the integer number N (1 &lt;= N &lt;= 100). The second line contains the sequence A1, A2, &hellip;, AN (0 &lt;= Ai &lt;= 10<sup>18</sup>).</p>

<h5>Output</h5>

<p>Write to the output file a single integer number &ndash; the maximum possible value of Ai1XOR Ai2XOR &hellip; XOR Aik.</p>

<h5>Sample test(s)</h5>

<h5>Input</h5>

<p>3
11 9 5</p>

<h5>Output</h5>

<p>14</p>

<p>从n个数中选出若干个使得异或的值最大</p>

<pre><code>    #include&lt;stdio.h&gt;
    #include&lt;iostream&gt;
    #include&lt;queue&gt;
    using namespace std;
    priority_queue&lt;__int64&gt; q;
    int main() {
        int n;
        __int64 ans, pre, i;
        while (scanf("%d", &amp;n) != EOF) {
            while (n--) {
                scanf("%I64d", &amp;i);
                q.push(i);
            }
            ans = 0;
            pre = 0;
            while (!q.empty()) {
                i = q.top();
                q.pop();
                if ((pre ^ i) != 0 &amp;&amp; (pre ^ i) &lt; pre &amp;&amp; (pre ^ i) &lt; i) {
                    q.push(pre ^ i);
                } else {
                    if ((ans ^ i) &gt; ans) {
                        ans ^= i;
                    }
                    pre = i;
                }
            }
            printf("%I64d\n", ans);
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分图匹配, 二分图的最大独立集]]></title>
    <link href="http://abcdxyzk.github.io/blog/2012/10/11/alg-hungary/"/>
    <updated>2012-10-11T11:35:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2012/10/11/alg-hungary</id>
    <content type="html"><![CDATA[<h5>POJ 3692 Kindergarten（二分图匹配）</h5>

<pre><code>Kindergarten
Time Limit: 2000MS         Memory Limit: 65536K
Total Submissions: 3866        Accepted: 1832

Description

In a kindergarten, there are a lot of kids. All girls of the kids know each other and all boys also know each other. In addition to that, some girls and boys know each other. Now the teachers want to pick some kids to play a game, which need that all players know each other. You are to help to find maximum number of kids the teacher can pick.

Input

The input consists of multiple test cases. Each test case starts with a line containing three integers
G, B (1 ≤ G, B ≤ 200) and M (0 ≤ M ≤ G × B), which is the number of girls, the number of boys and
the number of pairs of girl and boy who know each other, respectively.
Each of the following M lines contains two integers X and Y (1 ≤ X≤ G,1 ≤ Y ≤ B), which indicates that girl X and boy Y know each other.
The girls are numbered from 1 to G and the boys are numbered from 1 to B.

The last test case is followed by a line containing three zeros.

Output

For each test case, print a line containing the test case number( beginning with 1) followed by a integer which is the maximum number of kids the teacher can pick.

Sample Input

2 3 3
1 1
1 2
2 3
2 3 5
1 1
1 2
2 1
2 2
2 3
0 0 0

Sample Output

Case 1: 3
Case 2: 4

Source
2008 Asia Hefei Regional Contest Online by USTC
</code></pre>

<p>幼儿园有g个女孩和b个男孩，同性之间互相认识，而且男孩和女孩之间有的也互相认识。现在要选出来最多的孩子，他们之间都互相认识。</p>

<p>一道基础的二分图最大独立集问题。<br/>
二分图的最大独立集 = n-最小覆盖集 = n-完美匹配数。</p>

<p>所以就转化成了二分图匹配，用匈牙利算法实现即可。</p>

<pre><code>    /*
    POJ 3692
    反过来建图，建立不认识的图，就变成求最大独立集了。
    */
    #include&lt;stdio.h&gt;
    #include&lt;iostream&gt;
    #include&lt;string.h&gt;
    #include&lt;algorithm&gt;
    using namespace std;

    /* **************************************************************************
    //二分图匹配（匈牙利算法的DFS实现）
    //初始化：g[][]两边顶点的划分情况
    //建立g[i][j]表示i-&gt;j的有向边就可以了，是左边向右边的匹配
    //g没有边相连则初始化为0
    //uN是匹配左边的顶点数，vN是匹配右边的顶点数
    //调用：res=hungary();输出最大匹配数
    //优点：适用于稠密图，DFS找增广路，实现简洁易于理解
    //时间复杂度:O(VE)
    //***************************************************************************/
    //顶点编号从0开始的
    const int MAXN=510;
    int uN,vN;//u,v数目
    int g[MAXN][MAXN];
    int linker[MAXN];
    bool used[MAXN];
    bool dfs(int u)//从左边开始找增广路径
    {
        int v;
        for(v=0;v&lt;vN;v++)//这个顶点编号从0开始，若要从1开始需要修改
            if(g[u][v]&amp;&amp;!used[v])
            {
                used[v]=true;
                if(linker[v]==-1||dfs(linker[v]))
                {//找增广路，反向
                    linker[v]=u;
                    return true;
                }
            }
        return false;//这个不要忘了，经常忘记这句
    }
    int hungary()
    {
        int res=0;
        int u;
        memset(linker,-1,sizeof(linker));
        for(u=0;u&lt;uN;u++)
        {
            memset(used,0,sizeof(used));
            if(dfs(u)) res++;
        }
        return res;
    }

    int main()
    {
        int m;
        int u,v;
        int iCase=0;
        while(scanf("%d%d%d",&amp;uN,&amp;vN,&amp;m)!=EOF)
        {
            iCase++;
            if(uN==0&amp;&amp;vN==0&amp;&amp;m==0)break;
            for(int i=0;i&lt;uN;i++)
                for(int j=0;j&lt;vN;j++)
                    g[i][j]=1;
            while(m--)
            {
                scanf("%d%d",&amp;u,&amp;v);
                u--;
                v--;
                g[u][v]=0;
            }
            printf("Case %d: %d\n",iCase,uN+vN-hungary());
        }
        return 0;
    }
</code></pre>
]]></content>
  </entry>
  
</feed>
