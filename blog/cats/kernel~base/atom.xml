<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-21T17:24:08+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TREE RCU实现]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu/"/>
    <updated>2015-06-02T17:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/junguo/article/details/8258231">http://blog.csdn.net/junguo/article/details/8258231</a></p>

<p><a href="http://blog.csdn.net/junguo/article/details/8258261">http://blog.csdn.net/junguo/article/details/8258261</a></p>

<p><a href="http://blog.csdn.net/junguo/article/details/8268277">http://blog.csdn.net/junguo/article/details/8268277</a></p>

<hr />

<h3>TREE RCU实现之一 —— 数据结构</h3>

<h4>代码分布</h4>

<p>在分析代码之前， 先看看代码的分布情况。RCU实现的代码包含在下列一些文件中，此处用到的是linux 3.6.4的代码。</p>

<p>&lt; include/linux/rcupdate.h >  RCU实现的头文件，所有使用RCU的代码都需要包含它<br/>
&lt; include/rcutree.h >  包含rcupdate.h中没有包含的函数声明。<br/>
&lt; include/rcutiny.h >  包含rcupdate.h中没有包含的函数声明。<br/>
&lt; kernel/rcupdate.c >  包括一些RCU实现的基础函数的实现。<br/>
&lt; kernel/rcutree.h >  包含Tree RCU用到的结构信息，TREE_RCU将所有的CPU组织成一颗树，通过层次结构来判别进程是否通过了宽限期，这种方式适用于多个CPU的系统。<br/>
&lt; kernel/rcutree.c >  包含Tree RCU的主要实现代码。<br/>
&lt; kernel/rcutree_plugin.h >  其实也是TREE RCU实现的一部分。主要包含了抢入式TreeRCU的代码。适用于抢入式的系统，抢入式的系统适用于需要低延迟的桌面或者嵌入式系统。<br/>
&lt; kernel/rcutiny.c >  Tiny RCU的主要实现代码，TINY_RCU适用于单个CPU，尤其是嵌入式操作系统。<br/>
&lt; kernel/rcutiny_plugin.h >  主要包含了抢入式Tiny RCU的代码<br/>
&lt; kernel/rcu.h >  定义了debug的接口，实现了<code>__rcu_reclaim</code>。<br/>
&lt; kernel/rcutorture.c>  对RCU进行稳定性测试的代码，通过配置CONFIG_RCU_TORTURE_TEST，可以在系统启动的时候运行稳定性测试。<br/>
&lt; kernel/rcutree_trace.c>  通过配置CONFIG_RCU_TRACE，可以记录RCU的运行信息。<br/>
&lt; include/trace/events/rcu.h>  为rcutree_trace.c定义的头文件。</p>

<h4>RCU处理的基本流程</h4>

<p>RCU实现的关键集中在宽限期的处理上，这个过程需要保证销毁对象前，当前系统中所有CPU上运行的进程都通过了静止状态（quiescent state）。</p>

<p>  1， 程序调用call_rcu，将要删除的对象保存起来。并标记或者开始一个宽限期（同一时间只能运行一个宽限期，所以当已经有宽限期在运行的时候，其它的宽限期必须等待）。</p>

<p>  2， 在读取数据开始和结尾处增加 rcu_read_lock 和 rcu_read_unlock来标记读过程。为了保证删除过程知道读过程的结束，在非抢占式RCU实现中是在rcu_read_lock开始处禁止进程抢占。这样做就可以保证再运行下一次进程切换的时候，读过程已经结束。其实系统也不会去统计各个CPU上是否存在过读线程，所以所有的CPU都会在进程切换的时候通知系统它处于进制状态。当所有的CPU都通过静止状态的时候，系统就会标记它通过了一个宽限期。</p>

<p>  3，由于一个宽限期结束的时候，只有最后一个通过静止状态的CPU知道当前的宽限期已经结束，它并不会去通知其它CPU；同时出于性能考虑，系统也不会在宽限期结束后，马上去执行销毁过程。所以每个CPU都有一个固定的函数去检测是否有等待执行的宽限期，如果没有特别紧急的任务时，会去执行这些过程。</p>

<p>接下来，要分析Tree RCU的实现，先来看看它提供的一些接口函数。</p>

<p>  1， call_rcu  与 synchronize_rcu都是删除对象时调用的函数。call_rcu将数据提交后会返回，而synchronize_rcu会调用call_rcu，并一直等待对象被删除后才返回。还有call_rcu_bh与synchronize_rcu_bh等接口函数，会在后续讲述。</p>

<p>  2，rcu_read_lock 和 rcu_read_unlock</p>

<p>&lt;linux/rcuupdate.h>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline void __rcu_read_lock(void)
</span><span class='line'>{
</span><span class='line'>    preempt_disable();
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void __rcu_read_unlock(void)
</span><span class='line'>{
</span><span class='line'>preempt_enable();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void rcu_read_lock(void)
</span><span class='line'>{
</span><span class='line'>__rcu_read_lock();
</span><span class='line'>__acquire(RCU);
</span><span class='line'>rcu_lock_acquire(&amp;rcu_lock_map);
</span><span class='line'>rcu_lockdep_assert(!rcu_is_cpu_idle(),
</span><span class='line'>        "rcu_read_lock() used illegally while idle");
</span><span class='line'>}
</span><span class='line'>static inline void rcu_read_unlock(void)
</span><span class='line'>{
</span><span class='line'>rcu_lockdep_assert(!rcu_is_cpu_idle(),
</span><span class='line'>        "rcu_read_unlock() used illegally while idle");
</span><span class='line'>rcu_lock_release(&amp;rcu_lock_map);
</span><span class='line'>__release(RCU);
</span><span class='line'>__rcu_read_unlock();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_read_lock与rcu_read_unlock在非抢占式下的实现比较简单就是 preempt_disable与preempt_enable。这样做的目的是当调用schedule的时候，就可以肯定读的过程已经结束。其它_acquire(RCU)等函数是调试用的代码，暂不做讨论。
</span><span class='line'>
</span><span class='line'>  3， rcu_note_context_switch 在schedule中调用，每次进程切换就代表着一个静止状态。该函数会把当前的CPU状态设置为通过状态。
</span><span class='line'>
</span><span class='line'>  4， rcu_check_callbacks 在每次时钟周期里调用(update_process_times)。通过它会触发软件中断，软件中断对应着rcu_process_callbacks，这是一个真正繁忙的函数，他会检测当前CPU的状态，向父节点传递静止状态信息，调用注册函数等一系列工作。
</span><span class='line'>
</span><span class='line'>在进一步了解这些函数之前，我们先来看看你Tree RCU的结构。
</span><span class='line'>
</span><span class='line'>#### TREE RCU简介
</span><span class='line'>
</span><span class='line'>  在统计CPU的状态的时候，需要用到一个结构来存放所有CPU的状态。在早期的实现中，所有的状态都保存在一个结构中，这样做的后果是所有的CPU在更新自己状态的时候，都需要锁定该结构对象，一定程度上影响了系统性能。为了提高性能，把一定数目的CPU组成了一个节点（默认设定64个CPU为一个节点）；当节点超过64个的时候，再把这些节点按64为单位划分为归属不同的父节点；如此类推，最后的一个单独的节点作为根节点。这样在更新CPU状态的时候，只需要锁定自己所属的节点就可以了。按节点设置的数目，可见这个结构只对CPU数成百上千的系统才真正起作用（我都没见过超过32个cpu的机器，不知道是啥样的感觉）。
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-06-02-50.png)  
</span><span class='line'>
</span><span class='line'>  这样所有的CPU就按层级结构组织了起来，也就是一个树结构。当一个系统的CPU数少于64个的时候，只要一个rcu_node就可以。
</span><span class='line'>
</span><span class='line'>  每个CPU在完成宽限期检测的时候，就会去更新它所属的rcu_node的值，当一个rcu_node所包含的CPU的状态都更新过以后，该node就会去更新它所属的父节点的值。直到最后一个根节点。
</span><span class='line'>
</span><span class='line'>#### TREE RCU数据结构
</span><span class='line'>
</span><span class='line'>为了实现该结构，系统提供了以下结构。
</span><span class='line'>
</span><span class='line'>##### rcu_data
</span><span class='line'>
</span><span class='line'>由于RCU需要统计每个CPU是否通过了宽限期，提供了rcu_data来保存信息。另外每个销毁的对象并不是直接删除，也保存在rcu_data中，等到合适的时机来执行。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_data {  
</span><span class='line'>/* 1) 静止状态和宽限期处理: */  
</span><span class='line'>unsigned long   completed;      /* 对比 rsp-&gt;completed */  
</span><span class='line'>                                /* 目的是检测宽限期是否完成. */  
</span><span class='line'>unsigned long   gpnum;          /* 当前CPU上最高的宽限期数目*/  
</span><span class='line'>                                /* 在宽限期开始的时候设置. */  
</span><span class='line'>unsigned long   passed_quiesce_gpnum;  
</span><span class='line'>                                /* 已经通过的宽限期数目. */  
</span><span class='line'>bool            passed_quiesce; /* 是否通过了静止状态，在进程切换等状态会设置. */  
</span><span class='line'>bool            qs_pending;     /* 对于当前执行的宽限期，该CPU是否执行完成. */  
</span><span class='line'>bool            beenonline;     /* CPU是否在线，不在线的CPU需要特殊处理，以提高性能*/  
</span><span class='line'>bool            preemptible;    /* 是否抢占式RCU? */  
</span><span class='line'>struct rcu_node *mynode;        /* 这个CPU对应的 rcu_node */  
</span><span class='line'>unsigned long grpmask;          /* 占用1bit，对应与所属的rcu_node. */  
</span><span class='line'>#ifdef CONFIG_RCU_CPU_STALL_INFO  
</span><span class='line'>unsigned long   ticks_this_gp;  /* The number of scheduling-clock */  
</span><span class='line'>                                /*  ticks this CPU has handled */  
</span><span class='line'>                                /*  during and after the last grace */  
</span><span class='line'>                                /* period it is aware of. */  
</span><span class='line'>#endif /* #ifdef CONFIG_RCU_CPU_STALL_INFO */  
</span><span class='line'>/* 2) 批处理*/  
</span><span class='line'>/* 
</span><span class='line'> * 
</span><span class='line'> * 当nxtlist不为空的时候，会通过nxttail划分为以下几部分 
</span><span class='line'> * 每一个部分为空的时候，它的指针会被设置成与它的下一部分相同 
</span><span class='line'> * 当nxtlist为空的时候，所有的nxttail都会指向nxtlist的地址，这时候nxtlist指向NULL 
</span><span class='line'> * 
</span><span class='line'> * [nxtlist, *nxttail[RCU_DONE_TAIL]): 
</span><span class='line'> *    批处理的开始节点# &lt;= -&gt;completed 
</span><span class='line'> *    这些节点的宽限期已经完成，可以执行销毁操作。 
</span><span class='line'> *    当调用rcu_process_callbacks()的时候，下一批完成宽限期的节点也会放到这儿. 
</span><span class='line'> * [*nxttail[RCU_DONE_TAIL], *nxttail[RCU_WAIT_TAIL]): 
</span><span class='line'> *    批处理的开始节点 # &lt;= -&gt;completed - 1: 等待当前的批处理完成 
</span><span class='line'> * [*nxttail[RCU_WAIT_TAIL], *nxttail[RCU_NEXT_READY_TAIL]): 
</span><span class='line'> *    已知的当下次宽限期开始，可以开始等待的节点。 
</span><span class='line'> * [*nxttail[RCU_NEXT_READY_TAIL], *nxttail[RCU_NEXT_TAIL]): 
</span><span class='line'> *    当前不确定下次宽限期开始后，是否可以开始等待状态的节点。 
</span><span class='line'> *    *nxttail[RCU_NEXT_TAIL] 的值将永远是NULL， 
</span><span class='line'> *    它表示nxtlist的结束. 
</span><span class='line'> * 
</span><span class='line'> */  
</span><span class='line'>struct rcu_head *nxtlist;  
</span><span class='line'>struct rcu_head **nxttail[RCU_NEXT_SIZE];  
</span><span class='line'>long            qlen_lazy;      /* # kfree_rcu调用的次数，kfee_rcu等同于call_rcu，只是它不需要销毁的对象提供销毁函数*/  
</span><span class='line'>long            qlen;           /* # 当前需要执行销毁操作的次数，每次call_rcu会加一，执行过后减一*/  
</span><span class='line'>long            qlen_last_fqs_check;  
</span><span class='line'>                                /* 对应与qlen，最后一次执行的次数*/  
</span><span class='line'>unsigned long   n_cbs_invoked;  /* 执行销毁操作的次数. */  
</span><span class='line'>unsigned long   n_cbs_orphaned; /* 统计离线后CPU上剩下的callback函数的个数 */  
</span><span class='line'>unsigned long   n_cbs_adopted;  /* 从离线后的CPU上移出的callback函数的个数 */  
</span><span class='line'>unsigned long   n_force_qs_snap;  
</span><span class='line'>                                /* 其它CPU是否在执行fore_qs? */  
</span><span class='line'>long            blimit;         /* nxtlist保存的上限 */  
</span><span class='line'>
</span><span class='line'>/* 3) 动态时钟,*/  
</span><span class='line'>struct rcu_dynticks *dynticks;  /* 每个CPU都包含一个动态时钟. */  
</span><span class='line'>int dynticks_snap;              /* 用于检测CPU是否在线. */  
</span><span class='line'>
</span><span class='line'>/* 4) 强制执行时候处理的CPU */  
</span><span class='line'>unsigned long dynticks_fqs;     /* 由于进入dynticks idle而被处理的CPU. */  
</span><span class='line'>unsigned long offline_fqs;      /* 由于不在在线被处理的CPU. */  
</span><span class='line'>
</span><span class='line'>/* 5) __rcu_pending() 的统计信息，这些信息都是在记录调用信息的时候使用. */  
</span><span class='line'>unsigned long n_rcu_pending;    /* rcu_pending() 调用次数，自从启动. */  
</span><span class='line'>unsigned long n_rp_qs_pending;  
</span><span class='line'>unsigned long n_rp_report_qs;  
</span><span class='line'>unsigned long n_rp_cb_ready;  
</span><span class='line'>unsigned long n_rp_cpu_needs_gp;  
</span><span class='line'>unsigned long n_rp_gp_completed;  
</span><span class='line'>unsigned long n_rp_gp_started;  
</span><span class='line'>unsigned long n_rp_need_fqs;  
</span><span class='line'>unsigned long n_rp_need_nothing;  
</span><span class='line'>
</span><span class='line'>/* 6) _rcu_barrier() 的回调函数. */  
</span><span class='line'>struct rcu_head barrier_head;  
</span><span class='line'>
</span><span class='line'>int cpu;  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>1，completed ，gpnum ， passed_quiesce_gpnum
</span><span class='line'>
</span><span class='line'>  gpnum表示当前正在运行的宽限期的个数，每当一个宽限期开始的时候，会设置这个值与其父节点相同。passed_quiesce_gpnum为当前CPU通过的宽限期个数，它的值在宽限期开始的时候小于gpnum，当这个CPU经过一个静止状态的时候，会把它设置成gpnum的值，通过对比它与父节点中的gpnum是否相同，可以确定该CPU是否通过了宽限期。passed_quiesce_gpnum只是表示这个CPU通过了宽限期，而completed表示所有的CPU都通过了宽限期，设置该值的同时，可以将nxtlist中等待的回调函数移动到完成队列。
</span><span class='line'>
</span><span class='line'>2，nxtlist 与nxttail
</span><span class='line'>
</span><span class='line'>  nxtlist保存的是指向rcu_head对象，rcu_head的定义如下：        
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct callback_head {
</span><span class='line'>struct callback_head *next;
</span><span class='line'>void (*func)(struct callback_head *head);
</span><span class='line'>};
</span><span class='line'>#define rcu_head callback_head
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_head的结构并不复杂，它包含一个回调函数指针。而next可以把rcu_head连成一个列表。
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-06-02-51.png)  
</span><span class='line'>
</span><span class='line'>nxtlist指向一个rcu_head 列表，而nxttail的四个元素是指向指针的指针，它们指向的是rcu_head对象的next。RCU_DONE_TAIL指向的rcu_head对象之前的对象是可以销毁的对象。RCU_WAIT_TAIL指向的正在等待宽限期的元素，RCU_NEXT_READ_TAIL指向的是等待下次宽限期的元素，RCU_NEXT_TAIL指向最后一个元素，这个元素总是指向NULL。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>##### rcu_node
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_node {  
</span><span class='line'>raw_spinlock_t lock;    /* rcu_node的锁，用来保护以下的一些成员*/  
</span><span class='line'>
</span><span class='line'>unsigned long gpnum;    /* 该节点当前的宽限期的数量 */  
</span><span class='line'>                        /* 该值等于或者比父节点的值小1*/  
</span><span class='line'>unsigned long completed; /* 该节点完成的宽限期数量*/  
</span><span class='line'>                         /* 该值等于或者比父节点的值小1*/  
</span><span class='line'>unsigned long qsmask;   /* 标记这个节点对应的所有CPU或者子节点是否完成了当前的宽限期*/  
</span><span class='line'>                        /* 每一个bit对应一个cpu或者一个子节点.*/  
</span><span class='line'>unsigned long expmask;  /* 需要执行 -&gt;blkd_tasks 的元素 */                              
</span><span class='line'>                        /*  (应用于TREE_PREEMPT_RCU). */  
</span><span class='line'>atomic_t wakemask;      /* 需要唤醒kthread的CPU. */  
</span><span class='line'>
</span><span class='line'>unsigned long qsmaskinit;  
</span><span class='line'>                        /* 每个宽限期开始时，用它来初始化qsmask，不存在或者不在线的CPU需要清除. */  
</span><span class='line'>unsigned long grpmask;  /* 对应于父节点中的位置. */  
</span><span class='line'>                        /* 只是用一bit. */  
</span><span class='line'>int     grplo;          /* 该节点代表的CPU或者子节点开始的位置. */  
</span><span class='line'>int     grphi;          /* 该节点代表的CPU或者子节点结束的位置. */  
</span><span class='line'>u8      grpnum;         /* 下一级的CPU或者子节点的个数. */  
</span><span class='line'>u8      level;          /* 跟节点是 0. */  
</span><span class='line'>struct rcu_node *parent;  
</span><span class='line'>struct list_head blkd_tasks;  
</span><span class='line'>                        /* 阻断读关键段的任务列表 */  
</span><span class='line'>                        /*  */  
</span><span class='line'>
</span><span class='line'>struct list_head *gp_tasks;  
</span><span class='line'>                        /* 指向第一个阻断读关键段的任务 */  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>struct list_head *exp_tasks;  
</span><span class='line'>
</span><span class='line'>/*以下为抢先式下加速RCU过程的变量*/
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_RCU_BOOST  
</span><span class='line'>struct list_head *boost_tasks;  
</span><span class='line'>                        /* Pointer to first task that needs to be */  
</span><span class='line'>                        /*  priority boosted, or NULL if no priority */  
</span><span class='line'>                        /*  boosting is needed for this rcu_node */  
</span><span class='line'>                        /*  structure.  If there are no tasks */  
</span><span class='line'>                        /*  queued on this rcu_node structure that */  
</span><span class='line'>                        /*  are blocking the current grace period, */  
</span><span class='line'>                        /*  there can be no such task. */  
</span><span class='line'>unsigned long boost_time;  
</span><span class='line'>                        /* When to start boosting (jiffies). */  
</span><span class='line'>struct task_struct *boost_kthread_task;  
</span><span class='line'>                        /* kthread that takes care of priority */  
</span><span class='line'>                        /*  boosting for this rcu_node structure. */  
</span><span class='line'>unsigned int boost_kthread_status;  
</span><span class='line'>                        /* State of boost_kthread_task for tracing. */  
</span><span class='line'>unsigned long n_tasks_boosted;  
</span><span class='line'>                        /* Total number of tasks boosted. */  
</span><span class='line'>unsigned long n_exp_boosts;  
</span><span class='line'>                        /* Number of tasks boosted for expedited GP. */  
</span><span class='line'>unsigned long n_normal_boosts;  
</span><span class='line'>                        /* Number of tasks boosted for normal GP. */  
</span><span class='line'>unsigned long n_balk_blkd_tasks;  
</span><span class='line'>                        /* Refused to boost: no blocked tasks. */  
</span><span class='line'>unsigned long n_balk_exp_gp_tasks;  
</span><span class='line'>                        /* Refused to boost: nothing blocking GP. */  
</span><span class='line'>unsigned long n_balk_boost_tasks;  
</span><span class='line'>                        /* Refused to boost: already boosting. */  
</span><span class='line'>unsigned long n_balk_notblocked;  
</span><span class='line'>                        /* Refused to boost: RCU RS CS still running. */  
</span><span class='line'>unsigned long n_balk_notyet;  
</span><span class='line'>                        /* Refused to boost: not yet time. */  
</span><span class='line'>unsigned long n_balk_nos;  
</span><span class='line'>                        /* Refused to boost: not sure why, though. */  
</span><span class='line'>                        /*  This can happen due to race conditions. */  
</span><span class='line'>#endif /* #ifdef CONFIG_RCU_BOOST */  
</span><span class='line'>struct task_struct *node_kthread_task;  
</span><span class='line'>                        /* kthread that takes care of this rcu_node */  
</span><span class='line'>                        /*  structure, for example, awakening the */  
</span><span class='line'>                        /*  per-CPU kthreads as needed. */  
</span><span class='line'>unsigned int node_kthread_status;  
</span><span class='line'>                        /* State of node_kthread_task for tracing. */  
</span><span class='line'>} ____cacheline_internodealigned_in_smp;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>每个rcu_node代表着 一组CPU或者子节点。在非抢占式下，它的结构并不复杂。由于可能有多个CPU对它进行处理，所有进行相应操作的时候，需要lock保护。
</span><span class='line'>
</span><span class='line'>##### rcu_state
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_state {  
</span><span class='line'>struct rcu_node node[NUM_RCU_NODES];    /* 保存了所有的节点. */  
</span><span class='line'>struct rcu_node *level[RCU_NUM_LVLS];   /* 每个层级所指向的节点. */  
</span><span class='line'>u32 levelcnt[MAX_RCU_LVLS + 1];         /* # 每一层的节点数. */  
</span><span class='line'>u8 levelspread[RCU_NUM_LVLS];           /* 每一层的CPU/节点数. */  
</span><span class='line'>struct rcu_data __percpu *rda;          /* 指向rcu_data. */  
</span><span class='line'>void (*call)(struct rcu_head *head,     /* rcu_barrier指向的回调函数. */  
</span><span class='line'>             void (*func)(struct rcu_head *head));  
</span><span class='line'>
</span><span class='line'>/* The following fields are guarded by the root rcu_node's lock. */  
</span><span class='line'>
</span><span class='line'>u8      fqs_state ____cacheline_internodealigned_in_smp;  
</span><span class='line'>                                        /* 调用force_quiescent_state时的状态. */  
</span><span class='line'>u8      fqs_active;                     /* force_quiescent_state() 正在运行*/  
</span><span class='line'>
</span><span class='line'>u8      fqs_need_gp;                    /* 因为 force_quiescent_state() 正在运行*/  
</span><span class='line'>                                        /* 一个CPU需要运行的宽限期被阻止*/  
</span><span class='line'>
</span><span class='line'>u8      boost;                          /* 加速. */  
</span><span class='line'>unsigned long gpnum;                    /* 当前的宽限起数量. */  
</span><span class='line'>unsigned long completed;                /* # 最后一次完成的宽限期数量. */  
</span><span class='line'>
</span><span class='line'>/* 以下的成员被根rcu_node的lock保护. */  
</span><span class='line'>
</span><span class='line'>raw_spinlock_t onofflock;               /* 开始一个新的宽限期的时候，阻止CPU上下线*/  
</span><span class='line'>
</span><span class='line'>struct rcu_head *orphan_nxtlist;        /* 等待宽限期的孤儿回调函数的列表 */  
</span><span class='line'>
</span><span class='line'>struct rcu_head **orphan_nxttail;       /* 以上列表的结尾. */  
</span><span class='line'>struct rcu_head *orphan_donelist;       /* 需要执行的孤儿回调函数列表 */  
</span><span class='line'>
</span><span class='line'>struct rcu_head **orphan_donetail;      /* 以上列表的结尾. */  
</span><span class='line'>long qlen_lazy;                         /* 懒惰回调函数的个数. */  
</span><span class='line'>long qlen;                              /* 总的回调函数的个数. */  
</span><span class='line'>struct task_struct *rcu_barrier_in_progress;  
</span><span class='line'>                                        /* 调用rcu_barrier()的进程, */  
</span><span class='line'>                                        /* 没有的话指向NULL. */  
</span><span class='line'>struct mutex barrier_mutex;             /* 执行barrier需要的互斥锁. */  
</span><span class='line'>atomic_t barrier_cpu_count;             /* # 等待barrier的CPU数 . */  
</span><span class='line'>struct completion barrier_completion;   /* 在barrier结束的时候调用. */  
</span><span class='line'>unsigned long n_barrier_done;           /* 在_rcu_barrier()开始结束处都需要调用++ */  
</span><span class='line'>
</span><span class='line'>raw_spinlock_t fqslock;                 /* 只有一个进程能调用 force_quiescent_state().*/  
</span><span class='line'>
</span><span class='line'>unsigned long jiffies_force_qs;         /* force_quiescent_state()开始的时间 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs;               /* 调用force_quiescent_state()的次数 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs_lh;            /* 因为lock不可用，而退出force_quiescent_state()的次数 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs_ngp;           /* 因为当前有宽限期执行，而退出force_quiescent_state()的次数*/  
</span><span class='line'>
</span><span class='line'>unsigned long gp_start;                 /* 宽限期开始的时间*/  
</span><span class='line'>
</span><span class='line'>unsigned long jiffies_stall;              
</span><span class='line'>
</span><span class='line'>unsigned long gp_max;                   /*  最长的宽限的jiffie数 */  
</span><span class='line'>
</span><span class='line'>char *name;                             /* 结构的名字. */  
</span><span class='line'>struct list_head flavors;               /* 系统中的rcu_state. */  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_state 保存了所有的node，宽限期的判断只要取出根节点，也就是第一个元素就可以。还有一些初始化要用到的变量。还有孤儿回调函数用于处理离线CPU遗留的信息。剩下还有很多统计信息，这些内容在讲解代码实现的时候再仔细考虑。
</span><span class='line'>
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>### TREE RCU实现之二 —— 主干函数
</span><span class='line'>
</span><span class='line'>RCU的实现集中在以下几个步骤：  
</span><span class='line'>  1， 调用call_rcu，将回调函数增加到列表。  
</span><span class='line'>  2,   开始一个宽限期。  
</span><span class='line'>  3,   每个CPU报告自己的状态，直到最后一个CPU，结束一个宽限期。  
</span><span class='line'>  4， 宽限期结束，每个CPU处理自己的回调函数。  
</span><span class='line'>
</span><span class='line'>#### call_rcu的实现
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),  
</span><span class='line'>   struct rcu_state *rsp, bool lazy)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_data *rdp;  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE((unsigned long)head &amp; 0x3); /* 检测head在内存中是否对齐! */  
</span><span class='line'>debug_rcu_head_queue(head);  
</span><span class='line'>head-&gt;func = func;  
</span><span class='line'>head-&gt;next = NULL;  
</span><span class='line'>
</span><span class='line'>smp_mb(); /* Ensure RCU update seen before callback registry. */  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 这是一个检测宽限期开始或者结束的机会。 
</span><span class='line'> * 当我们看到一个结束的时候，可能还会看到一个开始。 
</span><span class='line'> * 反过来，看到一个开始的时候，不一定能看到一个结束， 
</span><span class='line'> * 因为宽限期结束需要一定时间。 
</span><span class='line'> */  
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>/* 将要增加callback到nxtlist. */  
</span><span class='line'>ACCESS_ONCE(rdp-&gt;qlen)++;  
</span><span class='line'>if (lazy)  
</span><span class='line'>    rdp-&gt;qlen_lazy++;  
</span><span class='line'>else  
</span><span class='line'>    rcu_idle_count_callbacks_posted();  
</span><span class='line'>smp_mb();  /* Count before adding callback for rcu_barrier(). */  
</span><span class='line'>*rdp-&gt;nxttail[RCU_NEXT_TAIL] = head;  
</span><span class='line'>rdp-&gt;nxttail[RCU_NEXT_TAIL] = &amp;head-&gt;next;  
</span><span class='line'>
</span><span class='line'>if (__is_kfree_rcu_offset((unsigned long)func))  
</span><span class='line'>    trace_rcu_kfree_callback(rsp-&gt;name, head, (unsigned long)func,  
</span><span class='line'>                                 rdp-&gt;qlen_lazy, rdp-&gt;qlen);  
</span><span class='line'>else  
</span><span class='line'>    trace_rcu_callback(rsp-&gt;name, head, rdp-&gt;qlen_lazy, rdp-&gt;qlen);  
</span><span class='line'>
</span><span class='line'>/* 去处理rcu_core。 */  
</span><span class='line'>__call_rcu_core(rsp, rdp, head, flags);  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>call_rcu中最主要的工作，就是将回调函数加入到CPU的nxtlist列表。这里用到了指针处理的小技巧，我们来看看。首先看看nxttail的初始化：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void init_callback_list(struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>int i;  
</span><span class='line'>
</span><span class='line'>rdp-&gt;nxtlist = NULL;  
</span><span class='line'>for (i = 0; i &lt; RCU_NEXT_SIZE; i++)  
</span><span class='line'>    rdp-&gt;nxttail[i] = &amp;rdp-&gt;nxtlist;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>我们看到nxttail的全部成员都指向了nxtlist的地址。当nxtlist为空的时候，也是这个情形。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;*rdp-&gt;nxttail[RCU_NEXT_TAIL] = head;       
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;当nxtlist为空的时候， *rdp-&gt;nxttail[RCU_NEXT_TAIL] 得到的其实就是nxtlist，将head的值赋予它。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rdp-&gt;nxttail[RCU_NEXT_TAIL] = &amp;head-&gt;next;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;之后 RCU_NEXT_TAIL指向 head的next指针。这样当再有一个节点加入的时候，*rdp-&gt;nxttail[RCU_NEXT_TAIL]得到的其实就是前一次加入的head的next指针，它将指向新加入的值。如此，nxtlist就成为了一个链表。或者这样理解，rdp-&gt;nxttail[RCU_NEXT_TAIL] 指向的就是nxtlist中最后一个节点的 next指针。
</span><span class='line'>
</span><span class='line'>除了将回调函数插入，该函数其它代码多为检查代码。而最后要调用`__call_rcu_core`，该函数的功用主要是在回调函数太多或者等待时间过长的状态下，强制执行RCU状态更新。我们暂时不关注。
</span><span class='line'>
</span><span class='line'>开始一个宽限期
</span><span class='line'>
</span><span class='line'>在一个宽限期结束，或者当一个CPU检测到自身有需要一个宽限期的时候会开始一个新的宽限期，开始宽限期的代码如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_start_gp(struct rcu_state *rsp, unsigned long flags)  
</span><span class='line'>__releases(rcu_get_root(rsp)-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_data *rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>struct rcu_node *rnp = rcu_get_root(rsp);  
</span><span class='line'>
</span><span class='line'>if (!rcu_scheduler_fully_active ||  
</span><span class='line'>        !cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果scheduler 还没有启动non-idle任务 
</span><span class='line'>     * 或者不需要启动一个新的宽限期则退出。 
</span><span class='line'>     * 需要再次判断cpu_needs_another_gp， 
</span><span class='line'>     * 是因为可能有多个CPU执行这个过程。 
</span><span class='line'>     */  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>if (rsp-&gt;fqs_active) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 这个CPU需要一个宽限期，而force_quiescent_state() 
</span><span class='line'>     * 正在运行，告诉它开始一个。 
</span><span class='line'>     */  
</span><span class='line'>    rsp-&gt;fqs_need_gp = 1;  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 开始一个新的宽限期并且初始化。 */  
</span><span class='line'>rsp-&gt;gpnum++;  
</span><span class='line'>trace_rcu_grace_period(rsp-&gt;name, rsp-&gt;gpnum, "start");  
</span><span class='line'>WARN_ON_ONCE(rsp-&gt;fqs_state == RCU_GP_INIT);  
</span><span class='line'>rsp-&gt;fqs_state = RCU_GP_INIT; /* 阻止 force_quiescent_state。 */  
</span><span class='line'>rsp-&gt;jiffies_force_qs = jiffies + RCU_JIFFIES_TILL_FORCE_QS;  
</span><span class='line'>record_gp_stall_check_time(rsp);  
</span><span class='line'>raw_spin_unlock(&amp;rnp-&gt;lock);  /* leave irqs disabled. */  
</span><span class='line'>
</span><span class='line'>/* 排除CPU的热插拔。*/  
</span><span class='line'>raw_spin_lock(&amp;rsp-&gt;onofflock);  /* irqs already disabled. */  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 从父节点开始以广度优先的方式，遍历所有的节点，设置qsmask的值， 
</span><span class='line'> * 所有在线CPU所在bit都将被设置成1。 
</span><span class='line'> * 通过遍历rsp-&gt;node[]数组就可以达到这个目的。 
</span><span class='line'> * 其它CPU在自己所属的节点还没有被设置前，只有可能访问这个节点， 
</span><span class='line'> * 因为它所作的判断是宽限期还没有开始。 
</span><span class='line'> * 此外，我们排除了CPU热插拔。 
</span><span class='line'> *  
</span><span class='line'> * 直到初始化过程完成之前，这个宽限期不可能完成，因为至少当前的 
</span><span class='line'> * CPU所属的bit将不会被设置。这个是因为我们启动了禁止中断，所以 
</span><span class='line'> * 这个CPU不会调用到宽限期检测代码。 
</span><span class='line'> */  
</span><span class='line'>rcu_for_each_node_breadth_first(rsp, rnp) {  
</span><span class='line'>    raw_spin_lock(&amp;rnp-&gt;lock);      /* irqs already disabled. */  
</span><span class='line'>    rcu_preempt_check_blocked_tasks(rnp);  
</span><span class='line'>    rnp-&gt;qsmask = rnp-&gt;qsmaskinit;  
</span><span class='line'>    rnp-&gt;gpnum = rsp-&gt;gpnum;  
</span><span class='line'>    rnp-&gt;completed = rsp-&gt;completed;  
</span><span class='line'>    if (rnp == rdp-&gt;mynode)  
</span><span class='line'>        rcu_start_gp_per_cpu(rsp, rnp, rdp);  
</span><span class='line'>    rcu_preempt_boost_start_gp(rnp);  
</span><span class='line'>    trace_rcu_grace_period_init(rsp-&gt;name, rnp-&gt;gpnum,  
</span><span class='line'>                        rnp-&gt;level, rnp-&gt;grplo,  
</span><span class='line'>                        rnp-&gt;grphi, rnp-&gt;qsmask);  
</span><span class='line'>    raw_spin_unlock(&amp;rnp-&gt;lock);    /* irqs remain disabled. */  
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>rnp = rcu_get_root(rsp);  
</span><span class='line'>raw_spin_lock(&amp;rnp-&gt;lock);              /* irqs already disabled. */  
</span><span class='line'>rsp-&gt;fqs_state = RCU_SIGNAL_INIT; /* force_quiescent_state now OK. */  
</span><span class='line'>raw_spin_unlock(&amp;rnp-&gt;lock);            /* irqs remain disabled. */  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rsp-&gt;onofflock, flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>标记一个新的宽限期开始，rcu_state要做的就是将gp_num加1。然后再设置所有node，qsmask被设置成qsmasinit，qsmask每个bit代表一个CPU，所有在线的CPU都将被设置成1；gpnum将被设置成新值。嗯，一个新宽限期的开始只需要设置这些标记位。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#### CPU的宽限期检测
</span><span class='line'>
</span><span class='line'>当一个宽限期开始后，每个CPU都需要检测自己的状态，如果已经通过静止状态，那么就向上一级node进行报告。
</span><span class='line'>
</span><span class='line'>这个处理过程，可以分为两个步骤：  
</span><span class='line'>  1， 检测新的处理过程开始，设置rcu_data中的gpnum和passed_quiesce，另外用qs_pending标记一个待处理的新宽限期的开始。  
</span><span class='line'>  2， 一个静止状态结束，向上一级node报告这个过程。  
</span><span class='line'>
</span><span class='line'>这两个过程通过rcu_check_quiescent_state()来实现，需要注意的是这个函数隔一段时间调用一次，并不只调用一次。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/* 
</span><span class='line'>* 检测这个CPU是否还不知道一个新宽限期开始，如果是设置它的变量。 
</span><span class='line'>* 否则检查它是不是第一次通过静止状态，如果是，向上报告。 
</span><span class='line'>*/  
</span><span class='line'>static void  
</span><span class='line'>rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>/* 如果有新的宽限期开始，记录它并返回。*/  
</span><span class='line'>if (check_for_new_grace_period(rsp, rdp))  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 这个CPU是否已经处理过它的宽限期?如果是返回。 
</span><span class='line'> */  
</span><span class='line'>if (!rdp-&gt;qs_pending)  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 是否通过了静止状态？如果没有，返回。 
</span><span class='line'> */  
</span><span class='line'>if (!rdp-&gt;passed_quiesce)  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 向所属的node报告。(但rcu_report_qs_rdp() 仍然会去判断它)。 
</span><span class='line'> */  
</span><span class='line'>rcu_report_qs_rdp(rdp-&gt;cpu, rsp, rdp, rdp-&gt;passed_quiesce_gpnum);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class=""&gt;
</span><span class='line'>###### A， CPU检测新宽限期的开始
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/*  
</span><span class='line'> * 为当前CPU，更新rcu_data的状态，去标记一个新宽限期的开始 
</span><span class='line'> * 如果当前CPU启动了一个宽限期或者检测到一个新的宽限期开始， 
</span><span class='line'> * 都需要调用这个函数。这个过程必须锁定父节点的lock，另外需 
</span><span class='line'> * 要禁止中断 
</span><span class='line'> */  
</span><span class='line'>static void __note_new_gpnum(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>if (rdp-&gt;gpnum != rnp-&gt;gpnum) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果当前的宽限期需要处理这个CPU的状态，设置并 
</span><span class='line'>     * 去检测它的静止状态。否则不要去管它。 
</span><span class='line'>     */          
</span><span class='line'>    rdp-&gt;gpnum = rnp-&gt;gpnum;  
</span><span class='line'>    trace_rcu_grace_period(rsp-&gt;name, rdp-&gt;gpnum, "cpustart");  
</span><span class='line'>    if (rnp-&gt;qsmask &amp; rdp-&gt;grpmask) {  
</span><span class='line'>        rdp-&gt;qs_pending = 1;  
</span><span class='line'>        rdp-&gt;passed_quiesce = 0;  
</span><span class='line'>    } else {  
</span><span class='line'>        rdp-&gt;qs_pending = 0;  
</span><span class='line'>    }  
</span><span class='line'>    zero_cpu_stall_ticks(rdp);  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>static void note_new_gpnum(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>if (rdp-&gt;gpnum == ACCESS_ONCE(rnp-&gt;gpnum) || /* outside lock. */  
</span><span class='line'>        !raw_spin_trylock(&amp;rnp-&gt;lock)) { /* irqs already off, so later. */  
</span><span class='line'>    local_irq_restore(flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>__note_new_gpnum(rsp, rnp, rdp);  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 在我们的上次检测之后，其它CPU启动了一个新的宽限期？ 
</span><span class='line'> * 如果是更新相应的rcu_data的状态。 
</span><span class='line'> * 必须是在rdp对应的CPU上执行。 
</span><span class='line'> */  
</span><span class='line'>static int  
</span><span class='line'>check_for_new_grace_period(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>int ret = 0;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>if (rdp-&gt;gpnum != rsp-&gt;gpnum) {  
</span><span class='line'>    note_new_gpnum(rsp, rdp);  
</span><span class='line'>    ret = 1;  
</span><span class='line'>}  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>return ret;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>check_for_new_grace_period 和 note_new_gpnum分别用来检测rdp的gpnum与rsp已经对应的rnp的值是否相同，来确定是否有一个新的宽限期开始。之所以需要检测两次，是因为在rsp设置以后，rnp可能并没有设置完成。
</span><span class='line'>
</span><span class='line'>`__note_new_gpnum` 将设置gpnum的值。另外设置 qs_pending为1，该标记位代表该节点还没有向父节点报告自己的状态；passed_quiesce为0，表示需要一个静止状态，设置该位是因为下次调用rcu_check_quiescent_state()可能是在一个读过程还没有结束的时候。
</span><span class='line'>
</span><span class='line'>qs_pending的状态有可能为0，这只在以下情形下出现：当前CPU在宽限期开始的时候实在离线状态，而现在变成了在线。
</span><span class='line'>
</span><span class='line'>我们注意到在 check_for_new_grace_period检测到有新的宽限期开始后，rcu_check_quiescent_state将直接返回，因为这个宽限期可能是在该CPU的上一个静止状态之前已经开始，所以需要等待下一个静止状态。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###### B，CPU报告静止状态
</span><span class='line'>
</span><span class='line'>当再一次调用到rcu_check_quiescent_state()的时候，check_for_new_grace_period()将返回FALSE，接着运行后面的函数来判断 qs_pending 和 passed_quiesce 的值来决定是否调用rcu_report_qs_rdp。需要判断qs_peding是因为当这次rcu_report_qs_rdp调用成功的时候，下次再运行rcu_check_quiescent_state()则不需要继续运行后续函数。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_report_qs_rdp(int cpu, struct rcu_state *rsp, struct rcu_data *rdp, long lastgp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>unsigned long mask;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>raw_spin_lock_irqsave(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>if (lastgp != rnp-&gt;gpnum || rnp-&gt;completed == rnp-&gt;gpnum) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果宽限期的处理已经完成，那么返回。 
</span><span class='line'>     */          
</span><span class='line'>    rdp-&gt;passed_quiesce = 0; /* need qs for new gp. */  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>mask = rdp-&gt;grpmask;  
</span><span class='line'>if ((rnp-&gt;qsmask &amp; mask) == 0) {  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>} else {  
</span><span class='line'>    rdp-&gt;qs_pending = 0;  
</span><span class='line'>    /* 
</span><span class='line'>     *  可以确定这个宽限期还没有结束，所以可以确定当前CPU上的 
</span><span class='line'>     *  所有回调函数可以在下次宽限期结束后处理。 
</span><span class='line'>     */  
</span><span class='line'>    rdp-&gt;nxttail[RCU_NEXT_READY_TAIL] = rdp-&gt;nxttail[RCU_NEXT_TAIL];  
</span><span class='line'>
</span><span class='line'>    rcu_report_qs_rnp(mask, rsp, rnp, flags); /* rlses rnp-&gt;lock */  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;从我看来，这个函数只会调用到最后一个else分支，而之前的连个if分支都不会调用到。因为在调用该函数前，代码已经做了必要的检测。
</span><span class='line'>
</span><span class='line'>以此来看，这个函数的功用就是设置qs_pending的值，阻止这次宽限期没有完成之前再次调用掉该函数；设置nxttail，决定下次宽限期后可以执行的回调函数；然后向父节点报告静止状态完成。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###### C，向上报告
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_report_qs_rnp(unsigned long mask, struct rcu_state *rsp,  
</span><span class='line'>  struct rcu_node *rnp, unsigned long flags)  
</span><span class='line'>__releases(rnp-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_node *rnp_c;  
</span><span class='line'>
</span><span class='line'>/* 向上遍历所有层级 */  
</span><span class='line'>for (;;) {  
</span><span class='line'>    if (!(rnp-&gt;qsmask &amp; mask)) {  
</span><span class='line'>        /* 这个CPU的标记已经被清除，证明已经处理过了，返回 */  
</span><span class='line'>        raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>        return;  
</span><span class='line'>    }  
</span><span class='line'>    rnp-&gt;qsmask &amp;= ~mask;  
</span><span class='line'>    trace_rcu_quiescent_state_report(rsp-&gt;name, rnp-&gt;gpnum,  
</span><span class='line'>                 mask, rnp-&gt;qsmask, rnp-&gt;level,  
</span><span class='line'>                 rnp-&gt;grplo, rnp-&gt;grphi,  
</span><span class='line'>                 !!rnp-&gt;gp_tasks);  
</span><span class='line'>    if (rnp-&gt;qsmask != 0 || rcu_preempt_blocked_readers_cgp(rnp)) {  
</span><span class='line'>        /* 这个节点中还有其它CPU没有处理完成，那么返回 */  
</span><span class='line'>        raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>        return;  
</span><span class='line'>    }  
</span><span class='line'>    mask = rnp-&gt;grpmask;  
</span><span class='line'>    if (rnp-&gt;parent == NULL) {  
</span><span class='line'>        /* 到这儿，已经到了根节点 */  
</span><span class='line'>        break;  
</span><span class='line'>    }  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    rnp_c = rnp;  
</span><span class='line'>    rnp = rnp-&gt;parent;  
</span><span class='line'>    raw_spin_lock_irqsave(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    WARN_ON_ONCE(rnp_c-&gt;qsmask);  
</span><span class='line'>}  
</span><span class='line'>/* 
</span><span class='line'> *  程序运行到这儿，说明所有的CPU都通过了宽限期， 
</span><span class='line'> *  那么调用rcu_report_qs_rsp()来结束这个宽限期。 
</span><span class='line'> */   
</span><span class='line'>rcu_report_qs_rsp(rsp, flags); /* releases rnp-&gt;lock. */  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程并不复杂，清理rnp中qsmask对应该CPU的bit。然后判断该节点是否处理完成，如果是则继续向上调用，否则就退出函数。最后一个CPU调用后，可以调用到rcu_report_qs_rsp()。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_report_qs_rsp(struct rcu_state *rsp, unsigned long flags)  
</span><span class='line'>__releases(rcu_get_root(rsp)-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>unsigned long gp_duration;  
</span><span class='line'>struct rcu_node *rnp = rcu_get_root(rsp);  
</span><span class='line'>struct rcu_data *rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE(!rcu_gp_in_progress(rsp));  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * Ensure that all grace-period and pre-grace-period activity 
</span><span class='line'> * is seen before the assignment to rsp-&gt;completed. 
</span><span class='line'> */  
</span><span class='line'>smp_mb(); /* See above block comment. */  
</span><span class='line'>gp_duration = jiffies - rsp-&gt;gp_start;  
</span><span class='line'>if (gp_duration &gt; rsp-&gt;gp_max)  
</span><span class='line'>    rsp-&gt;gp_max = gp_duration;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 当前CPU知道宽限期已经结束，不过其它CPU都认为它还在运行。 
</span><span class='line'> * 由于completed还没有设置，其它CPU都不会对父node进行处理。 
</span><span class='line'> * 所以这时候将各个node标记为完成是安全的。 
</span><span class='line'> *  
</span><span class='line'> * 不过当前CPU有等待下一次宽限期的回调函数的时候，我们会 
</span><span class='line'> * 先去处理下一个宽限期。 
</span><span class='line'> * 这儿使用RCU_WAIT_TAIL代替了RCU_DONE_TAIL，这是因为当前 
</span><span class='line'> * CPU还没有进一步处理完成状态，当前RCU_WAIT_TAIL状态的元 
</span><span class='line'> * 素其实在这次宽限期结束后，已经可以执行了。 
</span><span class='line'> *  
</span><span class='line'> */  
</span><span class='line'>if (*rdp-&gt;nxttail[RCU_WAIT_TAIL] == NULL) {  
</span><span class='line'>    raw_spin_unlock(&amp;rnp-&gt;lock);  /* irqs remain disabled. */  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 设置 rnp-&gt;completed的值，避免这个过程要等到下一次宽限期开始。          
</span><span class='line'>     */  
</span><span class='line'>    rcu_for_each_node_breadth_first(rsp, rnp) {  
</span><span class='line'>        raw_spin_lock(&amp;rnp-&gt;lock); /* irqs already disabled. */  
</span><span class='line'>        rnp-&gt;completed = rsp-&gt;gpnum;  
</span><span class='line'>        raw_spin_unlock(&amp;rnp-&gt;lock); /* irqs remain disabled. */  
</span><span class='line'>    }  
</span><span class='line'>    rnp = rcu_get_root(rsp);  
</span><span class='line'>    raw_spin_lock(&amp;rnp-&gt;lock); /* irqs already disabled. */  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>rsp-&gt;completed = rsp-&gt;gpnum;  /* Declare the grace period complete. */  
</span><span class='line'>trace_rcu_grace_period(rsp-&gt;name, rsp-&gt;completed, "end");  
</span><span class='line'>rsp-&gt;fqs_state = RCU_GP_IDLE;  
</span><span class='line'>rcu_start_gp(rsp, flags);  /* releases root node's rnp-&gt;lock. */  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程最主要的内容就是设置rsp-&gt;completed的值，中间多了对node的处理。因为在rcu_start_gp中也会对node进行处理，当前CPU无法判断其它CPU是否需要一个宽限期，但它自身还有等待宽限期的回调函数的时候，它确定会有一个新的宽限期马上开始，所以忽略这个过程。     
</span><span class='line'>
</span><span class='line'>##### CPU的宽限期结束处理
</span><span class='line'>
</span><span class='line'>这个过程也可以分为两个步骤，第一步是检查宽限期是否结束，第二步是调用已完成的回调函数。
</span><span class='line'>
</span><span class='line'>###### A, CPU检测宽限期的结束
</span><span class='line'>
</span><span class='line'>每个CPU都会定期检查当前的宽限期是否结束，如果结束将处理自身状态已经nxtlist表。rcu_process_gp_end就是用来做这个事情:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_process_gp_end(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>if (rdp-&gt;completed == ACCESS_ONCE(rnp-&gt;completed) || /* outside lock. */  
</span><span class='line'>        !raw_spin_trylock(&amp;rnp-&gt;lock)) { /* irqs already off, so later. */  
</span><span class='line'>    local_irq_restore(flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>__rcu_process_gp_end(rsp, rnp, rdp);  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>当 rdp-&gt;completed与rnp-&gt;completed的值不同的时候，会调用`__rcu_process_gp_end`来完成具体的工作。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__rcu_process_gp_end(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>/* 之前的宽限期是否完成？ */  
</span><span class='line'>if (rdp-&gt;completed != rnp-&gt;completed) {  
</span><span class='line'>
</span><span class='line'>    /* 推进回调函数，即使是NULL指针也没关系。 */  
</span><span class='line'>    rdp-&gt;nxttail[RCU_DONE_TAIL] = rdp-&gt;nxttail[RCU_WAIT_TAIL];  
</span><span class='line'>    rdp-&gt;nxttail[RCU_WAIT_TAIL] = rdp-&gt;nxttail[RCU_NEXT_READY_TAIL];  
</span><span class='line'>    rdp-&gt;nxttail[RCU_NEXT_READY_TAIL] = rdp-&gt;nxttail[RCU_NEXT_TAIL];  
</span><span class='line'>
</span><span class='line'>    /* 更新completed。 */  
</span><span class='line'>    rdp-&gt;completed = rnp-&gt;completed;  
</span><span class='line'>    trace_rcu_grace_period(rsp-&gt;name, rdp-&gt;gpnum, "cpuend");  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果当前的CPU在外部的静止的状态（如离线状态）， 
</span><span class='line'>     * 可能已经错过了其它CPU发起的宽限期。所以需要更 
</span><span class='line'>     * 新gpnum的值，同时要注意不要错过当前正在运行的 
</span><span class='line'>     * 宽限期，所以它的值被设置成与rnp-&gt;completed相同， 
</span><span class='line'>     * 此时rnp-&gt;gpnum 可以已经加1，那么后续的调用 
</span><span class='line'>     * rcu_check_quiescent_state()会去检测新的宽限期。 
</span><span class='line'>     */       
</span><span class='line'>    if (ULONG_CMP_LT(rdp-&gt;gpnum, rdp-&gt;completed))  
</span><span class='line'>        rdp-&gt;gpnum = rdp-&gt;completed;  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果下次的宽限期不需要当前CPU报告静止状态, 
</span><span class='line'>     * 设置qs_pending为0。 
</span><span class='line'>     */  
</span><span class='line'>    if ((rnp-&gt;qsmask &amp; rdp-&gt;grpmask) == 0)  
</span><span class='line'>        rdp-&gt;qs_pending = 0;  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程的重点是设置nxttail的值，将根据它来进行下一步的处理。
</span><span class='line'>
</span><span class='line'>###### B,回调函数的调用
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_head *next, *list, **tail;  
</span><span class='line'>int bl, count, count_lazy, i;  
</span><span class='line'>
</span><span class='line'>/* 没有回调函数，那么返回。*/  
</span><span class='line'>if (!cpu_has_callbacks_ready_to_invoke(rdp)) {  
</span><span class='line'>    trace_rcu_batch_start(rsp-&gt;name, rdp-&gt;qlen_lazy, rdp-&gt;qlen, 0);  
</span><span class='line'>    trace_rcu_batch_end(rsp-&gt;name, 0, !!ACCESS_ONCE(rdp-&gt;nxtlist),  
</span><span class='line'>            need_resched(), is_idle_task(current),  
</span><span class='line'>            rcu_is_callbacks_kthread());  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 提取回调函数的list，需要禁用中断，以防止调用call_rcu()。  
</span><span class='line'> */   
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>WARN_ON_ONCE(cpu_is_offline(smp_processor_id()));  
</span><span class='line'>bl = rdp-&gt;blimit;  
</span><span class='line'>trace_rcu_batch_start(rsp-&gt;name, rdp-&gt;qlen_lazy, rdp-&gt;qlen, bl);  
</span><span class='line'>list = rdp-&gt;nxtlist;  
</span><span class='line'>/*  
</span><span class='line'> * 已经将list指向了nxtlist，此时将nxtlist指向 *rdp-&gt;nxttail[RCU_DONE_TAIL]。 
</span><span class='line'> * 由于nxttail指向的是 rcu_head中的next指针的地址，所以此处得到的就是next所 
</span><span class='line'> * 指向的rcu_head对象。 
</span><span class='line'> */  
</span><span class='line'>rdp-&gt;nxtlist = *rdp-&gt;nxttail[RCU_DONE_TAIL];  
</span><span class='line'>/*将*rdp-&gt;nxttail[RCU_DONE_TAIL]指向NULL，也就是将list中的最后一个元素的next设置成NULL*/  
</span><span class='line'>*rdp-&gt;nxttail[RCU_DONE_TAIL] = NULL;  
</span><span class='line'>/*tail指向list最后一个元素的next指针的地址*/  
</span><span class='line'>tail = rdp-&gt;nxttail[RCU_DONE_TAIL];  
</span><span class='line'>/*此时rdp-&gt;nxttail[RCU_DONE_TAIL]指向的内容已经移出，所以让它重新指向nxtlist的地址*/  
</span><span class='line'>for (i = RCU_NEXT_SIZE - 1; i &gt;= 0; i--)  
</span><span class='line'>if (rdp-&gt;nxttail[i] == rdp-&gt;nxttail[RCU_DONE_TAIL])  
</span><span class='line'>    rdp-&gt;nxttail[i] = &amp;rdp-&gt;nxtlist;  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>
</span><span class='line'>/* 调用回调函数 */  
</span><span class='line'>count = count_lazy = 0;  
</span><span class='line'>while (list) {  
</span><span class='line'>    next = list-&gt;next;  
</span><span class='line'>    prefetch(next);  
</span><span class='line'>    debug_rcu_head_unqueue(list);  
</span><span class='line'>    if (__rcu_reclaim(rsp-&gt;name, list))  
</span><span class='line'>        count_lazy++;  
</span><span class='line'>    list = next;  
</span><span class='line'>    /* 当已经全部运行完毕或者CPU有更重要的事情的时候，退出循环。 */  
</span><span class='line'>    if (++count &gt;= bl &amp;&amp;  
</span><span class='line'>            (need_resched() ||  
</span><span class='line'>            (!is_idle_task(current) &amp;&amp; !rcu_is_callbacks_kthread())))  
</span><span class='line'>        break;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>trace_rcu_batch_end(rsp-&gt;name, count, !!list, need_resched(),  
</span><span class='line'>        is_idle_task(current),  
</span><span class='line'>        rcu_is_callbacks_kthread());  
</span><span class='line'>
</span><span class='line'>/* 更新数量。并将没有执行完的回调函数重新放进列表。 */  
</span><span class='line'>if (list != NULL) {  
</span><span class='line'>*tail = rdp-&gt;nxtlist;  
</span><span class='line'>rdp-&gt;nxtlist = list;  
</span><span class='line'>for (i = 0; i &lt; RCU_NEXT_SIZE; i++)  
</span><span class='line'>    if (&amp;rdp-&gt;nxtlist == rdp-&gt;nxttail[i])  
</span><span class='line'>        rdp-&gt;nxttail[i] = tail;  
</span><span class='line'>    else  
</span><span class='line'>        break;  
</span><span class='line'>}  
</span><span class='line'>smp_mb(); /* 为了 rcu_barrier()统计运行过的回调函数 */  
</span><span class='line'>rdp-&gt;qlen_lazy -= count_lazy;  
</span><span class='line'>ACCESS_ONCE(rdp-&gt;qlen) -= count;  
</span><span class='line'>rdp-&gt;n_cbs_invoked += count;  
</span><span class='line'>
</span><span class='line'>/* Reinstate batch limit if we have worked down the excess. */  
</span><span class='line'>if (rdp-&gt;blimit == LONG_MAX &amp;&amp; rdp-&gt;qlen &lt;= qlowmark)  
</span><span class='line'>    rdp-&gt;blimit = blimit;  
</span><span class='line'>
</span><span class='line'>/* Reset -&gt;qlen_last_fqs_check trigger if enough CBs have drained. */  
</span><span class='line'>if (rdp-&gt;qlen == 0 &amp;&amp; rdp-&gt;qlen_last_fqs_check != 0) {  
</span><span class='line'>    rdp-&gt;qlen_last_fqs_check = 0;  
</span><span class='line'>    rdp-&gt;n_force_qs_snap = rsp-&gt;n_force_qs;  
</span><span class='line'>} else if (rdp-&gt;qlen &lt; rdp-&gt;qlen_last_fqs_check - qhimark)  
</span><span class='line'>    rdp-&gt;qlen_last_fqs_check = rdp-&gt;qlen;  
</span><span class='line'>WARN_ON_ONCE((rdp-&gt;nxtlist == NULL) != (rdp-&gt;qlen == 0));  
</span><span class='line'>
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>
</span><span class='line'>/* 如果还有回调函数没有执行，通知再次调用软中断 */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp))  
</span><span class='line'>    invoke_rcu_core();  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_do_batch主要作用是取出nxtlist中，nxttail[RCU_DONE_TAIL]之前的元素，遍历执行它们。这时候销毁过程真正的执行了。这段函数需要仔细想想nxttail的处理。
</span><span class='line'>
</span><span class='line'>到此RCU中涉及到的主干函数介绍完了，但是还需要与进程切换等过程交互。将在下节分析它们。
</span><span class='line'>
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>### TREE RCU实现之三 —— 定期调用 
</span><span class='line'>
</span><span class='line'>上一节，介绍过了RCU实现中用到的主要函数。不过还需要定期的运行这些函数，整个机制才完整。
</span><span class='line'>
</span><span class='line'>RCU的实现是通过在update_process_times() 中调用rcu_check_callbacks()来达到这个目的的。每个CPU都会定期的调用update_process_times()。rcu_check_callbacks()会去检查当前的RCU机制中是否有需要处理的内容，如当前CPU需要开启一个新的宽限期，当前CPU上的宽限期还没有处理完成。如果有需要处理的内容，将触发一个软件中断，真正的操作由软件中断触发的rcu_process_callbacks()来完成。
</span><span class='line'>
</span><span class='line'>#### rcu_check_callbacks
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void rcu_check_callbacks(int cpu, int user)  
</span><span class='line'>{  
</span><span class='line'>trace_rcu_utilization("Start scheduler-tick");  
</span><span class='line'>increment_cpu_stall_ticks();  
</span><span class='line'>if (user || rcu_is_cpu_rrupt_from_idle()) {  
</span><span class='line'>     /* 
</span><span class='line'>      * 如果是从用户模式或者是idle模式调用该函数， 
</span><span class='line'>      * 那么这个CPU是静止状态。 
</span><span class='line'>      *  
</span><span class='line'>      * 此处不需要内存屏障。因为rcu_sched_qs()和 
</span><span class='line'>      * and rcu_bh_qs()支处理CPU自身的局部变量， 
</span><span class='line'>      * 其它CPU不会访问和修改,至少当CPU在线的时候。 
</span><span class='line'>      *  
</span><span class='line'>      */                  
</span><span class='line'>      rcu_sched_qs(cpu);  
</span><span class='line'>      rcu_bh_qs(cpu);          
</span><span class='line'>} else if (!in_softirq()) {                  
</span><span class='line'>     /* 
</span><span class='line'>      * 运行到这儿，如果不是软件中断。如果当前CPU上运行的 
</span><span class='line'>      * 软中断的读过程，肯定已经完成，所以标记它。 
</span><span class='line'>      * 
</span><span class='line'>      */                 
</span><span class='line'>     rcu_bh_qs(cpu);  
</span><span class='line'>}  
</span><span class='line'>rcu_preempt_check_callbacks(cpu); /*抢先式下的检测*/  
</span><span class='line'>if (rcu_pending(cpu))  
</span><span class='line'>    invoke_rcu_core();  
</span><span class='line'>trace_rcu_utilization("End scheduler-tick");  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>该函数的主要功能是通过 rcu_pending()判断是否当前有需要处理的rcu内容，如果有调用invoke_rcu_core()。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int rcu_pending(int cpu)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>
</span><span class='line'>for_each_rcu_flavor(rsp)  
</span><span class='line'>if (__rcu_pending(rsp, per_cpu_ptr(rsp-&gt;rda, cpu)))  
</span><span class='line'>    return 1;  
</span><span class='line'>return 0;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_pending会循环所有的rcu_state，在非抢占式模式下，有rcu_sched_state 和rcu_bh_state 两个实例。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int __rcu_pending(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_node *rnp = rdp-&gt;mynode;  
</span><span class='line'>
</span><span class='line'>rdp-&gt;n_rcu_pending++;  
</span><span class='line'>
</span><span class='line'>/* Check for CPU stalls, if enabled. */  
</span><span class='line'>check_cpu_stall(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/*  是否宽限期在等待这个CPU去完成静止状态呢?  */  
</span><span class='line'>if (rcu_scheduler_fully_active &amp;&amp;  
</span><span class='line'>        rdp-&gt;qs_pending &amp;&amp; !rdp-&gt;passed_quiesce) {  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果force_quiescent_state() 需要马上执行，而这个CPU 
</span><span class='line'>     * 需要一个静止状态，强制执行本地进程切换。       
</span><span class='line'>     */  
</span><span class='line'>    rdp-&gt;n_rp_qs_pending++;  
</span><span class='line'>    if (!rdp-&gt;preemptible &amp;&amp;  
</span><span class='line'>        ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs) - 1,  
</span><span class='line'>         jiffies))  
</span><span class='line'>    set_need_resched();  
</span><span class='line'>} else if (rdp-&gt;qs_pending &amp;&amp; rdp-&gt;passed_quiesce) {  
</span><span class='line'>    rdp-&gt;n_rp_report_qs++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 这个CPU是否有callbacks等着调用? */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp)) {  
</span><span class='line'>    rdp-&gt;n_rp_cb_ready++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 当前CPU有需要执行的宽限期，而没有其它的宽限期在执行?  */  
</span><span class='line'>if (cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    rdp-&gt;n_rp_cpu_needs_gp++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 另一个CPU上执行的宽限期结束?   */  
</span><span class='line'>if (ACCESS_ONCE(rnp-&gt;completed) != rdp-&gt;completed) { /* outside lock */  
</span><span class='line'>        rdp-&gt;n_rp_gp_completed++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 有新的RCU开始? */  
</span><span class='line'>if (ACCESS_ONCE(rnp-&gt;gpnum) != rdp-&gt;gpnum) { /* outside lock */  
</span><span class='line'>        rdp-&gt;n_rp_gp_started++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 一个宽限期运行了太长时间，需要强制执行? */  
</span><span class='line'>if (rcu_gp_in_progress(rsp) &amp;&amp;  
</span><span class='line'>        ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs), jiffies)) {  
</span><span class='line'>    rdp-&gt;n_rp_need_fqs++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 无事可做 */  
</span><span class='line'>rdp-&gt;n_rp_need_nothing++;  
</span><span class='line'>return 0;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>`__rcu_pending` 判断了可能存在的各种情形，如果有需要处理的工作的话，就返回1，否则返回0。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void invoke_rcu_core(void)  
</span><span class='line'>{  
</span><span class='line'>raise_softirq(RCU_SOFTIRQ);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> invoke_rcu_core()的作用是开启软中断。在初始化的时候，系统已经注册了软中断。
</span><span class='line'>
</span><span class='line'>open_softirq(RCU_SOFTIRQ, rcu_process_callbacks);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_process_callbacks(struct softirq_action *unused)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>
</span><span class='line'>trace_rcu_utilization("Start RCU core");  
</span><span class='line'>for_each_rcu_flavor(rsp)  
</span><span class='line'>__rcu_process_callbacks(rsp);  
</span><span class='line'>trace_rcu_utilization("End RCU core");  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__rcu_process_callbacks(struct rcu_state *rsp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_data *rdp = __this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE(rdp-&gt;beenonline == 0);  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 如果一个宽限期运行了很长时间，那么强制静止状态。 
</span><span class='line'> *  
</span><span class='line'> */  
</span><span class='line'>if (ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs), jiffies))  
</span><span class='line'>    force_quiescent_state(rsp, 1);  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 处理宽限期结束相关内容。 
</span><span class='line'> */  
</span><span class='line'>rcu_process_gp_end(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/* 检测是否有新的宽限期开始或者静止状态需要向上报告。 */  
</span><span class='line'>rcu_check_quiescent_state(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/* 当前CPU需要新的宽限期吗? */  
</span><span class='line'>if (cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    raw_spin_lock_irqsave(&amp;rcu_get_root(rsp)-&gt;lock, flags);  
</span><span class='line'>    rcu_start_gp(rsp, flags);  /* releases above lock */  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 如果有等着调用的回调函数，那么调用它。 */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp))  
</span><span class='line'>    invoke_rcu_callbacks(rsp, rdp);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;软件中断其实就是调用之前提到过的函数来完成具体的任务。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux kernel 内存屏障在RCU上的应用]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu-apply/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-06-02T17:36:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu-apply&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/jianchaolv/article/details/7527647"&gt;http://blog.csdn.net/jianchaolv/article/details/7527647&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内存屏障主要解决的问题是编译器的优化和CPU的乱序执行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;编译器在优化的时候，生成的汇编指令可能和c语言程序的执行顺序不一样，在需要程序严格按照c语言顺序执行时，需要显式的告诉编译不需要优化，这在linux下是通过barrier()宏完成的，它依靠volidate关键字和memory关键字，前者告诉编译barrier()周围的指令不要被优化，后者作用是告诉编译器汇编代码会使内存里面的值更改，编译器应使用内存里的新值而非寄存器里保存的老值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;同样，CPU执行会通过乱序以提高性能。汇编里的指令不一定是按照我们看到的顺序执行的。linux中通过mb()系列宏来保证执行的顺序。简单的说，如果在程序某处插入了mb()/rmb()/wmb()宏，则宏之前的程序保证比宏之后的程序先执行，从而实现串行化。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;即使是编译器生成的汇编码有序，处理器也不一定能保证有序。就算编译器生成了有序的汇编码，到了处理器那里也拿不准是不 是会按照代码顺序执行。所以就算编译器保证有序了，程序员也还是要往代码里面加内存屏障才能保证绝对访存有序，这倒不如编译器干脆不管算了，因为内存屏障 本身就是一个sequence point，加入后已经能够保证编译器也有序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;处理器虽然乱序执行，但最终会得出正确的结果，所以逻辑上讲程序员本不需要关心处理器乱序的问题。但是在SMP并发执行的情况下，处理器无法知道并发程序之间的逻辑，比如，在不同core上的读者和写者之间的逻辑。简单讲，处理器只保证在单个core上按照code中的顺序给出最终结果。这就要求程序员通过mb()/rmb()/wmb()/read_barrier_depends来告知处理器，从而得到正确的并发结果。内存屏障、数据依赖屏障都是为了处理SMP环境下的数据同步问题，UP根本不存在这个问题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面分析下内存屏障在RCU上的应用：</span></code></pre></td></tr></table></div></figure>
    #define rcu_assign_pointer(p, v) ({ \
        smp_wmb();                      \
        (p)= (v);                       \
    })</p>

<pre><code>#define rcu_dereference(p) ({     \
    typeof(p)_________p1 = p;     \
    smp_read_barrier_depends();   \
    (_________p1);                \
}) 
</code></pre>

<pre><code>
rcu_assign_pointer()通常用于写者的发布，rcu_dereference()通常用于读者的订阅。

写者：
</code></pre>

<pre><code>p-&gt;a = 1;
p-&gt;b = 2;
p-&gt;c = 3;
rcu_assign_pointer(gp, p);
</code></pre>

<pre><code>
读者：
</code></pre>

<pre><code>rcu_read_lock();
p = rcu_dereference(gp);
if (p != NULL) {
    do_something_with(p-&gt;a, p-&gt;b, p-&gt;c);
}
rcu_read_unlock();
</code></pre>

<pre><code>
rcu_assign_pointer()是说，先把那块内存写好，再把指针指过去。这里使用的内存写屏障是为了保证并发的读者读到数据一致性。在这条语句之前的读者读到旧的指针和旧的内存，这条语句之后的读者读到新的指针和新的内存。如果没有这条语句，很有可能出现读者读到新的指针和旧的内存。也就是说，这里通过内存屏障刷新了p所指向的内存的值，至于gp本身的值有没有更新还不确定。实际上，gp本身值的真正更新要等到并发的读者来促发。

rcu_dereference() 原语用的是数据依赖屏障，smp_read_barrier_dependence,它要求后面的读操作如果依赖前面的读操作，则前面的读操作需要首先完成。根据数据之间的依赖，要读p-&gt;a, p-&gt;b, p-&gt;c, 就必须先读p，要先读p，就必须先读p1，要先读p1，就必须先读gp。也就是说读者所在的core在进行后续的操作之前，gp必须是同步过的当前时刻的最新值。如果没有这个数据依赖屏障，有可能读者所在的core很长一段时间内一直用的是旧的gp值。所以，这里使用数据依赖屏障是为了督促写者将gp值准备好，是为了呼应写者，这个呼应的诉求是通过数据之间的依赖关系来促发的，也就是说到了非呼应不可的地步了。

下面看看kernel中常用的链表操作是如何使用这样的发布、订阅机制的：

写者：
</code></pre>

<pre><code>static inline void list_add_rcu(struct list_head *new, struct list_head *head)
{
    __list_add_rcu(new, head, head-&gt;next);
}

static inline void __list_add_rcu(struct list_head * new,
struct list_head * prev, struct list_head * next)
{
    new-&gt;next = next;
    new-&gt;prev = prev;
    smp_wmb();
    next-&gt;prev = new;
    prev-&gt;next = new;
}
</code></pre>

<pre><code>
读者：
</code></pre>

<pre><code>#define list_for_each_entry_rcu(pos, head, member)                \
    for(pos = list_entry((head)-&gt;next, typeof(*pos), member);     \
            prefetch(rcu_dereference(pos)-&gt;member.next),          \
            &amp;pos-&gt;member!= (head);                                \
        pos= list_entry(pos-&gt;member.next, typeof(*pos), member))
</code></pre>

<pre><code>
写者通过调用list_add_rcu来发布新的节点，其实是发布next-&gt;prev, prev-&gt;next这两个指针。读者通过list_for_each_entry_rcu来订阅这连个指针，我们将list_for_each_entry_rcu订阅部分简化如下：
</code></pre>

<pre><code>pos = prev-&gt;next;
prefetch(rcu_dereference(pos)-&gt;next);
</code></pre>

<pre><code>
读者通过rcu_dereference订阅的是pos，而由于数据依赖关系，又间接订阅了prev-&gt;next指针，或者说是促发prev-&gt;next的更新。

下面介绍下其他相关链表操作的函数：

safe版本的iterate的函数？为什么就safe了？
</code></pre>

<pre><code>#define list_for_each_safe(pos,n, head)                    \
    for(pos = (head)-&gt;next, n = pos-&gt;next; pos != (head);  \
            pos= n, n = pos-&gt;next)

#define list_for_each(pos, head)                                \
    for(pos = (head)-&gt;next; prefetch(pos-&gt;next), pos != (head); \
            pos= pos-&gt;next)
</code></pre>

<pre><code>
当在iterate的过程中执行删除操作的时候，比如：
</code></pre>

<pre><code>list_for_each(pos,head)
    list_del(pos)
</code></pre>

<pre><code>这样会断链，为了避免这种断链，增加了safe版本的iterate函数。另外，由于preftech的缘故，有可能引用一个无效的指针LIST_POISON1。这里的safe是指，为避免有些cpu的preftech的影响，干脆在iterate的过程中去掉preftech。

还有一个既有rcu+safe版本的iterative函数：
</code></pre>

<pre><code>#define list_for_each_safe_rcu(pos, n, head)              \
    for(pos = (head)-&gt;next;                               \
            n= rcu_dereference(pos)-&gt;next, pos != (head); \
            pos= n)
</code></pre>

<p>```</p>

<p>只要用这个版本的iterate函数，就可以和多个_rcu版本的写操作(如：list_add_rcu())并发执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符设备驱动程序]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev</id>
    <content type="html"><![CDATA[<p><a href="http://techlife.blog.51cto.com/212583/39225">http://techlife.blog.51cto.com/212583/39225</a></p>

<p><a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/">简单样例</a></p>

<p>实现如下的功能:<br/>
  -字符设备驱动程序的结构及驱动程序需要实现的系统调用<br/>
  -可以使用cat命令或者自编的readtest命令读出"设备"里的内容<br/>
  -以8139网卡为例，演示了I/O端口和I/O内存的使用</p>

<p>本文中的大部分内容在Linux Device Driver这本书中都可以找到，这本书是Linux驱动开发者的唯一圣经。</p>

<hr />

<p>先来看看整个驱动程序的入口，是char8139_init()这个函数，如果不指定MODULE_LICENSE(&ldquo;GPL&rdquo;), 在模块插入内核的时候会出错，因为将非"GPL"的模块插入内核就沾污了内核的"GPL"属性。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
<span class='line-number'>1146</span>
<span class='line-number'>1147</span>
<span class='line-number'>1148</span>
<span class='line-number'>1149</span>
<span class='line-number'>1150</span>
<span class='line-number'>1151</span>
<span class='line-number'>1152</span>
<span class='line-number'>1153</span>
<span class='line-number'>1154</span>
<span class='line-number'>1155</span>
<span class='line-number'>1156</span>
<span class='line-number'>1157</span>
<span class='line-number'>1158</span>
<span class='line-number'>1159</span>
<span class='line-number'>1160</span>
<span class='line-number'>1161</span>
<span class='line-number'>1162</span>
<span class='line-number'>1163</span>
<span class='line-number'>1164</span>
<span class='line-number'>1165</span>
<span class='line-number'>1166</span>
<span class='line-number'>1167</span>
<span class='line-number'>1168</span>
<span class='line-number'>1169</span>
<span class='line-number'>1170</span>
<span class='line-number'>1171</span>
<span class='line-number'>1172</span>
<span class='line-number'>1173</span>
<span class='line-number'>1174</span>
<span class='line-number'>1175</span>
<span class='line-number'>1176</span>
<span class='line-number'>1177</span>
<span class='line-number'>1178</span>
<span class='line-number'>1179</span>
<span class='line-number'>1180</span>
<span class='line-number'>1181</span>
<span class='line-number'>1182</span>
<span class='line-number'>1183</span>
<span class='line-number'>1184</span>
<span class='line-number'>1185</span>
<span class='line-number'>1186</span>
<span class='line-number'>1187</span>
<span class='line-number'>1188</span>
<span class='line-number'>1189</span>
<span class='line-number'>1190</span>
<span class='line-number'>1191</span>
<span class='line-number'>1192</span>
<span class='line-number'>1193</span>
<span class='line-number'>1194</span>
<span class='line-number'>1195</span>
<span class='line-number'>1196</span>
<span class='line-number'>1197</span>
<span class='line-number'>1198</span>
<span class='line-number'>1199</span>
<span class='line-number'>1200</span>
<span class='line-number'>1201</span>
<span class='line-number'>1202</span>
<span class='line-number'>1203</span>
<span class='line-number'>1204</span>
<span class='line-number'>1205</span>
<span class='line-number'>1206</span>
<span class='line-number'>1207</span>
<span class='line-number'>1208</span>
<span class='line-number'>1209</span>
<span class='line-number'>1210</span>
<span class='line-number'>1211</span>
<span class='line-number'>1212</span>
<span class='line-number'>1213</span>
<span class='line-number'>1214</span>
<span class='line-number'>1215</span>
<span class='line-number'>1216</span>
<span class='line-number'>1217</span>
<span class='line-number'>1218</span>
<span class='line-number'>1219</span>
<span class='line-number'>1220</span>
<span class='line-number'>1221</span>
<span class='line-number'>1222</span>
<span class='line-number'>1223</span>
<span class='line-number'>1224</span>
<span class='line-number'>1225</span>
<span class='line-number'>1226</span>
<span class='line-number'>1227</span>
<span class='line-number'>1228</span>
<span class='line-number'>1229</span>
<span class='line-number'>1230</span>
<span class='line-number'>1231</span>
<span class='line-number'>1232</span>
<span class='line-number'>1233</span>
<span class='line-number'>1234</span>
<span class='line-number'>1235</span>
<span class='line-number'>1236</span>
<span class='line-number'>1237</span>
<span class='line-number'>1238</span>
<span class='line-number'>1239</span>
<span class='line-number'>1240</span>
<span class='line-number'>1241</span>
<span class='line-number'>1242</span>
<span class='line-number'>1243</span>
<span class='line-number'>1244</span>
<span class='line-number'>1245</span>
<span class='line-number'>1246</span>
<span class='line-number'>1247</span>
<span class='line-number'>1248</span>
<span class='line-number'>1249</span>
<span class='line-number'>1250</span>
<span class='line-number'>1251</span>
<span class='line-number'>1252</span>
<span class='line-number'>1253</span>
<span class='line-number'>1254</span>
<span class='line-number'>1255</span>
<span class='line-number'>1256</span>
<span class='line-number'>1257</span>
<span class='line-number'>1258</span>
<span class='line-number'>1259</span>
<span class='line-number'>1260</span>
<span class='line-number'>1261</span>
<span class='line-number'>1262</span>
<span class='line-number'>1263</span>
<span class='line-number'>1264</span>
<span class='line-number'>1265</span>
<span class='line-number'>1266</span>
<span class='line-number'>1267</span>
<span class='line-number'>1268</span>
<span class='line-number'>1269</span>
<span class='line-number'>1270</span>
<span class='line-number'>1271</span>
<span class='line-number'>1272</span>
<span class='line-number'>1273</span>
<span class='line-number'>1274</span>
<span class='line-number'>1275</span>
<span class='line-number'>1276</span>
<span class='line-number'>1277</span>
<span class='line-number'>1278</span>
<span class='line-number'>1279</span>
<span class='line-number'>1280</span>
<span class='line-number'>1281</span>
<span class='line-number'>1282</span>
<span class='line-number'>1283</span>
<span class='line-number'>1284</span>
<span class='line-number'>1285</span>
<span class='line-number'>1286</span>
<span class='line-number'>1287</span>
<span class='line-number'>1288</span>
<span class='line-number'>1289</span>
<span class='line-number'>1290</span>
<span class='line-number'>1291</span>
<span class='line-number'>1292</span>
<span class='line-number'>1293</span>
<span class='line-number'>1294</span>
<span class='line-number'>1295</span>
<span class='line-number'>1296</span>
<span class='line-number'>1297</span>
<span class='line-number'>1298</span>
<span class='line-number'>1299</span>
<span class='line-number'>1300</span>
<span class='line-number'>1301</span>
<span class='line-number'>1302</span>
<span class='line-number'>1303</span>
<span class='line-number'>1304</span>
<span class='line-number'>1305</span>
<span class='line-number'>1306</span>
<span class='line-number'>1307</span>
<span class='line-number'>1308</span>
<span class='line-number'>1309</span>
<span class='line-number'>1310</span>
<span class='line-number'>1311</span>
<span class='line-number'>1312</span>
<span class='line-number'>1313</span>
<span class='line-number'>1314</span>
<span class='line-number'>1315</span>
<span class='line-number'>1316</span>
<span class='line-number'>1317</span>
<span class='line-number'>1318</span>
<span class='line-number'>1319</span>
<span class='line-number'>1320</span>
<span class='line-number'>1321</span>
<span class='line-number'>1322</span>
<span class='line-number'>1323</span>
<span class='line-number'>1324</span>
<span class='line-number'>1325</span>
<span class='line-number'>1326</span>
<span class='line-number'>1327</span>
<span class='line-number'>1328</span>
<span class='line-number'>1329</span>
<span class='line-number'>1330</span>
<span class='line-number'>1331</span>
<span class='line-number'>1332</span>
<span class='line-number'>1333</span>
<span class='line-number'>1334</span>
<span class='line-number'>1335</span>
<span class='line-number'>1336</span>
<span class='line-number'>1337</span>
<span class='line-number'>1338</span>
<span class='line-number'>1339</span>
<span class='line-number'>1340</span>
<span class='line-number'>1341</span>
<span class='line-number'>1342</span>
<span class='line-number'>1343</span>
<span class='line-number'>1344</span>
<span class='line-number'>1345</span>
<span class='line-number'>1346</span>
<span class='line-number'>1347</span>
<span class='line-number'>1348</span>
<span class='line-number'>1349</span>
<span class='line-number'>1350</span>
<span class='line-number'>1351</span>
<span class='line-number'>1352</span>
<span class='line-number'>1353</span>
<span class='line-number'>1354</span>
<span class='line-number'>1355</span>
<span class='line-number'>1356</span>
<span class='line-number'>1357</span>
<span class='line-number'>1358</span>
<span class='line-number'>1359</span>
<span class='line-number'>1360</span>
<span class='line-number'>1361</span>
<span class='line-number'>1362</span>
<span class='line-number'>1363</span>
<span class='line-number'>1364</span>
<span class='line-number'>1365</span>
<span class='line-number'>1366</span>
<span class='line-number'>1367</span>
<span class='line-number'>1368</span>
<span class='line-number'>1369</span>
<span class='line-number'>1370</span>
<span class='line-number'>1371</span>
<span class='line-number'>1372</span>
<span class='line-number'>1373</span>
<span class='line-number'>1374</span>
<span class='line-number'>1375</span>
<span class='line-number'>1376</span>
<span class='line-number'>1377</span>
<span class='line-number'>1378</span>
<span class='line-number'>1379</span>
<span class='line-number'>1380</span>
<span class='line-number'>1381</span>
<span class='line-number'>1382</span>
<span class='line-number'>1383</span>
<span class='line-number'>1384</span>
<span class='line-number'>1385</span>
<span class='line-number'>1386</span>
<span class='line-number'>1387</span>
<span class='line-number'>1388</span>
<span class='line-number'>1389</span>
<span class='line-number'>1390</span>
<span class='line-number'>1391</span>
<span class='line-number'>1392</span>
<span class='line-number'>1393</span>
<span class='line-number'>1394</span>
<span class='line-number'>1395</span>
<span class='line-number'>1396</span>
<span class='line-number'>1397</span>
<span class='line-number'>1398</span>
<span class='line-number'>1399</span>
<span class='line-number'>1400</span>
<span class='line-number'>1401</span>
<span class='line-number'>1402</span>
<span class='line-number'>1403</span>
<span class='line-number'>1404</span>
<span class='line-number'>1405</span>
<span class='line-number'>1406</span>
<span class='line-number'>1407</span>
<span class='line-number'>1408</span>
<span class='line-number'>1409</span>
<span class='line-number'>1410</span>
<span class='line-number'>1411</span>
<span class='line-number'>1412</span>
<span class='line-number'>1413</span>
<span class='line-number'>1414</span>
<span class='line-number'>1415</span>
<span class='line-number'>1416</span>
<span class='line-number'>1417</span>
<span class='line-number'>1418</span>
<span class='line-number'>1419</span>
<span class='line-number'>1420</span>
<span class='line-number'>1421</span>
<span class='line-number'>1422</span>
<span class='line-number'>1423</span>
<span class='line-number'>1424</span>
<span class='line-number'>1425</span>
<span class='line-number'>1426</span>
<span class='line-number'>1427</span>
<span class='line-number'>1428</span>
<span class='line-number'>1429</span>
<span class='line-number'>1430</span>
<span class='line-number'>1431</span>
<span class='line-number'>1432</span>
<span class='line-number'>1433</span>
<span class='line-number'>1434</span>
<span class='line-number'>1435</span>
<span class='line-number'>1436</span>
<span class='line-number'>1437</span>
<span class='line-number'>1438</span>
<span class='line-number'>1439</span>
<span class='line-number'>1440</span>
<span class='line-number'>1441</span>
<span class='line-number'>1442</span>
<span class='line-number'>1443</span>
<span class='line-number'>1444</span>
<span class='line-number'>1445</span>
<span class='line-number'>1446</span>
<span class='line-number'>1447</span>
<span class='line-number'>1448</span>
<span class='line-number'>1449</span>
<span class='line-number'>1450</span>
<span class='line-number'>1451</span>
<span class='line-number'>1452</span>
<span class='line-number'>1453</span>
<span class='line-number'>1454</span>
<span class='line-number'>1455</span>
<span class='line-number'>1456</span>
<span class='line-number'>1457</span>
<span class='line-number'>1458</span>
<span class='line-number'>1459</span>
<span class='line-number'>1460</span>
<span class='line-number'>1461</span>
<span class='line-number'>1462</span>
<span class='line-number'>1463</span>
<span class='line-number'>1464</span>
<span class='line-number'>1465</span>
<span class='line-number'>1466</span>
<span class='line-number'>1467</span>
<span class='line-number'>1468</span>
<span class='line-number'>1469</span>
<span class='line-number'>1470</span>
<span class='line-number'>1471</span>
<span class='line-number'>1472</span>
<span class='line-number'>1473</span>
<span class='line-number'>1474</span>
<span class='line-number'>1475</span>
<span class='line-number'>1476</span>
<span class='line-number'>1477</span>
<span class='line-number'>1478</span>
<span class='line-number'>1479</span>
<span class='line-number'>1480</span>
<span class='line-number'>1481</span>
<span class='line-number'>1482</span>
<span class='line-number'>1483</span>
<span class='line-number'>1484</span>
<span class='line-number'>1485</span>
<span class='line-number'>1486</span>
<span class='line-number'>1487</span>
<span class='line-number'>1488</span>
<span class='line-number'>1489</span>
<span class='line-number'>1490</span>
<span class='line-number'>1491</span>
<span class='line-number'>1492</span>
<span class='line-number'>1493</span>
<span class='line-number'>1494</span>
<span class='line-number'>1495</span>
<span class='line-number'>1496</span>
<span class='line-number'>1497</span>
<span class='line-number'>1498</span>
<span class='line-number'>1499</span>
<span class='line-number'>1500</span>
<span class='line-number'>1501</span>
<span class='line-number'>1502</span>
<span class='line-number'>1503</span>
<span class='line-number'>1504</span>
<span class='line-number'>1505</span>
<span class='line-number'>1506</span>
<span class='line-number'>1507</span>
<span class='line-number'>1508</span>
<span class='line-number'>1509</span>
<span class='line-number'>1510</span>
<span class='line-number'>1511</span>
<span class='line-number'>1512</span>
<span class='line-number'>1513</span>
<span class='line-number'>1514</span>
<span class='line-number'>1515</span>
<span class='line-number'>1516</span>
<span class='line-number'>1517</span>
<span class='line-number'>1518</span>
<span class='line-number'>1519</span>
<span class='line-number'>1520</span>
<span class='line-number'>1521</span>
<span class='line-number'>1522</span>
<span class='line-number'>1523</span>
<span class='line-number'>1524</span>
<span class='line-number'>1525</span>
<span class='line-number'>1526</span>
<span class='line-number'>1527</span>
<span class='line-number'>1528</span>
<span class='line-number'>1529</span>
<span class='line-number'>1530</span>
<span class='line-number'>1531</span>
<span class='line-number'>1532</span>
<span class='line-number'>1533</span>
<span class='line-number'>1534</span>
<span class='line-number'>1535</span>
<span class='line-number'>1536</span>
<span class='line-number'>1537</span>
<span class='line-number'>1538</span>
<span class='line-number'>1539</span>
<span class='line-number'>1540</span>
<span class='line-number'>1541</span>
<span class='line-number'>1542</span>
<span class='line-number'>1543</span>
<span class='line-number'>1544</span>
<span class='line-number'>1545</span>
<span class='line-number'>1546</span>
<span class='line-number'>1547</span>
<span class='line-number'>1548</span>
<span class='line-number'>1549</span>
<span class='line-number'>1550</span>
<span class='line-number'>1551</span>
<span class='line-number'>1552</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module_init(char8139_init);
</span><span class='line'>module_exit(char8139_exit);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;MODULE_LICENSE("GPL");
</span><span class='line'>MODULE_AUTHOR("ypixunil");
</span><span class='line'>MODULE_DESCRIPTION("Wierd char device driver for Realtek 8139 NIC");
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>接着往下看char8139_init()
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int __init char8139_init(void)
</span><span class='line'>{
</span><span class='line'>int result;
</span><span class='line'>
</span><span class='line'>PDBG("hello. init.\n");
</span><span class='line'>
</span><span class='line'>/* register our char device */
</span><span class='line'>result = register_chrdev(char8139_major, "char8139", &amp;char8139_fops);
</span><span class='line'>if (result &lt; 0) {
</span><span class='line'>    PDBG("Cannot allocate major device number!\n");
</span><span class='line'>    return result;
</span><span class='line'>}
</span><span class='line'>/* register_chrdev() will assign a major device number and return if it called
</span><span class='line'> * with "major" parameter set to 0 */
</span><span class='line'>if(char8139_major == 0)
</span><span class='line'>    char8139_major=result;
</span><span class='line'>
</span><span class='line'>/* allocate some kernel memory we need */
</span><span class='line'>buffer = (unsigned char*)(kmalloc(CHAR8139_BUFFER_SIZE, GFP_KERNEL));
</span><span class='line'>if (!buffer) {
</span><span class='line'>    PDBG("Cannot allocate memory!\n");
</span><span class='line'>    result = -ENOMEM;
</span><span class='line'>    goto init_fail;
</span><span class='line'>}
</span><span class='line'>memset(buffer, 0, CHAR8139_BUFFER_SIZE);
</span><span class='line'>p_buf = buffer;
</span><span class='line'>
</span><span class='line'>return 0; /* everything's ok */
</span><span class='line'>
</span><span class='line'>init_fail:
</span><span class='line'>char8139_exit();
</span><span class='line'>return result;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个函数首先的工作就是使用register_chrdev()注册我们的设备的主设备号和系统调用。系统调用对于字符设备驱动程序来说就是file_operations接口。
</span><span class='line'>
</span><span class='line'>我们先来看看char8139_major的定义，
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define DEFAULT_MAJOR 145         /* data structure used by our driver */
</span><span class='line'>int char8139_major=DEFAULT_MAJOR; /* major device number. if initial value is 0,
</span><span class='line'>                               * the kernel will dynamically assign a major device
</span><span class='line'>                               * number in register_chrdev() */
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这里我们指定我们的设备的主设备号是145,你必须找到一个系统中没有用的主设备号，可以通过"cat /proc/devices"命令来查看系统中已经使用的主设备号。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[michael@char8139]$ cat /proc/devices
</span><span class='line'>Character devices:
</span><span class='line'>1 mem
</span><span class='line'>2 pty
</span><span class='line'>3 ttyp
</span><span class='line'>4 ttyS
</span><span class='line'>5 cua
</span><span class='line'>7 vcs
</span><span class='line'>10 misc
</span><span class='line'>14 sound
</span><span class='line'>116 alsa
</span><span class='line'>128 ptm
</span><span class='line'>136 pts
</span><span class='line'>162 raw
</span><span class='line'>180 usb
</span><span class='line'>195 nvidia
</span><span class='line'>226 drm
</span><span class='line'>
</span><span class='line'>Block devices:
</span><span class='line'>2 fd
</span><span class='line'>3 ide0
</span><span class='line'>22 ide1
</span><span class='line'>[michael@char8139]$
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>可见在我的系统中，145还没有被使用。
</span><span class='line'>
</span><span class='line'>指定主设备号值得考虑。像上面这样指定一个主设备号显然缺乏灵活性，而且不能保证一个驱动程序在所有的机器上都能用。可以在调用register_chrdev()时将第一个参数，即主设备号指定为0,这样register_chrdev()会分配一个空闲的主设备号作为返回值。 但是这样也有问题，我们只有在将模块插入内核之后才能得到我们设备的主设备号(使用 "cat /proc/devices")，但是要操作设备需要在系统/dev目录下建立设备结点，而建立结点时要指定主设备号。当然，你可以写一个脚本来自动完成这些事情。
</span><span class='line'>
</span><span class='line'>总之，作为一个演示，我们还是指定主设备号为145，这样我们可以在/dev/目录下建立几个设备节点。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[root@char8139]$ mknod /dev/char8139_0 c 145 0
</span><span class='line'>[root@char8139]$ mknod /dev/char8139_0 c 145 17
</span><span class='line'>[root@char8139]$ mknod /dev/char8139_0 c 145 36
</span><span class='line'>[root@char8139]$ mknod /dev/char8139_0 c 145 145
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>看一下我们建立的节点
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[michael@char8139]$ ll /dev/char8139*
</span><span class='line'>crw-r--r-- 1 root root 145, 0 2004-12-26 20:33 /dev/char8139_0
</span><span class='line'>crw-r--r-- 1 root root 145, 17 2004-12-26 20:34 /dev/char8139_1
</span><span class='line'>crw-r--r-- 1 root root 145, 36 2004-12-26 20:34 /dev/char8139_2
</span><span class='line'>crw-r--r-- 1 root root 145, 145 2004-12-26 20:34 /dev/char8139_3
</span><span class='line'>[michael@char8139]$
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>我们建立了四个节点，使用了四个次设备号，后面我们会说明次设备号的作用。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>再来看看我们的file_operations的定义。这里其实只实现了read()，open()，release()三个系统调用，ioctl()只是简单返回。更有write()等函数甚至根本没有声明，没有声明的函数系统可能会调用默认的操作。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct file_operations char8139_fops =
</span><span class='line'>{
</span><span class='line'>owner: THIS_MODULE,
</span><span class='line'>read: char8139_read,
</span><span class='line'>ioctl: char8139_ioctl,
</span><span class='line'>open: char8139_open,
</span><span class='line'>release: char8139_release,
</span><span class='line'>};
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>file_operations是每个字符设备驱动程序必须实现的系统调用，当用户对/dev中我们的设备对应结点进行操作时，linux就会调用我们驱动程序中提供的系统调用。比如用户敲入"cat /dev/char8139_0"命令，想想cat这个应用程序的实现，首先它肯定调用C语言库里的open()函数去打开/dev/char8139_0这个文件，到了系统这一层，系统会看到/dev/char8139_0不是普通磁盘文件，而是一个代表字符设备的节点，所以系统会根据/dev/char8139_0的主设备号来查找是不是已经有驱动程序使用这个相同的主设备号进行了注册，如果有，就调用驱动程序的open()实现。
</span><span class='line'>
</span><span class='line'>为什么要这样干？因为要提供抽象，提供统一的接口，别忘了操作系统的作用之一就是这个。因为我们的设备提供的统一的接口，所以cat这个应用程序使用一般的文件操作就能从我们的设备中读出数据，
</span><span class='line'>而且more, less这些应用程序都能从我们的设备中读出数据。
</span><span class='line'>
</span><span class='line'>现在来看看我们的设备
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define CHAR8139_BUFFER_SIZE 2000
</span><span class='line'>unsigned char *buffer=NULL; /* driver data buffer */
</span><span class='line'>unsigned char *p_buf;
</span><span class='line'>unsigned int data_size=0;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;我们的设备很简单，一个2000字节的缓冲区， data_size指定缓冲区中有效数据的字节数。我们的设备只支持读不支持写。我们在char8139_init()中为缓冲区分配空间。
</span><span class='line'>
</span><span class='line'>char8139_exit()里面的操作就是char8139_init()里面操作的反向操作。
</span><span class='line'>
</span><span class='line'>现在我们来看看，假如用户调用了"cat /dev/char8139_3"这个命令会发生什么事情。
</span><span class='line'>
</span><span class='line'>根据前面的介绍，我们驱动程序中的open()函数会被调用。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int char8139_open(struct inode *node, struct file *flip)
</span><span class='line'>{
</span><span class='line'>int type = MINOR(node-&gt;i_rdev)&gt;&gt;4;
</span><span class='line'>int num = MINOR(node-&gt;i_rdev) &amp; 0x0F;
</span><span class='line'>
</span><span class='line'>/* put some char in buffer to reflect the minor device number */
</span><span class='line'>*buffer=(unsigned char)('0');
</span><span class='line'>*(buffer+1)=(unsigned char)('x');
</span><span class='line'>*(buffer+2)=(unsigned char)('0'+type);
</span><span class='line'>*(buffer+3)=(unsigned char)('0'+num);
</span><span class='line'>*(buffer+4)=(unsigned char)('\n');
</span><span class='line'>data_size+=5;
</span><span class='line'>
</span><span class='line'>PDBG("Ok. Find treasure! 8139 I/O port base: %x\n", detect_8139_io_port());
</span><span class='line'>PDBG("OK. Find treasure! 8139 I/O memory base address: %lx\n",
</span><span class='line'>detect_8139_io_mem());
</span><span class='line'>
</span><span class='line'>MOD_INC_USE_COUNT;
</span><span class='line'>
</span><span class='line'>return 0;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这里演示了次设备号的作用，它让我们知道用户操作的是哪一个"次设备"，是/dev/char8139_0还是/dev/char8139_3，因为对不同的"次设备"，具体的操作方法可能是不一样的，这样就为一个驱动程序控制多个类似的设备提供了可能。
</span><span class='line'>
</span><span class='line'>我们根据次设备号的不同，在buffer中填入不同的字符(次设备号的16进制表示)。
</span><span class='line'>
</span><span class='line'>接着驱动程序中的read()函数会被调用，因为cat程序的实现就是读取文件中的内容。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ssize_t char8139_read (struct file *filp, char *buf, size_t count, loff_t *f_pos)
</span><span class='line'>{
</span><span class='line'>ssize_t ret=0;
</span><span class='line'>
</span><span class='line'>PDBG("copy to user. count=%d, f_pos=%ld\n", (int)count, (long)*f_pos);
</span><span class='line'>if (*f_pos&gt;= data_size)
</span><span class='line'>    return ret;
</span><span class='line'>if (*f_pos + count &gt; data_size)
</span><span class='line'>    count = data_size-*f_pos;
</span><span class='line'>if (copy_to_user(buf, p_buf, count))
</span><span class='line'>{
</span><span class='line'>    PDBG("OOps, copy to user error.\n");
</span><span class='line'>    return -EFAULT;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>p_buf += count;
</span><span class='line'>*f_pos += count;
</span><span class='line'>ret = count;
</span><span class='line'>
</span><span class='line'>return ret;
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;要正确的实现一个read()调用，你得想一想一个应用程序是如何调用read()从文件中读取数据的。如果你想明白了就很简单，驱动程序所要做的就是把恰当的数据传递给应用程序，这是使用copy_to_user()函数完成的。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;另外，我们必须得意识到，这里只是一个很简单的演示。还有很多复杂的问题有待考虑，比如两个应用程序可能同时打开我们设备，我们的设备应该怎样反应(这取决于具体的设备应有的行为)，还有互斥的问题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;然后我们看看I/O端口和I/O内存的操作。这里使用8139网卡作为一个硬件实例来演示I/O端口和I/O内存的操作。没有什么特别的，都是标准的步骤。在使用时需要注意，如果你的系统中已经有8139网卡的驱动程序，必须先关掉网络设备，卸载驱动，然后再使用本驱动程序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;使用程序包的步骤：(在我的Debian系统上如此，你的可能不同)&lt;br/&gt;
</span><span class='line'>1. 解压&lt;br/&gt;
</span><span class='line'>2. 编译(/usr/src/linux处必须要有内核源代码)&lt;br/&gt;
</span><span class='line'>3. ifconfig eth0 down 关掉网络设备&lt;br/&gt;
</span><span class='line'>rmmod 8139too 卸载原来的8139网卡驱动&lt;br/&gt;
</span><span class='line'>insmod char8139.o 插入我们的模块&lt;br/&gt;
</span><span class='line'>(insmod会出错， 如果你现在运行的linux版本不是你编译本驱动程序时使用的内核源代码的版本，insmod时会报告模块版本与内核版本不一致。这时，你得看看内核源代码中/include/linux/version.h文件，这个文件中的UTS_RELEASE定义了内核的版本号，你可以在驱动程序中预先定义这个宏为当前运行的内核的版本号，这样就能避免上述错误。)&lt;br/&gt;
</span><span class='line'>4. mknode(见本文前述)&lt;br/&gt;
</span><span class='line'>5. 试试我们的设备&lt;br/&gt;
</span><span class='line'>./readtest&lt;br/&gt;
</span><span class='line'>或者&lt;br/&gt;
</span><span class='line'>cat /dev/char8139_0或&lt;br/&gt;
</span><span class='line'>cat /dev/char8139_1或&lt;br/&gt;
</span><span class='line'>cat /dev/char8139_2或&lt;br/&gt;
</span><span class='line'>cat /dev/char8139_3&lt;br/&gt;
</span><span class='line'>6. 恢复系统&lt;br/&gt;
</span><span class='line'>rmmod char8139&lt;br/&gt;
</span><span class='line'>modprobe 8139too&lt;br/&gt;
</span><span class='line'>ifconfig eth0 up&lt;br/&gt;
</span><span class='line'>如果你使用dhcp可能还需要运行dhclient&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux 内核引导参数简介]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/02/11/kernel-base-param/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-02-11T15:16:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/02/11/kernel-base-param&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h3&gt;概述&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  内核引导参数大体上可以分为两类：一类与设备无关、另一类与设备有关。与设备有关的引导参数多如牛毛，需要你自己阅读内核中的相应驱动程序源码以获取其能够接受的引导参数。比如，如果你想知道可以向 AHA1542 SCSI 驱动程序传递哪些引导参数，那么就查看 drivers/scsi/aha1542.c 文件，一般在前面 100 行注释里就可以找到所接受的引导参数说明。大多数参数是通过"__setup(&hellip; , &hellip;)&ldquo;函数设置的，少部分是通过"early_param(&hellip; , &hellip;)"函数设置的，逗号前的部分就是引导参数的名称，后面的部分就是处理这些参数的函数名。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[提示]你可以在源码树的根目录下试一试下面两个命令：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>grep -r '\b__setup *(' *
</span><span class='line'>grep -r '\bearly_param *(' *
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>格式上，多个参数之间用空格分割，参数值是一个逗号分割的列表，并且参数值中不能包含空白。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;正确：ether=9,0x300,0xd0000,0xd4000,eth0  root=/dev/sda2&lt;br/&gt;
</span><span class='line'>错误：ether = 9, 0x300, 0xd0000, 0xd4000, eth0  root = /dev/sda2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;注意，所有引导参数都是大小写敏感的！&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在内核运行起来之后，可以通过 cat /proc/cmdline 命令查看当初使用的引导参数以及相应的值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;内核模块&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于模块而言，引导参数只能用于直接编译到核心中的模块，格式是"模块名.参数=值"，比如"usbcore.blinkenlights=1"。动态加载的模块则可以在 modprobe 命令行上指定相应的参数值，比如"modprobe usbcore blinkenlights=1"。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以使用"modinfo -p ${modulename}&ldquo;命令显示可加载模块的所有可用参数。已经加载到内核中的模块会在 /sys/module/${modulename}/parameters/ 中显示出其参数，并且某些参数的值还可以在运行时通过"echo -n ${value} &gt; /sys/module/${modulename}/parameters/${parm}"进行修改。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;内核如何处理引导参数&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;绝大部分的内核引导参数的格式如下(每个参数的值列表中最多只能有十项)：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;name[=value_1][,value_2]&hellip;[,value_10]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果"name"不能被识别并且满足"name=value"的格式，那么将被解译为一个环境变量(比如"TERM=linux"或"BOOT_IMAGE=vmlinuz.bak")，否则将被原封不动的传递给 init 程序(比如"single")。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核可以接受的参数个数没有限制，但是整个命令行的总长度(参数/值/空格全部包含在内)却是有限制的，定义在 include/asm/setup.h 中的 COMMAND_LINE_SIZE 宏中(对于X86_64而言是2048)。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;内核引导参数精选&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;由于引导参数多如牛毛，本文不可能涉及全部，因此本文只基于 X86_64 平台以及 Linux-3.13.2 精选了一些与设备无关的引导参数以及少部分与设备有关的引导参数，过时的参数、非x86平台参数、与设备有关的参数，基本上都被忽略了。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;[提示]内核源码树下的 Documentation/kernel-parameters.txt 和 Documentation/x86/x86_64/boot-options.txt 文件列出了所有可用的引导参数，并作了简要说明。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;标记说明&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;并不是所有的参数都是永远可用的，只有在特定的模块存在并且相应的硬件也存在的情况下才可用。引导参数上面的方括号说明了其依赖关系，其中使用的标记解释如下：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>ACPI     开启了高级配置与电源接口(CONFIG_ACPI)支持
</span><span class='line'>AGP      开启了AGP(CONFIG_AGP)支持
</span><span class='line'>APIC     开启了高级可编程中断控制器支持(2000年以后的CPU都支持)
</span><span class='line'>APPARMOR 开启了AppArmor(CONFIG_SECURITY_APPARMOR)支持
</span><span class='line'>DRM      开启了Direct Rendering Manager(CONFIG_DRM)支持
</span><span class='line'>EFI      开启了EFI分区(CONFIG_EFI_PARTITION)支持
</span><span class='line'>EVM      开启了Extended Verification Module(CONFIG_EVM)支持
</span><span class='line'>FB       开启了帧缓冲设备(CONFIG_FB)支持
</span><span class='line'>HIBERNATION  开启了"休眠到硬盘"(CONFIG_HIBERNATION)支持
</span><span class='line'>HPET_MMAP    允许对HPET寄存器进行映射(CONFIG_HPET_MMAP)
</span><span class='line'>HW       存在相应的硬件设备
</span><span class='line'>IOMMU    开启了IOMMU(CONFIG_IOMMU_SUPPORT)支持
</span><span class='line'>IOSCHED  开启了多个不同的I/O调度程序(CONFIG_IOSCHED_*)
</span><span class='line'>IPV6     开启了IPv6(CONFIG_IPV6)支持
</span><span class='line'>IP_PNP   开启了自动获取IP的协议(DHCP,BOOTP,RARP)支持
</span><span class='line'>IP_VS_FTP    开启了IPVS FTP协议连接追踪(CONFIG_IP_VS_FTP)支持
</span><span class='line'>KVM      开启了KVM(CONFIG_KVM_*)支持
</span><span class='line'>LIBATA   开启了libata(CONFIG_ATA)驱动支持
</span><span class='line'>LOOP     开启了回环设备(CONFIG_BLK_DEV_LOOP)支持
</span><span class='line'>MCE      开启了Machine Check Exception(CONFIG_X86_MCE)支持
</span><span class='line'>MOUSE    开启了鼠标(CONFIG_INPUT_MOUSEDEV)支持
</span><span class='line'>MSI      开启了PCI MSI(CONFIG_PCI_MSI)支持
</span><span class='line'>NET      开启了网络支持
</span><span class='line'>NETFILTER    开启了Netfilter(CONFIG_NETFILTER)支持
</span><span class='line'>NFS      开启了NFS(网络文件系统)支持
</span><span class='line'>NUMA     开启了NUMA(CONFIG_NUMA)支持
</span><span class='line'>PCI      开启了PCI总线(CONFIG_PCI)支持
</span><span class='line'>PCIE     开启了PCI-Express(CONFIG_PCIEPORTBUS)支持
</span><span class='line'>PNP      开启了即插即用(CONFIG_PNP)支持
</span><span class='line'>PV_OPS   内核本身是半虚拟化的(paravirtualized)
</span><span class='line'>RAID     开去了软RAID(CONFIG_BLK_DEV_MD)支持
</span><span class='line'>SECURITY 开启了多个不同的安全模型(CONFIG_SECURITY)
</span><span class='line'>SELINUX  开启了SELinux(CONFIG_SECURITY_SELINUX)支持
</span><span class='line'>SLUB     开启了SLUB内存分配管理器(CONFIG_SLUB)
</span><span class='line'>SMP      开启了对称多处理器(CONFIG_SMP)支持
</span><span class='line'>TPM      开启了可信赖平台模块(CONFIG_TCG_TPM)支持
</span><span class='line'>UMS      开启了USB大容量存储设备(CONFIG_USB_STORAGE)支持
</span><span class='line'>USB      开启了USB(CONFIG_USB_SUPPORT)支持
</span><span class='line'>USBHID   开启了USB HID(CONFIG_USB_HID)支持
</span><span class='line'>VMMIO    开启了使用内存映射机制的virtio设备驱动(CONFIG_VIRTIO_MMIO)
</span><span class='line'>VT       开启了虚拟终端(CONFIG_VT)支持
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>此外，下面的标记在含义上与上面的有所不同：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>BUGS    用于解决某些特定硬件的缺陷
</span><span class='line'>KNL     是一个内核启动参数
</span><span class='line'>BOOT    是一个引导程序参数
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>标记为"BOOT"的参数实际上由引导程序(例如GRUB)使用，对内核本身没有直接的意义。如果没有特别的需求，请不要修改此类参数的语法，更多信息请阅读 Documentation/x86/boot.txt 文档。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;说明：下文中的 [KMG] 后缀表示 210, 220, 230 的含义。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;控制台与终端&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[KNL]
</span><span class='line'>console=设备及选项
</span><span class='line'>设置输出控制台使用的设备及选项。例如：ttyN 表示使用第N个虚拟控制台。其它用法主要针对嵌入式环境(Documentation/serial-console.txt)。
</span><span class='line'>[KNL]
</span><span class='line'>consoleblank=秒数
</span><span class='line'>控制台多长时间无操作后黑屏，默认值是600秒，设为0表示禁止黑屏。
</span><span class='line'>[HW]
</span><span class='line'>no_console_suspend
</span><span class='line'>永远也不要将控制台进入休眠状态。因为当控制台进入休眠之后，所有内核的消息就都看不见了(包括串口与VGA)。开启此参数有助于调试系统在休眠/唤醒中发生的故障。
</span><span class='line'>[VT]
</span><span class='line'>vt.default_utf8={0|1}
</span><span class='line'>是否将所有TTY都默认设置为UTF-8模式。默认值"1"表示将所有新打开的终端都设置为UTF-8模式。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;日志与调试&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;earlyprintk=设备[,keep]
</span><span class='line'>使用哪个设备显示早期的引导信息，主要用于调试硬件故障。此选项默认并未开启，因为在某些情况下并不能正常工作。
</span><span class='line'>在传统的控制台初始化之前，在哪个设备上显示内核日志信息。不使用此参数，那么你将永远没机会看见这些信息。
</span><span class='line'>在尾部加上",keep"选项表示在真正的内核控制台初始化并接管系统后，不会抹掉本选项消息的显示。
</span><span class='line'>earlyprintk=vga 表示在VGA上显示内核日志信息，这是最常用的选项，但不能用于EFI环境。
</span><span class='line'>earlyprintk=efi v3.13新增，表示将错误日志写入EFI framebuffer，专用于EFI环境。
</span><span class='line'>earlyprintk=xen 仅可用于XEN的半虚拟化客户机。
</span><span class='line'>loglevel={0|1|2|3|4|5|6|7}
</span><span class='line'>设置内核日志的级别，所有小于该数字的内核信息(具有更高优先级的信息)都将在控制台上显示出来。这个级别可以使用 klogd 程序或者修改 /proc/sys/kernel/printk 文件进行调整。取值范围是"0"(不显示任何信息)到"7"(显示所有级别的信息)。建议至少设为"4"(WARNING)。[提示]级别"7"要求编译时加入了调试支持。
</span><span class='line'>[KNL]
</span><span class='line'>ignore_loglevel
</span><span class='line'>忽略内核日志等级的设置，向控制台输出所有内核消息。仅用于调试目的。
</span><span class='line'>[KNL]
</span><span class='line'>debug
</span><span class='line'>将引导过程中的所有调试信息都显示在控制台上。相当于设置"loglevel=7"(DEBUG)。
</span><span class='line'>[KNL]
</span><span class='line'>quiet
</span><span class='line'>静默模式。相当于设置"loglevel=4"(WARNING)。
</span><span class='line'>log_buf_len=n[KMG]
</span><span class='line'>内核日志缓冲区的大小。"n"必须是2的整数倍(否则会被自动上调到最接近的2的整数倍)。该值也可以通过内核配置选项CONFIG_LOG_BUF_SHIFT来设置。
</span><span class='line'>[KNL]
</span><span class='line'>initcall_debug
</span><span class='line'>跟踪所有内核初始化过程中调用的函数。有助于诊断内核在启动过程中死在了那个函数上面。
</span><span class='line'>kstack=N
</span><span class='line'>在内核异常(oops)时，应该打印出内核栈中多少个字(word)到异常转储中。仅供调试使用。
</span><span class='line'>[KNL]
</span><span class='line'>kmemleak={on|off}
</span><span class='line'>是否开启检测内核内存泄漏的功能(CONFIG_DEBUG_KMEMLEAK)，默认为"on"，仅供调试使用。
</span><span class='line'>检测方法类似于跟踪内存收集器，一个内核线程每10分钟(默认值)扫描内存，并打印发现新的未引用的对象的数量。
</span><span class='line'>[KNL]
</span><span class='line'>memtest=整数
</span><span class='line'>设置内存测试(CONFIG_MEMTEST)的轮数。"0"表示禁止测试。仅在你确实知道这是什么东西并且确实需要的时候再开启。
</span><span class='line'>norandmaps
</span><span class='line'>默认情况下，内核会随机化程序的启动地址，也就是每一次分配给程序的虚拟地址空间都不一样，主要目的是为了防止缓冲区溢出攻击。但是这也给程序调试增加了麻烦，此参数(相当于"echo 0 &gt; /proc/sys/kernel/randomize_va_space")的目的就是禁用该功能以方便调试。
</span><span class='line'>[PNP]
</span><span class='line'>pnp.debug=1
</span><span class='line'>开启PNP调试信息(需要内核已开启CONFIG_PNP_DEBUG_MESSAGES选项)，仅用于调试目的。也可在运行时通过 /sys/module/pnp/parameters/debug 来控制。
</span><span class='line'>show_msr=CPU数
</span><span class='line'>显示启动时由BIOS初始化的MSR(Model-Specific Register)寄存器设置。CPU数设为"1"表示仅显示"boot CPU"的设置。
</span><span class='line'>printk.time={0|1}
</span><span class='line'>是否在每一行printk输出前都加上时间戳，仅供调试使用。默认值是"0"(不添加)
</span><span class='line'>boot_delay=毫秒数
</span><span class='line'>在启动过程中，为每一个printk动作延迟指定的毫秒数，取值范围是[0-10000](最大10秒)，超出这个范围将等价于"0"(无延迟)。仅用于调试目的。
</span><span class='line'>pause_on_oops=秒数
</span><span class='line'>当内核发生异常时，挂起所有CPU的时间。当异常信息太多，屏幕持续滚动时，这个选项就很有用处了。主要用于调试目的。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;异常检测与处理&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[MCE]
</span><span class='line'>mce=off
</span><span class='line'>彻底禁用MCE(CONFIG_X86_MCE)
</span><span class='line'>[MCE]
</span><span class='line'>mce=dont_log_ce
</span><span class='line'>不为已纠正错误(corrected error)记录日志。
</span><span class='line'>[MCE]
</span><span class='line'>mce=容错级别[,超时]
</span><span class='line'>容错级别(还可通过sysfs设置)：
</span><span class='line'>0 在出现未能纠正的错误时panic，记录所有已纠正的错误
</span><span class='line'>1(默认值) 在出现未能纠正的错误时panic或SIGBUS，记录所有已纠正的错误
</span><span class='line'>2 在出现未能纠正的错误时SIGBUS或记录日志，记录所有已纠正的错误
</span><span class='line'>3 从不panic或SIGBUS，记录所有日志。仅用于调试目的。
</span><span class='line'>超时(单位是微秒[百万分之一秒])：在machine check时等待其它CPU的时长，"0"表示不等待。
</span><span class='line'>[ACPI]
</span><span class='line'>erst_disable
</span><span class='line'>禁用ERST(Error Record Serialization Table)支持。主要用于解决某些有缺陷的BIOS导致的ERST故障。
</span><span class='line'>[ACPI]
</span><span class='line'>hest_disable
</span><span class='line'>禁用HEST(Hardware Error Source Table)支持。主要用于解决某些有缺陷的BIOS导致的HEST故障。
</span><span class='line'>[KNL]
</span><span class='line'>nosoftlockup
</span><span class='line'>禁止内核进行软死锁检测
</span><span class='line'>[KNL]
</span><span class='line'>softlockup_panic={0|1}
</span><span class='line'>是否在检测到软死锁(soft-lockup)的时候让内核panic，其默认值由 CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE 确定
</span><span class='line'>[KNL]
</span><span class='line'>nowatchdog
</span><span class='line'>禁止硬死锁检测(NMI watchdog)
</span><span class='line'>[KNL,BUGS]
</span><span class='line'>nmi_watchdog={0|panic|nopanic}
</span><span class='line'>配置nmi_watchdog(不可屏蔽中断看门狗)。更多信息可查看"lockup-watchdogs.txt"文档。
</span><span class='line'>0 表示关闭看门狗；
</span><span class='line'>panic 表示出现看门狗超时(长时间没喂狗)的时候触发内核错误，通常和"panic="配合使用，以实现在系统出现锁死的时候自动重启。
</span><span class='line'>nopanic 正好相反，表示即使出现看门狗超时(长时间没喂狗)，也不触发内核错误。
</span><span class='line'>unknown_nmi_panic
</span><span class='line'>在收到未知的NMI(不可屏蔽中断)时直接panic
</span><span class='line'>oops=panic
</span><span class='line'>在内核oops时直接panic(而默认是仅仅杀死oops进程[这样做会有很小的概率导致死锁])，而且这同样也会导致在发生MCE(CONFIG_X86_MCE)时直接panic。主要目的是和"panic="参数连用以实现自动重启。
</span><span class='line'>[KNL]
</span><span class='line'>panic=秒数
</span><span class='line'>内核在遇到panic时等待重启的行为：
</span><span class='line'>秒数&gt;0 等待指定的秒数后重启
</span><span class='line'>秒数=0(默认值) 只是简单的挂起，而永不重启
</span><span class='line'>秒数&lt;0 立即重启
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;时钟(Timer)&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;时钟(Timer)的功能有两个：(1)定时触发中断；(2)维护和读取当前时间。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;x86_64平台常见的时钟硬件有以下这些：&lt;br/&gt;
</span><span class='line'>RTC(Real Time Clock) 实时时钟的独特之处在于，RTC是主板上一块电池供电的CMOS芯片(精度一般只到秒级)，RTC(Clock)吐出来的是"时刻"(例如"2014-2-22 23:38:44")，而其他硬件时钟(Timer)吐出来的是"时长"(我走过了XX个周期，按照我的频率，应该是10秒钟)。&lt;br/&gt;
</span><span class='line'>PIT(Programmable Interval Timer) PIT是最古老的时钟源，产生周期性的时钟中断(IRQ0)，精度在100-1000Hz，现在基本已经被HPET取代。&lt;br/&gt;
</span><span class='line'>APIC Timer 这是PIT针对多CPU环境的升级，每个CPU上都有一个APIC Timer(而PIT则是所有CPU共享的)，但是它经常有BUG且精度也不高(3MHz左右)，所实际很少使用。&lt;br/&gt;
</span><span class='line'>ACPI Timer(Power Management Timer) 它唯一的功能就是为每个时钟周期提供一个时间戳，用于提供与处理器速度无关的可靠时间戳。但其精度并不高(3.579545MHz)。&lt;br/&gt;
</span><span class='line'>HPET(High Precision Event Timer) HPET提供了更高的精度(14.31818MHz)以及更宽的计数器(64位)。HPET可以替代前述除RTC之外的所有时钟硬件(Timer)，因为它既能定时触发中断，又能维护和读取当前时间。一个HPET包含了一个固定频率的数值递增的计数器以及3-32个独立计数器，每个计数器又包含了一个比较器和一个寄存器，当两者数值相等时就会触发中断。HPET的出现将允许删除芯片组中的一些冗余的旧式硬件。2006年之后的主板基本都已支持HPET。&lt;br/&gt;
</span><span class='line'>TSC(Time Stamp Counter) TSC是位于CPU里面的一个64位寄存器，与传统的周期性时钟不同，TSC并不触发中断，它是以计数器形式存在的单步递增性时钟。也就是说，周期性时钟是通过周期性触发中断达到计时目的，如心跳一般。而单步递增时钟则不发送中断，取而代之的是由软件自己在需要的时候去主动读取TSC寄存器的值来获得时间。TSC的精度(纳秒级)远超HPET并且速度更快，但仅能在较新的CPU(Sandy Bridge之后)上使用。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_skip_timer_override
</span><span class='line'>用于解决某些有缺陷的Nvidia nForce2 BIOS中的计时器覆盖问题(例如开启ACPI后频繁死机或时钟故障)。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_use_timer_override
</span><span class='line'>用于解决某些有缺陷的Nvidia nForce5 BIOS中的计时器覆盖问题(例如开启ACPI后频繁死机或时钟故障)。
</span><span class='line'>[APIC]
</span><span class='line'>no_timer_check
</span><span class='line'>禁止运行内核中时钟IRQ源缺陷检测代码。主要用于解决某些AMD平台的CPU占用过高以及时钟过快的故障。
</span><span class='line'>pmtmr=十六进制端口号
</span><span class='line'>手动指定pmtimer(CONFIG_X86_PM_TIMER)的I/O端口(16进制值)，例如：pmtmr=0x508
</span><span class='line'>acpi_pm_good
</span><span class='line'>跳过pmtimer(CONFIG_X86_PM_TIMER)的bug检测，强制内核认为这台机器的pmtimer没有毛病。用于解决某些有缺陷的BIOS导致的故障。
</span><span class='line'>[APIC]
</span><span class='line'>apicpmtimer
</span><span class='line'>使用pmtimer(CONFIG_X86_PM_TIMER)来校准APIC timer。此参数隐含了"apicmaintimer"。用于PIT timer彻底坏掉的场合。
</span><span class='line'>[APIC]
</span><span class='line'>apicmaintimer
</span><span class='line'>noapicmaintimer
</span><span class='line'>apicmaintimer 将APIC timer用于计时(而不是PIT/HPET中断)。这主要用于PIT/HPET中断不可靠的场合。
</span><span class='line'>noapicmaintimer 不将APIC timer用于计时(而是使用PIT/HPET中断)。这是默认值。但有时候依然需要明确指定。
</span><span class='line'>[APIC]
</span><span class='line'>lapic_timer_c2_ok
</span><span class='line'>按照ACPI规范的要求，local APIC Timer 不能在C2休眠状态下关闭，但可以在C3休眠状态下关闭。但某些BIOS(主要是AMD平台)会在向操作系统报告CPU进入C2休眠状态时，实际进入C3休眠状态。因此，内核默认采取了保守的假定：认为 local APIC Timer 在C2/C3状态时皆处于关闭状态。如果你确定你的BIOS没有这个问题，那么可以使用此参数明确告诉内核，即使CPU在C2休眠状态，local APIC Timer 也依然可用。
</span><span class='line'>[APIC]
</span><span class='line'>noapictimer
</span><span class='line'>禁用CPU Local APIC Timer
</span><span class='line'>enable_timer_pin_1
</span><span class='line'>disable_timer_pin_1
</span><span class='line'>开启/关闭APIC定时器的PIN1，内核将尽可能自动探测正确的值。但有时需要手动指定以解决某些有缺陷的ATI芯片组故障。
</span><span class='line'>clocksource={jiffies|acpi_pm|hpet|tsc}
</span><span class='line'>强制使用指定的时钟源，以代替内核默认的时钟源。
</span><span class='line'>jiffies 最差的时钟源，只能作为最后的选择。
</span><span class='line'>acpi_pm [ACPI]符合ACPI规范的主板都提供的硬件时钟源(CONFIG_X86_PM_TIMER)，提供3.579545MHz固定频率，这是传统的硬件时钟发生器。
</span><span class='line'>hpet 一种取代传统"acpi_pm"的高精度硬件时钟源(CONFIG_HPET)，提供14.31818MHz固定频率。2007年以后的芯片组一般都支持。
</span><span class='line'>tsc TSC(Time Stamp Counter)的主体是位于CPU里面的一个64位TSC寄存器，与传统的以中断形式存在的周期性时钟不同，TSC是以计数器形式存在的单步递增性时钟，两者的区别在于，周期性时钟是通过周期性触发中断达到计时目的，如心跳一般。而单步递增时钟则不发送中断，取而代之的是由软件自己在需要的时候去主动读取TSC寄存器的值来获得时间。TSC的精度更高并且速度更快，但仅能在较新的CPU(Sandy Bridge之后)上使用。
</span><span class='line'>[KNL]
</span><span class='line'>highres={"on"|"off"}
</span><span class='line'>启用(默认值)还是禁用高精度定时器模式。主要用于关闭主板上有故障的高精度时钟源。
</span><span class='line'>nohpet
</span><span class='line'>禁用HPET timer(CONFIG_HPET)
</span><span class='line'>[HPET_MMAP]
</span><span class='line'>hpet_mmap
</span><span class='line'>v3.13新增，默认允许对HPET寄存器进行映射，相当于开启了内核CONFIG_HPET_MMAP_DEFAULT选项。需要注意的是，某些包含HPET硬件寄存器的页中同时还含有其他不该暴露给用户的信息。
</span><span class='line'>notsc
</span><span class='line'>tsc=reliable
</span><span class='line'>tsc=noirqtime
</span><span class='line'>设置TSC时钟源的属性。
</span><span class='line'>notsc 表示不将TSC用作"wall time"时钟源，主要用于不能在多个CPU之间保持正确同步的SMP系统。
</span><span class='line'>tsc=reliable 表示TSC时钟源是绝对稳定的，关闭启动时和运行时的稳定性检查。用于在某些老旧硬件/虚拟化环境使用TSC时钟源。
</span><span class='line'>tsc=noirqtime 不将TSC用于统计进程IRQ时间。主要用于在RDTSC速度较慢的CPU上禁止内核的CONFIG_IRQ_TIME_ACCOUNTING功能。
</span><span class='line'>关于"TSC时钟源"，详见"clocksource="参数的说明。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;中断&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;常见的中断控制器有两种：传统的8259A和新式的APIC，前者也被称为"PIC"。8259A只适合单CPU的场合，而APIC则能够把中断传递给系统中的每个CPU，从而充分挖掘SMP体系结构的并行性。所以8259A已经被淘汰了。APIC系统由3部分组成：APIC总线(前端总线)、IO-APIC(南桥)、本地APIC(CPU)。每个CPU中集成了一个本地APIC，负责传递中断信号到处理器。而IO-APIC是系统芯片组中一部分，负责收集来自I/O设备的中断信号并发送到本地APIC。APIC总线则是连接IO-APIC和各个本地APIC的桥梁。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[SMP,APIC]
</span><span class='line'>noapic
</span><span class='line'>禁止使用IO-APIC(输入输出高级可编程输入控制器)，主要用于解决某些有缺陷的BIOS导致的APIC故障。
</span><span class='line'>[APIC]
</span><span class='line'>nolapic
</span><span class='line'>disableapic
</span><span class='line'>禁止使用local APIC。主要用于解决某些有缺陷的BIOS导致的APIC故障。"nolapic"是为了保持传统习惯的兼容写法，与"disableapic"的含义相同。
</span><span class='line'>[APIC]
</span><span class='line'>nox2apic
</span><span class='line'>关闭x2APIC支持(CONFIG_X86_X2APIC)
</span><span class='line'>[APIC]
</span><span class='line'>x2apic_phys
</span><span class='line'>在支持x2apic的平台上使用physical模式代替默认的cluster模式。
</span><span class='line'>[KNL]
</span><span class='line'>threadirqs
</span><span class='line'>强制线程化所有的中断处理器(明确标记为IRQF_NO_THREAD的除外)
</span><span class='line'>[SMP,APIC]
</span><span class='line'>pirq=
</span><span class='line'>手动指定mp-table的设置。此参数仅对某些有缺陷的、具备多个IO-APIC的高端主板有意义。详见Documentation/x86/i386/IO-APIC.txt文档
</span><span class='line'>[HW]
</span><span class='line'>irqfixup
</span><span class='line'>用于修复简单的中断问题：当一个中断没有被处理时搜索所有可用的中断处理器。用于解决某些简单的固件缺陷。
</span><span class='line'>[HW]
</span><span class='line'>irqpoll
</span><span class='line'>用于修复高级的中断问题：当一个中断没有被处理时搜索所有可用的中断处理器，并且对每个时钟中断都进行搜索。用于解决某些严重的固件缺陷。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;ACPI&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;高级配置与电源管理接口(Advanced Configuration and Power Interface)是提供操作系统与应用程序管理所有电源管理接口，包括了各种软件和硬件方面的规范。2004年推出3.0规范；2009年推出4.0规范；2011年推出5.0规范。2013年之后新的ACPI规格将由UEFI论坛制定。ACPI可以实现的功能包括：电源管理；性能管理；配置与即插即用；系统事件；温度管理；电池管理；SMBus控制器；嵌入式控制器。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi={force|off|noirq|strict|rsdt|nocmcff|copy_dsdt}
</span><span class='line'>ACPI的总开关。
</span><span class='line'>force 表示强制启用ACPI(即使BIOS中已关闭)；
</span><span class='line'>off 表示强制禁用ACPI(即使BIOS中已开启)；
</span><span class='line'>noirq 表示不要将ACPI用于IRQ路由；
</span><span class='line'>strict 表示严格要求系统遵循ACPI规格(降低兼容性)；
</span><span class='line'>rsdt 表示使用老旧的RSDT(Root System Description Table)代替较新的XSDT(Extended System Description Table)；
</span><span class='line'>copy_dsdt 表示将DSDT(Differentiated System Description Table)复制到内存中。
</span><span class='line'>更多信息可参考Documentation/power/runtime_pm.txt以及"pci=noacpi"。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_backlight={vendor|video}
</span><span class='line'>选择屏幕背光亮度调节驱动。
</span><span class='line'>video(默认值)表示使用通用的ACPI video.ko驱动(CONFIG_ACPI_VIDEO)，该驱动仅可用于集成显卡。
</span><span class='line'>vendor表示使用厂商特定的ACPI驱动(thinkpad_acpi,sony_acpi等)。
</span><span class='line'>详见Documentation/acpi/video_extension.txt文档。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_os_name="字符串"
</span><span class='line'>告诉ACPI BIOS操作系统的名称。
</span><span class='line'>常用于哄骗有缺陷的BIOS，让其以为运行的是Windows系统而不是Linux系统。
</span><span class='line'>"Linux" = Linux
</span><span class='line'>"Microsoft Windows" = Windows 98
</span><span class='line'>"Windows 2000" = Windows 2000
</span><span class='line'>"Windows 2001" = Windows XP
</span><span class='line'>"Windows 2001 SP2" = Windows XP SP2
</span><span class='line'>"Windows 2001.1" = Windows Server 2003
</span><span class='line'>"Windows 2001.1 SP1" = Windows Server 2003 SP1
</span><span class='line'>"Windows 2006" = Windows Vista
</span><span class='line'>"Windows 2006 SP1" = Windows Vista SP1
</span><span class='line'>"Windows 2006.1" = Windows Server 2008
</span><span class='line'>"Windows 2009" = Windows 7 / Windows Server 2008 R2
</span><span class='line'>"Windows 2012" = Windows 8 / Windows Server 2012
</span><span class='line'>"Windows 2013" = Windows 8.1 / Windows Server 2012 R2
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_osi="字符串"
</span><span class='line'>对于较新的内核(Linux-2.6.23之后)而言，当BIOS询问内核："你是Linux吗?"，内核都会回答"No"，但历史上(Linux-2.6.22及更早版本)内核会如实回答"Yes"，结果造成很多BIOS兼容性问题(主要是电源管理方面)。具体故事的细节请到内核源码文件drivers/acpi/osl.c中搜索"The story of _OSI(Linux)"注释。
</span><span class='line'>此参数用于修改内核中的操作系统接口字符串(_OSI string)列表默认值，这样当BIOS向内核询问："你是xxx吗?"的时候，内核就可以根据修改后的列表中是否存在"xxx"回答"Yes"或"No"了，主要用于解决BIOS兼容性问题导致的故障(例如屏幕亮度调整)。
</span><span class='line'>acpi_osi="Linux"表示添加"Linux"；
</span><span class='line'>acpi_osi="!Linux"表示删除"Linux"；
</span><span class='line'>acpi_osi=!* 表示删除所有字符串(v3.13新增)，可以和多个acpi_osi="Linux"格式联合使用；
</span><span class='line'>acpi_osi=! 表示删除所有内置的字符串(v3.13新增)，可以和多个acpi_osi="Linux"格式联合使用；
</span><span class='line'>acpi_osi= 表示禁用所有字符串，仅可单独使用(不能联合使用)。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>acpi_serialize
</span><span class='line'>强制内核以串行方式执行AML(ACPI Machine Language)字节码。用于解决某些有缺陷的BIOS导致的故障。
</span><span class='line'>[ACPI]
</span><span class='line'>acpi_enforce_resources={strict|lax|no}
</span><span class='line'>检查驱动程序和ACPI操作区域(SystemIO,SystemMemory)之间资源冲突的方式。
</span><span class='line'>strict(默认值)禁止任何驱动程序访问已被ACPI声明为"受保护"的操作区域，这是最安全的方式，可以从根本上避免冲突。
</span><span class='line'>lax允许驱动程序访问已被ACPI声明的保护区域(但会显示一个警告)。这可能会造成冲突，但是可以兼容某些老旧且脑残的驱动程序(例如某些硬件监控驱动)。
</span><span class='line'>no表示根本不声明任何ACPI保护区域，也就是完全允许任意驱动程序访问ACPI操作区域。
</span><span class='line'>[ACPI]
</span><span class='line'>pnpacpi=off
</span><span class='line'>禁用ACPI的即插即用功能，转而使用古董的PNPBIOS来代替。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;休眠与唤醒&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[HW,ACPI]
</span><span class='line'>acpi_sleep={s3_bios,s3_mode,s3_beep,s4_nohwsig,old_ordering,nonvs,sci_force_enable}
</span><span class='line'>ACPI休眠选项。
</span><span class='line'>(1)s3_bios和s3_mode与显卡有关。计算机从S3状态(挂起到内存)恢复时，硬件需要被正确的初始化。这对大多数硬件都不是问题，但因为显卡是由BIOS初始化的，内核无法获取必要的恢复信息(仅存在于BIOS中，内核无法读取)，所以这里就提供了两个选项，以允许内核通过两种不同的方式来恢复显卡，更多细节请参考Documentation/power/video.txt文档。
</span><span class='line'>(2)s3_beep主要用于调试，它让PC喇叭在内核的实模式入口点被调用时发出响声。
</span><span class='line'>(3)s4_nohwsig用于关闭ACPI硬件签名功能，某些有缺陷的BIOS会因为这个原因导致从S4状态(挂起到硬盘)唤醒时失败。
</span><span class='line'>(4)old_ordering用于兼容古董级的ACPI 1.0 BIOS
</span><span class='line'>(5)nonvs表示阻止内核在挂起/唤醒过程中保存/恢复ACPI NVS内存信息，主要用于解决某些有缺陷的BIOS导致的挂起/唤醒故障。
</span><span class='line'>(6)sci_force_enable表示由内核直接设置SCI_EN(ACPI模式开关)的状态，主要用于解决某些有缺陷的BIOS导致的从S1/S3状态唤醒时的故障。
</span><span class='line'>[HIBERNATION]
</span><span class='line'>noresume
</span><span class='line'>禁用内核的休眠到硬盘功能(CONFIG_HIBERNATION)，也就是不从先前的休眠状态中恢复(即使该状态已经被保存在了硬盘的swap分区上)，并且清楚先前已经保存的休眠状态(如果有的话)。
</span><span class='line'>[HIBERNATION]
</span><span class='line'>hibernate={noresume|nocompress}
</span><span class='line'>设置休眠/唤醒属性：
</span><span class='line'>noresume 表示禁用唤醒，也就是在启动过程中无视任何已经存在的休眠镜像，完全重新启动。
</span><span class='line'>nocompress 表示禁止对休眠镜像进行压缩/解压。
</span><span class='line'>[HIBERNATION]
</span><span class='line'>resume={ /dev/swap | PARTUUID=uuid | major:minor | hex }
</span><span class='line'>告诉内核被挂起的内存镜像存放在那个磁盘分区(默认值是CONFIG_PM_STD_PARTITION)。
</span><span class='line'>假定内存镜像存放在"/dev/sdc15"分区上，该分区的 UUID=0123456789ABCDEF ，其主设备号是"8"，次设备号是"47"，那么这4种表示法应该分别这样表示：
</span><span class='line'>resume=/dev/sdc15 (这是内核设备名称，有可能与用户空间的设备名称不同)
</span><span class='line'>resume=PARTUUID=0123456789ABCDEF
</span><span class='line'>resume=08:47
</span><span class='line'>resume=082F
</span><span class='line'>[HIBERNATION]
</span><span class='line'>resume_offset=整数
</span><span class='line'>指定swap header所在位置的偏移量(单位是PAGE_SIZE)，偏移量的计算基准点是"resume="分区的起点。
</span><span class='line'>仅在使用swap文件(而不是分区)的时候才需要此参数。详见Documentation/power/swsusp-and-swap-files.txt文档
</span><span class='line'>[HIBERNATION]
</span><span class='line'>resumedelay=秒数
</span><span class='line'>在读取resume文件(设备)之前延迟的秒数，主要用于等待那些反应速度较慢的异步检测的设备就绪(例如USB/MMC)。
</span><span class='line'>[HIBERNATION]
</span><span class='line'>resumewait
</span><span class='line'>在resume设备没有就绪之前无限等待，主要用于等待那些反应速度较慢的异步检测的设备就绪(例如USB/MMC)。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;温度控制&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[HW,ACPI]
</span><span class='line'>thermal.act=摄氏度
</span><span class='line'>-1 禁用所有"主动散热"标志点(active trip point)
</span><span class='line'>正整数 强制设置所有的最低"主动散热"标志点的温度值，单位是摄氏度。
</span><span class='line'>详见Documentation/thermal/sysfs-api.txt文档。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>thermal.psv=摄氏度
</span><span class='line'>-1 禁用所有"被动散热"标志点(passive trip point)
</span><span class='line'>正整数 强制设置所有的"被动散热"标志点的温度值，单位是摄氏度。
</span><span class='line'>详见Documentation/thermal/sysfs-api.txt文档。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>thermal.crt=摄氏度
</span><span class='line'>-1 禁用所有"紧急"标志点(critical trip point)
</span><span class='line'>正整数 强制设置所有的"紧急"标志点的温度值，单位是摄氏度。
</span><span class='line'>详见Documentation/thermal/sysfs-api.txt文档。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>thermal.nocrt=1
</span><span class='line'>禁止在ACPI热区(thermal zone)温度达到"紧急"标志点时采取任何动作。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>thermal.off=1
</span><span class='line'>彻底关闭ACPI热量控制(CONFIG_ACPI_THERMAL)
</span><span class='line'>[HW,ACPI]
</span><span class='line'>thermal.tzp=整数
</span><span class='line'>设置ACPI热区(thermal zone)的轮询速度：
</span><span class='line'>0(默认值) 不轮询
</span><span class='line'>正整数 轮询间隔，单位是十分之一秒。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;CPU节能&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[KNL]
</span><span class='line'>nohz={on|off}
</span><span class='line'>启用/禁用内核的dynamic ticks特性。默认值是"on"。
</span><span class='line'>[KNL,BOOT]
</span><span class='line'>nohz_full=CPU列表
</span><span class='line'>在内核"CONFIG_NO_HZ_FULL=y"的前提下，指定哪些CPU核心可以进入完全无滴答状态。
</span><span class='line'>"CPU列表"是一个逗号分隔的CPU编号(从0开始计数)，也可以使用"-"界定一个范围。例如"0,2,4-7"等价于"0,2,4,5,6,7"
</span><span class='line'>[注意](1)"boot CPU"(通常都是"0"号CPU)会无条件的从列表中剔除。(2)这里列出的CPU编号必须也要同时列进"rcu_nocbs=..."参数中。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>processor.nocst
</span><span class='line'>不使用_CST方法检测C-states，而是用老旧的FADT方法检测。
</span><span class='line'>[HW,ACPI]
</span><span class='line'>processor.max_cstate={0|1|2|3|4|5|6|7|8|9}
</span><span class='line'>无视ACPI表报告的值，强制指定CPU的最大C-state值(必须是一个有效值)：C0为正常状态，其他则为不同的省电模式(数字越大表示CPU休眠的程度越深/越省电)。"9"表示无视所有的DMI黑名单限制。
</span><span class='line'>[KNL,HW,ACPI]
</span><span class='line'>intel_idle.max_cstate=[0|正整数]
</span><span class='line'>设置intel_idle驱动(CONFIG_INTEL_IDLE)允许使用的最大C-state深度。"0"表示禁用intel_idle驱动，转而使用通用的acpi_idle驱动(CONFIG_CPU_IDLE)
</span><span class='line'>idle=poll
</span><span class='line'>idle=halt
</span><span class='line'>idle=nomwait
</span><span class='line'>对CPU进入休眠状态的额外设置。
</span><span class='line'>poll 从根本上禁用休眠功能(也就是禁止进入C-states状态)，可以略微提升一些CPU性能，但是却需要多消耗许多电力，得不偿失。不推荐使用。
</span><span class='line'>halt 表示直接使用HALT指令让CPU进入C1/C1E休眠状态，但是不再继续进入C2/C3以及更深的休眠状态。此选项兼容性最好，唤醒速度也最快。但是电力消耗并不最低。
</span><span class='line'>nomwait 表示进入休眠状态时禁止使用CPU的MWAIT指令。MWAIT是专用于Intel超线程技术的线程同步指令，有助于提升CPU的超线程效能，但对于不具备超线程技术的CPU没有意义。
</span><span class='line'>[提示]可以同时使用halt和nomwait，也就是"idle=halt idle=nomwait"(但不是：idle=halt,nomwait)
</span><span class='line'>intel_pstate=disable
</span><span class='line'>禁用 Intel CPU 的 P-state 驱动(CONFIG_X86_INTEL_PSTATE)，也就是Intel CPU专用的频率调节器驱动
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;PCI与PCIE&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[PCI]
</span><span class='line'>pci=选项[,选项...]
</span><span class='line'>指定各种PCI子系统选项：
</span><span class='line'>earlydump 在内核做出任何改变之前，首先转储出PCI配置空间。主要用于调试目的。
</span><span class='line'>off 不检测PCI总线，也就是关闭所有PCI设备。
</span><span class='line'>conf1 强制使用"PCI配置机制1"(目前的事实标准)
</span><span class='line'>conf2 强制使用"PCI配置机制2"(已被抛弃的老古董)
</span><span class='line'>noaer [PCIE]禁止使用CONFIG_PCIEAER功能(PCI Express Root Port Advanced Error Reporting)
</span><span class='line'>nodomains 禁止支持多个PCI root domain(也就是PCI总线域[PCI segment])
</span><span class='line'>nommconf 禁止使用通过MMCONFIG(CONFIG_PCI_MMCONFIG)方式访问PCI配置空间，MMCONFIG是PCI Express引入的新总线枚举方式。
</span><span class='line'>check_enable_amd_mmconf 在 AMD family 10h CPU 上检查并启用正确配置的MMIO以访问PCI配置空间
</span><span class='line'>nomsi [MSI]在全系统范围内禁止MSI中断(CONFIG_PCI_MSI)的使用
</span><span class='line'>noioapicquirk [APIC]禁止屏蔽任何boot中断(CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS)，以确保boot IRQ永远可用。应该永远不需要使用此选项。
</span><span class='line'>ioapicreroute [APIC]允许将boot IRQ重新路由到主IO-APIC(相当于开启CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS)，用于修复某些芯片组bug(在某些情况下会发送多余的"boot IRQ")。
</span><span class='line'>noioapicreroute [APIC]禁止将boot IRQ重新路由到主IO-APIC(相当于关闭CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS)，不建议使用此项。
</span><span class='line'>rom 为扩展ROM分配地址空间。使用此选项要小心，因为某些设备在ROM与其它资源之间共享地址译码器。
</span><span class='line'>norom 即使BIOS没有为扩展ROM分配地址空间，也禁止内核为扩展ROM分配地址空间。
</span><span class='line'>nobar 即使BIOS没有为BAR分配地址空间，也禁止内核为BAR分配地址空间。
</span><span class='line'>irqmask=0xMMMM 指定允许自动分配到PCI设备的IRQ位掩码，目的是为了避免使用那些被ISA设备占用的IRQ。
</span><span class='line'>pirqaddr=0xAAAAA 如果PIRQ表(通常情况下由BIOS生成)在F0000h-100000h范围之外，此选项可用于明确指定其物理地址。
</span><span class='line'>lastbus=N 通过扫描N号总线来扫描全部总线。如果内核不能找到第二条总线，可以通过此方法明确告知其位置。
</span><span class='line'>assign-busses 总是使用内核自己生成的PCI总线号码替代固件自己生成的值。
</span><span class='line'>usepirqmask 优先使用可能存在于BIOS $PIR表中的IRQ掩码。某些有缺陷的BIOS需要这个选项(例如HP Pavilion N5400和Omnibook XE3笔记本)。此选项仅在noioapicreroute(相当于关闭CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS)的前提下有效。
</span><span class='line'>noacpi 不为IRQ路由或PCI扫描使用ACPI
</span><span class='line'>use_crs 使用来自ACPI的PCI主桥的窗口信息。在2008年之后的BIOS上，这是默认值，如果需要明确使用此项，请当做bug上报开发者。
</span><span class='line'>nocrs 忽略来自ACPI的PCI主桥的窗口信息，如果需要明确使用此项，请当做bug上报开发者。
</span><span class='line'>routeirq 对所有PCI设备使用IRQ路由。这个通常是由内核的pci_enable_device()函数完成，所以此项仅为那些忘记调用此函数的驱动提供的临时解决方案。
</span><span class='line'>skip_isa_align 不对齐ISA IO起始地址，这样就可以处理更多的PCI卡
</span><span class='line'>noearly 不做任何"early type 1"扫描，这样许多针对主板缺陷的检测将被禁止，同时某些IOMMU驱动也会失效。仅用于解决某些有缺陷的主板故障。
</span><span class='line'>bfsort 按照宽度优先(breadth-first)的顺序对PCI设备进行排序。目的是为了以与2.4内核兼容的方式获取设备序号。
</span><span class='line'>nobfsort 不按宽度优先(breadth-first)的顺序对PCI设备进行排序。
</span><span class='line'>pcie_bus_tune_off 不对PCIe MPS(Max Payload Size)进行调整，而是使用BIOS配置好的默认值。
</span><span class='line'>pcie_bus_safe 将每个设备的MPS都设为root complex下所有设备支持的MPS中的最大值
</span><span class='line'>pcie_bus_perf 将设备的MPS设为其上级总线允许的最大MPS，同时将MRRS(Max Read Request Size)设为能支持的最大值(但不能大于设备或总线所支持的MPS值)
</span><span class='line'>pcie_bus_peer2peer 将每个设备的MPS都设为最安全的"128B"，以确保支持所有设备之间的点对点DMA，同时也能保证热插入(hot-added)设备能够正常工作，但代价是可能会造成性能损失。
</span><span class='line'>cbiosize=nn[KMG] 从CardBus桥的IO窗口中保留的固定长度的总线空间(bus space)，默认值是256B。
</span><span class='line'>cbmemsize=nn[KMG] 从CardBus桥的内存窗口中保留的固定长度的总线空间(bus space)，默认值是64MB。
</span><span class='line'>resource_alignment=[对齐规则@][域:]总线:插槽.功能[; ...] 为重新分配已对齐的内存资源指定对齐方式与设备。如果未指定对齐规则，那么将使用PAGE_SIZE作为对齐规则。也可以通过指定PCI-PCI桥来扩展资源窗口(resource windows)。
</span><span class='line'>ecrc={bios|on|off} 启用/禁用PCIe ECRC(事务层的端对端CRC校验)。默认值是"bios"(使用BIOS/固件的设定)。
</span><span class='line'>hpiosize=nn[KMG] 为热插拔桥的IO窗口保留的固定总线空间的大小，默认值是256B。
</span><span class='line'>hpmemsize=nn[KMG] 为热插拔桥的内存窗口保留的固定总线空间的大小，默认值是2MB。
</span><span class='line'>realloc={on|off} 当BIOS分配的PCI桥资源太小而无法满足所有子设备的需求时，是否由内核重新分配PCI桥资源。没有默认值(内核的默认值为"undefined")
</span><span class='line'>realloc 等价于"realloc=on"
</span><span class='line'>noari 不使用PCIe ARI
</span><span class='line'>pcie_scan_all 扫描所有可能的PCIe设备。默认只在每个PCIe下游端口扫描一个设备。
</span><span class='line'>[PCIE]
</span><span class='line'>pcie_hp=nomsi
</span><span class='line'>禁止PCIe本地热插拔使用MSI(CONFIG_PCI_MSI)，这将导致所有PCIe端口使用INTx中断提供热插拔服务。
</span><span class='line'>[PCIE]
</span><span class='line'>pcie_ports={auto|native|compat}
</span><span class='line'>PCIe端口处理方式：
</span><span class='line'>auto 由BIOS来决定是否使用关联在PCIe端口上的本地PCIe服务(PME, hot-plug, AER)
</span><span class='line'>native 无条件的使用关联在PCIe端口上的本地PCIe服务(PME, hot-plug, AER)
</span><span class='line'>compat 禁用PCIe端口驱动，同时将PCIe端口当做PCI-to-PCI桥处理。
</span><span class='line'>[PCIE]
</span><span class='line'>pcie_aspm={off|force}
</span><span class='line'>强制启用/禁用PCIe Active State Power Management(CONFIG_PCIEASPM)。内核的默认值取决于内核"Default ASPM policy"的配置。
</span><span class='line'>off 强制禁用
</span><span class='line'>force 即使设备声明不支持ASPM也强制启用(可能会导致系统锁死)。
</span><span class='line'>[PCIE]
</span><span class='line'>pcie_pme=nomsi
</span><span class='line'>禁止本地PCIe PME信号使用MSI(CONFIG_PCI_MSI)，这将导致所有PCIe root端口使用INTx中断提供所有服务。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;LIBATA&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[LIBATA]
</span><span class='line'>libata.noacpi
</span><span class='line'>在libata驱动休眠/唤醒过程中禁止使用ACPI。主要用于解决某些有缺陷的BIOS导致的硬盘假死问题。
</span><span class='line'>[LIBATA]
</span><span class='line'>libata.dma=整数
</span><span class='line'>控制DMA特性的使用
</span><span class='line'>libata.dma=0 表示完全禁止所有SATA/PATA端口使用DMA
</span><span class='line'>libata.dma=1 表示仅允许SATA/PATA硬盘使用DMA
</span><span class='line'>libata.dma=2 表示仅允许ATAPI(CDROM)使用DMA
</span><span class='line'>libata.dma=4 表示仅允许CF卡使用DMA
</span><span class='line'>上述1,2,4实际上是位掩码，可以组合使用，例如 libata.dma=3 表示允许硬盘和CDROM使用DMA，但是禁止CF卡使用DMA
</span><span class='line'>[LIBATA]
</span><span class='line'>libata.ignore_hpa={0|1}
</span><span class='line'>是否忽略HPA(Host Protected Area)的限制。"0"(默认值)表示不忽略；"1"表示忽略(也就是可以使用整个磁盘空间)
</span><span class='line'>[LIBATA]
</span><span class='line'>libata.force=PORT[.DEVICE]:VAL,PORT[.DEVICE]:VAL,...
</span><span class='line'>手动强制指定libata的配置。
</span><span class='line'>其中的"PORT[.DEVICE]"是libata驱动在控制台上以相同格式显示出来的ATA ID字符串(PORT和DEVICE都是十进制数字)，下面是两个实例("1.00","2.00")：
</span><span class='line'>
</span><span class='line'>ata1.00: ATAPI: VBOX CD-ROM, 1.0, max UDMA/133
</span><span class='line'>ata2.00: ATA-6: VBOX HARDDISK, 1.0, max UDMA/133
</span><span class='line'>
</span><span class='line'>如果不指定DEVICE部分，那么就表示适用于该PORT端口上的所有设备。
</span><span class='line'>VAL部分用来强制设定设备属性：
</span><span class='line'>40c, 80c, short40c, unk, ign, sata 这些都用于指定线缆类型
</span><span class='line'>1.5Gbps, 3.0Gbps 这些都用于指定SATA连接速度
</span><span class='line'>noncq, ncq 关闭还是开启NCQ功能
</span><span class='line'>dump_id 转储IDENTIFY数据
</span><span class='line'>pio[0-7], mwdma[0-4], udma[0-7](或者这么写也一样：udma[16,25,33,44,66,100,133]) 数据传输模式
</span><span class='line'>nohrst, nosrst, norst 只禁止硬重置,只禁止软重置,同时禁止硬重置和软重置
</span><span class='line'>rstonce 在热拔连接恢复(hot-unplug link recovery)过程中仅尝试一次重置
</span><span class='line'>atapi_dmadir 开启 ATAPI DMADIR bridge 支持
</span><span class='line'>disable 禁用该设备
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;键盘/鼠标/触摸板&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[HW]
</span><span class='line'>atkbd.set={2|3}
</span><span class='line'>设置atkbd驱动(CONFIG_KEYBOARD_ATKBD)的键盘类型：2(默认值)表示AT键盘；3 表示PS/2键盘。
</span><span class='line'>[HW]
</span><span class='line'>atkbd.reset
</span><span class='line'>在初始化AT或PS/2键盘时重置键盘状态。常用于解决从休眠状态唤醒后键盘失效的故障。
</span><span class='line'>[HW]
</span><span class='line'>atkbd.softraw={0|1}
</span><span class='line'>当键盘按键被按下时，是返回原始的扫描码(Scancode)还是经过转换之后的键码(Keycode)。常用于解决某些功能键(例如Fn键)故障。
</span><span class='line'>0 表示返回原始的扫描码(Scancode)
</span><span class='line'>1(默认值)表示返回转换之后的键码(Keycode)
</span><span class='line'>[USBHID]
</span><span class='line'>usbhid.mousepoll=毫秒数
</span><span class='line'>USB鼠标的轮询时间间隔，单位是毫秒。默认值是"10"，也就是每秒轮询100次，相当于100Hz
</span><span class='line'>[MOUSE]
</span><span class='line'>mousedev.tap_time=毫秒数
</span><span class='line'>手指触碰和离开触摸板的最大时间间隔，只有小于此间隔的触碰才会被当成鼠标左键单击。此参数仅对工作在绝对模式的触摸板有意义。
</span><span class='line'>[MOUSE]
</span><span class='line'>mousedev.xres=正整数
</span><span class='line'>mousedev.yres=正整数
</span><span class='line'>触摸板的水平(X)/垂直(Y)方向的分辨率。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;USB&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[USB]
</span><span class='line'>nousb
</span><span class='line'>禁用USB子系统(CONFIG_USB_SUPPORT)
</span><span class='line'>[USB]
</span><span class='line'>usbcore.authorized_default={-1|0|1}
</span><span class='line'>USB设备的默认授权规则：
</span><span class='line'>-1(默认值) 对除无线USB之外的设备默认授权
</span><span class='line'>0 对所有设备都默认不授权
</span><span class='line'>1 对所有设备都默认授权
</span><span class='line'>[USB]
</span><span class='line'>usbcore.autosuspend=秒数
</span><span class='line'>让USB设备(新检测到的设备以及空闲设备)进入自动休眠前的延迟秒数。默认为2秒。
</span><span class='line'>如果将秒数设为负数，则表示永不进入自动休眠状态。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.initial_descriptor_timeout=毫秒数
</span><span class='line'>等待设备回应初始化64位USB_REQ_GET_DESCRIPTOR请求的超时时间。默认值是"5000"，也就是5秒。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.blinkenlights={0|1}
</span><span class='line'>是否让所有的USB集线器(HUB)上的LED指示灯闪烁。默认值"0"表示不闪烁，"1"表示闪烁。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.usbfs_snoop={0|1}
</span><span class='line'>是否在在日志中记录所有的usbfs traffic信息。默认值"0"表示不记录，"1"表示记录。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.old_scheme_first={0|1}
</span><span class='line'>是否优先使用老旧的USB设备初始化方法。默认值"0"表示不优先使用。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.use_both_schemes={0|1}
</span><span class='line'>是否在第一种USB设备初始化方法失败之后，继续尝试第二种方法。默认值"1"表示继续尝试第二种方法。
</span><span class='line'>[USB]
</span><span class='line'>usbcore.usbfs_memory_mb=[0-2047]
</span><span class='line'>由usbfs分配的缓存上限。取值范围是[0-2047]，默认值是"16"，单位是"MB"。
</span><span class='line'>[UMS]
</span><span class='line'>usb-storage.delay_use=秒数
</span><span class='line'>在扫描新USB存储设备上的逻辑单元(Logical Unit)前暂停的秒数。默认值是"5"秒。
</span><span class='line'>[UMS]
</span><span class='line'>usb-storage.quirks=VID:PID:Flags[,VID:PID:Flags]...
</span><span class='line'>设置一系列的修正项(quirk)，用于增补或者改写内核内置的unusual_devs列表内容。该列表用于修正各种有缺陷的USB存储设备的怪毛病。
</span><span class='line'>多个修正项之间用逗号分隔，修正项的格式是"VID:PID:Flags"，其中VID和PID的含义分别是4位16进制数表示的"Vendor ID"与"Product ID"。
</span><span class='line'>而Flags则是一组字符的组合，其中的每个字符都对应一个具有特定含义的修正(quirk)标记：
</span><span class='line'>a = SANE_SENSE (收集超过18字节的传感器数据)
</span><span class='line'>b = BAD_SENSE (不收集超过18字节的传感器数据)
</span><span class='line'>c = FIX_CAPACITY (无条件的将设备报告的扇区数(容量)减少一个扇区)
</span><span class='line'>d = NO_READ_DISC_INFO (不使用 READ_DISC_INFO 命令)
</span><span class='line'>e = NO_READ_CAPACITY_16 (不使用 READ_CAPACITY_16 命令)
</span><span class='line'>h = CAPACITY_HEURISTICS (如果设备报告的扇区数(容量)是奇数，那么就减少一个扇区)
</span><span class='line'>i = IGNORE_DEVICE (不绑定此设备)
</span><span class='line'>l = NOT_LOCKABLE (不要尝试锁定/解锁可弹出媒体)
</span><span class='line'>m = MAX_SECTORS_64 (每次传输最大不超过64个扇区(32KB)的数据)
</span><span class='line'>n = INITIAL_READ10 (强制重试初始的 READ(10) 命令(如果最初一次读取失败的话))
</span><span class='line'>o = CAPACITY_OK (完全信任设备报告的扇区数(容量))
</span><span class='line'>p = WRITE_CACHE (默认开启设备写入缓存[不怕数据丢失的风险])
</span><span class='line'>r = IGNORE_RESIDUE (不相信设备报告的[容量]剩余值)
</span><span class='line'>s = SINGLE_LUN (此设备只有一个逻辑单元(Logical Unit))
</span><span class='line'>w = NO_WP_DETECT (不检测设备是否有写保护)
</span><span class='line'>例如：usb-storage.quirks=0419:aaf5:rl,0421:0433:rc
</span><span class='line'>[USB]
</span><span class='line'>uhci-hcd.ignore_oc={0|1}
</span><span class='line'>是否忽略"电流超限"(overcurrent)事件。
</span><span class='line'>0(默认值) 不忽略
</span><span class='line'>1 忽略。某些有缺陷的主板会在USB端口未连接任何设备时，报告很多虚假的"电流超限"事件。设为"1"之后可以避免在内核日志中出现大量的"电流超限"警告，但同时，真实的"电流超限"事件也会被一并忽略。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;IOMMU&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;IOMMU非常类似于MMU，主要有如下功能：(1)IO地址转换[在64位系统上支持32位设备]；(2)分散-聚集(scatter-gather)支持[简化驱动程序的编写]；(3)DMA重映射与IRQ重映射[简化了IO设备的虚拟化]。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Linux内核当前的DMA映射有如下4种具体实现：&lt;br/&gt;
</span><span class='line'>(1)在内存不足3G的机器上，根本不使用任何IOMMU功能，因为根本没必要。内核消息："PCI-DMA: Disabling IOMMU"&lt;br/&gt;
</span><span class='line'>(2)基于GART(CONFIG_GART_IOMMU)的硬件IOMMU。内核消息："PCI-DMA: using GART IOMMU"&lt;br/&gt;
</span><span class='line'>(3)如果内存大于3G同时机器上又没有IOMMU硬件(或者用了"iommu=soft")，那么就使用软件模拟的IOMMU(CONFIG_BOUNCE)。内核消息："PCI-DMA: Using software bounce buffering for IO (SWIOTLB)&ldquo;&lt;br/&gt;
</span><span class='line'>(4)基于IBM Calgary硬件的IOMMU，仅用于IBM pSeries/xSeries系列服务器。内核消息："PCI-DMA: Using Calgary IOMMU&rdquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[IOMMU]
</span><span class='line'>iommu={off,force,noforce,soft}
</span><span class='line'>通用IOMMU设置：
</span><span class='line'>off 彻底关闭IOMMU功能
</span><span class='line'>force 强制使用硬件IOMMU，即使硬件可能有缺陷(例如VIA芯片组)或者根本没有必要这样做(例如内存不足3G)。
</span><span class='line'>noforce(默认) 在内存不足3G的机器上，不使用硬件IOMMU，因为根本没有必要。
</span><span class='line'>soft(Intel平台的默认值) 使用通过软件模拟的IOMMU(SWIOTLB)，同时禁止使用硬件IOMMU(即使存在)。
</span><span class='line'>[IOMMU]
</span><span class='line'>iommu=[SIZE][,allowed][,fullflush|nofullflush][,leak[=NUM]][,memaper[=N]|noaperture][,noagp][,merge|nomerge][,forcesac][,panic][,allowdac|nodac][,calgary]
</span><span class='line'>仅适用于硬件IOMMU(GART与Calgary)的设置：
</span><span class='line'>SIZE 重映射区域的大小，单位是字节。
</span><span class='line'>allowed 含义与"force"相同，即使硬件可能有缺陷(例如VIA芯片组)也强制使用硬件IOMMU
</span><span class='line'>fullflush(默认) 每次分配时都刷新IOMMU
</span><span class='line'>nofullflush 不刷新IOMMU
</span><span class='line'>leak=NUM 开启IOMMU泄漏跟踪(CONFIG_IOMMU_LEAK)，NUM是的泄漏页数(默认值是20)。
</span><span class='line'>memaper=N 在RAM中分配的固有窗口(own aperture)的大小，算法是 2N*32MB，N的默认值是"1"，也就是64MB。
</span><span class='line'>noaperture 禁止IOMMU使用AGP的"aperture"。
</span><span class='line'>noagp 不初始化AGP驱动，使用完全的"aperture"。
</span><span class='line'>merge 强制"scatter-gather"合并，隐含了"force"，这是一个实验性选项。
</span><span class='line'>nomerge 禁止"scatter-gather"合并
</span><span class='line'>forcesac 对于少于40位的掩码强制使用单地址周期(single-address cycle)，这是一个实验性选项。
</span><span class='line'>panic 当IOMMU益处时，允许panic
</span><span class='line'>allowdac 将32位PCI地址用两个时钟周期推入64位地址，这就是DAC的作用。
</span><span class='line'>nodac 禁用DAC，也就是所有4GB以上的DMA将强制通过IOMMU(硬件的或模拟的)
</span><span class='line'>calgary 使用IBM Calgary IOMMU
</span><span class='line'>swiotlb=页数[,force]
</span><span class='line'>仅适用于软件IOMMU(CONFIG_BOUNCE)的设置：
</span><span class='line'>页数 为"IO bounce buffer"预先保留的页数，每个页的大小是128K
</span><span class='line'>force 强制所有IO都透过软件IOMMU
</span><span class='line'>[AMD-IOMMU]
</span><span class='line'>amd_iommu={fullflush|off|force_isolation}
</span><span class='line'>向AMD IOMMU驱动(CONFIG_AMD_IOMMU)传递参数
</span><span class='line'>fullflush 表示当IO/TLB项被取消映射的时候立即刷新IO/TLB项(严格模式，速度较慢)，否则将仅在IO/TLB项被重用之前进行刷新(宽松模式，速度更快)
</span><span class='line'>off 表示彻底禁用AMD IOMMU功能
</span><span class='line'>force_isolation 表示为所有设备强制启用IOMMU隔离(映射)，这样IOMMU驱动就不再需要自己去发起隔离请求。注意：此选项不会覆盖"iommu=pt"
</span><span class='line'>[Intel-IOMMU]
</span><span class='line'>intel_iommu={on,off,igfx_off,forcedac,strict,sp_off}
</span><span class='line'>Intel-IOMMU驱动(CONFIG_INTEL_IOMMU)的主要功能就是DMA重映射，该参数用于设置其特性。
</span><span class='line'>on 开启Intel-IOMMU驱动
</span><span class='line'>off 关闭Intel-IOMMU驱动
</span><span class='line'>igfx_off 关闭Intel集成显卡的DMA重映射功能(默认值为开启)
</span><span class='line'>forcedac 强制PCI设备使用DAC，而禁止进行地址转换(默认值为允许)
</span><span class='line'>strict 禁止批量刷写IOTLB(默认值为允许)
</span><span class='line'>sp_off 关闭super page支持(默认值为开启)
</span><span class='line'>[Intel-IOMMU]
</span><span class='line'>intremap={on,off,nosid,no_x2apic_optout}
</span><span class='line'>设置中断重映射功能：
</span><span class='line'>on(默认值)开启中断重映射
</span><span class='line'>off 关闭中断重映射
</span><span class='line'>nosid 重映射时不对SID(Source ID)做检查
</span><span class='line'>no_x2apic_optout 无视BIOS的设置，强制禁用x2APIC特性，主要用于解决某些对x2APIC支持有缺陷的BIOS导致的故障
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;虚拟化&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[PV_OPS]
</span><span class='line'>noreplace-paravirt
</span><span class='line'>禁止使用内核通用的半虚拟化接口paravirt_ops，主要用于解决某些在Virtual PC上安装或运行Linux的故障。
</span><span class='line'>[VMMIO]
</span><span class='line'>virtio_mmio.device=size@baseaddr:irq[:id]
</span><span class='line'>实例化virtio-mmio设备(CONFIG_VIRTIO_MMIO)。可以多次使用以实例化多个设备。
</span><span class='line'>size 大小(可以使用K,M,G后缀)
</span><span class='line'>baseaddr 物理基准地址(physical base address)
</span><span class='line'>irq 中断号(将会被传递给request_irq())
</span><span class='line'>id(可选) platform设备号(device id)
</span><span class='line'>例子：virtio_mmio.device=1K@0x100b0000:48:7
</span><span class='line'>[KVM]
</span><span class='line'>kvm.ignore_msrs={0|1}
</span><span class='line'>是否忽略客户机对未经处理的MSR(unhandled MSR)的访问。"0"(默认值)表示不忽略但是会注入#GP；"1"表示忽略。
</span><span class='line'>[KVM]
</span><span class='line'>kvm.mmu_audit={0|1}
</span><span class='line'>是否允许在运行时对KVM MMU进行审计。"0"(默认值)表示禁止审计；"1"表示允许审计。
</span><span class='line'>[KVM,AMD]
</span><span class='line'>kvm-amd.nested={0|1}
</span><span class='line'>是否允许嵌套虚拟化(在虚拟机内再创建虚拟机)。"0"表示禁止嵌套；"1"(默认值)表示允许嵌套。
</span><span class='line'>[KVM,AMD]
</span><span class='line'>kvm-amd.npt={0|1}
</span><span class='line'>是否允许客户机使用嵌套页表(Nested Page Table)。"0"表示禁止使用；"1"(默认值)表示允许使用。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.ept={0|1}
</span><span class='line'>是否允许客户机使用扩展页表(Extended Page Table)。"0"表示禁止使用；"1"(默认值)表示允许使用。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.emulate_invalid_guest_state={0|1}
</span><span class='line'>是否允许仿真无效的客户机状态。"0"(默认值)表示禁止仿真；"1"表示允许仿真。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.flexpriority={0|1}
</span><span class='line'>是否允许使用FlexPriority技术(TPR[Task Priority Register] shadow)。"0"表示禁止使用；"1"(默认值)表示允许使用。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.nested={0|1}
</span><span class='line'>是否允许VMX嵌套(nVMX)。"0"(默认值)表示禁止；"1"表示允许。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.unrestricted_guest={0|1}
</span><span class='line'>是否允许使用"unrestricted guest"技术。"0"表示禁止使用；"1"(默认值)表示允许使用。
</span><span class='line'>[KVM,Intel]
</span><span class='line'>kvm-intel.vpid={0|1}
</span><span class='line'>是否允许使用"Virtual Processor Identification"(tagged TLB)技术。"0"表示禁止使用；"1"(默认值)表示允许使用。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;内存&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[KNL,BOOT]
</span><span class='line'>mem=nn[KMG]
</span><span class='line'>强制指定内核使用多少数量的内存。仅在你想限定内存使用量时，才需要指定这个参数。同时为了避免PCI设备使用指定范围之外的内存，你还应该配合"memmap="一起使用。
</span><span class='line'>[KNL]
</span><span class='line'>memmap=exactmap
</span><span class='line'>表示将要使用随后的"memmap=..."等参数进行精确的E820内存映射(因为有时候E820报告的并不准确)，同时禁止内核进行任何自动的探测。比如对于一个4G内存的机器可能是："memmap=exactmap memmap=640K@0 memmap=4095M@1M"。
</span><span class='line'>[KNL]
</span><span class='line'>memmap=nn[KMG]@ss[KMG]
</span><span class='line'>强制只使用从ss开始的nn长度的特定内存区域。可以多次使用以指定多个区域。
</span><span class='line'>[KNL,ACPI]
</span><span class='line'>memmap=nn[KMG]#ss[KMG]
</span><span class='line'>强制将从ss开始的nn长度的特定内存区域标记为ACPI数据。
</span><span class='line'>[KNL,ACPI]
</span><span class='line'>memmap=nn[KMG]$ss[KMG]
</span><span class='line'>强制保留(不使用)从ss开始的nn长度的特定内存区域。
</span><span class='line'>[KNL,BUGS]
</span><span class='line'>reserve=起点,长度[,起点,长度]...
</span><span class='line'>禁止设备驱动程序自动探测某些iomem区域，因为某些设计不良的硬件会导致自动探测失败或出错。此外，还可以用于人为禁止内核初始化某些端口上的设备。
</span><span class='line'>内核会将此处指定的iomem区域标记为"reserved"(意为"已经在此处找到设备")，从而将该区域保留。
</span><span class='line'>因为设备驱动不应该去侦测标记为"reserved"的区域，除非另一个启动参数明确地指示它这样做，所以此参数经常和其它启动参数一起使用：
</span><span class='line'>用"reserve="保留一段区域禁止所有其他驱动的探测，同时再明确指定一个驱动去检测被保留的区域。例如：
</span><span class='line'>
</span><span class='line'>reserve=0x300,32  blah=0x300
</span><span class='line'>
</span><span class='line'>的意思是：除了允许"blah"驱动探测 0x300 之外，禁止任何其他驱动探测 0x300-0x31f 区域。
</span><span class='line'>绝大部份的机器都不需要此参数。只有真正有缺陷的硬件或特殊情况才会需要使用它。
</span><span class='line'>[注意]每个"reserve="参数最多可以指定4个保留区域，如果你有异常复杂的需求，可以使用多重"reserve="来指定。
</span><span class='line'>reservelow=nn[K]
</span><span class='line'>设置为BIOS保留的底端地址空间数量。
</span><span class='line'>memory_corruption_check={0|1}
</span><span class='line'>是否开启低位内存脏数据检查(CONFIG_X86_CHECK_BIOS_CORRUPTION)。某些有bug的BIOS经常会在执行系统休眠/唤醒之类动作的时候，破坏内存中前64k的内容。如果始终检查到错误,那么就应该通过"memmap="参数来避免使用这段内存。
</span><span class='line'>memory_corruption_check_size=字节数
</span><span class='line'>低位内存脏数据检查(CONFIG_X86_CHECK_BIOS_CORRUPTION)的内存范围。默认值是"64K"，表示"0-64K"这个内存范围。
</span><span class='line'>memory_corruption_check_period=秒数
</span><span class='line'>低位内存脏数据检查(CONFIG_X86_CHECK_BIOS_CORRUPTION)的周期。默认值是60秒。设为"0"则表示禁止这种周期性的检查。
</span><span class='line'>[KNL,BOOT]
</span><span class='line'>vmalloc=nn[KMG]
</span><span class='line'>强制指定vmalloc区域的大小。可用于增加vmalloc区域的最小尺寸(x86默认128MB)，也可以用于减少vmalloc的大小，增加更多的空间用于直接映射内核RAM。
</span><span class='line'>[SLUB]
</span><span class='line'>slub_min_order=整数
</span><span class='line'>slub_max_order=整数
</span><span class='line'>SLUB页块最小与最大order数(默认值分别是"0"与"3")，当然slub_min_order必须小于slub_max_order。每一个slab需要2order个物理页框。过高的值可能会导致内存溢出错误。详见Documentation/vm/slub.txt
</span><span class='line'>[SLUB]
</span><span class='line'>slub_min_objects=整数
</span><span class='line'>每个slab的最小object总数目(默认值是"4")。详见Documentation/vm/slub.txt
</span><span class='line'>[SLUB]
</span><span class='line'>slub_nomerge
</span><span class='line'>禁止合并大小相近的多个slab，主要用于调试目的。
</span><span class='line'>[KNL]
</span><span class='line'>dhash_entries=正整数
</span><span class='line'>设置内核目录项缓存中哈希表默认项数。仅供内核专家使用。
</span><span class='line'>[KNL]
</span><span class='line'>ihash_entries=正整数
</span><span class='line'>内核会在内存中缓存一定数量的inode结构来加速文件访问，每个inode对应一个文件(不同于文件系统中的inode概念)，包含文件访问权限/属主/组/大小/生成时间/访问时间/最后修改时间等信息。这些inode保存在一个哈希表中。
</span><span class='line'>这个值用于指定这个哈希表的最大项数。你可以根据自己硬盘上可能被访问的文件数量对默认值进行调整(注意需要考虑哈希值的碰撞)。仅供内核专家使用。
</span><span class='line'>[KNL]
</span><span class='line'>transparent_hugepage={always|madvise|never}
</span><span class='line'>设置透明大内存页(CONFIG_TRANSPARENT_HUGEPAGE)的默认用法：
</span><span class='line'>always 表示总是对所有应用程序启用透明大内存页支持
</span><span class='line'>madvise 表示仅对明确要求该特性的程序启用
</span><span class='line'>never 表示彻底禁用。
</span><span class='line'>其默认值由内核的编译时设置决定。详见"Documentation/vm/transhuge.txt"文档。
</span><span class='line'>[HW]
</span><span class='line'>default_hugepagesz={2M|1G}
</span><span class='line'>默认的HugeTLB页大小。若未指定，那么其默认值就是CPU自身的默认值。
</span><span class='line'>大多数现代计算机体系结构提供对多页面大小的支持，比如X86_64支持4K和2M(要求CPU带有"pse"标记)以及1G(要求CPU带有"pdpe1gb"标记)。
</span><span class='line'>因此Linux将物理内存划分成许多固定大小的页面(默认为4K)，每个页对应一个page结构，这些结构组成一个mem_map[]数组。TLB(Translation Lookaside Buffer)是虚拟地址到物理地址的翻译缓冲区，这种缓冲区在处理器上是很宝贵的，操作系统总是尝试将有限的TLB资源发挥到极致。特别是能够轻松获得若干G内存的时候(大于4G)，这种优化就显得尤为关键。而HugeTLB特性则允许将某些页的尺寸增大到2MB或1GB，从而大大减小TLB的尺寸，提高缓冲区的命中率，进而提升内存性能。
</span><span class='line'>[HW]
</span><span class='line'>hugepagesz={2M|1G}
</span><span class='line'>指定HugeTLB页的大小，通常与"hugepages="联合使用(可使用多次)，为不同尺寸的大页分别预留不同的数量。
</span><span class='line'>例如：hugepagesz=2M hugepages=128 hugepagesz=1G hugepages=8
</span><span class='line'>注意：1GB的大页只能在命令行上使用"hugepages="预先分配，且分配之后不可在运行时释放。
</span><span class='line'>[HW]
</span><span class='line'>hugepages=正整数
</span><span class='line'>在启动时分配的HugeTLB页数量，仅在内核开启了CONFIG_HUGETLBFS之后有效。
</span><span class='line'>gbpages
</span><span class='line'>nogbpages
</span><span class='line'>是否允许内核页表对大小为1GB的Hugepages进行直接映射(CONFIG_DIRECT_GBPAGES)。当"CONFIG_DIRECT_GBPAGES=y"时，默认值是"gbpages"。
</span><span class='line'>vdso={0|1|2}
</span><span class='line'>vdso=0 禁用VDSO(Virtual Dynamic Shared Object)映射
</span><span class='line'>vdso=1 启用VDSO(Virtual Dynamic Shared Object)映射，这是"CONFIG_COMPAT_VDSO=n"时的默认值。
</span><span class='line'>vdso=2 将VDSO(Virtual Dynamic Shared Object)映射到旧式的确定性地址，这是"CONFIG_COMPAT_VDSO=y"时的默认值。
</span><span class='line'>vdso32={0|1|2}
</span><span class='line'>vdso32=0 禁用32位VDSO(Virtual Dynamic Shared Object)映射
</span><span class='line'>vdso32=1 启用32位VDSO(Virtual Dynamic Shared Object)映射，这是"CONFIG_COMPAT_VDSO=n"时的默认值。
</span><span class='line'>vdso32=2 将32位VDSO(Virtual Dynamic Shared Object)映射到旧式的确定性地址，这是"CONFIG_COMPAT_VDSO=y"时的默认值。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;MTRR与PAT&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;enable_mtrr_cleanup
</span><span class='line'>disable_mtrr_cleanup
</span><span class='line'>开启/关闭MTRR cleanup(CONFIG_MTRR_SANITIZER)特性。
</span><span class='line'>mtrr_chunk_size=nn[KMG]
</span><span class='line'>用于"MTRR cleanup"(CONFIG_MTRR_SANITIZER)功能，设置允许的最大连续块尺寸(也就是uncacheable项)。
</span><span class='line'>mtrr_gran_size=nn[KMG]
</span><span class='line'>用于"MTRR cleanup"(CONFIG_MTRR_SANITIZER)功能，设置MTRR块的粒度(每块的大小)。默认值是"1"。较大的值可以防止小的对齐耗尽MTRR。
</span><span class='line'>mtrr_spare_reg_nr=N
</span><span class='line'>用于"MTRR cleanup"(CONFIG_MTRR_SANITIZER)功能，设置备用MTRR项的编号。也就是告诉内核reg0N可以被清理或改写(参见"/proc/mtrr"文件)，默认值是"1"。
</span><span class='line'>nopat
</span><span class='line'>禁用PAT支持(CONFIG_X86_PAT)。主要用于解决某PAT故障导致的无法正常启动或者显卡驱动不能正常工作的问题。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;图形与显示&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[AGP]
</span><span class='line'>agp={off|try_unsupported}
</span><span class='line'>off 表示关闭内核的AGP(CONFIG_AGP)支持；
</span><span class='line'>try_unsupported 表示尝试驱动那些不受支持的芯片(可能会导致系统崩溃或数据错误)
</span><span class='line'>[HW,DRM]
</span><span class='line'>gamma=浮点数
</span><span class='line'>设置显示器的Gamma值。
</span><span class='line'>video.brightness_switch_enabled={0|1}
</span><span class='line'>[背景知识]如果ACPI video.ko驱动(CONFIG_ACPI_VIDEO)能够收到用户通过键盘热键触发的ACPI事件(这需要固件的帮助)，video.ko将会把收到的ACPI事件转化为一个"key"类型输入事件，并通过其创建的输入设备发送到用户空间，这样用户空间的工具就可以通过sysfs接口去修改显示器的亮度。这是传统的做法。
</span><span class='line'>但是从v3.13内核开始，新增了此参数，并且其默认值为"1"，表示video.ko驱动除了向用户空间传递事件之外，还要自己在内核层去改变显示器的亮度。
</span><span class='line'>如果设为"0"则表示不在内核层改变显示器的亮度，依然留给用户层的工具去通过sysfs接口修改。
</span><span class='line'>详见Documentation/acpi/video_extension.txt文档。
</span><span class='line'>[DRM]
</span><span class='line'>i915.invert_brightness={-1|0|1}
</span><span class='line'>反转显示器背光亮度控制变量(brightness)的含义。
</span><span class='line'>通常情况下，brightness的值为"0"表示关闭背光(全黑)，随着brightness的值增大到最大值，表示最大亮度。
</span><span class='line'>但是通过这个参数，可以反转brightness的含义，让"0"表示最亮，而随着brightness值的递增亮度逐渐降低，直到最大值关闭背光(全黑)。
</span><span class='line'>-1 表示绝不反转其含义，也就是"0"始终表示关闭，最大值始终表示最亮。
</span><span class='line'>0 表示内核不对此变量的含义加以干预，使用机器自身的默认含义。
</span><span class='line'>1 表示强制反转其含义，也就是"0"始终表示最亮，最大值始终表示关闭。
</span><span class='line'>此选项常用于解决某些使用Intel集显/核显(CONFIG_DRM_I915)的电脑在启动时黑屏的问题。
</span><span class='line'>[FB]
</span><span class='line'>logo.nologo
</span><span class='line'>在系统启动时不显示Linux的企鹅标志图(企鹅数=CPU核心数)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;网络&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[IPV6]
</span><span class='line'>disable_ipv6={0|1}
</span><span class='line'>是否在所有网络接口上禁用IPv6支持：0(默认值)表示在所有网络接口上开启IPv6支持；1 表示在所有网络接口上关闭IPv6支持。
</span><span class='line'>[IPV6]
</span><span class='line'>autoconf={0|1}
</span><span class='line'>是否在所有网络接口上开启IPv6地址自动配置。
</span><span class='line'>0 表示禁止自动配置，这样就只有IPv6回环地址(::1)和"link-local"地址会被自动添加到网络接口上。如果你不想从路由器公告(Router Advertisements)中的地址前缀自动生成IPv6地址，可以使用此项。
</span><span class='line'>1(默认值) 表示在所有网络接口上开启IPv6地址自动配置
</span><span class='line'>[IP_PNP]
</span><span class='line'>ip=[client-ip:server-ip:gateway-ip:netmask:hostname:device:]autoconf[:dns0-ip:dns1-ip]
</span><span class='line'>此参数告诉内核如何在启动过程中配置网卡的IP地址及路由表(而不是在启动完成后依赖用户空间的脚本去配置)。仅在内核已启用了CONFIG_IP_PNP的前提下有效。通常用于需要将NFS挂载为根文件系统(CONFIG_ROOT_NFS)的场合。
</span><span class='line'>此参数有以下4种用法：
</span><span class='line'>(1)ip={off|none}或者没有使用"ip"参数。这是默认值，表示彻底关闭自动配置功能。
</span><span class='line'>(2)ip={dhcp|bootp|rarp|any} 表示内核全自动完成所有配置工作(也就是将所有字段设为各自的默认值)。各选项的含义参见下面对autoconf字段的说明。
</span><span class='line'>(3)将autoconf字段设为{off|none}之一，并明确指定所有其它字段。表示全静态配置，也就是手动指定各字段的值(禁止自动检测)。
</span><span class='line'>(4)将autoconf字段设为{dhcp|bootp|rarp|any}之一，并明将部分字段留空(字段分割符":"不能省略)。表示半自动配置，也就是将留空的字段设为各自的默认值(自动检测)，而将手动指定的字段设为指定的值(禁止自动检测)。
</span><span class='line'>各字段的说明如下：
</span><span class='line'>client-ip NFS客户端IP地址。若留空，其默认值将通过自动检测获取。
</span><span class='line'>server-ip NFS服务器IP地址。该字段仅在需要将NFS挂载为根文件系统(root=/dev/nfs)的时候才是必须的。如果使用RARP检测client-ip并且此字段非空，那么将仅接受指定服务器的应答。若留空，其默认值将通过自动检测获取(也就是自动配置服务器的地址)。
</span><span class='line'>gateway-ip 网关的IP地址。仅在NFS服务器位于不同子网的时候才是必须的。若留空，其默认值将通过自动检测获取。
</span><span class='line'>netmask 子网掩码。若留空，其默认值将通过自动检测获取(根据client-ip所属的地址类型[A/B/C之类])。
</span><span class='line'>hostname NFS客户端的主机名。若留空，其默认值将通过自动检测获取(client-ip的ASCII表示形式)。
</span><span class='line'>device 使用的网卡。若留空，其默认值将通过自动检测获取：若有多个网卡，那么将通过所有网卡同时发送自动配置请求包，并将最先接收到应答的网卡设为默认网卡。
</span><span class='line'>autoconf 自动配置方式。{off|none}表示不使用自动配置(必须手动指定个字段的值)；{dhcp|bootp|rarp}分别表示只使用DHCP/BOOTP/RARP协议进行自动配置(当然内核必须支持指定的协议)；"any"表示使用内核支持的所有自动配置协议(同时发送不同协议的自动配置请求包，以最先接收到的应答为准)。 dns0-ip 主DNS服务器IP地址。若留空，其默认值将通过自动检测获取。其值将通过 /proc/net/pnp 导出到用户空间。在嵌入式系统上，/etc/resolv.conf 常常是到 /proc/net/pnp 的软连接。
</span><span class='line'>dns1-ip 辅DNS服务器IP地址。其它同上。
</span><span class='line'>[KNL,NET]
</span><span class='line'>rhash_entries=正整数
</span><span class='line'>设置内核路由缓冲区哈希表的大小，仅供内核网络专家使用。
</span><span class='line'>[KNL,NET]
</span><span class='line'>thash_entries=正整数
</span><span class='line'>设置内核允许使用的TCP链接哈希表的大小。
</span><span class='line'>[KNL,NET]
</span><span class='line'>uhash_entries=正整数
</span><span class='line'>设置内核允许使用的UDP/UDP-Lite链接哈希表的大小。
</span><span class='line'>[NETFILTER]
</span><span class='line'>nf_conntrack.acct={0|1}
</span><span class='line'>是否允许对连接追踪(CONFIG_NF_CONNTRACK)流进行记账。"0"(默认值)表示禁止记账，"1"表示允许记账。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;块设备与磁盘阵列&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;blkdevparts=
</span><span class='line'>手动设置块设备分区表(而不是从块设备读取)，主要用于嵌入式环境或分区表损坏恢复的场合。详情参见Documentation/block/cmdline-partition.txt文档
</span><span class='line'>[EFI]
</span><span class='line'>gpt
</span><span class='line'>强制将拥有有效GPT签名但同时又包含无效"保护MBR"的磁盘当做GPT格式的磁盘。
</span><span class='line'>[IOSCHED]
</span><span class='line'>elevator={"bfq"|"cfq"|"deadline"|"noop"}
</span><span class='line'>指定默认的IO调度器
</span><span class='line'>[LOOP]
</span><span class='line'>loop.max_loop=[0-256]
</span><span class='line'>在系统启动时无条件的预先创建的回环(loopback)设备数，默认值由CONFIG_BLK_DEV_LOOP_MIN_COUNT决定。如果你使用util-linux-2.21以上版本,建议设为"0"(loop设备将通过/dev/loop-control动态创建)。
</span><span class='line'>[HW,RAID]
</span><span class='line'>raid={autodetect|noautodetect,partitionable|part}
</span><span class='line'>明确向内核的MD驱动(CONFIG_BLK_DEV_MD)传递RAID配置属性
</span><span class='line'>autodetect|noautodetect 表示内核是否应该自动检测RAID模式(CONFIG_MD_AUTODETECT)。如果关闭了自动检测，那么必须使用"md="明确告诉内核RAID模式及配置。
</span><span class='line'>partitionable|part 两者含义相同，都表示内核应该将组装之后得到的RAID设备视为"可分区"设备。
</span><span class='line'>[HW,RAID]
</span><span class='line'>md=N,dev0,dev1,...
</span><span class='line'>明确向内核的MD驱动(CONFIG_BLK_DEV_MD)传递RAID配置信息，并将列出的设备(dev0,dev1,...)组装为 /dev/mdN 阵列(表现为一个块设备文件)。
</span><span class='line'>建议仅在根文件系统位于RAID上的情况下使用这个参数。其他非根文件系统的RAID最好在系统启动后(挂载完根之后)再组装。
</span><span class='line'>N 可以是 0,1,2,3,...,255 中的任意一个整数，表示被创建的md设备的编号，例如：
</span><span class='line'>
</span><span class='line'>md=2,/dev/sda,/dev/sdb,/dev/sdc,/dev/sdd
</span><span class='line'>
</span><span class='line'>表示将 /dev/sda,/dev/sdb,/dev/sdc,/dev/sdd 组装成 /dev/md2 块设备(至于RAID级别之类的信息则由存储在超级块中的元数据提供)。
</span><span class='line'>[提示]2.6.28之前的老版本内核对创建的阵列还有所谓"可分区阵列"和"不可分区阵列"的区别，具体表现是：如果在N前加上字母"d"，则表示所创建的阵列是一个可分区阵列，否则就是不可分区阵列。不过现在已经没有这个区别了，所有创建的阵列都是可分区的，因此"d"也就没有存在的必要了。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;根文件系统&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[KNL]
</span><span class='line'>root=字符串
</span><span class='line'>指定根文件系统的所在位置。通常这是一个必须明确设置的参数。
</span><span class='line'>"字符串"可以使用如下几种形式：
</span><span class='line'>XXxx 一个16进制数，其中"XX"是主设备号，"xx"是次设备号。例如"/dev/sdc15"(主设备号是"8"，次设备号是"47")，可以表示成"082F"。
</span><span class='line'>/dev/nfs 表示使用由nfsroot参数指定的NFS磁盘，仅在根文件系统位于NFS文件系统上的时候才使用。
</span><span class='line'>/dev/disk 表示一块完整的无分区块设备。比如：/dev/md0 /dev/loop0 /dev/sdb /dev/mmcblk0
</span><span class='line'>/dev/diskN 表示disk磁盘的第N(十进制)个分区。这是最常见的用法，比如：/dev/sda2 /dev/ubda1 /dev/xvda13
</span><span class='line'>/dev/diskpN 含义与上面的一样，也表示disk磁盘的第N(十进制)个分区，但是用于disk本身以数字结尾的情况(避免混淆)。比如：/dev/md0p3 /dev/emd/0p2 /dev/mmcblk0p1
</span><span class='line'>PARTUUID=00112233-4455-6677-8899-AABBCCDDEEFF 仅用于EFI/GPT格式的磁盘，表示分区表中UUID值为"00112233-4455-6677-8899-AABBCCDDEEFF"的分区。[提示]可以使用blkid查看"PARTUUID"。
</span><span class='line'>PARTUUID=SSSSSSSS-PP 仅用于传统的MSDOS分区表。"SSSSSSSS"是用16进制表示的32位"NT disk signature"，"PP"是用16进制表示的分区号。比如：PARTUUID=97531ACF-02 可能相当于 /dev/sda2 
</span><span class='line'>PARTUUID=XXXX/PARTNROFF=N 表示以UUID="XXXX"的分区为基准，偏移N个分区。假定 /dev/sdb5 的UUID=XXXX，那么 PARTUUID=XXXX/PARTNROFF=3 就表示 /dev/sdb8 ，而 PARTUUID=XXXX/PARTNROFF=-3 则表示 /dev/sdb2
</span><span class='line'>major:minor 由一对十进制数组成，其中major是主设备号，minor是次设备号。例如"/dev/sdc15"(主设备号是"8"，次设备号是"47")，可以表示成"8:47"。
</span><span class='line'>LABEL=??? 表示卷标为"???"的分区。比如：root=LABEL=/ 。不过这种格式并不被内核直接支持，仅是发行版通过initramfs中的脚本添加了这种格式的支持而已。所以并不通用。
</span><span class='line'>[KNL]
</span><span class='line'>rootfstype=文件系统类型
</span><span class='line'>指定根文件系统的类型。例如："xfs"或"ext4"之类
</span><span class='line'>[KNL]
</span><span class='line'>rootflags=挂载选项
</span><span class='line'>设置根文件系统的挂载选项，比如"noatime,ro"。各种不同的文件系统所能使用的选项各不相同，可以参考 mount 程序的选项。
</span><span class='line'>[KNL]
</span><span class='line'>ro
</span><span class='line'>rw
</span><span class='line'>以只读(ro)/读写(rw)模式挂载根文件系统
</span><span class='line'>[KNL]
</span><span class='line'>rootdelay=秒数
</span><span class='line'>在挂载根文件系统前延迟多少秒，主要用于等待那些反应速度较慢的异步检测的设备就绪(例如USB/MMC/FireWire)。
</span><span class='line'>[KNL]
</span><span class='line'>rootwait
</span><span class='line'>在根文件系统就绪之前无限等待。主要用于等待那些反应速度较慢的异步检测的设备就绪(例如USB/MMC/FireWire)。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;系统初始化(init)&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[KNL]
</span><span class='line'>init=文件全路径
</span><span class='line'>指定内核挂载根文件系统后运行的第一个用户空间程序的绝对路径。默认为"/sbin/init"。
</span><span class='line'>[KNL]
</span><span class='line'>rdinit=全路径
</span><span class='line'>设置从initramfs中运行的第一个用户空间程序的绝对路径，默认为"/init"。
</span><span class='line'>[注意]一旦使用了initramfs并且成功的运行了其中的"/init"，所有"init"以及与根文件系统相关的参数(包括"nfsroot")对内核而言都将失效。
</span><span class='line'>initramfs中的脚本必须自己分析各个内核引导参数(/proc/cmdline)并完成根文件系统的挂载与切换，当然也包括启动真正的"init"进程。
</span><span class='line'>[KNL]
</span><span class='line'>S
</span><span class='line'>以单用户模式运行"init"。注意，这不是一个真正的内核参数，只是给initramfs中的脚本用的。所以并不通用。
</span><span class='line'>
</span><span class='line'>NFS(网络文件系统)
</span><span class='line'>
</span><span class='line'>[NFS]
</span><span class='line'>lockd.nlm_grace_period=秒数
</span><span class='line'>为NFS锁管理器指定宽限时间，单位是秒。取值范围在[0-240]？
</span><span class='line'>[NFS]
</span><span class='line'>lockd.nlm_tcpport=端口号
</span><span class='line'>为NFS锁管理器指定TCP端口
</span><span class='line'>[NFS]
</span><span class='line'>lockd.nlm_timeout=秒数
</span><span class='line'>为NFS锁管理器指定默认超时时间，单位是秒。默认值是10秒。取值范围在[3-20]？
</span><span class='line'>[NFS]
</span><span class='line'>lockd.nlm_udpport=端口号
</span><span class='line'>为NFS锁管理器指定UDP端口
</span><span class='line'>[NFS]
</span><span class='line'>nfsroot=[server-ip:]root-dir[,nfs-options]
</span><span class='line'>指定NFS根文件系统的位置。如果没有设置此参数，那么将使用"/tftpboot/本机IP"(默认值)作为根文件系统，并使用默认的NFS挂载选项。
</span><span class='line'>server-ip NFS服务器IP地址。其默认值是"ip"参数中的server-ip字段的值。
</span><span class='line'>root-dir 作为根文件系统挂载的NFS服务器的目录。如果其中包含"%s"，那么将会被替换为本机IP地址的ASCII表示形式。
</span><span class='line'>nfs-options 标准的NFS文件系统挂载选项(例如"ro")，多个选项之间使用逗号分隔。下面是默认使用的值：
</span><span class='line'>
</span><span class='line'>  port     = 由NFS服务器的portmap守护进程给出
</span><span class='line'>  rsize    = 4096
</span><span class='line'>  wsize    = 4096
</span><span class='line'>  timeo    = 7
</span><span class='line'>  retrans  = 3
</span><span class='line'>  acregmin = 3
</span><span class='line'>  acregmax = 60
</span><span class='line'>  acdirmin = 30
</span><span class='line'>  acdirmax = 60
</span><span class='line'>  flags    = hard,nointr,noposix,cto,ac
</span><span class='line'>
</span><span class='line'>[NFS]
</span><span class='line'>nfsrootdebug
</span><span class='line'>在启动过程中，在内核日志里显示详细的NFS相关的调试信息(挂载选项、服务器IP地址、根文件系统路径等)，以方便调试和故障诊断。
</span><span class='line'>[NFS]
</span><span class='line'>nfs.callback_tcpport=端口号
</span><span class='line'>设置NFSv4回复通道(callback channel)监听的TCP端口
</span><span class='line'>[NFS]
</span><span class='line'>nfs.cache_getent=路径
</span><span class='line'>设置用于更新NFS客户端缓存项的程序的路径。默认值是"/sbin/nfs_cache_getent"。
</span><span class='line'>[NFS]
</span><span class='line'>nfs.cache_getent_timeout=秒数
</span><span class='line'>尝试更新缓存项超时秒数，超过指定时间仍未更新成功则视为更新失败。默认值是15秒。
</span><span class='line'>[NFS]
</span><span class='line'>nfs.idmap_cache_timeout=秒数
</span><span class='line'>设置idmapper缓存项的最大寿命，单位是秒。
</span><span class='line'>[NFS]
</span><span class='line'>nfs.enable_ino64={0|1}
</span><span class='line'>是否开启64位inode号。"0"表示NFS客户端将会为readdir()与stat()系统调用模拟一个32位inode号(而不是返回真实的64位inode号)。"1"(默认值)表示返回真实的64位inode号。
</span><span class='line'>[NFSv4.1]
</span><span class='line'>nfs.max_session_slots=正整数
</span><span class='line'>设置NFS客户端尝试和服务器端协商的最大会话slot数。这也同时限定了客户端能够像服务器端发送的最大并发RPC请求数。默认值是64。将此值设置为比max_tcp_slot_table_limit大是没有价值的。
</span><span class='line'>[NFSv4]
</span><span class='line'>nfs.nfs4_unique_id=字符串
</span><span class='line'>指定NFSv4客户端插入到nfs_client_id4字符串中的额外的唯一标识字符串。这通常是一个在系统安装时自动生成的UUID。
</span><span class='line'>[NFSv4.1]
</span><span class='line'>nfs.send_implementation_id={0|1}
</span><span class='line'>是否在exchange_id请求中包含客户端实现识别信息(implementation identification information)。"0"表示不发送，默认值"1"表示发送。
</span><span class='line'>[NFSv4]
</span><span class='line'>nfs.recover_lost_locks={0|1}
</span><span class='line'>v3.12新增。是否尝试恢复服务器上由于租约超时而丢失的锁。需要注意的是，这样做很有可能会导致数据错误，因为无法保证超时后的锁文件未被更改。默认值"0"表示不做这样的尝试，而"1"则表示尝试恢复(这是v3.11及之前内核的默认行为)。
</span><span class='line'>[NFSv4]
</span><span class='line'>nfs.nfs4_disable_idmapping={0|1}
</span><span class='line'>默认值"1"表示在使用了"sec=sys"挂载选项的情况下，RPC身份认证和NFS操作都使用数字化的uid/gid。这会导致idmapping被禁用，从而让NFSv2/v3向NFSv4的迁移变得更加容易。客户端将会自动检测不支持此种操作模式的服务器，并回退到使用idmapper的模式。"0"表示禁止这种行为。
</span><span class='line'>[NFSv4]
</span><span class='line'>nfsd.nfs4_disable_idmapping={0|1}
</span><span class='line'>默认值"1"表示NFSv4服务器与那些使用auth_sys的客户端之间只使用数字化的uid/gid(包括发送与接收)，从而让NFSv2/v3向NFSv4的迁移变得更加容易。"0"表示禁止这种行为。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;模块功能&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;nomodule
</span><span class='line'>禁用内核模块加载功能(CONFIG_MODULES)。
</span><span class='line'>[KNL]
</span><span class='line'>module.sig_enforce
</span><span class='line'>强制内核在加载模块时检查模块签名(CONFIG_MODULE_SIG)，并且只接受具有合法签名的模块。如果内核开启了CONFIG_MODULE_SIG_FORCE，那么无论是否使用此参数，都将强制检查模块的签名。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;安全&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;no_file_caps
</span><span class='line'>要求内核无视文件的权限。这样，执行文件的唯一途径就只有：由root去执行或者setuid root
</span><span class='line'>noexec={on|off}
</span><span class='line'>noexec32={on|off}
</span><span class='line'>是否允许将某部分内存映射为"禁止执行"，这是一种防止数据缓冲区溢出攻击的保护措施(也就是WinXP SP2曾经大力宣传的数据执行保护功能)，建议保持默认值"on"。
</span><span class='line'>[说明]noexec对32bit代码以及64bit代码都有约束力，而noexec32只针对32bit代码。
</span><span class='line'>nosmap
</span><span class='line'>禁用SMAP(CONFIG_X86_SMAP)支持。SMAP是Intel从Haswell微架构开始引入的一种新特征，用途是禁止内核因为自身错误意外访问用户空间的数据，以避免一些内核漏洞所导致的安全隐患。
</span><span class='line'>nosmep
</span><span class='line'>禁用SMEP(Supervisor Mode Execution Prevention)支持。SMEP与SMAP类似，也是Intel从Haswell微架构开始引入的一种新特征，用途是禁止内核因为自身错误意外执行用户空间的代码。以避免一些内核漏洞所导致的安全隐患。
</span><span class='line'>nordrand
</span><span class='line'>即使CPU支持(CONFIG_ARCH_RANDOM)，也禁止内核使用RDRAND指令(不过用户空间依然可以使用此指令)。由于很多人怀疑RDRAND指令所依赖的硬件随机数生成器所使用的加密标准(NIST SP800-90)被NSA植入了后门，所以提供了该参数以禁用它，不过大神Torvalds不以为然。
</span><span class='line'>vsyscall={emulate|native|none}
</span><span class='line'>控制vsyscall系统调用(调用固定的地址0xffffffffff600x00)的行为。大多数静态链接的可执行程序和老旧的Glibc会使用这个系统调用。因为vsyscall始终位于固定的地址，所以很容易被攻击者利用。
</span><span class='line'>emulate(默认值) 捕捉vsyscalls系统调用，并对其进行安全的模拟。这是比较安全的选项，但效率并不最高。
</span><span class='line'>native 将vsyscall系统调用直接转变成本地syscall指令，这比模拟方式效率稍微高一些。但是很容易被攻击。
</span><span class='line'>none 完全禁用vsyscall系统调用。这是最安全的选项，但是有可能会导致系统工作异常。
</span><span class='line'>[EVM]
</span><span class='line'>evm="fix"
</span><span class='line'>不管当前的完整性状态如何，都允许更新"security.evm"。
</span><span class='line'>[SECURITY]
</span><span class='line'>security={selinux|smack|tomoyo|apparmor|yama}
</span><span class='line'>选择启用的安全模块。仅在内核同时开启了多个安全模块的情况下才有意义。
</span><span class='line'>[SELINUX]
</span><span class='line'>selinux={0|1}
</span><span class='line'>是否在启动时就开启SELinux功能(CONFIG_SECURITY_SELINUX_BOOTPARAM)："0"表示关闭，"1"表示开启。
</span><span class='line'>默认值由内核在编译时确定(CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE)。
</span><span class='line'>即使设为"1"，随后也可以通过 /selinux/disable 在加载安全策略前禁止SELinux功能。
</span><span class='line'>[SELINUX]
</span><span class='line'>enforcing={0|1}
</span><span class='line'>是否在启动时强制启用SELinux规则。
</span><span class='line'>"0"(默认值)表示仅仅做记录违规操作日志而不真正拒绝违规操作；
</span><span class='line'>"1"表示真正拒绝违规操作并做记录违规操作日志。
</span><span class='line'>该参数还可以在运行时通过 /selinux/enforce 进行修改
</span><span class='line'>[SELINUX]
</span><span class='line'>checkreqprot={0|1}
</span><span class='line'>设置"checkreqprot"标记的初始值。
</span><span class='line'>"0"表示由内核强制执行检查保护(包括其中隐含的所有执行保护)
</span><span class='line'>"1"表示由应用程序自己主动请求执行检查保护
</span><span class='line'>默认值由内核在编译时确定，也可以在运行时通过 /selinux/checkreqprot 修改
</span><span class='line'>[APPARMOR]
</span><span class='line'>apparmor={0|1}
</span><span class='line'>是否在启动时就开启AppArmor功能(CONFIG_SECURITY_APPARMOR)："0"表示关闭，"1"表示开启。
</span><span class='line'>默认值由内核在编译时确定(CONFIG_SECURITY_APPARMOR_BOOTPARAM_VALUE)。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;多CPU与CPU间调度&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SMP(对称多处理器)系统中，所有的CPU共享全部资源(总线，内存，I/O等)，最大的特点就是所有资源共享，多个CPU之间没有区别。NUMA(非一致内存访问)的基本特征是具有多个CPU节点，每个CPU节点由多个CPU组成，并且具有独立的本地内存与I/O槽口等。因此，虽然每个CPU都可以访问整个系统的内存，但是访问本地节点内存的速度远远高于访问其它节点的内存。详见《SMP/NUMA/MPP体系结构对比》
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[SMP]
</span><span class='line'>nosmp
</span><span class='line'>强制禁用SMP，这是个已被反对使用的旧参数
</span><span class='line'>[SMP]
</span><span class='line'>maxcpus=整数
</span><span class='line'>最大允许使用的CPU核心数。"0"表示禁用SMP特性(等价于已被反对使用的旧"nosmp"参数)，同时也禁用IO APIC；正整数"n"表示最大允许使用n个CPU核心。
</span><span class='line'>[SMP]
</span><span class='line'>nr_cpus=正整数
</span><span class='line'>允许SMP内核支持的最大CPU核心数(等价于CONFIG_NR_CPUS)。配合CPU热插拔(CONFIG_HOTPLUG_CPU)，可在运行时增加CPU数目。
</span><span class='line'>cpu0_hotplug
</span><span class='line'>强制允许CPU0(boot CPU)热插拔(CONFIG_BOOTPARAM_HOTPLUG_CPU0)。下列特性必须依赖于cpu0，所此参数应谨慎使用：
</span><span class='line'>(1)从休眠状态(S3,S4)唤醒以及从运行状态进入休眠状态
</span><span class='line'>(2)PIC中断，也就是某些情况下，关机和重启也会依赖于cpu0
</span><span class='line'>[SMP]
</span><span class='line'>additional_cpus=整数
</span><span class='line'>最大允许热插拔的CPU数量。默认值由BIOS决定。相见Documentation/x86/x86_64/cpu-hotplug-spec
</span><span class='line'>[NUMA]
</span><span class='line'>numa={off|noacpi}
</span><span class='line'>off 关闭NUMA支持，也就是让所有内存都只属于同一个节点。
</span><span class='line'>noacpi 不为NUMA解析ACPI SRAT表
</span><span class='line'>[KNL]
</span><span class='line'>numa_balancing={enable|disable}
</span><span class='line'>启用/禁用NUMA均衡(CONFIG_NUMA_BALANCING)，其默认值由CONFIG_NUMA_BALANCING_DEFAULT_ENABLED决定
</span><span class='line'>[KNL,BOOT]
</span><span class='line'>numa_zonelist_order={zone|node|default}
</span><span class='line'>设置NUMA的zonelist顺序。这里设置的值还可以在运行中通过sysctl来修改。详见Documentation/sysctl/vm.txt
</span><span class='line'>[KNL,SMP]
</span><span class='line'>isolcpus=CPU编号列表
</span><span class='line'>将列表中的CPU从内核SMP平衡和调度算法中剔除。
</span><span class='line'>[注意]提出后并不是绝对不能再使用该CPU的，操作系统仍然可以强制指定特定的进程使用哪个CPU(可以通过taskset来做到)。
</span><span class='line'>该参数的目的主要是用于实现特定cpu只运行特定进程的目的。
</span><span class='line'>CPU编号从"0"开始计数，列表的表示方法有三种：
</span><span class='line'>numA,numB,...,numN
</span><span class='line'>numA-numN
</span><span class='line'>以及上述两种表示方法的组合：
</span><span class='line'>numA,...,numM-numN
</span><span class='line'>例如：0,3,4-7,9
</span><span class='line'>[KNL,SMP]
</span><span class='line'>relax_domain_level={-1|0|1|2|3|4|5}
</span><span class='line'>设置CPUSET调度域(sched domain)的默认级别。大于此级别的调度域层次将禁用闲时均衡和唤醒均衡，而其余级别的调度域都开启。
</span><span class='line'>-1(默认值) 使用系统的默认值(取决于不同的硬件架构)或者由其他的请求确定，也就是不人为指定默认级别。
</span><span class='line'>0 禁用所有调度域的闲时均衡和唤醒均衡
</span><span class='line'>1 超线程域(siblings)，也就是同一个物理核心内的不同超线程
</span><span class='line'>2 核域(cores)，也就是同一个物理CPU中不同的核心
</span><span class='line'>3 节点域(node)，对于NUMA系统来说就是同一个NUMA节点内，对于non-NUMA系统来说这是整个系统范围
</span><span class='line'>4 节点组域(chunk of node)，仅适用于NUMA系统，表示在一组特定的NUMA节点范围内
</span><span class='line'>5 全系统(system wide)，全部系统范围内
</span><span class='line'>详见Documentation/cgroups/cpusets.txt文档
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;控制组(Control Group)&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Cgroup(CONFIG_CGROUPS)是一种进程管理机制，也是内核的资源分配框架。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>[KNL]
</span><span class='line'>cgroup_disable="控制器名称"
</span><span class='line'>禁用cgroup中特定的控制器名称。目前只支持一个"memory"控制器。
</span><span class='line'>noautogroup
</span><span class='line'>禁止自动创建进程组(CONFIG_SCHED_AUTOGROUP)，服务器环境可以考虑使用此参数。
</span><span class='line'>[KNL]
</span><span class='line'>swapaccount={0|1}
</span><span class='line'>是否统计换入(swap in)内存的资源。"0"表示不统计，"1"表示统计。详见Documentation/cgroups/memory.txt文档。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;EFI/UEFI&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;noefi
</span><span class='line'>禁用EFI支持(CONFIG_EFI)。
</span><span class='line'>[EFI]
</span><span class='line'>add_efi_memmap
</span><span class='line'>将EFI内存映像包括在内核的可用物理内存映像之中
</span><span class='line'>pstore.backend=efivars
</span><span class='line'>将"efivars"(CONFIG_EFI_VARS_PSTORE)用作pstore内存文件系统的后端。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h3&gt;杂项&lt;/h3&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;[IP_VS_FTP]
</span><span class='line'>ports=portA,portB,...
</span><span class='line'>IPVS(IP Virtual Server) FTP帮助模块所使用的端口，最多允许指定8个。默认值是"21"。
</span><span class='line'>io_delay={0x80|0xed|udelay|none}
</span><span class='line'>设置IO延迟方式
</span><span class='line'>0x80(CONFIG_IO_DELAY_0X80) 传统的Linux IO延迟方式,久经考验,也最安全
</span><span class='line'>0xed(CONFIG_IO_DELAY_0XED) 基于0xed端口的IO延迟方式,主要是为了避免和基于0x80端口的主板诊断卡冲突
</span><span class='line'>udelay(CONFIG_IO_DELAY_UDELAY) 使用内核端udelay()函数作为延迟方法(简单的延迟2微秒).可以不占用任何IO端口空间.
</span><span class='line'>none(CONFIG_IO_DELAY_NONE) 不使用任何port-IO延迟机制.只要你的机器不是老古董,这个应该是首选.
</span><span class='line'>[KNL]
</span><span class='line'>reboot=[mode][,type][,force]
</span><span class='line'>指定系统重启的方式：
</span><span class='line'>mode 用于指定重启模式，可以使用如下2种模式之一：warm(热重启[跳过内存检测]), cold(冷重启[检测并重新初始化所有硬件])
</span><span class='line'>type 用于指定重启类型，可以使用如下4种类型之一：bios(为热重启使用CPU reboot vector), acpi(优先使用FADT中的ACPI RESET_REG,若失败再转kbd), kbd(使用键盘控制器冷重启,这是默认值), triple, efi(优先使用EFI提供的reset_system运行时服务,若失败再转kbd)
</span><span class='line'>结尾的"force"表示在重启时不停用其它的CPU，在某些情况下可以让reboot更可靠。
</span><span class='line'>[KNL]
</span><span class='line'>reset_devices
</span><span class='line'>强制驱动程序在初始化底层设备的过程中重置设备
</span><span class='line'>[KNL]
</span><span class='line'>rcu_nocbs=
</span><span class='line'>在"CONFIG_RCU_NOCB_CPU=y"的情况下,指定哪些CPU是No-CB CPU
</span><span class='line'>[KNL]
</span><span class='line'>nodelayacct
</span><span class='line'>禁止在针对每个进程的统计信息中包含进程等候系统资源(cpu,IO同步,内存交换等)所花费的时间，相当于禁用CONFIG_TASK_DELAY_ACCT模块。
</span><span class='line'>[KNL]
</span><span class='line'>sysfs.deprecated={0|1}
</span><span class='line'>为了兼容旧版本的应用程序而保留过时的sysfs特性(CONFIG_SYSFS_DEPRECATED)，其默认值由CONFIG_SYSFS_DEPRECATED_V2确定。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[内核模块编译怎样绕过insmod时的版本检查]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-12-22T22:15:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/12/22/kernel-vermagic&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.sina.com.cn/s/blog_53931eca01015uky.html"&gt;http://blog.sina.com.cn/s/blog_53931eca01015uky.html&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在開發kernel driver時，總是會遇到討人厭的vermagic檢查，只要目前在run的kernel版本跟driver編譯時用的kernel版本不一致，就沒辦法insmod。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>bash-3.2# insmod sdio.ko
</span><span class='line'>sdio: version magic '2.6.28-271-gec75a15 preempt mod_unload modversions ARMv7 '
</span><span class='line'>should be '2.6.28 preempt mod_unload ARMv7 '
</span><span class='line'>insmod: init_module 'sdio.ko' failed (Exec format error)
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>這大大降低了開發速度，尤其是當你拿不到客戶在用的kernel時，又要開發driver給他用，真的是很麻煩……&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;那麼要怎麼利用噁心的方式繞過去呢???&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;一、先把 Moudle version 檢查關掉。&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;user@host # ARCH=arm make menuconfig
</span><span class='line'>--- Enable loadable module support                                             │ │
</span><span class='line'>│ │         [ ]   Forced module loading                                      │ │
</span><span class='line'>│ │         [*]   Module unloading                                           │ │
</span><span class='line'>│ │         [*]     Forced module unloading                                  │ │
</span><span class='line'>│ │         [ ]   Module versioning support                                  │ │
</span><span class='line'>│ │         [ ]   Source checksum for all modules
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;二、 使用modinfo時，可以看到目前這driver的vermagic&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    filename: external_drivers/omap3530/Linux/sdio/sdio.ko
</span><span class='line'>author: Texas Instruments Inc
</span><span class='line'>alias: TIWLAN_SDIO
</span><span class='line'>license: GPL
</span><span class='line'>description: TI WLAN SDIO driver
</span><span class='line'>depends:
</span><span class='line'>vermagic: 2.6.28-271-gec75a15 preempt mod_unload ARMv7
</span><span class='line'>parm: g_sdio_debug_level:debug level (int)
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;三、 修改 kernel 的 vermagic，再重新編譯driver&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vermagic 的第一個值 2.6.28-noneed 是由這 include/linux/utsrelease.h裡的 UTS_RELEASE 所定義。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>#define UTS_RELEASE "2.6.28-271-gec75a15"
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>之後再由 include/linux/vermagic.h 裡的 macro&lt;br/&gt;
</span><span class='line'>去組合出 VERMAGIC_STRING ， 也就是 kernel 的vermagic。</span></code></pre></td></tr></table></div></figure>
    #include &lt;generated/utsrelease.h></p>

<pre><code>#ifdef CONFIG_SMP
#define MODULE_VERMAGIC_SMP "SMP "
#else
#define MODULE_VERMAGIC_SMP ""
#endif
#ifdef CONFIG_PREEMPT
#define MODULE_VERMAGIC_PREEMPT "preempt "
#else
#define MODULE_VERMAGIC_PREEMPT ""
#endif完成編譯後，你就可以得
#ifdef CONFIG_MODULE_UNLOAD
#define MODULE_VERMAGIC_MODULE_UNLOAD "mod_unload "
#else
#define MODULE_VERMAGIC_MODULE_UNLOAD ""
#endif
#ifndef CONFIG_MODVERSIONS
#define MODULE_VERMAGIC_MODVERSIONS "modversions "
#else
#define MODULE_VERMAGIC_MODVERSIONS ""
#endif
#ifndef MODULE_ARCH_VERMAGIC
#define MODULE_ARCH_VERMAGIC ""
#endif

#define VERMAGIC_STRING \
UTS_RELEASE " " \
MODULE_VERMAGIC_SMP MODULE_VERMAGIC_PREEMPT \
MODULE_VERMAGIC_MODULE_UNLOAD MODULE_VERMAGIC_MODVERSIONS \
MODULE_ARCH_VERMAGIC
</code></pre>

<pre><code>所以， 我們只要把 UTS_RELEASE 改成我們的數字即可，當然若是懶得去try組合後的字串，也可以直接將VERMAGIC_STRING改成你要的字串

建議修改完 vermagic.h, utsrelease.h後，還是把kernel重編完再編kernel，比較保險。

以下是修改後，用modinfo看的結果
</code></pre>

<pre><code>filename: external_drivers/omap3530/Linux/sdio/sdio.ko
author: Texas Instruments Inc
alias: TIWLAN_SDIO
license: GPL
description: TI WLAN SDIO driver
depends:
vermagic: 2.6.28 preempt mod_unload ARMv7
parm: g_sdio_debug_level:debug level (int)
</code></pre>

<pre><code>
-------------
-------------

另外若你是用git 做版本控制 , 那就會出現git的版本號在kernel 編號上  
所以要把他關掉
</code></pre>

<pre><code>General setup  ---&gt;
 [ ] Automatically append version information to the version strin

解釋;
CONFIG_LOCALVERSION_AUTO:                                                   │ 
  │                                                                         │ 
  │ This will try to automatically determine if the current tree is a       │ 
  │ release tree by looking for git tags that belong to the current         │ 
  │ top of tree revision.                                                   │ 
  │                                                                         │ 
  │ A string of the format -gxxxxxxxx will be added to the localversion     │ 
  │ if a git-based tree is found.  The string generated by this will be     │ 
  │ appended after any matching localversion* files, and after the value    │ 
  │ set in CONFIG_LOCALVERSION.                                             │ 
  │                                                                         │ 
  │ (The actual string used here is the first eight characters produced     │ 
  │ by running the command:                                                 │ 
  │                                                                         │ 
  │ which is done within the script "scripts/setlocalversion".)             │ 
  │                                                                         │ 
  │ Symbol: LOCALVERSION_AUTO [=y]                                          │ 
  │ Prompt: Automatically append version information to the version string  │ 
  │   Defined at init/Kconfig:84                                            │ 
  │   Location:                                                             │ 
  │ ingT
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
