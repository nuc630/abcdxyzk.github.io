<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel~base | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/kernel~base/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-30T16:01:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux动态频率调节系统CPUFreq]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/08/12/kernel-cpufreq/"/>
    <updated>2015-08-12T14:46:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/08/12/kernel-cpufreq</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/droidphone/article/details/9346981">Linux动态频率调节系统CPUFreq之一：概述</a><br/>
<a href="http://blog.csdn.net/droidphone/article/details/9385745">Linux动态频率调节系统CPUFreq之二：核心（core）架构与API</a><br/>
<a href="http://blog.csdn.net/droidphone/article/details/9532999">Linux动态频率调节系统CPUFreq之三：governor</a></p>

<hr />

<h3>Linux动态频率调节系统CPUFreq之一：概述</h3>

<p>随着技术的发展，我们对CPU的处理能力提出了越来越高的需求，芯片厂家也对制造工艺不断地提升。现在的主流PC处理器的主频已经在3GHz左右，就算是智能手机的处理器也已经可以工作在1.5GHz以上，可是我们并不是时时刻刻都需要让CPU工作在最高的主频上，尤其是移动设备和笔记本电脑，大部分时间里，CPU其实工作在轻负载状态下，我们知道：主频越高，功耗也越高。为了节省CPU的功耗和减少发热，我们有必要根据当前CPU的负载状态，动态地提供刚好足够的主频给CPU。在Linux中，内核的开发者定义了一套框架模型来完成这一目的，它就是CPUFreq系统。</p>

<h4>1. sysfs接口</h4>

<p>我们先从CPUFreq提供的sysfs接口入手，直观地看看它提供了那些功能。以下是我的电脑输出的结果：</p>

<pre><code>    droidphone@990:~$ cd /sys/devices/system/cpu  
    droidphone@990:/sys/devices/system/cpu$ ls  
    cpu0  cpu3  cpu6     cpuidle     offline   power    release  
    cpu1  cpu4  cpu7     kernel_max  online    present  uevent  
    cpu2  cpu5  cpufreq  modalias    possible  probe  
</code></pre>

<p>所有与CPUFreq相关的sysfs接口都位于：/sys/devices/system/cpu下面，我们可以看到，8个cpu分别建立了一个自己的目录，从cpu0到cpu7，我们再看看offline和online以及present的内容：</p>

<pre><code>    droidphone@990:/sys/devices/system/cpu$ cat online  
    0-7  
    droidphone@990:/sys/devices/system/cpu$ cat offline  
    8-15  
    droidphone@990:/sys/devices/system/cpu$ cat present  
    0-7  
    droidphone@990:/sys/devices/system/cpu$  
</code></pre>

<p>online代表目前正在工作的cpu，输出显示编号为0-7这8个cpu在工作，offline代表目前被关掉的cpu，present则表示主板上已经安装的cpu，由输出可以看到，我的主板可以安装16个cpu（因为intel的超线程技术，其实物理上只是8个），第8-15号cpu处于关闭状态（实际上不存在，因为present只有0-7）。</p>

<p>接着往下看：</p>

<pre><code>    droidphone@990:/sys/devices/system/cpu/cpu0$ ls  
    cache    cpuidle      microcode  power      thermal_throttle  uevent  
    cpufreq  crash_notes  node0      subsystem  topology  
    droidphone@990:/sys/devices/system/cpu/cpu0$ cd cpufreq/  
    droidphone@990:/sys/devices/system/cpu/cpu0/cpufreq$ ls  
    affected_cpus               related_cpus                   scaling_max_freq  
    bios_limit                  scaling_available_frequencies  scaling_min_freq  
    cpuinfo_cur_freq            scaling_available_governors    scaling_setspeed  
    cpuinfo_max_freq            scaling_cur_freq               stats  
    cpuinfo_min_freq            scaling_driver  
    cpuinfo_transition_latency  scaling_governor  
    droidphone@990:/sys/devices/system/cpu/cpu0/cpufreq$   
</code></pre>

<p>在我的电脑上，部分的值如下：
<code>
    cpuinfo_cur_freq:   1600000
    cpuinfo_max_freq:  3401000
    cpuinfo_min_freq:   1600000
    scaling_cur_freq:    1600000
    scaling_max_freq:  3401000
    scaling_min_freq:   1600000
</code>
所以，我的cpu0的最低运行频率是1.6GHz，最高是3.4GHz，目前正在运行的频率是1.6GHz，前缀cpuinfo代表的是cpu硬件上支持的频率，而scaling前缀代表的是可以通过CPUFreq系统用软件进行调节时所支持的频率。cpuinfo_cur_freq代表通过硬件实际上读到的频率值，而scaling_cur_freq则是软件当前的设置值，多数情况下这两个值是一致的，但是也有可能因为硬件的原因，有微小的差异。scaling_available_frequencies会输出当前软件支持的频率值，看看我的cpu支持那些频率：</p>

<pre><code>    droidphone@990:/sys/devices/system/cpu/cpu0/cpufreq$ cat scaling_available_frequencies   
    3401000 3400000 3000000 2800000 2600000 2400000 2200000 2000000 1800000 1600000   
    droidphone@990:/sys/devices/system/cpu/cpu0/cpufreq$   
</code></pre>

<p>Oh，从1.6GHz到3.4GHz，一共支持10挡的频率可供选择。scaling_available_governors则会输出当前可供选择的频率调节策略：</p>

<pre><code>    conservative ondemand userspace powersave performance  
</code></pre>

<p>一共有5中策略供我们选择，那么当前系统选用那种策略？让我们看看：</p>

<pre><code>    dong@dong-990:/sys/devices/system/cpu/cpu0/cpufreq$ cat scaling_governor  
    ondemand  
</code></pre>

<p>OK，我的系统当前选择ondemand这种策略，这种策略的主要思想是：只要cpu的负载超过某一个阀值，cpu的频率会立刻提升至最高，然后再根据实际情况降到合适的水平。详细的情况我们留在后面的章节中讨论。scaling_driver则会输出当前使用哪一个驱动来设置cpu的工作频率。</p>

<p>当我们选择userspace作为我们的调频governor时，我们可以通过scaling_setspeed手工设置需要的频率。powersave则简单地使用最低的工作频率进行运行，而performance则一直选择最高的频率进行运行。</p>

<h4>2. 软件架构</h4>

<p>通过上一节的介绍，我们可以大致梳理出CPUFreq系统的构成和工作方式。首先，CPU的硬件特性决定了这个CPU的最高和最低工作频率，所有的频率调整数值都必须在这个范围内，它们用cpuinfo_xxx_freq来表示。然后，我们可以在这个范围内再次定义出一个软件的调节范围，它们用scaling_xxx_freq来表示，同时，根据具体的硬件平台的不同，我们还需要提供一个频率表，这个频率表规定了cpu可以工作的频率值，当然这些频率值必须要在cpuinfo_xxx_freq的范围内。有了这些频率信息，CPUFreq系统就可以根据当前cpu的负载轻重状况，合理地从频率表中选择一个合适的频率供cpu使用，已达到节能的目的。至于如何选择频率表中的频率，这个要由不同的governor来实现，目前的内核版本提供了5种governor供我们选择。选择好适当的频率以后，具体的频率调节工作就交由scaling_driver来完成。CPUFreq系统把一些公共的逻辑和接口代码抽象出来，这些代码与平台无关，也与具体的调频策略无关，内核的文档把它称为CPUFreq Core（/Documents/cpufreq/core.txt）。另外一部分，与实际的调频策略相关的部分被称作cpufreq_policy，cpufreq_policy又是由频率信息和具体的governor组成，governor才是具体策略的实现者，当然governor需要我们提供必要的频率信息，governor的实现最好能做到平台无关，与平台相关的代码用cpufreq_driver表述，它完成实际的频率调节工作。最后，如果其他内核模块需要在频率调节的过程中得到通知消息，则可以通过cpufreq notifiers来完成。由此，我们可以总结出CPUFreq系统的软件结构如下：</p>

<h4>3. cpufreq_policy</h4>

<p>一种调频策略的各种限制条件的组合称之为policy，代码中用cpufreq_policy这一数据结构来表示：</p>

<pre><code>    struct cpufreq_policy {  

        cpumask_var_t           cpus;     
        cpumask_var_t           related_cpus;   

        unsigned int            shared_type;   

        unsigned int            cpu;      
        unsigned int            last_cpu;   

        struct cpufreq_cpuinfo  cpuinfo;  

        unsigned int            min;    /* in kHz */  
        unsigned int            max;    /* in kHz */  
        unsigned int            cur;      

        unsigned int            policy;   
        struct cpufreq_governor *governor;   
        void                    *governor_data;  

        struct work_struct      update;   


        struct cpufreq_real_policy      user_policy;  

        struct kobject          kobj;  
        struct completion       kobj_unregister;  
    };  
</code></pre>

<p>其中的各个字段的解释如下：</p>

<p>cpus和related_cpus    这两个都是cpumask_var_t变量，cpus表示的是这一policy控制之下的所有还出于online状态的cpu，而related_cpus则是online和offline两者的合集。主要是用于多个cpu使用同一种policy的情况，实际上，我们平常见到的大多数系统中都是这种情况：所有的cpu同时使用同一种policy。我们需要related_cpus变量指出这个policy所管理的所有cpu编号。</p>

<p>cpu和last_cpu    虽然一种policy可以同时用于多个cpu，但是通常一种policy只会由其中的一个cpu进行管理，cpu变量用于记录用于管理该policy的cpu编号，而last_cpu则是上一次管理该policy的cpu编号（因为管理policy的cpu可能会被plug out，这时候就要把管理工作迁移到另一个cpu上）。</p>

<p>cpuinfo    保存cpu硬件所能支持的最大和最小的频率以及切换延迟信息。</p>

<p>min/max/cur  该policy下的可使用的最小频率，最大频率和当前频率。</p>

<p>policy    该变量可以取以下两个值：CPUFREQ_POLICY_POWERSAVE和CPUFREQ_POLICY_PERFORMANCE，该变量只有当调频驱动支持setpolicy回调函数的时候有效，这时候由驱动根据policy变量的值来决定系统的工作频率或状态。如果调频驱动（cpufreq_driver）支持target回调，则频率由相应的governor来决定。</p>

<p>governor和governor_data    指向该policy当前使用的cpufreq_governor结构和它的上下文数据。governor是实现该policy的关键所在，调频策略的逻辑由governor实现。</p>

<p>update    有时在中断上下文中需要更新policy，需要利用该工作队列把实际的工作移到稍后的进程上下文中执行。</p>

<p>user_policy    有时候因为特殊的原因需要修改policy的参数，比如溫度过高时，最大可允许的运行频率可能会被降低，为了在适当的时候恢复原有的运行参数，需要使用user_policy保存原始的参数（min，max，policy，governor）。</p>

<p>kobj    该policy在sysfs中对应的kobj的对象。</p>

<h4>4. cpufreq_governor</h4>

<p>所谓的governor，我把它翻译成：调节器。governor负责检测cpu的使用状况，从而在可用的范围中选择一个合适的频率，代码中它用cpufreq_governor结构来表示：</p>

<pre><code>    struct cpufreq_governor {  
        char    name[CPUFREQ_NAME_LEN];  
        int     initialized;  
        int     (*governor)     (struct cpufreq_policy *policy,  
                     unsigned int event);  
        ssize_t (*show_setspeed)        (struct cpufreq_policy *policy,  
                         char *buf);  
        int     (*store_setspeed)       (struct cpufreq_policy *policy,  
                         unsigned int freq);  
        unsigned int max_transition_latency; /* HW must be able to switch to 
                next freq faster than this value in nano secs or we 
                will fallback to performance governor */  
        struct list_head        governor_list;  
        struct module           *owner;  
    };  
</code></pre>

<p>其中的各个字段的解释如下：</p>

<p>name    该governor的名字。</p>

<p>initialized    初始化标志。</p>

<p>governor    指向一个回调函数，CPUFreq Core会在不同的阶段调用该回调函数，用于该governor的启动、停止、初始化、退出动作。</p>

<p>list_head    所有注册的governor都会利用该字段链接在一个全局链表中，以供系统查询和使用。</p>

<h4>5. cpufreq_driver</h4>

<p>上一节提到的gonvernor只是负责计算并提出合适的频率，但是频率的设定工作是平台相关的，这需要cpufreq_driver驱动来完成，cpufreq_driver的结构如下：</p>

<pre><code>    struct cpufreq_driver {  
        struct module           *owner;  
        char                    name[CPUFREQ_NAME_LEN];  
        u8                      flags;  

        bool                    have_governor_per_policy;  

        /* needed by all drivers */  
        int     (*init)         (struct cpufreq_policy *policy);  
        int     (*verify)       (struct cpufreq_policy *policy);  

        /* define one out of two */  
        int     (*setpolicy)    (struct cpufreq_policy *policy);  
        int     (*target)       (struct cpufreq_policy *policy,  
                     unsigned int target_freq,  
                     unsigned int relation);  

        /* should be defined, if possible */  
        unsigned int    (*get)  (unsigned int cpu);  

        /* optional */  
        unsigned int (*getavg)  (struct cpufreq_policy *policy,  
                     unsigned int cpu);  
        int     (*bios_limit)   (int cpu, unsigned int *limit);  

        int     (*exit)         (struct cpufreq_policy *policy);  
        int     (*suspend)      (struct cpufreq_policy *policy);  
        int     (*resume)       (struct cpufreq_policy *policy);  
        struct freq_attr        **attr;  
    };  
</code></pre>

<p>相关的字段的意义解释如下：</p>

<p>name    该频率驱动的名字。</p>

<p>init    回调函数，该回调函数必须实现，CPUFreq Core会通过该回调函数对该驱动进行必要的初始化工作。</p>

<p>verify    回调函数，该回调函数必须实现，CPUFreq Core会通过该回调函数检查policy的参数是否被驱动支持。</p>

<p>setpolicy/target    回调函数，驱动必须实现这两个函数中的其中一个，如果不支持通过governor选择合适的运行频率，则实现setpolicy回调函数，这样系统只能支持CPUFREQ_POLICY_POWERSAVE和CPUFREQ_POLICY_PERFORMANCE这两种工作策略。反之，实现target回调函数，通过target回调设定governor所需要的频率。</p>

<p>get    回调函数，用于获取cpu当前的工作频率。</p>

<p>getavg    回调函数，用于获取cpu当前的平均工作频率。</p>

<h4>6. cpufreq notifiers</h4>

<p>CPUFreq的通知系统使用了内核的标准通知接口。它对外提供了两个通知事件：policy通知和transition通知。</p>

<p>policy通知用于通知其它模块cpu的policy需要改变，每次policy改变时，该通知链上的回调将会用不同的事件参数被调用3次，分别是：</p>

<p>CPUFREQ_ADJUST    只要有需要，所有的被通知者可以在此时修改policy的限制信息，比如温控系统可能会修改在大允许运行的频率。<br/>
CPUFREQ_INCOMPATIBLE    只是为了避免硬件错误的情况下，可以在该通知中修改policy的限制信息。<br/>
CPUFREQ_NOTIFY    真正切换policy前，该通知会发往所有的被通知者。</p>

<p>transition通知链用于在驱动实施调整cpu的频率时，用于通知相关的注册者。每次调整频率时，该通知会发出两次通知事件：</p>

<p>CPUFREQ_PRECHANGE    调整前的通知。<br/>
CPUFREQ_POSTCHANGE    完成调整后的通知。</p>

<p>当检测到因系统进入suspend而造成频率被改变时，以下通知消息会被发出：</p>

<p>CPUFREQ_RESUMECHANGE</p>

<hr />

<h3>Linux动态频率调节系统CPUFreq之二：核心（core）架构与API</h3>

<p>上一节中，我们大致地讲解了一下CPUFreq在用户空间的sysfs接口和它的几个重要的数据结构，同时也提到，CPUFreq子系统把一些公共的代码逻辑组织在一起，构成了CPUFreq的核心部分，这些公共逻辑向CPUFreq和其它内核模块提供了必要的API，像cpufreq_governor、cpufreq_driver等模块通过这些API来完成一个完整的CPUFreq体系。这一节我们就来讨论一下核心架构的代码架构以及如何使用这些公共的API接口。</p>

<p>核心部分的代码都在：/drivers/cpufreq/cpufreq.c中，本系列文章我使用的内核版本是3.10.0.</p>

<h4>1. CPUFreq子系统的初始化</h4>

<p>先看看具体的代码：</p>

<pre><code>    static int __init cpufreq_core_init(void)  
    {  
        int cpu;  

        if (cpufreq_disabled())  
            return -ENODEV;  

        for_each_possible_cpu(cpu) {  
            per_cpu(cpufreq_policy_cpu, cpu) = -1;  
            init_rwsem(&amp;per_cpu(cpu_policy_rwsem, cpu));  
        }  

        cpufreq_global_kobject = kobject_create_and_add("cpufreq", &amp;cpu_subsys.dev_root-&gt;kobj);  
        BUG_ON(!cpufreq_global_kobject);  
        register_syscore_ops(&amp;cpufreq_syscore_ops);  

        return 0;  
    }  
    core_initcall(cpufreq_core_init);  
</code></pre>

<p>可见，在系统的启动阶段，经由initcall机制，cpufreq_core_init被调用，由它来完成核心部分的初始化工作，其中：</p>

<p>cpufreq_policy_cpu    是一个per_cpu变量，在smp的系统下，每个cpu可以有自己独立的调频policy，也可以所有的cpu都是用一种policy，这时候就有可能出现其中一个cpu管理着某个policy，而其它cpu因为也使用同一个policy，这些cpu的policy的就交由那个管理cpu代管，这个per_cpu变量就是用来记录各个cpu的policy实际上是由那个cpu进行管理的。初始化时都被初始化为-1了，代表现在还没有开始进行policy的管理。</p>

<p>接下来的kobject_create_and_add函数在/sys/devices/system/cpu这个节点下建立了一个cpufreq节点，该节点的下面以后会用来放置当前governor的一些配置参数。参数cpu_subsys是内核的一个全局变量，是由更早期的初始化时初始化的，代码在drivers/base/cpu.c中：</p>

<pre><code>    struct bus_type cpu_subsys = {  
        .name = "cpu",  
        .dev_name = "cpu",  
    };  
    EXPORT_SYMBOL_GPL(cpu_subsys);  


    void __init cpu_dev_init(void)  
    {  
        if (subsys_system_register(&amp;cpu_subsys, cpu_root_attr_groups))  
            panic("Failed to register CPU subsystem");  

        cpu_dev_register_generic();  
    }  
</code></pre>

<p>这将会建立一根cpu总线，总线下挂着系统中所有的cpu，cpu总线设备的根目录就位于：/sys/devices/system/cpu，同时，/sys/bus下也会出现一个cpu的总线节点。cpu总线设备的根目录下会依次出现cpu0，cpu1，&hellip;&hellip; cpux节点，每个cpu对应其中的一个设备节点。CPUFreq子系统利用这个cpu_subsys来获取系统中的cpu设备，并在这些cpu设备下面建立相应的cpufreq对象，这个我们在后面再讨论。</p>

<p>这样看来，cpufreq子系统的初始化其实没有做什么重要的事情，只是初始化了几个per_cpu变量和建立了一个cpufreq文件节点。下图是初始化过程的序列图：</p>

<p><img src="/images/kernel/2015-08-12-1.png" alt="" /></p>

<p>图 1.1  核心层初始化</p>

<h4>2. 注册cpufreq_governor</h4>

<p>系统中可以同时存在多个governor策略，一个policy通过cpufreq_policy结构中的governor指针和某个governor相关联。要想一个governor被policy使用，首先要把该governor注册到cpufreq的核心中，我们可以通过核心层提供的API来完成注册：</p>

<pre><code>    int cpufreq_register_governor(struct cpufreq_governor *governor)  
    {  
        int err;  
        ......  

        governor-&gt;initialized = 0;  
        err = -EBUSY;  
        if (__find_governor(governor-&gt;name) == NULL) {  
            err = 0;  
            list_add(&amp;governor-&gt;governor_list, &amp;cpufreq_governor_list);  
        }  

        ......  
        return err;  
    }  
</code></pre>

<p>核心层定义了一个全局链表变量：cpufreq_governor_list，注册函数首先根据governor的名称，通过<code>__find_governor()</code>函数查找该governor是否已經被注册过，如果没有被注册过，则把代表该governor的结构体添加到cpufreq_governor_list链表中。在上一篇中我们提到，目前的内核版本提供了5种governor供我们使用，我们可以通过内核的配置項来选择需要编译的governor，同时需要指定一个默认的governor。在cpufreq.h中，将会根据配置項的选择，把CPUFREQ_DEFAULT_GOVERNOR宏指向默认governor结构体变量的地址，在注册cpufreq_driver的阶段需要使用这个宏来设定系统默认使用的governor。</p>

<h4>3. 注册一个cpufreq_driver驱动</h4>

<p>与governor不同，系统中只会存在一个cpufreq_driver驱动，根据上一篇Linux动态频率调节系统CPUFreq之一：概述的介绍，cpufreq_driver是平台相关的，负责最终实施频率的调整动作，而选择工作频率的策略是由governor完成的。所以，系统中只需要注册一个cpufreq_driver即可，它只负责知道如何控制该平台的时钟系统，从而设定由governor确定的工作频率。注册cpufreq_driver驱动会触发cpufreq核心的一系列额外的初始化动作，第一节所说的核心初始化工作非常简单，实际上，更多的初始化动作在注册cpufreq_driver阶段完成。核心提供了一个API：cpufreq_register_driver来完成注册工作。下面我们分析一下这个函数的工作过程：</p>

<pre><code>    int cpufreq_register_driver(struct cpufreq_driver *driver_data)  
    {  
        ......  

        if (cpufreq_disabled())  
            return -ENODEV;  

        if (!driver_data || !driver_data-&gt;verify || !driver_data-&gt;init ||  
            ((!driver_data-&gt;setpolicy) &amp;&amp; (!driver_data-&gt;target)))  
            return -EINVAL;  
</code></pre>

<p>该API只有一个参数：一个cpufreq_driver指针，driver_data，该结构事先在驱动的代码中定义，调用该API时作为参数传入。函数先判断系统目前是否禁止了调频功能，然后检查cpufreq_driver的几个回调函数是否被实现，由代码可以看出，verify和init回调函数必须要实现，而setpolicy和target回调则至少要被实现其中的一个。这几个回调的作用请参考本系列的第一篇文章。接下来：</p>

<pre><code>    write_lock_irqsave(&amp;cpufreq_driver_lock, flags);  
           if (cpufreq_driver) {  
               write_unlock_irqrestore(&amp;cpufreq_driver_lock, flags);  
               return -EBUSY;  
           }  
           cpufreq_driver = driver_data;  
           write_unlock_irqrestore(&amp;cpufreq_driver_lock, flags);  
</code></pre>

<p>检查全局变量cpufreq_driver是否已经被赋值，如果没有，则传入的参数被赋值给全局变量cpufreq_driver，从而保证了系统中只会注册一个cpufreq_driver驱动。然后：</p>

<pre><code>    ret = subsys_interface_register(&amp;cpufreq_interface);  

    ......  
    ......   

    register_hotcpu_notifier(&amp;cpufreq_cpu_notifier);  
</code></pre>

<p>通过subsys_interface_register给每一个cpu建立一个cpufreq_policy，最后注册cpu hot plug通知，以便在cpu hot plug的时候，能够动态地处理各个cpu policy之间的关系（比如迁移负责管理的cpu等等）。这里要重点讨论一下subsys_interface_register的过程，回到第一节的内容，我们知道初始化阶段，cpu_subsys被建立，从而每个cpu都会在cpu总线设备下建立一个属于自己的设备：sys/devices/system/cpu/cpux。subsys_interface_register负责在cpu_subsys子系统的子设备下面注册公共的接口。我们看看参数cpufreq_interface的定义：</p>

<pre><code>    static struct subsys_interface cpufreq_interface = {  
        .name           = "cpufreq",  
        .subsys         = &amp;cpu_subsys,  
        .add_dev        = cpufreq_add_dev,  
        .remove_dev     = cpufreq_remove_dev,  
    };  
</code></pre>

<p>subsys_interface_register函数的代码我就不再展开了，它的大致作用就是：遍历子系统下面的每一个子设备，然后用这个子设备作为参数，调用cpufrq_interface结构的add_dev回调函数，这里的回调函数被指向了cpufreq_add_dev，它的具体工作方式我们在下一节中讨论。</p>

<p>driver注册完成后，驱动被保存在全局变量cpufreq_driver中，供核心层使用，同时，每个cpu也会建立自己的policy策略，governor也开始工作，实时地监控着cpu的负载并计算合适的工作频率，然后通过driver调整真正的工作频率。下图是cpufreq_driver注册过程的序列图：</p>

<p><img src="/images/kernel/2015-08-12-2.png" alt="" /></p>

<p>图 3.1   cpufreq_driver的注册过程</p>

<h4>4.  为每个cpu建立频率调整策略（policy）</h4>

<p>为每个cpu建立频率调整策略实在注册cpufreq_driver阶段的subsys_interface_registe函数中完成的，上一节已经提到，该函数最终会调用cpufreq_add_dev回调函数，现在展开这个函数分析一下：</p>

<p>因为subsys_interface_registe会枚举各个cpu设备，不管该cpu处于offline还是online状态，cpufreq_add_dev都会被调用，所以函数的一开始，判断如果cpu处于offline状态，直接返回。</p>

<pre><code>    static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)  
    {  
        ......  

        if (cpu_is_offline(cpu))  
            return 0;  
</code></pre>

<p>如果是smp系统，本cpu的policy可能和其他cpu共同使用同一个policy，并委托另一个叫做管理cpu的cpu进行管理，下面的代码判断这种情况，如果已经委托别的cpu管理，则直接返回，核心层定义了另一个per_cpu变量：cpufreq_cpu_data，用来保存各个cpu所使用的cpufreq_policy结构的指针，cpufreq_cpu_get函数实际上就是通过这个per_cpu变量，获取该指针，如果该指针非0，代表该cpu已经建立好了它自身的policy（可能是在他之前的管理cpu建立policy期间一并建立的）。</p>

<pre><code>    policy = cpufreq_cpu_get(cpu);  
    if (unlikely(policy)) {  
        cpufreq_cpu_put(policy);  
        return 0;  
    }  
</code></pre>

<p>因为cpu hot plug期间，cpufreq_add_dev也会被调用，下面的代码片段检测该cpu之前是否被hot-unpluged过，如果是，找到其中一个相关的cpu（这些相关的cpu都委托给同一个托管它cpu进行管理，调用cpufreq_add_policy_cpu函数，该函数只是简单地建立一个cpufreq链接，链接到管理cpu的cpufreq节点。</p>

<pre><code>    for_each_online_cpu(sibling) {  
         struct cpufreq_policy *cp = per_cpu(cpufreq_cpu_data, sibling);  
         if (cp &amp;&amp; cpumask_test_cpu(cpu, cp-&gt;related_cpus)) {  
             read_unlock_irqrestore(&amp;cpufreq_driver_lock, flags);  
             return cpufreq_add_policy_cpu(cpu, sibling, dev);  
         }  
     }  
</code></pre>

<p>当这是系统初始化阶段第一次调用cpufreq_add_dev时（subsys_interface_register枚举到的第一个cpu，通常就是cpu0），cpufreq_cpu_data应该为NULL，所以我们要为这样的cpu分配一个cpufreq_policy结构，并初始化该policy所管理的cpu，包括online的cpus字段和online+offline的cpu_related字段，并把自己设置为这个policy的管理cpu，使用默认governor初始化policy->governor字段，同时吧自己加入到online的cpus字段中：</p>

<pre><code>    policy = kzalloc(sizeof(struct cpufreq_policy), GFP_KERNEL);  
    if (!policy)  
        goto nomem_out;  

    if (!alloc_cpumask_var(&amp;policy-&gt;cpus, GFP_KERNEL))  
        goto err_free_policy;  

    if (!zalloc_cpumask_var(&amp;policy-&gt;related_cpus, GFP_KERNEL))  
        goto err_free_cpumask;  

    policy-&gt;cpu = cpu;  
    policy-&gt;governor = CPUFREQ_DEFAULT_GOVERNOR;  
    cpumask_copy(policy-&gt;cpus, cpumask_of(cpu));  

    /* Initially set CPU itself as the policy_cpu */  
    per_cpu(cpufreq_policy_cpu, cpu) = cpu;  
</code></pre>

<p>接下来初始化一个供kobject系统注销时使用的同步变量，初始化一个workqueue，某些时候不能马上执行对该policy的更新操作，可以使用该workqueue来延迟执行。</p>

<pre><code>    init_completion(&amp;policy-&gt;kobj_unregister);  
    INIT_WORK(&amp;policy-&gt;update, handle_update);  
</code></pre>

<p>接着，调用cpufreq_driver的init回调，进一步初始化该policy：</p>

<pre><code>    ret = cpufreq_driver-&gt;init(policy);  
     if (ret) {  
         pr_debug("initialization failed\n");  
         goto err_set_policy_cpu;  
     }  
</code></pre>

<p>在上述驱动的初始化内部，应该完成以下工作：</p>

<p>设定该cpu的最大和最小工作频率<br/>
设定该policy的最大和最小工作频率<br/>
设定该policy可供调节的频率档位<br/>
设定cpu调节频率时的延迟时间特性<br/>
该policy可以管理的cpu个数（policy->cpus）</p>

<p>继续：
<code>
    /* related cpus should atleast have policy-&gt;cpus */  
    cpumask_or(policy-&gt;related_cpus, policy-&gt;related_cpus, policy-&gt;cpus);  
</code>
注释已经写的很清楚了，把online的cpu加到代表online+offline的related字段中。接着，剔除offline的cpu：</p>

<pre><code>    cpumask_and(policy-&gt;cpus, policy-&gt;cpus, cpu_online_mask);  
</code></pre>

<p>然后，发出CPUFREQ_START通知：
<code>
    blocking_notifier_call_chain(&amp;cpufreq_policy_notifier_list,  
                     CPUFREQ_START, policy);  
</code></p>

<p>如果是hot-plug加入的cpu，找出它上次使用的governor：
<code>
    #ifdef CONFIG_HOTPLUG_CPU  
        gov = __find_governor(per_cpu(cpufreq_cpu_governor, cpu));  
        if (gov) {  
            policy-&gt;governor = gov;  
            pr_debug("Restoring governor %s for cpu %d\n",  
                   policy-&gt;governor-&gt;name, cpu);  
        }  
    #endif  
</code></p>

<p>最后，建立cpu设备下的sysfs文件节点：cpufreq，它的完整路径是：/sys/devices/system/cpu/cpux/cpufreq，同时，在他的下面，相应的sysfs节点也同时被建立，节点的内容请参考本系列的第一篇文章：Linux动态频率调节系统CPUFreq之一：概述：
<code>
    ret = cpufreq_add_dev_interface(cpu, policy, dev);  
</code></p>

<p>至此，一个cpu的policy建立完成，它的频率限制条件、使用的governor策略，sysfs文件节点都已经建立完成。需要注意点是，系统中有多少个cpu，cpufreq_add_dev函数就会被调用多少次，最后，每个cpu都会建立自己的policy，当然，也有可能只有部分cpu建立了真正的policy，而其它cpu则委托这些cpu进行policy的管理，关于这一点，一开始读代码的时候可能有点困扰，为了搞清楚他们之间的关系，我们再跟入cpufreq_add_dev_interface函数看看：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static int cpufreq_add_dev_interface(unsigned int cpu,&lt;br/&gt;
</span><span class='line'>                     struct cpufreq_policy &lt;em&gt;policy,&lt;br/&gt;
</span><span class='line'>                     struct device &lt;/em&gt;dev)&lt;br/&gt;
</span><span class='line'>{&lt;br/&gt;
</span><span class='line'>    &hellip;&hellip;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    /* prepare interface data */  
</span><span class='line'>ret = kobject_init_and_add(&amp;policy-&gt;kobj, &amp;ktype_cpufreq,  
</span><span class='line'>               &amp;dev-&gt;kobj, "cpufreq");  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>/* set up files for this cpu device */  
</span><span class='line'>drv_attr = cpufreq_driver-&gt;attr;  
</span><span class='line'>while ((drv_attr) &amp;&amp; (*drv_attr)) {  
</span><span class='line'>    ret = sysfs_create_file(&amp;policy-&gt;kobj, &amp;((*drv_attr)-&gt;attr));  
</span><span class='line'>    if (ret)  
</span><span class='line'>        goto err_out_kobj_put;  
</span><span class='line'>    drv_attr++;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;函数的一开始，建立cpufreq文件节点，然后在它的下面再建立一系列节点，用户可以通过这些文件节点控制该policy的一些参数。这不是我们的重点，我们看下面这一段代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for_each_cpu(j, policy-&gt;cpus) {  
</span><span class='line'>per_cpu(cpufreq_cpu_data, j) = policy;  
</span><span class='line'>per_cpu(cpufreq_policy_cpu, j) = policy-&gt;cpu;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;前面的代码已经设定了该policy所管理的online cpu：policy-&gt;cpus，通过两个per_cpu变量，这里把每个online cpu的policy都设置为了本cpu（管理cpu）的policy，并且把所有online的cpu的管理cpu也指定为了本cpu。接下来，cpufreq_add_dev_symlink被调用，所有policy-&gt;cpus指定的cpu会建立一个cpufreq链接，指向本cpu（管理cpu）的真实cpufreq节点：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;ret = cpufreq_add_dev_symlink(cpu, policy);  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>注意，假如这时的cpu是cpu0，也就是说，其它cpu的cpufreq_add_dev还没有被调用，但是在cpufreq_cpu_data中，与之对应的policy指针已经被赋值为cpu0所对应的policy，这样，回到cpufreq_add_dev函数的开头部分，当接下其它被认为使用cpu0托管他们的policy的cpu也会进入cpufreq_add_dev函数，但是，因为cpufreq_cpu_data中对应的policy已经在cpu0的建立阶段被赋值，所以这些cpu他们不会走完所有的流程，在函数的开头的判断部分，判断cpufreq_cpu_data中cpu对应的policy已经被赋值，就直接返回了。
</span><span class='line'>接着往下看cpufreq_add_dev_interface的代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;memcpy(&amp;new_policy, policy, sizeof(struct cpufreq_policy));  
</span><span class='line'>/* assure that the starting sequence is run in __cpufreq_set_policy */  
</span><span class='line'>policy-&gt;governor = NULL;  
</span><span class='line'>
</span><span class='line'>/* set default policy */  
</span><span class='line'>ret = __cpufreq_set_policy(policy, &amp;new_policy);  
</span><span class='line'>policy-&gt;user_policy.policy = policy-&gt;policy;  
</span><span class='line'>policy-&gt;user_policy.governor = policy-&gt;governor;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;通过`__cpufreq_set_policy`函数，最终使得该policy正式生效。到这里，每个cpu的policy已经建立完毕，并正式开始工作。关于`__cpufreq_set_policy`的代码这里就不展开了，我只给出它的序列图：
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-08-12-3.png)
</span><span class='line'>
</span><span class='line'>图 4.1  设置一个cpufreq_policy
</span><span class='line'>
</span><span class='line'>#### 5. 其它API
</span><span class='line'>
</span><span class='line'>cpufreq的核心层除了提供上面几节讨论的注册governor，注册cpufreq_driver等API外，还提供了其他一些辅助的API，以方便其它模块的使用。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int cpufreq_register_notifier(struct notifier_block *nb, unsigned int list);
</span><span class='line'>int cpufreq_unregister_notifier(struct notifier_block *nb, unsigned int list);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;以上两个API用于注册和注销cpufreq系统的通知消息，第二个参数可以选择通知的类型，可以有以下两种类型：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;CPUFREQ_TRANSITION_NOTIFIER      收到频率变更通知
</span><span class='line'>CPUFREQ_POLICY_NOTIFIER               收到policy更新通知
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int cpufreq_driver_target(struct cpufreq_policy *policy,
</span><span class='line'>             unsigned int target_freq,
</span><span class='line'>             unsigned int relation);
</span><span class='line'>int __cpufreq_driver_target(struct cpufreq_policy *policy,
</span><span class='line'>               unsigned int target_freq,
</span><span class='line'>               unsigned int relation);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;以上两个API用来设置cpu的工作频率，区别在于cpufreq_driver_target是带锁的版本，而`__cpufreq_driver_target`是不带锁的版本，如果确定是在governor的上下文中，使用不带锁的版本，否则需要使用带锁的版本。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void cpufreq_verify_within_limits(struct cpufreq_policy *policy, unsigned int min, unsigned int max)；
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这个API用来检查并重新设定policy的最大和最小频率。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;int cpufreq_update_policy(unsigned int cpu);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这个API用来触发cpufreq核心进行policy的更新操作。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>--------------
</span><span class='line'>
</span><span class='line'>### Linux动态频率调节系统CPUFreq之三：governor
</span><span class='line'>
</span><span class='line'>在上一篇文章中，介绍了cpufreq的core层，core提供了cpufreq系统的初始化，公共数据结构的建立以及对cpufreq中其它子部件提供注册功能。core的最核心功能是对policy的管理，一个policy通过cpufreq_policy结构中的governor字段，和某个governor相关联，本章的内容正是要对governor进行讨论。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>通过前面两篇文章的介绍，我们知道，governor的作用是：检测系统的负载状况，然后根据当前的负载，选择出某个可供使用的工作频率，然后把该工作频率传递给cpufreq_driver，完成频率的动态调节。内核默认提供了5种governor供我们使用，在之前的内核版本中，每种governor几乎是独立的代码，它们各自用自己的方式实现对系统的负载进行监测，很多时候，检测的逻辑其实是很相似的，各个governor最大的不同之处其实是根据检测的结果，选择合适频率的策略。所以，为了减少代码的重复，在我现在分析的内核版本中（3.10.0），一些公共的逻辑代码被单独抽象出来，单独用一个文件来实现：/drivers/cpufreq/cpufreq_governor.c，而各个具体的governor则分别有自己的代码文件，如：cpufreq_ondemand.c，cpufreq_performance.c。下面我们先从公共部分讨论。
</span><span class='line'>
</span><span class='line'>#### 1. 数据结构
</span><span class='line'>
</span><span class='line'>cpu_dbs_common_info  该结构把对计算cpu负载需要使用到的一些辅助变量整合在了一起，通常，每个cpu都需要一个cpu_dbs_common_info结构体，该结构体中的成员会在governor的生命周期期间进行传递，以用于统计当前cpu的负载，它的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/* Per cpu structures */  
</span><span class='line'>struct cpu_dbs_common_info {  
</span><span class='line'>int cpu;  
</span><span class='line'>u64 prev_cpu_idle;  
</span><span class='line'>u64 prev_cpu_wall;  
</span><span class='line'>u64 prev_cpu_nice;  
</span><span class='line'>struct cpufreq_policy *cur_policy;  
</span><span class='line'>struct delayed_work work;  
</span><span class='line'>
</span><span class='line'>struct mutex timer_mutex;  
</span><span class='line'>ktime_t time_stamp;  
</span><span class='line'>};  
</span><span class='line'>
</span><span class='line'>cpu  与该结构体相关联的cpu编号。
</span><span class='line'>prev_cpu_idle  上一次统计时刻该cpu停留在idle状态的总时间。
</span><span class='line'>prev_cpu_wall  上一次统计时刻对应的总工作时间。
</span><span class='line'>cur_policy  指向该cpu所使用的cpufreq_policy结构。
</span><span class='line'>work  工作队列，该工作队列会被定期地触发，然后定期地进行负载的更新和统计工作。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>dbs缩写，实际是：demand based switching，通常，因为cpu_dbs_common_info只包含了经过抽象后的公共部分，所以，各个governor会自己定义的一个包含cpu_dbs_common_info的自定义结构，例如对于ondemand，他会定义：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct od_cpu_dbs_info_s {  
</span><span class='line'>struct cpu_dbs_common_info cdbs;  
</span><span class='line'>struct cpufreq_frequency_table *freq_table;  
</span><span class='line'>unsigned int freq_lo;  
</span><span class='line'>unsigned int freq_lo_jiffies;  
</span><span class='line'>unsigned int freq_hi_jiffies;  
</span><span class='line'>unsigned int rate_mult;  
</span><span class='line'>unsigned int sample_type:1;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>而对于Conservative，他的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct cs_cpu_dbs_info_s {  
</span><span class='line'>struct cpu_dbs_common_info cdbs;  
</span><span class='line'>unsigned int down_skip;  
</span><span class='line'>unsigned int requested_freq;  
</span><span class='line'>unsigned int enable:1;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>把它理解为类似于C++语言的基类和子类的概念就是了。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>common_dbs_data    各个独立的governor，需要和governor的公共层交互，需要实现一套公共的接口，这个接口由common_dbs_data结构来提供：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct common_dbs_data {  
</span><span class='line'>/* Common across governors */  
</span><span class='line'>#define GOV_ONDEMAND            0  
</span><span class='line'>#define GOV_CONSERVATIVE        1  
</span><span class='line'>int governor;  
</span><span class='line'>struct attribute_group *attr_group_gov_sys; /* one governor - system */  
</span><span class='line'>struct attribute_group *attr_group_gov_pol; /* one governor - policy */  
</span><span class='line'>
</span><span class='line'>/* Common data for platforms that don't set have_governor_per_policy */  
</span><span class='line'>struct dbs_data *gdbs_data;  
</span><span class='line'>
</span><span class='line'>struct cpu_dbs_common_info *(*get_cpu_cdbs)(int cpu);  
</span><span class='line'>void *(*get_cpu_dbs_info_s)(int cpu);  
</span><span class='line'>void (*gov_dbs_timer)(struct work_struct *work);  
</span><span class='line'>void (*gov_check_cpu)(int cpu, unsigned int load);  
</span><span class='line'>int (*init)(struct dbs_data *dbs_data);  
</span><span class='line'>void (*exit)(struct dbs_data *dbs_data);  
</span><span class='line'>
</span><span class='line'>/* Governor specific ops, see below */  
</span><span class='line'>void *gov_ops;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>主要的字段意义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;governor  因为ondemand和conservative的实现部分有很多相似的地方，用该字段做一区分，可以设置为GOV_ONDEMAND或GOV_CONSERVATIVE的其中之一。
</span><span class='line'>attr_group_gov_sys  该公共的sysfs属性组。
</span><span class='line'>attr_group_gov_pol  各policy使用的属性组，有时候多个policy会使用同一个governor算法。
</span><span class='line'>gdbs_data  通常，当没有设置have_governor_per_policy时，表示所有的policy使用了同一种governor，该字段指向该governor的dbs_data结构。
</span><span class='line'>get_cpu_cdbs  回调函数，公共层用它取得对应cpu的cpu_dbs_common_info结构指针。
</span><span class='line'>get_cpu_dbs_info_s  回调函数，公共层用它取得对应cpu的cpu_dbs_common_info_s的派生结构指针，例如：od_cpu_dbs_info_s，cs_cpu_dbs_info_s。
</span><span class='line'>gov_dbs_timer  前面说过，cpu_dbs_common_info_s结构中有一个工作队列，该回调通常用作工作队列的工作函数。
</span><span class='line'>gov_check_cpu  计算cpu负载的回调函数，通常会直接调用公共层提供的dbs_check_cpu函数完成实际的计算工作。
</span><span class='line'>init   初始化回调，用于完成该governor的一些额外的初始化工作。
</span><span class='line'>exit  回调函数，governor被移除时调用。
</span><span class='line'>gov_ops  各个governor可以用该指针定义各自特有的一些操作接口。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>dbs_data    该结构体通常由governor的公共层代码在governor的初始化阶段动态创建，该结构的一个最重要的字段就是cdata：一个common_dbs_data结构指针，另外，该结构还包含一些定义governor工作方式的一些调节参数。该结构的详细定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct dbs_data {  
</span><span class='line'>struct common_dbs_data *cdata;  
</span><span class='line'>unsigned int min_sampling_rate;  
</span><span class='line'>int usage_count;  
</span><span class='line'>void *tuners;  
</span><span class='line'>
</span><span class='line'>/* dbs_mutex protects dbs_enable in governor start/stop */  
</span><span class='line'>struct mutex mutex;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>几个主要的字段：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cdata  一个common_dbs_data结构指针，通常由具体governor的实现部分定义好，然后作为参数，通过公共层的API：cpufreq_governor_dbs，传递到公共层，cpufreq_governor_dbs函数在创建好dbs_data结构后，把该指针赋值给该字段。
</span><span class='line'>min_sampling_rate  用于记录统计cpu负载的采样周期。
</span><span class='line'>usage_count  当没有设置have_governor_per_policy时，意味着所有的policy采用同一个governor，该字段就是用来统计目前该governor被多少个policy引用。
</span><span class='line'>tuners  指向governor的调节参数结构，不同的governor可以定义自己的tuner结构，公共层代码会在governor的初始化阶段调用common_dbs_data结构的init回调函数，governor的实现可以在init回调中初始化tuners字段。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>如果设置了have_governor_per_policy，每个policy拥有各自独立的governor，也就是说，拥有独立的dbs_data结构，它会记录在cpufreq_policy结构的governor_data字段中，否则，如果没有设置have_governor_per_policy，多个policy共享一个governor，和同一个dbs_data结构关联，此时，dbs_data被赋值在common_dbs_data结构的gdbs_data字段中。
</span><span class='line'>
</span><span class='line'>cpufreq_governor  这个结构在本系列文章的第一篇已经介绍过了，请参看Linux动态频率调节系统CPUFreq之一：概述。几个数据结构的关系如下图所示：
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-08-12-4.png)
</span><span class='line'>
</span><span class='line'>图 1.1  governor的数据结构关系
</span><span class='line'>
</span><span class='line'>下面我们以ondemand这个系统已经实现的governor为例，说明一下如何实现一个governor。具体的代码请参看：/drivers/cpufreq/cpufreq_ondemand.c。
</span><span class='line'>
</span><span class='line'>#### 2. 定义一个governor
</span><span class='line'>
</span><span class='line'>要实现一个governor，首先要定义一个cpufreq_governor结构，对于ondeman来说，它的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct cpufreq_governor cpufreq_gov_ondemand = {  
</span><span class='line'>.name                   = "ondemand",  
</span><span class='line'>.governor               = od_cpufreq_governor_dbs,  
</span><span class='line'>.max_transition_latency = TRANSITION_LATENCY_LIMIT,  
</span><span class='line'>.owner                  = THIS_MODULE,  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>其中，governor是这个结构的核心字段，cpufreq_governor注册后，cpufreq的核心层通过该字段操纵这个governor的行为，包括：初始化、启动、退出等工作。现在，该字段被设置为od_cpufreq_governor_dbs，我们看看它的实现：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int od_cpufreq_governor_dbs(struct cpufreq_policy *policy,  
</span><span class='line'>    unsigned int event)  
</span><span class='line'>{  
</span><span class='line'>return cpufreq_governor_dbs(policy, &amp;od_dbs_cdata, event);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>只是简单地调用了governor的公共层提供的API：cpufreq_governor_dbs，关于这个API，我们在后面会逐一进行展开，这里我们注意到参数：&amp;od_dbs_cdata，正是我们前面讨论过得common_dbs_data结构，作为和governor公共层的接口，在这里它的定义如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static struct common_dbs_data od_dbs_cdata = {  
</span><span class='line'>.governor = GOV_ONDEMAND,  
</span><span class='line'>.attr_group_gov_sys = &amp;od_attr_group_gov_sys,  
</span><span class='line'>.attr_group_gov_pol = &amp;od_attr_group_gov_pol,  
</span><span class='line'>.get_cpu_cdbs = get_cpu_cdbs,  
</span><span class='line'>.get_cpu_dbs_info_s = get_cpu_dbs_info_s,  
</span><span class='line'>.gov_dbs_timer = od_dbs_timer,  
</span><span class='line'>.gov_check_cpu = od_check_cpu,  
</span><span class='line'>.gov_ops = &amp;od_ops,  
</span><span class='line'>.init = od_init,  
</span><span class='line'>.exit = od_exit,  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这里先介绍一下get_cpu_cdbs和get_cpu_dbs_info_s这两个回调，前面介绍cpu_dbs_common_info_s结构的时候已经说过，各个governor需要定义一个cpu_dbs_common_info_s结构的派生结构，对于ondemand来说，这个派生结构是：od_cpu_dbs_info_s。两个回调函数分别用来获得基类和派生类这两个结构的指针。我们先看看od_cpu_dbs_info_s是如何定义的：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static DEFINE_PER_CPU(struct od_cpu_dbs_info_s, od_cpu_dbs_info);  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>没错，它被定义为了一个per_cpu变量，也就是说，每个cpu拥有各自独立的od_cpu_dbs_info_s，这很正常，因为每个cpu需要的实时负载是不一样的，需要独立的上下文变量来进行负载的统计。前面也已经列出了od_cpu_dbs_info_s的声明，他的第一个字段cdbs就是一个cpu_dbs_common_info_s结构。内核为我们提供了一个辅助宏来帮助我们定义get_cpu_cdbs和get_cpu_dbs_info_s这两个回调函数：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;#define define_get_cpu_dbs_routines(_dbs_info)                          \  
</span><span class='line'>static struct cpu_dbs_common_info *get_cpu_cdbs(int cpu)                \  
</span><span class='line'>{                                                                       \  
</span><span class='line'>return &amp;per_cpu(_dbs_info, cpu).cdbs;                           \  
</span><span class='line'>}                                                                       \  
</span><span class='line'>                                        \  
</span><span class='line'>static void *get_cpu_dbs_info_s(int cpu)                                \  
</span><span class='line'>{                                                                       \  
</span><span class='line'>return &amp;per_cpu(_dbs_info, cpu);                                \  
</span><span class='line'>}        
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>所以，在cpufreq_ondemand.c中，我们只要简单地使用上述的宏即可定义这两个回调：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;define_get_cpu_dbs_routines(od_cpu_dbs_info);  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>经过上述这一系列的定义以后，governor的公共层即可通过这两个回调获取各个cpu所对应的cpu_dbs_common_info_s和od_cpu_dbs_info_s的结构指针，用来记录本次统计周期的一些上下文参数（idle时间和运行时间等等）。
</span><span class='line'>
</span><span class='line'>#### 3. 初始化一个governor
</span><span class='line'>
</span><span class='line'>当一个governor被policy选定后，核心层会通过`__cpufreq_set_policy`函数对该cpu的policy进行设定，参看 Linux动态频率调节系统CPUFreq之二：核心（core）架构与API中的第4节和图4.1。如果policy认为这是一个新的governor（和原来使用的旧的governor不相同），policy会通过`__cpufreq_governor`函数，并传递CPUFREQ_GOV_POLICY_INIT参数，而`__cpufreq_governor`函数实际上是调用cpufreq_governor结构中的governor回调函数，在第2节中我们已经知道，这个回调最后会进入governor公共API：cpufreq_governor_dbs，下面是它收到CPUFREQ_GOV_POLICY_INIT参数时，经过简化后的代码片段：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;case CPUFREQ_GOV_POLICY_INIT:  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>dbs_data = kzalloc(sizeof(*dbs_data), GFP_KERNEL);  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>dbs_data-&gt;cdata = cdata;  
</span><span class='line'>dbs_data-&gt;usage_count = 1;  
</span><span class='line'>rc = cdata-&gt;init(dbs_data);  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>rc = sysfs_create_group(get_governor_parent_kobj(policy),  
</span><span class='line'>        get_sysfs_attr(dbs_data));  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>policy-&gt;governor_data = dbs_data;  
</span><span class='line'>
</span><span class='line'>......  
</span><span class='line'>/* Bring kernel and HW constraints together */  
</span><span class='line'>dbs_data-&gt;min_sampling_rate = max(dbs_data-&gt;min_sampling_rate,  
</span><span class='line'>        MIN_LATENCY_MULTIPLIER * latency);  
</span><span class='line'>set_sampling_rate(dbs_data, max(dbs_data-&gt;min_sampling_rate,  
</span><span class='line'>            latency * LATENCY_MULTIPLIER));  
</span><span class='line'>if ((cdata-&gt;governor == GOV_CONSERVATIVE) &amp;&amp;  
</span><span class='line'>        (!policy-&gt;governor-&gt;initialized)) {  
</span><span class='line'>    struct cs_ops *cs_ops = dbs_data-&gt;cdata-&gt;gov_ops;  
</span><span class='line'>
</span><span class='line'>    cpufreq_register_notifier(cs_ops-&gt;notifier_block,  
</span><span class='line'>            CPUFREQ_TRANSITION_NOTIFIER);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>if (!have_governor_per_policy())  
</span><span class='line'>    cdata-&gt;gdbs_data = dbs_data;  
</span><span class='line'>
</span><span class='line'>return 0;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>首先，它会给这个policy分配一个dbs_data实例，然后把通过参数cdata传入的common_dbs_data指针，赋值给它的cdata字段，这样，policy就可以通过该字段获得governor的操作接口（通过cdata的一系列回调函数）。然后，调用cdata的init回调函数，对这个governor做进一步的初始化工作，对于ondemand来说，init回调的实际执行函数是：od_init，主要是完成和governor相关的一些调节参数的初始化，然后把初始化好的od_dbs_tuners结构指针赋值到dbs_data的tuners字段中，它的详细代码这里就不贴出了。接着，通过sysfs_create_group函数，建立该governor在sysfs中的节点，以后我们就可以通过这些节点对该governor的算法逻辑进行微调，ondemand在我的电脑中，建立了以下这些节点（sys/devices/system/cpu/cpufreq/ondemand）：
</span><span class='line'>
</span><span class='line'>sampling_rate;
</span><span class='line'>io_is_busy;
</span><span class='line'>up_threshold;
</span><span class='line'>sampling_down_factor;
</span><span class='line'>ignore_nice;
</span><span class='line'>powersave_bias;
</span><span class='line'>sampling_rate_min;
</span><span class='line'>
</span><span class='line'>继续，把初始化好的dbs_data结构赋值给policy的governor_data字段，以方便以后的访问。最后是通过set_sampling_rate设置governor的采样周期，如果还有设置have_governor_per_policy，把dbs_data结构指针赋值给cdata结构的gdbs_data字段，至此，governor的初始化工作完成，下面是整个过程的序列图：
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-08-12-5.png)
</span><span class='line'>
</span><span class='line'>图 3.1  governor的初始化
</span><span class='line'>
</span><span class='line'>#### 4. 启动一个governor
</span><span class='line'>
</span><span class='line'>核心层会通过`__cpufreq_set_policy`函数，通过CPUFREQ_GOV_POLICY_INIT参数，在公共层的API：cpufreq_governor_dbs中，完成了对governor的初始化工作，紧接着，`__cpufreq_set_policy`会通过CPUFREQ_GOV_START参数，和初始化governor的流程一样，最终会到达cpufreq_governor_dbs函数中，我们看看它是如何启动一个governor的：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;case CPUFREQ_GOV_START:  
</span><span class='line'>if (!policy-&gt;cur)  
</span><span class='line'>    return -EINVAL;  
</span><span class='line'>
</span><span class='line'>mutex_lock(&amp;dbs_data-&gt;mutex);  
</span><span class='line'>
</span><span class='line'>for_each_cpu(j, policy-&gt;cpus) {  
</span><span class='line'>    struct cpu_dbs_common_info *j_cdbs =  
</span><span class='line'>        dbs_data-&gt;cdata-&gt;get_cpu_cdbs(j);  
</span><span class='line'>
</span><span class='line'>    j_cdbs-&gt;cpu = j;  
</span><span class='line'>    j_cdbs-&gt;cur_policy = policy;  
</span><span class='line'>    j_cdbs-&gt;prev_cpu_idle = get_cpu_idle_time(j,  
</span><span class='line'>                   &amp;j_cdbs-&gt;prev_cpu_wall, io_busy);  
</span><span class='line'>    if (ignore_nice)  
</span><span class='line'>        j_cdbs-&gt;prev_cpu_nice =  
</span><span class='line'>            kcpustat_cpu(j).cpustat[CPUTIME_NICE];  
</span><span class='line'>
</span><span class='line'>    mutex_init(&amp;j_cdbs-&gt;timer_mutex);  
</span><span class='line'>    INIT_DEFERRABLE_WORK(&amp;j_cdbs-&gt;work,  
</span><span class='line'>                 dbs_data-&gt;cdata-&gt;gov_dbs_timer);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>首先，遍历使用该policy的所有的处于online状态的cpu，针对每一个cpu，做以下动作：
</span><span class='line'>
</span><span class='line'>取出该cpu相关联的cpu_dbs_common_info结构指针，之前已经讨论过，governor定义了一个per_cpu变量来定义各个cpu所对应的cpu_dbs_common_info结构，通过common_dbs_data结构的回调函数可以获取该结构的指针。
</span><span class='line'>
</span><span class='line'>初始化cpu_dbs_common_info结构的cpu，cur_policy，prev_cpu_idle，prev_cpu_wall，prev_cpu_nice字段，其中，prev_cpu_idle，prev_cpu_wall这两个字段会被以后的负载计算所使用。
</span><span class='line'>
</span><span class='line'>为每个cpu初始化一个工作队列，工作队列的执行函数是common_dbs_data结构中的gov_dbs_timer字段所指向的回调函数，对于ondemand来说，该函数是：od_dbs_timer。这个工作队列会被按照设定好的采样率定期地被唤醒，进行cpu负载的统计工作。
</span><span class='line'>
</span><span class='line'>然后，记录目前的时间戳，调度初始化好的工作队列在稍后某个时间点运行：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/* Initiate timer time stamp */  
</span><span class='line'> cpu_cdbs-&gt;time_stamp = ktime_get();  
</span><span class='line'>
</span><span class='line'> gov_queue_work(dbs_data, policy,  
</span><span class='line'>     delay_for_sampling_rate(sampling_rate), true);  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>下图表达了启动一个governor的过程：
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-08-12-6.png)
</span><span class='line'>
</span><span class='line'>图 4.1  启动一个governor
</span><span class='line'>
</span><span class='line'>工作队列被调度执行后，会在工作队列的执行函数中进行cpu负载的统计工作，这个我们在下一节中讨论。
</span><span class='line'>
</span><span class='line'>#### 5. 系统负载的检测
</span><span class='line'>
</span><span class='line'>上一节我们提到，核心层启动一个governor后，会在每个使用该governor的cpu上建立一个工作队列，工作队列的执行函数是在common_dbs_data中gov_dbs_timer字段所指向的函数，理所当然，该函数由各个governor的具体代码来实现，对于ondemand governor，它的实现函数是od_dbs_timer。governor的公共层代码为我们提供了一个API：dbs_check_cpu，该API用来计算两个统计周期期间某个cpu的负载情况，我们先分析一下dbs_check_cpu：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void dbs_check_cpu(struct dbs_data *dbs_data, int cpu)  
</span><span class='line'>{  
</span><span class='line'>struct cpu_dbs_common_info *cdbs = dbs_data-&gt;cdata-&gt;get_cpu_cdbs(cpu);  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>policy = cdbs-&gt;cur_policy;  
</span><span class='line'>
</span><span class='line'>/* Get Absolute Load (in terms of freq for ondemand gov) */  
</span><span class='line'>for_each_cpu(j, policy-&gt;cpus) {  
</span><span class='line'>    struct cpu_dbs_common_info *j_cdbs;  
</span><span class='line'>    ......  
</span><span class='line'>
</span><span class='line'>    j_cdbs = dbs_data-&gt;cdata-&gt;get_cpu_cdbs(j);  
</span><span class='line'>
</span><span class='line'>    ......  
</span><span class='line'>    cur_idle_time = get_cpu_idle_time(j, &amp;cur_wall_time, io_busy);  
</span><span class='line'>
</span><span class='line'>    wall_time = (unsigned int)  
</span><span class='line'>        (cur_wall_time - j_cdbs-&gt;prev_cpu_wall);  
</span><span class='line'>    j_cdbs-&gt;prev_cpu_wall = cur_wall_time;  
</span><span class='line'>
</span><span class='line'>    idle_time = (unsigned int)  
</span><span class='line'>        (cur_idle_time - j_cdbs-&gt;prev_cpu_idle);  
</span><span class='line'>    j_cdbs-&gt;prev_cpu_idle = cur_idle_time;  
</span><span class='line'>    ......  
</span><span class='line'>
</span><span class='line'>    load = 100 * (wall_time - idle_time) / wall_time;  
</span><span class='line'>    ......  
</span><span class='line'>    load *= cur_freq；    /* 实际的代码不是这样，为了简化讨论，精简为实际的计算逻辑*/  
</span><span class='line'>
</span><span class='line'>    if (load &gt; max_load)  
</span><span class='line'>        max_load = load;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>dbs_data-&gt;cdata-&gt;gov_check_cpu(cpu, max_load);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>由代码可以看出，遍历该policy下每个online的cpu，取出该cpu对应的cpu_dbs_common_info结构，该结构中的prev_cpu_idle和prev_cpu_wall保存有上一次采样周期时记录的idle时间和运行时间，负载的计算其实很简单：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;idle_time = 本次idle时间 - 上次idle时间；
</span><span class='line'>wall_time = 本次总运行时间 - 上次总运行时间；
</span><span class='line'>负载load = 100 * （wall_time - idle_time）/ wall_time；
</span><span class='line'>把所有cpu中，负载最大值记入max_load中，作为选择频率的依据；
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>计算出最大负载max_load后，调用具体governor实现的gov_check_cpu回调函数，对于ondemand来说，该回调函数是：od_check_cpu，我们跟进去看看：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void od_check_cpu(int cpu, unsigned int load_freq)  
</span><span class='line'>{  
</span><span class='line'>struct od_cpu_dbs_info_s *dbs_info = &amp;per_cpu(od_cpu_dbs_info, cpu);  
</span><span class='line'>struct cpufreq_policy *policy = dbs_info-&gt;cdbs.cur_policy;  
</span><span class='line'>struct dbs_data *dbs_data = policy-&gt;governor_data;  
</span><span class='line'>struct od_dbs_tuners *od_tuners = dbs_data-&gt;tuners;  
</span><span class='line'>
</span><span class='line'>dbs_info-&gt;freq_lo = 0;  
</span><span class='line'>
</span><span class='line'>/* Check for frequency increase */  
</span><span class='line'>if (load_freq &gt; od_tuners-&gt;up_threshold * policy-&gt;cur) {  
</span><span class='line'>    /* If switching to max speed, apply sampling_down_factor */  
</span><span class='line'>    if (policy-&gt;cur &lt; policy-&gt;max)  
</span><span class='line'>        dbs_info-&gt;rate_mult =  
</span><span class='line'>            od_tuners-&gt;sampling_down_factor;  
</span><span class='line'>    dbs_freq_increase(policy, policy-&gt;max);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>当负载比预设的阀值高时（od_tuners-&gt;up_threshold，默认值是95%），立刻选择该policy最大的工作频率作为接下来的工作频率。如果负载没有达到预设的阀值，但是当前频率已经是最低频率了，则什么都不做，直接返回：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (policy-&gt;cur == policy-&gt;min)  
</span><span class='line'>return;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>运行到这里，cpu的频率可能已经在上面的过程中被设置为最大频率，实际上我们可能并不需要这么高的频率，所以接着判断，当负载低于另一个预设值时，这时需要计算一个合适于该负载的新频率：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if (load_freq &lt; od_tuners-&gt;adj_up_threshold  
</span><span class='line'>    * policy-&gt;cur) {  
</span><span class='line'>unsigned int freq_next;  
</span><span class='line'>freq_next = load_freq / od_tuners-&gt;adj_up_threshold;  
</span><span class='line'>
</span><span class='line'>/* No longer fully busy, reset rate_mult */  
</span><span class='line'>dbs_info-&gt;rate_mult = 1;  
</span><span class='line'>
</span><span class='line'>if (freq_next &lt; policy-&gt;min)  
</span><span class='line'>    freq_next = policy-&gt;min;  
</span><span class='line'>
</span><span class='line'>if (!od_tuners-&gt;powersave_bias) {  
</span><span class='line'>    __cpufreq_driver_target(policy, freq_next,  
</span><span class='line'>            CPUFREQ_RELATION_L);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>freq_next = od_ops.powersave_bias_target(policy, freq_next,  
</span><span class='line'>            CPUFREQ_RELATION_L);  
</span><span class='line'>__cpufreq_driver_target(policy, freq_next, CPUFREQ_RELATION_L);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>对于ondemand来说，因为传入的负载是乘上了当前频率后的归一化值，所以计算新频率时，直接用load_freq除以想要的负载即可。本来计算出来的频率直接通过`__cpufreq_driver_target`函数，交给cpufreq_driver调节频率即可，但是这里的处理考虑了powersave_bias的设置情况，当设置了powersave_bias时，表明我们为了进一步节省电力，我们希望在计算出来的新频率的基础上，再乘以一个powersave_bias设定的百分比，作为真正的运行频率，powersave_bias的值从0-1000，每一步代表0.1%。实际的情况比想象中稍微复杂一点，考虑到乘以一个powersave_bias后的新频率可能不在cpu所支持的频率表中，ondemand算法会在频率表中查找，分别找出最接近新频率的一个区间，由高低两个频率组成，低的频率记入od_cpu_dbs_info_s结构的freq_lo字段中，高的频率通过od_ops.powersave_bias_target回调返回。同时，od_ops.powersave_bias_target回调函数还计算出高低两个频率应该运行的时间，分别记入od_cpu_dbs_info_s结构的freq_hi_jiffies和freq_low_jiffies字段中。原则是，通过两个不同频率的运行时间的组合，使得综合结果接近我们想要的目标频率。详细的计算逻辑请参考函数：generic_powersave_bias_target。
</span><span class='line'>讨论完上面两个函数，让我们回到本节的开头，负载的计算工作是在一个工作队列中发起的，前面说过，ondemand对应的工作队列的工作函数是od_dbs_timer，我们看看他的实现代码：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void od_dbs_timer(struct work_struct *work)  
</span><span class='line'>{  
</span><span class='line'>......  
</span><span class='line'>
</span><span class='line'>/* Common NORMAL_SAMPLE setup */  
</span><span class='line'>core_dbs_info-&gt;sample_type = OD_NORMAL_SAMPLE;  
</span><span class='line'>if (sample_type == OD_SUB_SAMPLE) {  
</span><span class='line'>    delay = core_dbs_info-&gt;freq_lo_jiffies;  
</span><span class='line'>    __cpufreq_driver_target(core_dbs_info-&gt;cdbs.cur_policy,  
</span><span class='line'>            core_dbs_info-&gt;freq_lo, CPUFREQ_RELATION_H);  
</span><span class='line'>} else {  
</span><span class='line'>    dbs_check_cpu(dbs_data, cpu);  
</span><span class='line'>    if (core_dbs_info-&gt;freq_lo) {  
</span><span class='line'>        /* Setup timer for SUB_SAMPLE */  
</span><span class='line'>        core_dbs_info-&gt;sample_type = OD_SUB_SAMPLE;  
</span><span class='line'>        delay = core_dbs_info-&gt;freq_hi_jiffies;  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>max_delay:  
</span><span class='line'>if (!delay)  
</span><span class='line'>    delay = delay_for_sampling_rate(od_tuners-&gt;sampling_rate  
</span><span class='line'>            * core_dbs_info-&gt;rate_mult);  
</span><span class='line'>
</span><span class='line'>gov_queue_work(dbs_data, dbs_info-&gt;cdbs.cur_policy, delay, modify_all);  
</span><span class='line'>mutex_unlock(&amp;core_dbs_info-&gt;cdbs.timer_mutex);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;如果sample_type是OD_SUB_SAMPLE时，表明上一次采样时，需要用高低两个频率来模拟实际的目标频率中的第二步：需要运行freq_lo，并且持续时间为freq_lo_jiffies。否则，调用公共层计算负载的API：dbs_check_cpu，开始一次新的采样，当powersave_bias没有设置时，该函数返回前，所需要的新的目标频率会被设置，考虑到powersave_bias的设置情况，判断一下如果freq_lo被设置，说明需要用高低两个频率来模拟实际的目标频率，高频率已经在dbs_check_cpu返回前被设置（实际的设置工作是在od_check_cpu中），所以把sample_type设置为OD_SUB_SAMPLE，以便下一次运行工作函数进行采样时可以设置低频率运行。最后，调度工作队列在下一个采样时刻再次运行，这样，cpu的工作频率实现了在每个采样周期，根据实际的负载情况，动态地设定合适的工作频率进行运行，既满足了性能的需求，也降低了系统的功耗，达到了cpufreq系统的最终目的，整个流程可以参考下图：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-08-12-7.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;图 5.1  负载计算和频率选择&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[relay 数据传输]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/08/03/kernel-base-relay/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-08-03T16:39:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/08/03/kernel-base-relay&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="https://www.ibm.com/developerworks/cn/linux/l-cn-relay/"&gt;https://www.ibm.com/developerworks/cn/linux/l-cn-relay/&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Relay 要解决的问题&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于任何在内核工作的程序而言，如何把大量的调试信息从内核空间传输到用户空间都是一个大麻烦，对于运行中的内核更是如此。特别是对于哪些用于调试内核性能的工具，更是如此。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;对于这种大量数据需要在内核中缓存并传输到用户空间需求，很多传统的方法都已到达了极限，例如内核程序员很熟悉的 printk() 调用。此外，如果不同的内核子系统都开发自己的缓存和传输代码，造成很大的代码冗余，而且也带来维护上的困难。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这些，都要求开发一套能够高效可靠地将数据从内核空间转发到用户空间的系统，而且这个系统应该独立于各个调试子系统。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这样就诞生了 RelayFS。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Relay的发展历史&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Relay 的前身是 RelayFS，即作为 Linux 的一个新型文件系统。2003年3月，RelayFS的第一个版本的代码被开发出来，在7月14日，第一个针对2.6内核的版本也开始提供下载。经过广泛的试用和改进，直到2005年9月，RelayFS才被加入mainline内核(2.6.14)。同时，RelayFS也被移植到2.4内核中。在2006年2月，从2.6.17开始，RelayFS不再作为单独的文件系统存在，而是成为内核的一部分。它的源码也从fs/目录下转移到kernel/relay.c中，名称中也从RelayFS改成了Relay。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;RelayFS目前已经被越来越多的内核工具使用，包括内核调试工具SystemTap、LTT，以及一些特殊的文件系统例如DebugFS。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Relay的基本原理&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;总的说来，Relay提供了一种机制，使得内核空间的程序能够通过用户定义的relay通道(channel)将大量数据高效的传输到用户空间。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;一个relay通道由一组和CPU一一对应的内核缓冲区组成。这些缓冲区又被称为relay缓冲区(buffer)，其中的每一个在用户空间都用一个常规文件来表示，这被叫做relay文件(file)。内核空间的用户可以利用relay提供的API接口来写入数据，这些数据会被自动的写入当前的CPU id对应的那个relay缓冲区；同时，这些缓冲区从用户空间看来，是一组普通文件，可以直接使用read()进行读取，也可以使用mmap()进行映射。Relay并不关心数据的格式和内容，这些完全依赖于使用relay的用户程序。Relay的目的是提供一个足够简单的接口，从而使得基本操作尽可能的高效。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Relay将数据的读和写分离，使得突发性大量数据写入的时候，不需要受限于用户空间相对较慢的读取速度，从而大大提高了效率。Relay作为写入和读取的桥梁，也就是将内核用户写入的数据缓存并转发给用户空间的程序。这种转发机制也正是Relay这个名称的由来。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面这个图给出了Relay的基本结构和典型操作：&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/kernel/2015-08-03.png" alt="" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Relay的基本结构和典型操作&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;可以看到，这里的relay通道由四个relay缓冲区(kbuf0到kbuf3)组成，分别对应于系统中的cpu0到cpu1。每个CPU上的代码调用relay_write()的时候将数据写入自己对应的relay缓冲区内。每个relay缓冲区称一个relay文件，即/cpu0到/cpu3。当文件系统被mount到/mnt/以后，这个relay文件就被映射成映射到用户空间的地址空间。一旦数据可用，用户程序就可以把它的数据读出来写入到硬盘上的文件中，即cpu0.out到cpu3.out。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Relay的主要API&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;前面提到的 relay_write() 就是 relay API 之一。除此以外，Relay 还提供了更多的 API来支持用户程序完整的使用 relay。这些 API，主要按照面向用户空间和面向内核空间分为两大类，下面我们来分别进行介绍。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;面向用户空间的 API&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这些 Relay 编程接口向用户空间程序提供了访问 relay 通道缓冲区数据的基本操作的入口，包括：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>open() - 允许用户打开一个已经存在的通道缓冲区
</span><span class='line'>mmap() - 使通道缓冲区被映射到位于用户空间的调用者的地址空间。要特别注意的是，我们不能仅对局部区域进行映射。也就是说，必须映射整个缓冲区文件，其大小是 CPU的个数和单个 CPU 缓冲区大小的乘积
</span><span class='line'>read() - 读取通道缓冲区的内容。这些数据一旦被读出，就意味着他们被用户空间的程序消费掉了，也就不能被之后的读操作看到
</span><span class='line'>sendfile() - 将数据从通道缓冲区传输到一个输出文件描述符。其中可能的填充字符会被自动去掉，不会被用户看到
</span><span class='line'>poll() - 支持 POLLIN/POLLRDNORM/POLLERR 信号。每次子缓冲区的边界被越过时，等待着的用户空间程序会得到通知
</span><span class='line'>close() - 将通道缓冲区的引用数减1。当引用数减为0时，表明没有进程或者内核用户需要打开它，从而这个通道缓冲区被释放。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;面向内核空间的 API&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这些API接口向位于内核空间的用户提供了管理relay通道、数据写入等功能。下面介绍其中主要的部分，完整的API接口列表请参见这里。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>relay_open() - 创建一个relay通道，包括创建每个CPU对应的relay缓冲区。
</span><span class='line'>relay_close() - 关闭一个relay通道，包括释放所有的relay缓冲区，在此之前会调用relay_switch()来处理这些relay缓冲区以保证已读取但是未满的数据不会丢失
</span><span class='line'>relay_write() - 将数据写入到当前CPU对应的relay缓冲区内。由于它使用了local_irqsave()保护，因此也可以在中断上下文中使用。
</span><span class='line'>relay_reserve() - 在relay通道中保留一块连续的区域来留给未来的写入操作。这通常用于那些希望直接写入到relay缓冲区的用户。考虑到性能或者其它因素，这些用户不希望先把数据写到一个临时缓冲区中，然后再通过relay_write()进行写入。
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;Relay的例子&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;我们用一个最简单的例子来介绍怎么使用Relay。这个例子由两部分组成：一部分是位于内核空间将数据写入relay文件的程序，使用时需要作为一个内核模块被加载；另一部分是位于用户空间从relay文件中读取数据的程序，使用时作为普通用户态程序运行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内核空间的程序主要操作是：&lt;br/&gt;
</span><span class='line'>  加载模块时，打开一个relay通道，并且往打开的relay通道中写入消息；&lt;br/&gt;
</span><span class='line'>  卸载模块时，关闭relay通道。</span></code></pre></td></tr></table></div></figure>
    #include &lt;linux/module.h>
    #include &lt;linux/relay.h>
    #include &lt;linux/debugfs.h></p>

<pre><code>static struct dentry *create_buf_file_handler(const char *filename, struct dentry *parent, int mode, struct rchan_buf *buf, int *is_global)
{
    return debugfs_create_file(filename, mode, parent, buf, &amp;relay_file_operations);
}

static int remove_buf_file_handler(struct dentry *dentry)
{
    debugfs_remove(dentry);
    return 0;
}

static struct rchan_callbacks relay_callbacks =
{
    .create_buf_file = create_buf_file_handler,
    .remove_buf_file = remove_buf_file_handler,
};

static struct rchan *hello_rchan;
struct dentry *dir;

int init_module(void)
{
    const char *msg="Hello world\n";
    dir = debugfs_create_dir("test", NULL);
#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,32))
    hello_rchan = relay_open("cpu", dir, 8192, 2, &amp;relay_callbacks, NULL);
#else   
    hello_rchan = relay_open("cpu", dir, 8192, 2, &amp;relay_callbacks);
#endif  
    if(!hello_rchan){
        printk("relay_open() failed.\n");
        return -ENOMEM;
    }
    relay_write(hello_rchan, msg, strlen(msg));
    return 0;
}
#include &lt;linux/module.h&gt;
#include &lt;linux/relay.h&gt;
#include &lt;linux/debugfs.h&gt;

static struct dentry *create_buf_file_handler(const char *filename, struct dentry *parent, int mode, struct rchan_buf *buf, int *is_global)
{
    return debugfs_create_file(filename, mode, parent, buf, &amp;relay_file_operations);
}

static int remove_buf_file_handler(struct dentry *dentry)
{
    debugfs_remove(dentry);
    return 0;
}

static struct rchan_callbacks relay_callbacks =
{
    .create_buf_file = create_buf_file_handler,
    .remove_buf_file = remove_buf_file_handler,
};

static struct rchan *hello_rchan;
struct dentry *dir;

int init_module(void)
{
    const char *msg="Hello world\n";
    dir = debugfs_create_dir("test", NULL);
#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,32))
    hello_rchan = relay_open("cpu", dir, 8192, 2, &amp;relay_callbacks, NULL);
#else   
    hello_rchan = relay_open("cpu", dir, 8192, 2, &amp;relay_callbacks);
#endif  
    if(!hello_rchan){
        printk("relay_open() failed.\n");
        return -ENOMEM;
    }
    relay_write(hello_rchan, msg, strlen(msg));
    return 0;
}
</code></pre>

<pre><code>
查看输出
</code></pre>

<pre><code>mount -t debugfs debugfs /media
cat /media/test/cpu*
</code></pre>

<pre><code>
---------------
---------------

http://www.cnblogs.com/hoys/archive/2011/04/10/2011270.html

### 用户空间与内核空间数据交换的方式(4)------relayfs

relayfs是一个快速的转发（relay）数据的文件系统，它以其功能而得名。它为那些需要从内核空间转发大量数据到用户空间的工具和应用提供了快速有效的转发机制。

Channel是relayfs文件系统定义的一个主要概念，每一个channel由一组内核缓存组成，每一个CPU有一个对应于该channel 的内核缓存，每一个内核缓存用一个在relayfs文件系统中的文件文件表示，内核使用relayfs提供的写函数把需要转发给用户空间的数据快速地写入当前CPU上的channel内核缓存，用户空间应用通过标准的文件I/O函数在对应的channel文件中可以快速地取得这些被转发出的数据mmap 来。写入到channel中的数据的格式完全取决于内核中创建channel的模块或子系统。

#### relayfs的用户空间API：

relayfs实现了四个标准的文件I/O函数，open、mmap、poll和close.

open()，打开一个channel在某一个CPU上的缓存对应的文件。

mmap()，把打开的channel缓存映射到调用者进程的内存空间。

read ()，读取channel缓存，随后的读操作将看不到被该函数消耗的字节，如果channel的操作模式为非覆盖写，那么用户空间应用在有内核模块写时仍 可以读取，但是如果channel的操作模式为覆盖式，那么在读操作期间如果有内核模块进行写，结果将无法预知，因此对于覆盖式写的channel，用户 应当在确认在channel的写完全结束后再进行读。

poll()，用于通知用户空间应用转发数据跨越了子缓存的边界，支持的轮询标志有POLLIN、POLLRDNORM和POLLERR。

close()，关闭open函数返回的文件描述符，如果没有进程或内核模块打开该channel缓存，close函数将释放该channel缓存。

注意：用户态应用在使用上述API时必须保证已经挂载了relayfs文件系统，但内核在创建和使用channel时不需要relayfs已经挂载。下面命令将把relayfs文件系统挂载到/mnt/relay。
</code></pre>

<pre><code>mount -t relayfs relayfs /mnt/relay
</code></pre>

<pre><code>
#### relayfs内核API：

relayfs提供给内核的API包括四类：channel管理、写函数、回调函数和辅助函数。

Channel管理函数包括：
</code></pre>

<pre><code>relay_open(base_filename, parent, subbuf_size, n_subbufs, overwrite, callbacks)
relay_close(chan)
relay_flush(chan)
relay_reset(chan)
relayfs_create_dir(name, parent)
relayfs_remove_dir(dentry)
relay_commit(buf, reserved, count)
relay_subbufs_consumed(chan, cpu, subbufs_consumed)
</code></pre>

<pre><code>写函数包括：
</code></pre>

<pre><code>relay_write(chan, data, length)
__relay_write(chan, data, length)
relay_reserve(chan, length)
</code></pre>

<pre><code>
回调函数包括：
</code></pre>

<pre><code>subbuf_start(buf, subbuf, prev_subbuf_idx, prev_subbuf)
buf_mapped(buf, filp)
buf_unmapped(buf, filp)
</code></pre>

<pre><code>
辅助函数包括：
</code></pre>

<pre><code>relay_buf_full(buf)
subbuf_start_reserve(buf, length)
</code></pre>

<pre><code>
前面已经讲过，每一个channel由一组channel缓存组成，每个CPU对应一个该channel的缓存，每一个缓存又由一个或多个子缓存组成，每一个缓存是子缓存组成的一个环型缓存。

函数relay_open用于创建一个channel并分配对应于每一个CPU的缓存，用户空间应用通过在relayfs文件系统中对应的文件可以 访问channel缓存，参数base_filename用于指定channel的文件名，relay_open函数将在relayfs文件系统中创建 base_filename0..base_filenameN-1，即每一个CPU对应一个channel文件，其中N为CPU数，缺省情况下，这些文件将建立在relayfs文件系统的根目录下，但如果参数parent非空，该函数将把channel文件创建于parent目录下，parent目录使 用函数relay_create_dir创建，函数relay_remove_dir用于删除由函数relay_create_dir创建的目录，谁创建的目录，谁就负责在不用时负责删除。参数subbuf_size用于指定channel缓存中每一个子缓存的大小，参数n_subbufs用于指定 channel缓存包含的子缓存数，因此实际的channel缓存大小为(subbuf_size x n_subbufs)，参数overwrite用于指定该channel的操作模式，relayfs提供了两种写模式，一种是覆盖式写，另一种是非覆盖式 写。使用哪一种模式完全取决于函数subbuf_start的实现，覆盖写将在缓存已满的情况下无条件地继续从缓存的开始写数据，而不管这些数据是否已经 被用户应用读取，因此写操作决不失败。在非覆盖写模式下，如果缓存满了，写将失败，但内核将在用户空间应用读取缓存数据时通过函数 relay_subbufs_consumed()通知relayfs。如果用户空间应用没来得及消耗缓存中的数据或缓存已满，两种模式都将导致数据丢失，唯一的区别是，前者丢失数据在缓存开头，而后者丢失数据在缓存末尾。一旦内核再次调用函数relay_subbufs_consumed()，已满的缓存将不再满，因而可以继续写该缓存。当缓存满了以后，relayfs将调用回调函数buf_full()来通知内核模块或子系统。当新的数据太大无法写 入当前子缓存剩余的空间时，relayfs将调用回调函数subbuf_start()来通知内核模块或子系统将需要使用新的子缓存。内核模块需要在该回调函数中实现下述功能：

初始化新的子缓存；

如果1正确，完成当前子缓存；

如果2正确，返回是否正确完成子缓存切换；

在非覆盖写模式下，回调函数subbuf_start()应该如下实现：
</code></pre>

<pre><code>static int subbuf_start(struct rchan_buf *buf, void *subbuf, void *prev_subbuf, unsigned intprev_padding)
{
    if (prev_subbuf)
        *((unsigned *)prev_subbuf) = prev_padding;

    if (relay_buf_full(buf))
        return 0;

    subbuf_start_reserve(buf, sizeof(unsigned int));
    return 1;
}
</code></pre>

<pre><code>
如果当前缓存满，即所有的子缓存都没读取，该函数返回0，指示子缓存切换没有成功。当子缓存通过函数relay_subbufs_consumed ()被读取后，读取者将负责通知relayfs，函数relay_buf_full()在已经有读者读取子缓存数据后返回0，在这种情况下，子缓存切换成 功进行。

在覆盖写模式下， subbuf_start()的实现与非覆盖模式类似：
</code></pre>

<pre><code>static int subbuf_start(struct rchan_buf *buf, void *subbuf, void *prev_subbuf, unsigned int prev_padding)
{
    if (prev_subbuf)
        *((unsigned *)prev_subbuf) = prev_padding;

    subbuf_start_reserve(buf, sizeof(unsigned int));

    return 1;
}
</code></pre>

<pre><code>
只是不做relay_buf_full()检查，因为此模式下，缓存是环行的，可以无条件地写。因此在此模式下，子缓存切换必定成功，函数 relay_subbufs_consumed() 也无须调用。如果channel写者没有定义subbuf_start()，缺省的实现将被使用。 可以通过在回调函数subbuf_start()中调用辅助函数subbuf_start_reserve()在子缓存中预留头空间，预留空间可以保存任 何需要的信息，如上面例子中，预留空间用于保存子缓存填充字节数，在subbuf_start()实现中，前一个子缓存的填充值被设置。前一个子缓存的填 充值和指向前一个子缓存的指针一道作为subbuf_start()的参数传递给subbuf_start()，只有在子缓存完成后，才能知道填充值。 subbuf_start()也被在channel创建时分配每一个channel缓存的第一个子缓存时调用，以便预留头空间，但在这种情况下，前一个子 缓存指针为NULL。

内核模块使用函数relay_write()或__relay_write()往channel缓存中写需要转发的数据，它们的区别是前者失效了本 地中断，而后者只抢占失效，因此前者可以在任何内核上下文安全使用，而后者应当在没有任何中断上下文将写channel缓存的情况下使用。这两个函数没有 返回值，因此用户不能直接确定写操作是否失败，在缓存满且写模式为非覆盖模式时，relayfs将通过回调函数buf_full来通知内核模块。

函数relay_reserve()用于在channel缓存中预留一段空间以便以后写入，在那些没有临时缓存而直接写入channel缓存的内核 模块可能需要该函数，使用该函数的内核模块在实际写这段预留的空间时可以通过调用relay_commit()来通知relayfs。当所有预留的空间全 部写完并通过relay_commit通知relayfs后，relayfs将调用回调函数deliver()通知内核模块一个完整的子缓存已经填满。由于预留空间的操作并不在写channel的内核模块完全控制之下，因此relay_reserve()不能很好地保护缓存，因此当内核模块调用 relay_reserve()时必须采取恰当的同步机制。

当内核模块结束对channel的使用后需要调用relay_close() 来关闭channel，如果没有任何用户在引用该channel，它将和对应的缓存全部被释放。

函数relay_flush()强制在所有的channel缓存上做一个子缓存切换，它在channel被关闭前使用来终止和处理最后的子缓存。

函数relay_reset()用于将一个channel恢复到初始状态，因而不必释放现存的内存映射并重新分配新的channel缓存就可以使用channel，但是该调用只有在该channel没有任何用户在写的情况下才可以安全使用。

回调函数buf_mapped() 在channel缓存被映射到用户空间时被调用。

回调函数buf_unmapped()在释放该映射时被调用。内核模块可以通过它们触发一些内核操作，如开始或结束channel写操作。

在源代码包中给出了一个使用relayfs的示例程序relayfs_exam.c，它只包含一个内核模块，对于复杂的使用，需要应用程序配合。该模块实现了类似于文章中seq_file示例实现的功能。

当然为了使用relayfs，用户必须让内核支持relayfs，并且要mount它，下面是作者系统上的使用该模块的输出信息：
</code></pre>

<pre><code>$ mkdir -p /relayfs
$ insmod ./relayfs-exam.ko
$ mount -t relayfs relayfs /relayfs
$ cat /relayfs/example0
…
$
</code></pre>

<pre><code>
relayfs是一种比较复杂的内核态与用户态的数据交换方式，本例子程序只提供了一个较简单的使用方式，对于复杂的使用，请参考relayfs用例页面http://relayfs.sourceforge.net/examples.html。
</code></pre>

<pre><code>//kernel module: relayfs-exam.c
#include &lt;linux/module.h&gt;
#include &lt;linux/relayfs_fs.h&gt;
#include &lt;linux/string.h&gt;
#include &lt;linux/sched.h&gt;

#define WRITE_PERIOD (HZ * 60)
static struct rchan * chan;
static size_t subbuf_size = 65536;
static size_t n_subbufs = 4;
static char buffer[256];

void relayfs_exam_write(unsigned long data);

static DEFINE_TIMER(relayfs_exam_timer, relayfs_exam_write, 0, 0);

void relayfs_exam_write(unsigned long data)
{
    int len;
    task_t * p = NULL;

    len = sprintf(buffer, "Current all the processes:\n");
    len += sprintf(buffer + len, "process name\t\tpid\n");
    relay_write(chan, buffer, len);

    for_each_process(p) {
        len = sprintf(buffer, "%s\t\t%d\n", p-&gt;comm, p-&gt;pid);
        relay_write(chan, buffer, len);
    }
    len = sprintf(buffer, "\n\n");
    relay_write(chan, buffer, len);

    relayfs_exam_timer.expires = jiffies + WRITE_PERIOD;
    add_timer(&amp;relayfs_exam_timer);
}


/*
* subbuf_start() relayfs callback.
*
* Defined so that we can 1) reserve padding counts in the sub-buffers, and
* 2) keep a count of events dropped due to the buffer-full condition.
*/
static int subbuf_start(struct rchan_buf *buf,
                void *subbuf,
                void *prev_subbuf,
                unsigned int prev_padding)
{
    if (prev_subbuf)
        *((unsigned *)prev_subbuf) = prev_padding;

    if (relay_buf_full(buf))
        return 0;

    subbuf_start_reserve(buf, sizeof(unsigned int));

    return 1;
}

/*
* relayfs callbacks
*/
static struct rchan_callbacks relayfs_callbacks =
{
    .subbuf_start = subbuf_start,
};

/**
* module init - creates channel management control files
*
* Returns 0 on success, negative otherwise.
*/
static int init(void)
{

    chan = relay_open("example", NULL, subbuf_size,
    n_subbufs, &amp;relayfs_callbacks);

    if (!chan) {
        printk("relay channel creation failed.\n");
        return 1;
    }
    relayfs_exam_timer.expires = jiffies + WRITE_PERIOD;
    add_timer(&amp;relayfs_exam_timer);

    return 0;
}

static void cleanup(void)
{
    del_timer_sync(&amp;relayfs_exam_timer);
    if (chan) {
        relay_close(chan);
        chan = NULL;
    }
}

module_init(init);
module_exit(cleanup);
MODULE_LICENSE("GPL");
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TREE RCU实现]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu/"/>
    <updated>2015-06-02T17:38:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/junguo/article/details/8258231">http://blog.csdn.net/junguo/article/details/8258231</a></p>

<p><a href="http://blog.csdn.net/junguo/article/details/8258261">http://blog.csdn.net/junguo/article/details/8258261</a></p>

<p><a href="http://blog.csdn.net/junguo/article/details/8268277">http://blog.csdn.net/junguo/article/details/8268277</a></p>

<hr />

<h3>TREE RCU实现之一 —— 数据结构</h3>

<h4>代码分布</h4>

<p>在分析代码之前， 先看看代码的分布情况。RCU实现的代码包含在下列一些文件中，此处用到的是linux 3.6.4的代码。</p>

<p>&lt; include/linux/rcupdate.h >  RCU实现的头文件，所有使用RCU的代码都需要包含它<br/>
&lt; include/rcutree.h >  包含rcupdate.h中没有包含的函数声明。<br/>
&lt; include/rcutiny.h >  包含rcupdate.h中没有包含的函数声明。<br/>
&lt; kernel/rcupdate.c >  包括一些RCU实现的基础函数的实现。<br/>
&lt; kernel/rcutree.h >  包含Tree RCU用到的结构信息，TREE_RCU将所有的CPU组织成一颗树，通过层次结构来判别进程是否通过了宽限期，这种方式适用于多个CPU的系统。<br/>
&lt; kernel/rcutree.c >  包含Tree RCU的主要实现代码。<br/>
&lt; kernel/rcutree_plugin.h >  其实也是TREE RCU实现的一部分。主要包含了抢入式TreeRCU的代码。适用于抢入式的系统，抢入式的系统适用于需要低延迟的桌面或者嵌入式系统。<br/>
&lt; kernel/rcutiny.c >  Tiny RCU的主要实现代码，TINY_RCU适用于单个CPU，尤其是嵌入式操作系统。<br/>
&lt; kernel/rcutiny_plugin.h >  主要包含了抢入式Tiny RCU的代码<br/>
&lt; kernel/rcu.h >  定义了debug的接口，实现了<code>__rcu_reclaim</code>。<br/>
&lt; kernel/rcutorture.c>  对RCU进行稳定性测试的代码，通过配置CONFIG_RCU_TORTURE_TEST，可以在系统启动的时候运行稳定性测试。<br/>
&lt; kernel/rcutree_trace.c>  通过配置CONFIG_RCU_TRACE，可以记录RCU的运行信息。<br/>
&lt; include/trace/events/rcu.h>  为rcutree_trace.c定义的头文件。</p>

<h4>RCU处理的基本流程</h4>

<p>RCU实现的关键集中在宽限期的处理上，这个过程需要保证销毁对象前，当前系统中所有CPU上运行的进程都通过了静止状态（quiescent state）。</p>

<p>  1， 程序调用call_rcu，将要删除的对象保存起来。并标记或者开始一个宽限期（同一时间只能运行一个宽限期，所以当已经有宽限期在运行的时候，其它的宽限期必须等待）。</p>

<p>  2， 在读取数据开始和结尾处增加 rcu_read_lock 和 rcu_read_unlock来标记读过程。为了保证删除过程知道读过程的结束，在非抢占式RCU实现中是在rcu_read_lock开始处禁止进程抢占。这样做就可以保证再运行下一次进程切换的时候，读过程已经结束。其实系统也不会去统计各个CPU上是否存在过读线程，所以所有的CPU都会在进程切换的时候通知系统它处于进制状态。当所有的CPU都通过静止状态的时候，系统就会标记它通过了一个宽限期。</p>

<p>  3，由于一个宽限期结束的时候，只有最后一个通过静止状态的CPU知道当前的宽限期已经结束，它并不会去通知其它CPU；同时出于性能考虑，系统也不会在宽限期结束后，马上去执行销毁过程。所以每个CPU都有一个固定的函数去检测是否有等待执行的宽限期，如果没有特别紧急的任务时，会去执行这些过程。</p>

<p>接下来，要分析Tree RCU的实现，先来看看它提供的一些接口函数。</p>

<p>  1， call_rcu  与 synchronize_rcu都是删除对象时调用的函数。call_rcu将数据提交后会返回，而synchronize_rcu会调用call_rcu，并一直等待对象被删除后才返回。还有call_rcu_bh与synchronize_rcu_bh等接口函数，会在后续讲述。</p>

<p>  2，rcu_read_lock 和 rcu_read_unlock</p>

<p>&lt;linux/rcuupdate.h>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static inline void __rcu_read_lock(void)
</span><span class='line'>{
</span><span class='line'>    preempt_disable();
</span><span class='line'>}&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void __rcu_read_unlock(void)
</span><span class='line'>{
</span><span class='line'>preempt_enable();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static inline void rcu_read_lock(void)
</span><span class='line'>{
</span><span class='line'>__rcu_read_lock();
</span><span class='line'>__acquire(RCU);
</span><span class='line'>rcu_lock_acquire(&amp;rcu_lock_map);
</span><span class='line'>rcu_lockdep_assert(!rcu_is_cpu_idle(),
</span><span class='line'>        "rcu_read_lock() used illegally while idle");
</span><span class='line'>}
</span><span class='line'>static inline void rcu_read_unlock(void)
</span><span class='line'>{
</span><span class='line'>rcu_lockdep_assert(!rcu_is_cpu_idle(),
</span><span class='line'>        "rcu_read_unlock() used illegally while idle");
</span><span class='line'>rcu_lock_release(&amp;rcu_lock_map);
</span><span class='line'>__release(RCU);
</span><span class='line'>__rcu_read_unlock();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_read_lock与rcu_read_unlock在非抢占式下的实现比较简单就是 preempt_disable与preempt_enable。这样做的目的是当调用schedule的时候，就可以肯定读的过程已经结束。其它_acquire(RCU)等函数是调试用的代码，暂不做讨论。
</span><span class='line'>
</span><span class='line'>  3， rcu_note_context_switch 在schedule中调用，每次进程切换就代表着一个静止状态。该函数会把当前的CPU状态设置为通过状态。
</span><span class='line'>
</span><span class='line'>  4， rcu_check_callbacks 在每次时钟周期里调用(update_process_times)。通过它会触发软件中断，软件中断对应着rcu_process_callbacks，这是一个真正繁忙的函数，他会检测当前CPU的状态，向父节点传递静止状态信息，调用注册函数等一系列工作。
</span><span class='line'>
</span><span class='line'>在进一步了解这些函数之前，我们先来看看你Tree RCU的结构。
</span><span class='line'>
</span><span class='line'>#### TREE RCU简介
</span><span class='line'>
</span><span class='line'>  在统计CPU的状态的时候，需要用到一个结构来存放所有CPU的状态。在早期的实现中，所有的状态都保存在一个结构中，这样做的后果是所有的CPU在更新自己状态的时候，都需要锁定该结构对象，一定程度上影响了系统性能。为了提高性能，把一定数目的CPU组成了一个节点（默认设定64个CPU为一个节点）；当节点超过64个的时候，再把这些节点按64为单位划分为归属不同的父节点；如此类推，最后的一个单独的节点作为根节点。这样在更新CPU状态的时候，只需要锁定自己所属的节点就可以了。按节点设置的数目，可见这个结构只对CPU数成百上千的系统才真正起作用（我都没见过超过32个cpu的机器，不知道是啥样的感觉）。
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-06-02-50.png)  
</span><span class='line'>
</span><span class='line'>  这样所有的CPU就按层级结构组织了起来，也就是一个树结构。当一个系统的CPU数少于64个的时候，只要一个rcu_node就可以。
</span><span class='line'>
</span><span class='line'>  每个CPU在完成宽限期检测的时候，就会去更新它所属的rcu_node的值，当一个rcu_node所包含的CPU的状态都更新过以后，该node就会去更新它所属的父节点的值。直到最后一个根节点。
</span><span class='line'>
</span><span class='line'>#### TREE RCU数据结构
</span><span class='line'>
</span><span class='line'>为了实现该结构，系统提供了以下结构。
</span><span class='line'>
</span><span class='line'>##### rcu_data
</span><span class='line'>
</span><span class='line'>由于RCU需要统计每个CPU是否通过了宽限期，提供了rcu_data来保存信息。另外每个销毁的对象并不是直接删除，也保存在rcu_data中，等到合适的时机来执行。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_data {  
</span><span class='line'>/* 1) 静止状态和宽限期处理: */  
</span><span class='line'>unsigned long   completed;      /* 对比 rsp-&gt;completed */  
</span><span class='line'>                                /* 目的是检测宽限期是否完成. */  
</span><span class='line'>unsigned long   gpnum;          /* 当前CPU上最高的宽限期数目*/  
</span><span class='line'>                                /* 在宽限期开始的时候设置. */  
</span><span class='line'>unsigned long   passed_quiesce_gpnum;  
</span><span class='line'>                                /* 已经通过的宽限期数目. */  
</span><span class='line'>bool            passed_quiesce; /* 是否通过了静止状态，在进程切换等状态会设置. */  
</span><span class='line'>bool            qs_pending;     /* 对于当前执行的宽限期，该CPU是否执行完成. */  
</span><span class='line'>bool            beenonline;     /* CPU是否在线，不在线的CPU需要特殊处理，以提高性能*/  
</span><span class='line'>bool            preemptible;    /* 是否抢占式RCU? */  
</span><span class='line'>struct rcu_node *mynode;        /* 这个CPU对应的 rcu_node */  
</span><span class='line'>unsigned long grpmask;          /* 占用1bit，对应与所属的rcu_node. */  
</span><span class='line'>#ifdef CONFIG_RCU_CPU_STALL_INFO  
</span><span class='line'>unsigned long   ticks_this_gp;  /* The number of scheduling-clock */  
</span><span class='line'>                                /*  ticks this CPU has handled */  
</span><span class='line'>                                /*  during and after the last grace */  
</span><span class='line'>                                /* period it is aware of. */  
</span><span class='line'>#endif /* #ifdef CONFIG_RCU_CPU_STALL_INFO */  
</span><span class='line'>/* 2) 批处理*/  
</span><span class='line'>/* 
</span><span class='line'> * 
</span><span class='line'> * 当nxtlist不为空的时候，会通过nxttail划分为以下几部分 
</span><span class='line'> * 每一个部分为空的时候，它的指针会被设置成与它的下一部分相同 
</span><span class='line'> * 当nxtlist为空的时候，所有的nxttail都会指向nxtlist的地址，这时候nxtlist指向NULL 
</span><span class='line'> * 
</span><span class='line'> * [nxtlist, *nxttail[RCU_DONE_TAIL]): 
</span><span class='line'> *    批处理的开始节点# &lt;= -&gt;completed 
</span><span class='line'> *    这些节点的宽限期已经完成，可以执行销毁操作。 
</span><span class='line'> *    当调用rcu_process_callbacks()的时候，下一批完成宽限期的节点也会放到这儿. 
</span><span class='line'> * [*nxttail[RCU_DONE_TAIL], *nxttail[RCU_WAIT_TAIL]): 
</span><span class='line'> *    批处理的开始节点 # &lt;= -&gt;completed - 1: 等待当前的批处理完成 
</span><span class='line'> * [*nxttail[RCU_WAIT_TAIL], *nxttail[RCU_NEXT_READY_TAIL]): 
</span><span class='line'> *    已知的当下次宽限期开始，可以开始等待的节点。 
</span><span class='line'> * [*nxttail[RCU_NEXT_READY_TAIL], *nxttail[RCU_NEXT_TAIL]): 
</span><span class='line'> *    当前不确定下次宽限期开始后，是否可以开始等待状态的节点。 
</span><span class='line'> *    *nxttail[RCU_NEXT_TAIL] 的值将永远是NULL， 
</span><span class='line'> *    它表示nxtlist的结束. 
</span><span class='line'> * 
</span><span class='line'> */  
</span><span class='line'>struct rcu_head *nxtlist;  
</span><span class='line'>struct rcu_head **nxttail[RCU_NEXT_SIZE];  
</span><span class='line'>long            qlen_lazy;      /* # kfree_rcu调用的次数，kfee_rcu等同于call_rcu，只是它不需要销毁的对象提供销毁函数*/  
</span><span class='line'>long            qlen;           /* # 当前需要执行销毁操作的次数，每次call_rcu会加一，执行过后减一*/  
</span><span class='line'>long            qlen_last_fqs_check;  
</span><span class='line'>                                /* 对应与qlen，最后一次执行的次数*/  
</span><span class='line'>unsigned long   n_cbs_invoked;  /* 执行销毁操作的次数. */  
</span><span class='line'>unsigned long   n_cbs_orphaned; /* 统计离线后CPU上剩下的callback函数的个数 */  
</span><span class='line'>unsigned long   n_cbs_adopted;  /* 从离线后的CPU上移出的callback函数的个数 */  
</span><span class='line'>unsigned long   n_force_qs_snap;  
</span><span class='line'>                                /* 其它CPU是否在执行fore_qs? */  
</span><span class='line'>long            blimit;         /* nxtlist保存的上限 */  
</span><span class='line'>
</span><span class='line'>/* 3) 动态时钟,*/  
</span><span class='line'>struct rcu_dynticks *dynticks;  /* 每个CPU都包含一个动态时钟. */  
</span><span class='line'>int dynticks_snap;              /* 用于检测CPU是否在线. */  
</span><span class='line'>
</span><span class='line'>/* 4) 强制执行时候处理的CPU */  
</span><span class='line'>unsigned long dynticks_fqs;     /* 由于进入dynticks idle而被处理的CPU. */  
</span><span class='line'>unsigned long offline_fqs;      /* 由于不在在线被处理的CPU. */  
</span><span class='line'>
</span><span class='line'>/* 5) __rcu_pending() 的统计信息，这些信息都是在记录调用信息的时候使用. */  
</span><span class='line'>unsigned long n_rcu_pending;    /* rcu_pending() 调用次数，自从启动. */  
</span><span class='line'>unsigned long n_rp_qs_pending;  
</span><span class='line'>unsigned long n_rp_report_qs;  
</span><span class='line'>unsigned long n_rp_cb_ready;  
</span><span class='line'>unsigned long n_rp_cpu_needs_gp;  
</span><span class='line'>unsigned long n_rp_gp_completed;  
</span><span class='line'>unsigned long n_rp_gp_started;  
</span><span class='line'>unsigned long n_rp_need_fqs;  
</span><span class='line'>unsigned long n_rp_need_nothing;  
</span><span class='line'>
</span><span class='line'>/* 6) _rcu_barrier() 的回调函数. */  
</span><span class='line'>struct rcu_head barrier_head;  
</span><span class='line'>
</span><span class='line'>int cpu;  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>1，completed ，gpnum ， passed_quiesce_gpnum
</span><span class='line'>
</span><span class='line'>  gpnum表示当前正在运行的宽限期的个数，每当一个宽限期开始的时候，会设置这个值与其父节点相同。passed_quiesce_gpnum为当前CPU通过的宽限期个数，它的值在宽限期开始的时候小于gpnum，当这个CPU经过一个静止状态的时候，会把它设置成gpnum的值，通过对比它与父节点中的gpnum是否相同，可以确定该CPU是否通过了宽限期。passed_quiesce_gpnum只是表示这个CPU通过了宽限期，而completed表示所有的CPU都通过了宽限期，设置该值的同时，可以将nxtlist中等待的回调函数移动到完成队列。
</span><span class='line'>
</span><span class='line'>2，nxtlist 与nxttail
</span><span class='line'>
</span><span class='line'>  nxtlist保存的是指向rcu_head对象，rcu_head的定义如下：        
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct callback_head {
</span><span class='line'>struct callback_head *next;
</span><span class='line'>void (*func)(struct callback_head *head);
</span><span class='line'>};
</span><span class='line'>#define rcu_head callback_head
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_head的结构并不复杂，它包含一个回调函数指针。而next可以把rcu_head连成一个列表。
</span><span class='line'>
</span><span class='line'>![](/images/kernel/2015-06-02-51.png)  
</span><span class='line'>
</span><span class='line'>nxtlist指向一个rcu_head 列表，而nxttail的四个元素是指向指针的指针，它们指向的是rcu_head对象的next。RCU_DONE_TAIL指向的rcu_head对象之前的对象是可以销毁的对象。RCU_WAIT_TAIL指向的正在等待宽限期的元素，RCU_NEXT_READ_TAIL指向的是等待下次宽限期的元素，RCU_NEXT_TAIL指向最后一个元素，这个元素总是指向NULL。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>##### rcu_node
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_node {  
</span><span class='line'>raw_spinlock_t lock;    /* rcu_node的锁，用来保护以下的一些成员*/  
</span><span class='line'>
</span><span class='line'>unsigned long gpnum;    /* 该节点当前的宽限期的数量 */  
</span><span class='line'>                        /* 该值等于或者比父节点的值小1*/  
</span><span class='line'>unsigned long completed; /* 该节点完成的宽限期数量*/  
</span><span class='line'>                         /* 该值等于或者比父节点的值小1*/  
</span><span class='line'>unsigned long qsmask;   /* 标记这个节点对应的所有CPU或者子节点是否完成了当前的宽限期*/  
</span><span class='line'>                        /* 每一个bit对应一个cpu或者一个子节点.*/  
</span><span class='line'>unsigned long expmask;  /* 需要执行 -&gt;blkd_tasks 的元素 */                              
</span><span class='line'>                        /*  (应用于TREE_PREEMPT_RCU). */  
</span><span class='line'>atomic_t wakemask;      /* 需要唤醒kthread的CPU. */  
</span><span class='line'>
</span><span class='line'>unsigned long qsmaskinit;  
</span><span class='line'>                        /* 每个宽限期开始时，用它来初始化qsmask，不存在或者不在线的CPU需要清除. */  
</span><span class='line'>unsigned long grpmask;  /* 对应于父节点中的位置. */  
</span><span class='line'>                        /* 只是用一bit. */  
</span><span class='line'>int     grplo;          /* 该节点代表的CPU或者子节点开始的位置. */  
</span><span class='line'>int     grphi;          /* 该节点代表的CPU或者子节点结束的位置. */  
</span><span class='line'>u8      grpnum;         /* 下一级的CPU或者子节点的个数. */  
</span><span class='line'>u8      level;          /* 跟节点是 0. */  
</span><span class='line'>struct rcu_node *parent;  
</span><span class='line'>struct list_head blkd_tasks;  
</span><span class='line'>                        /* 阻断读关键段的任务列表 */  
</span><span class='line'>                        /*  */  
</span><span class='line'>
</span><span class='line'>struct list_head *gp_tasks;  
</span><span class='line'>                        /* 指向第一个阻断读关键段的任务 */  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>struct list_head *exp_tasks;  
</span><span class='line'>
</span><span class='line'>/*以下为抢先式下加速RCU过程的变量*/
</span><span class='line'>
</span><span class='line'>#ifdef CONFIG_RCU_BOOST  
</span><span class='line'>struct list_head *boost_tasks;  
</span><span class='line'>                        /* Pointer to first task that needs to be */  
</span><span class='line'>                        /*  priority boosted, or NULL if no priority */  
</span><span class='line'>                        /*  boosting is needed for this rcu_node */  
</span><span class='line'>                        /*  structure.  If there are no tasks */  
</span><span class='line'>                        /*  queued on this rcu_node structure that */  
</span><span class='line'>                        /*  are blocking the current grace period, */  
</span><span class='line'>                        /*  there can be no such task. */  
</span><span class='line'>unsigned long boost_time;  
</span><span class='line'>                        /* When to start boosting (jiffies). */  
</span><span class='line'>struct task_struct *boost_kthread_task;  
</span><span class='line'>                        /* kthread that takes care of priority */  
</span><span class='line'>                        /*  boosting for this rcu_node structure. */  
</span><span class='line'>unsigned int boost_kthread_status;  
</span><span class='line'>                        /* State of boost_kthread_task for tracing. */  
</span><span class='line'>unsigned long n_tasks_boosted;  
</span><span class='line'>                        /* Total number of tasks boosted. */  
</span><span class='line'>unsigned long n_exp_boosts;  
</span><span class='line'>                        /* Number of tasks boosted for expedited GP. */  
</span><span class='line'>unsigned long n_normal_boosts;  
</span><span class='line'>                        /* Number of tasks boosted for normal GP. */  
</span><span class='line'>unsigned long n_balk_blkd_tasks;  
</span><span class='line'>                        /* Refused to boost: no blocked tasks. */  
</span><span class='line'>unsigned long n_balk_exp_gp_tasks;  
</span><span class='line'>                        /* Refused to boost: nothing blocking GP. */  
</span><span class='line'>unsigned long n_balk_boost_tasks;  
</span><span class='line'>                        /* Refused to boost: already boosting. */  
</span><span class='line'>unsigned long n_balk_notblocked;  
</span><span class='line'>                        /* Refused to boost: RCU RS CS still running. */  
</span><span class='line'>unsigned long n_balk_notyet;  
</span><span class='line'>                        /* Refused to boost: not yet time. */  
</span><span class='line'>unsigned long n_balk_nos;  
</span><span class='line'>                        /* Refused to boost: not sure why, though. */  
</span><span class='line'>                        /*  This can happen due to race conditions. */  
</span><span class='line'>#endif /* #ifdef CONFIG_RCU_BOOST */  
</span><span class='line'>struct task_struct *node_kthread_task;  
</span><span class='line'>                        /* kthread that takes care of this rcu_node */  
</span><span class='line'>                        /*  structure, for example, awakening the */  
</span><span class='line'>                        /*  per-CPU kthreads as needed. */  
</span><span class='line'>unsigned int node_kthread_status;  
</span><span class='line'>                        /* State of node_kthread_task for tracing. */  
</span><span class='line'>} ____cacheline_internodealigned_in_smp;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>每个rcu_node代表着 一组CPU或者子节点。在非抢占式下，它的结构并不复杂。由于可能有多个CPU对它进行处理，所有进行相应操作的时候，需要lock保护。
</span><span class='line'>
</span><span class='line'>##### rcu_state
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;struct rcu_state {  
</span><span class='line'>struct rcu_node node[NUM_RCU_NODES];    /* 保存了所有的节点. */  
</span><span class='line'>struct rcu_node *level[RCU_NUM_LVLS];   /* 每个层级所指向的节点. */  
</span><span class='line'>u32 levelcnt[MAX_RCU_LVLS + 1];         /* # 每一层的节点数. */  
</span><span class='line'>u8 levelspread[RCU_NUM_LVLS];           /* 每一层的CPU/节点数. */  
</span><span class='line'>struct rcu_data __percpu *rda;          /* 指向rcu_data. */  
</span><span class='line'>void (*call)(struct rcu_head *head,     /* rcu_barrier指向的回调函数. */  
</span><span class='line'>             void (*func)(struct rcu_head *head));  
</span><span class='line'>
</span><span class='line'>/* The following fields are guarded by the root rcu_node's lock. */  
</span><span class='line'>
</span><span class='line'>u8      fqs_state ____cacheline_internodealigned_in_smp;  
</span><span class='line'>                                        /* 调用force_quiescent_state时的状态. */  
</span><span class='line'>u8      fqs_active;                     /* force_quiescent_state() 正在运行*/  
</span><span class='line'>
</span><span class='line'>u8      fqs_need_gp;                    /* 因为 force_quiescent_state() 正在运行*/  
</span><span class='line'>                                        /* 一个CPU需要运行的宽限期被阻止*/  
</span><span class='line'>
</span><span class='line'>u8      boost;                          /* 加速. */  
</span><span class='line'>unsigned long gpnum;                    /* 当前的宽限起数量. */  
</span><span class='line'>unsigned long completed;                /* # 最后一次完成的宽限期数量. */  
</span><span class='line'>
</span><span class='line'>/* 以下的成员被根rcu_node的lock保护. */  
</span><span class='line'>
</span><span class='line'>raw_spinlock_t onofflock;               /* 开始一个新的宽限期的时候，阻止CPU上下线*/  
</span><span class='line'>
</span><span class='line'>struct rcu_head *orphan_nxtlist;        /* 等待宽限期的孤儿回调函数的列表 */  
</span><span class='line'>
</span><span class='line'>struct rcu_head **orphan_nxttail;       /* 以上列表的结尾. */  
</span><span class='line'>struct rcu_head *orphan_donelist;       /* 需要执行的孤儿回调函数列表 */  
</span><span class='line'>
</span><span class='line'>struct rcu_head **orphan_donetail;      /* 以上列表的结尾. */  
</span><span class='line'>long qlen_lazy;                         /* 懒惰回调函数的个数. */  
</span><span class='line'>long qlen;                              /* 总的回调函数的个数. */  
</span><span class='line'>struct task_struct *rcu_barrier_in_progress;  
</span><span class='line'>                                        /* 调用rcu_barrier()的进程, */  
</span><span class='line'>                                        /* 没有的话指向NULL. */  
</span><span class='line'>struct mutex barrier_mutex;             /* 执行barrier需要的互斥锁. */  
</span><span class='line'>atomic_t barrier_cpu_count;             /* # 等待barrier的CPU数 . */  
</span><span class='line'>struct completion barrier_completion;   /* 在barrier结束的时候调用. */  
</span><span class='line'>unsigned long n_barrier_done;           /* 在_rcu_barrier()开始结束处都需要调用++ */  
</span><span class='line'>
</span><span class='line'>raw_spinlock_t fqslock;                 /* 只有一个进程能调用 force_quiescent_state().*/  
</span><span class='line'>
</span><span class='line'>unsigned long jiffies_force_qs;         /* force_quiescent_state()开始的时间 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs;               /* 调用force_quiescent_state()的次数 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs_lh;            /* 因为lock不可用，而退出force_quiescent_state()的次数 */  
</span><span class='line'>
</span><span class='line'>unsigned long n_force_qs_ngp;           /* 因为当前有宽限期执行，而退出force_quiescent_state()的次数*/  
</span><span class='line'>
</span><span class='line'>unsigned long gp_start;                 /* 宽限期开始的时间*/  
</span><span class='line'>
</span><span class='line'>unsigned long jiffies_stall;              
</span><span class='line'>
</span><span class='line'>unsigned long gp_max;                   /*  最长的宽限的jiffie数 */  
</span><span class='line'>
</span><span class='line'>char *name;                             /* 结构的名字. */  
</span><span class='line'>struct list_head flavors;               /* 系统中的rcu_state. */  
</span><span class='line'>};  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_state 保存了所有的node，宽限期的判断只要取出根节点，也就是第一个元素就可以。还有一些初始化要用到的变量。还有孤儿回调函数用于处理离线CPU遗留的信息。剩下还有很多统计信息，这些内容在讲解代码实现的时候再仔细考虑。
</span><span class='line'>
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>### TREE RCU实现之二 —— 主干函数
</span><span class='line'>
</span><span class='line'>RCU的实现集中在以下几个步骤：  
</span><span class='line'>  1， 调用call_rcu，将回调函数增加到列表。  
</span><span class='line'>  2,   开始一个宽限期。  
</span><span class='line'>  3,   每个CPU报告自己的状态，直到最后一个CPU，结束一个宽限期。  
</span><span class='line'>  4， 宽限期结束，每个CPU处理自己的回调函数。  
</span><span class='line'>
</span><span class='line'>#### call_rcu的实现
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),  
</span><span class='line'>   struct rcu_state *rsp, bool lazy)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_data *rdp;  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE((unsigned long)head &amp; 0x3); /* 检测head在内存中是否对齐! */  
</span><span class='line'>debug_rcu_head_queue(head);  
</span><span class='line'>head-&gt;func = func;  
</span><span class='line'>head-&gt;next = NULL;  
</span><span class='line'>
</span><span class='line'>smp_mb(); /* Ensure RCU update seen before callback registry. */  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 这是一个检测宽限期开始或者结束的机会。 
</span><span class='line'> * 当我们看到一个结束的时候，可能还会看到一个开始。 
</span><span class='line'> * 反过来，看到一个开始的时候，不一定能看到一个结束， 
</span><span class='line'> * 因为宽限期结束需要一定时间。 
</span><span class='line'> */  
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>/* 将要增加callback到nxtlist. */  
</span><span class='line'>ACCESS_ONCE(rdp-&gt;qlen)++;  
</span><span class='line'>if (lazy)  
</span><span class='line'>    rdp-&gt;qlen_lazy++;  
</span><span class='line'>else  
</span><span class='line'>    rcu_idle_count_callbacks_posted();  
</span><span class='line'>smp_mb();  /* Count before adding callback for rcu_barrier(). */  
</span><span class='line'>*rdp-&gt;nxttail[RCU_NEXT_TAIL] = head;  
</span><span class='line'>rdp-&gt;nxttail[RCU_NEXT_TAIL] = &amp;head-&gt;next;  
</span><span class='line'>
</span><span class='line'>if (__is_kfree_rcu_offset((unsigned long)func))  
</span><span class='line'>    trace_rcu_kfree_callback(rsp-&gt;name, head, (unsigned long)func,  
</span><span class='line'>                                 rdp-&gt;qlen_lazy, rdp-&gt;qlen);  
</span><span class='line'>else  
</span><span class='line'>    trace_rcu_callback(rsp-&gt;name, head, rdp-&gt;qlen_lazy, rdp-&gt;qlen);  
</span><span class='line'>
</span><span class='line'>/* 去处理rcu_core。 */  
</span><span class='line'>__call_rcu_core(rsp, rdp, head, flags);  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>call_rcu中最主要的工作，就是将回调函数加入到CPU的nxtlist列表。这里用到了指针处理的小技巧，我们来看看。首先看看nxttail的初始化：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void init_callback_list(struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>int i;  
</span><span class='line'>
</span><span class='line'>rdp-&gt;nxtlist = NULL;  
</span><span class='line'>for (i = 0; i &lt; RCU_NEXT_SIZE; i++)  
</span><span class='line'>    rdp-&gt;nxttail[i] = &amp;rdp-&gt;nxtlist;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>我们看到nxttail的全部成员都指向了nxtlist的地址。当nxtlist为空的时候，也是这个情形。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;*rdp-&gt;nxttail[RCU_NEXT_TAIL] = head;       
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;当nxtlist为空的时候， *rdp-&gt;nxttail[RCU_NEXT_TAIL] 得到的其实就是nxtlist，将head的值赋予它。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;rdp-&gt;nxttail[RCU_NEXT_TAIL] = &amp;head-&gt;next;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;之后 RCU_NEXT_TAIL指向 head的next指针。这样当再有一个节点加入的时候，*rdp-&gt;nxttail[RCU_NEXT_TAIL]得到的其实就是前一次加入的head的next指针，它将指向新加入的值。如此，nxtlist就成为了一个链表。或者这样理解，rdp-&gt;nxttail[RCU_NEXT_TAIL] 指向的就是nxtlist中最后一个节点的 next指针。
</span><span class='line'>
</span><span class='line'>除了将回调函数插入，该函数其它代码多为检查代码。而最后要调用`__call_rcu_core`，该函数的功用主要是在回调函数太多或者等待时间过长的状态下，强制执行RCU状态更新。我们暂时不关注。
</span><span class='line'>
</span><span class='line'>开始一个宽限期
</span><span class='line'>
</span><span class='line'>在一个宽限期结束，或者当一个CPU检测到自身有需要一个宽限期的时候会开始一个新的宽限期，开始宽限期的代码如下：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_start_gp(struct rcu_state *rsp, unsigned long flags)  
</span><span class='line'>__releases(rcu_get_root(rsp)-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_data *rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>struct rcu_node *rnp = rcu_get_root(rsp);  
</span><span class='line'>
</span><span class='line'>if (!rcu_scheduler_fully_active ||  
</span><span class='line'>        !cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果scheduler 还没有启动non-idle任务 
</span><span class='line'>     * 或者不需要启动一个新的宽限期则退出。 
</span><span class='line'>     * 需要再次判断cpu_needs_another_gp， 
</span><span class='line'>     * 是因为可能有多个CPU执行这个过程。 
</span><span class='line'>     */  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>if (rsp-&gt;fqs_active) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 这个CPU需要一个宽限期，而force_quiescent_state() 
</span><span class='line'>     * 正在运行，告诉它开始一个。 
</span><span class='line'>     */  
</span><span class='line'>    rsp-&gt;fqs_need_gp = 1;  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 开始一个新的宽限期并且初始化。 */  
</span><span class='line'>rsp-&gt;gpnum++;  
</span><span class='line'>trace_rcu_grace_period(rsp-&gt;name, rsp-&gt;gpnum, "start");  
</span><span class='line'>WARN_ON_ONCE(rsp-&gt;fqs_state == RCU_GP_INIT);  
</span><span class='line'>rsp-&gt;fqs_state = RCU_GP_INIT; /* 阻止 force_quiescent_state。 */  
</span><span class='line'>rsp-&gt;jiffies_force_qs = jiffies + RCU_JIFFIES_TILL_FORCE_QS;  
</span><span class='line'>record_gp_stall_check_time(rsp);  
</span><span class='line'>raw_spin_unlock(&amp;rnp-&gt;lock);  /* leave irqs disabled. */  
</span><span class='line'>
</span><span class='line'>/* 排除CPU的热插拔。*/  
</span><span class='line'>raw_spin_lock(&amp;rsp-&gt;onofflock);  /* irqs already disabled. */  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 从父节点开始以广度优先的方式，遍历所有的节点，设置qsmask的值， 
</span><span class='line'> * 所有在线CPU所在bit都将被设置成1。 
</span><span class='line'> * 通过遍历rsp-&gt;node[]数组就可以达到这个目的。 
</span><span class='line'> * 其它CPU在自己所属的节点还没有被设置前，只有可能访问这个节点， 
</span><span class='line'> * 因为它所作的判断是宽限期还没有开始。 
</span><span class='line'> * 此外，我们排除了CPU热插拔。 
</span><span class='line'> *  
</span><span class='line'> * 直到初始化过程完成之前，这个宽限期不可能完成，因为至少当前的 
</span><span class='line'> * CPU所属的bit将不会被设置。这个是因为我们启动了禁止中断，所以 
</span><span class='line'> * 这个CPU不会调用到宽限期检测代码。 
</span><span class='line'> */  
</span><span class='line'>rcu_for_each_node_breadth_first(rsp, rnp) {  
</span><span class='line'>    raw_spin_lock(&amp;rnp-&gt;lock);      /* irqs already disabled. */  
</span><span class='line'>    rcu_preempt_check_blocked_tasks(rnp);  
</span><span class='line'>    rnp-&gt;qsmask = rnp-&gt;qsmaskinit;  
</span><span class='line'>    rnp-&gt;gpnum = rsp-&gt;gpnum;  
</span><span class='line'>    rnp-&gt;completed = rsp-&gt;completed;  
</span><span class='line'>    if (rnp == rdp-&gt;mynode)  
</span><span class='line'>        rcu_start_gp_per_cpu(rsp, rnp, rdp);  
</span><span class='line'>    rcu_preempt_boost_start_gp(rnp);  
</span><span class='line'>    trace_rcu_grace_period_init(rsp-&gt;name, rnp-&gt;gpnum,  
</span><span class='line'>                        rnp-&gt;level, rnp-&gt;grplo,  
</span><span class='line'>                        rnp-&gt;grphi, rnp-&gt;qsmask);  
</span><span class='line'>    raw_spin_unlock(&amp;rnp-&gt;lock);    /* irqs remain disabled. */  
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>rnp = rcu_get_root(rsp);  
</span><span class='line'>raw_spin_lock(&amp;rnp-&gt;lock);              /* irqs already disabled. */  
</span><span class='line'>rsp-&gt;fqs_state = RCU_SIGNAL_INIT; /* force_quiescent_state now OK. */  
</span><span class='line'>raw_spin_unlock(&amp;rnp-&gt;lock);            /* irqs remain disabled. */  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rsp-&gt;onofflock, flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>标记一个新的宽限期开始，rcu_state要做的就是将gp_num加1。然后再设置所有node，qsmask被设置成qsmasinit，qsmask每个bit代表一个CPU，所有在线的CPU都将被设置成1；gpnum将被设置成新值。嗯，一个新宽限期的开始只需要设置这些标记位。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#### CPU的宽限期检测
</span><span class='line'>
</span><span class='line'>当一个宽限期开始后，每个CPU都需要检测自己的状态，如果已经通过静止状态，那么就向上一级node进行报告。
</span><span class='line'>
</span><span class='line'>这个处理过程，可以分为两个步骤：  
</span><span class='line'>  1， 检测新的处理过程开始，设置rcu_data中的gpnum和passed_quiesce，另外用qs_pending标记一个待处理的新宽限期的开始。  
</span><span class='line'>  2， 一个静止状态结束，向上一级node报告这个过程。  
</span><span class='line'>
</span><span class='line'>这两个过程通过rcu_check_quiescent_state()来实现，需要注意的是这个函数隔一段时间调用一次，并不只调用一次。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/* 
</span><span class='line'>* 检测这个CPU是否还不知道一个新宽限期开始，如果是设置它的变量。 
</span><span class='line'>* 否则检查它是不是第一次通过静止状态，如果是，向上报告。 
</span><span class='line'>*/  
</span><span class='line'>static void  
</span><span class='line'>rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>/* 如果有新的宽限期开始，记录它并返回。*/  
</span><span class='line'>if (check_for_new_grace_period(rsp, rdp))  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 这个CPU是否已经处理过它的宽限期?如果是返回。 
</span><span class='line'> */  
</span><span class='line'>if (!rdp-&gt;qs_pending)  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 是否通过了静止状态？如果没有，返回。 
</span><span class='line'> */  
</span><span class='line'>if (!rdp-&gt;passed_quiesce)  
</span><span class='line'>    return;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 向所属的node报告。(但rcu_report_qs_rdp() 仍然会去判断它)。 
</span><span class='line'> */  
</span><span class='line'>rcu_report_qs_rdp(rdp-&gt;cpu, rsp, rdp, rdp-&gt;passed_quiesce_gpnum);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code class=""&gt;
</span><span class='line'>###### A， CPU检测新宽限期的开始
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;/*  
</span><span class='line'> * 为当前CPU，更新rcu_data的状态，去标记一个新宽限期的开始 
</span><span class='line'> * 如果当前CPU启动了一个宽限期或者检测到一个新的宽限期开始， 
</span><span class='line'> * 都需要调用这个函数。这个过程必须锁定父节点的lock，另外需 
</span><span class='line'> * 要禁止中断 
</span><span class='line'> */  
</span><span class='line'>static void __note_new_gpnum(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>if (rdp-&gt;gpnum != rnp-&gt;gpnum) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果当前的宽限期需要处理这个CPU的状态，设置并 
</span><span class='line'>     * 去检测它的静止状态。否则不要去管它。 
</span><span class='line'>     */          
</span><span class='line'>    rdp-&gt;gpnum = rnp-&gt;gpnum;  
</span><span class='line'>    trace_rcu_grace_period(rsp-&gt;name, rdp-&gt;gpnum, "cpustart");  
</span><span class='line'>    if (rnp-&gt;qsmask &amp; rdp-&gt;grpmask) {  
</span><span class='line'>        rdp-&gt;qs_pending = 1;  
</span><span class='line'>        rdp-&gt;passed_quiesce = 0;  
</span><span class='line'>    } else {  
</span><span class='line'>        rdp-&gt;qs_pending = 0;  
</span><span class='line'>    }  
</span><span class='line'>    zero_cpu_stall_ticks(rdp);  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>static void note_new_gpnum(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>if (rdp-&gt;gpnum == ACCESS_ONCE(rnp-&gt;gpnum) || /* outside lock. */  
</span><span class='line'>        !raw_spin_trylock(&amp;rnp-&gt;lock)) { /* irqs already off, so later. */  
</span><span class='line'>    local_irq_restore(flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>__note_new_gpnum(rsp, rnp, rdp);  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 在我们的上次检测之后，其它CPU启动了一个新的宽限期？ 
</span><span class='line'> * 如果是更新相应的rcu_data的状态。 
</span><span class='line'> * 必须是在rdp对应的CPU上执行。 
</span><span class='line'> */  
</span><span class='line'>static int  
</span><span class='line'>check_for_new_grace_period(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>int ret = 0;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>if (rdp-&gt;gpnum != rsp-&gt;gpnum) {  
</span><span class='line'>    note_new_gpnum(rsp, rdp);  
</span><span class='line'>    ret = 1;  
</span><span class='line'>}  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>return ret;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>check_for_new_grace_period 和 note_new_gpnum分别用来检测rdp的gpnum与rsp已经对应的rnp的值是否相同，来确定是否有一个新的宽限期开始。之所以需要检测两次，是因为在rsp设置以后，rnp可能并没有设置完成。
</span><span class='line'>
</span><span class='line'>`__note_new_gpnum` 将设置gpnum的值。另外设置 qs_pending为1，该标记位代表该节点还没有向父节点报告自己的状态；passed_quiesce为0，表示需要一个静止状态，设置该位是因为下次调用rcu_check_quiescent_state()可能是在一个读过程还没有结束的时候。
</span><span class='line'>
</span><span class='line'>qs_pending的状态有可能为0，这只在以下情形下出现：当前CPU在宽限期开始的时候实在离线状态，而现在变成了在线。
</span><span class='line'>
</span><span class='line'>我们注意到在 check_for_new_grace_period检测到有新的宽限期开始后，rcu_check_quiescent_state将直接返回，因为这个宽限期可能是在该CPU的上一个静止状态之前已经开始，所以需要等待下一个静止状态。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###### B，CPU报告静止状态
</span><span class='line'>
</span><span class='line'>当再一次调用到rcu_check_quiescent_state()的时候，check_for_new_grace_period()将返回FALSE，接着运行后面的函数来判断 qs_pending 和 passed_quiesce 的值来决定是否调用rcu_report_qs_rdp。需要判断qs_peding是因为当这次rcu_report_qs_rdp调用成功的时候，下次再运行rcu_check_quiescent_state()则不需要继续运行后续函数。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_report_qs_rdp(int cpu, struct rcu_state *rsp, struct rcu_data *rdp, long lastgp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>unsigned long mask;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>raw_spin_lock_irqsave(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>if (lastgp != rnp-&gt;gpnum || rnp-&gt;completed == rnp-&gt;gpnum) {  
</span><span class='line'>    /* 
</span><span class='line'>     * 如果宽限期的处理已经完成，那么返回。 
</span><span class='line'>     */          
</span><span class='line'>    rdp-&gt;passed_quiesce = 0; /* need qs for new gp. */  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>mask = rdp-&gt;grpmask;  
</span><span class='line'>if ((rnp-&gt;qsmask &amp; mask) == 0) {  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>} else {  
</span><span class='line'>    rdp-&gt;qs_pending = 0;  
</span><span class='line'>    /* 
</span><span class='line'>     *  可以确定这个宽限期还没有结束，所以可以确定当前CPU上的 
</span><span class='line'>     *  所有回调函数可以在下次宽限期结束后处理。 
</span><span class='line'>     */  
</span><span class='line'>    rdp-&gt;nxttail[RCU_NEXT_READY_TAIL] = rdp-&gt;nxttail[RCU_NEXT_TAIL];  
</span><span class='line'>
</span><span class='line'>    rcu_report_qs_rnp(mask, rsp, rnp, flags); /* rlses rnp-&gt;lock */  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;从我看来，这个函数只会调用到最后一个else分支，而之前的连个if分支都不会调用到。因为在调用该函数前，代码已经做了必要的检测。
</span><span class='line'>
</span><span class='line'>以此来看，这个函数的功用就是设置qs_pending的值，阻止这次宽限期没有完成之前再次调用掉该函数；设置nxttail，决定下次宽限期后可以执行的回调函数；然后向父节点报告静止状态完成。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>###### C，向上报告
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_report_qs_rnp(unsigned long mask, struct rcu_state *rsp,  
</span><span class='line'>  struct rcu_node *rnp, unsigned long flags)  
</span><span class='line'>__releases(rnp-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_node *rnp_c;  
</span><span class='line'>
</span><span class='line'>/* 向上遍历所有层级 */  
</span><span class='line'>for (;;) {  
</span><span class='line'>    if (!(rnp-&gt;qsmask &amp; mask)) {  
</span><span class='line'>        /* 这个CPU的标记已经被清除，证明已经处理过了，返回 */  
</span><span class='line'>        raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>        return;  
</span><span class='line'>    }  
</span><span class='line'>    rnp-&gt;qsmask &amp;= ~mask;  
</span><span class='line'>    trace_rcu_quiescent_state_report(rsp-&gt;name, rnp-&gt;gpnum,  
</span><span class='line'>                 mask, rnp-&gt;qsmask, rnp-&gt;level,  
</span><span class='line'>                 rnp-&gt;grplo, rnp-&gt;grphi,  
</span><span class='line'>                 !!rnp-&gt;gp_tasks);  
</span><span class='line'>    if (rnp-&gt;qsmask != 0 || rcu_preempt_blocked_readers_cgp(rnp)) {  
</span><span class='line'>        /* 这个节点中还有其它CPU没有处理完成，那么返回 */  
</span><span class='line'>        raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>        return;  
</span><span class='line'>    }  
</span><span class='line'>    mask = rnp-&gt;grpmask;  
</span><span class='line'>    if (rnp-&gt;parent == NULL) {  
</span><span class='line'>        /* 到这儿，已经到了根节点 */  
</span><span class='line'>        break;  
</span><span class='line'>    }  
</span><span class='line'>    raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    rnp_c = rnp;  
</span><span class='line'>    rnp = rnp-&gt;parent;  
</span><span class='line'>    raw_spin_lock_irqsave(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>    WARN_ON_ONCE(rnp_c-&gt;qsmask);  
</span><span class='line'>}  
</span><span class='line'>/* 
</span><span class='line'> *  程序运行到这儿，说明所有的CPU都通过了宽限期， 
</span><span class='line'> *  那么调用rcu_report_qs_rsp()来结束这个宽限期。 
</span><span class='line'> */   
</span><span class='line'>rcu_report_qs_rsp(rsp, flags); /* releases rnp-&gt;lock. */  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程并不复杂，清理rnp中qsmask对应该CPU的bit。然后判断该节点是否处理完成，如果是则继续向上调用，否则就退出函数。最后一个CPU调用后，可以调用到rcu_report_qs_rsp()。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_report_qs_rsp(struct rcu_state *rsp, unsigned long flags)  
</span><span class='line'>__releases(rcu_get_root(rsp)-&gt;lock)  
</span><span class='line'>{  
</span><span class='line'>unsigned long gp_duration;  
</span><span class='line'>struct rcu_node *rnp = rcu_get_root(rsp);  
</span><span class='line'>struct rcu_data *rdp = this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE(!rcu_gp_in_progress(rsp));  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * Ensure that all grace-period and pre-grace-period activity 
</span><span class='line'> * is seen before the assignment to rsp-&gt;completed. 
</span><span class='line'> */  
</span><span class='line'>smp_mb(); /* See above block comment. */  
</span><span class='line'>gp_duration = jiffies - rsp-&gt;gp_start;  
</span><span class='line'>if (gp_duration &gt; rsp-&gt;gp_max)  
</span><span class='line'>    rsp-&gt;gp_max = gp_duration;  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 当前CPU知道宽限期已经结束，不过其它CPU都认为它还在运行。 
</span><span class='line'> * 由于completed还没有设置，其它CPU都不会对父node进行处理。 
</span><span class='line'> * 所以这时候将各个node标记为完成是安全的。 
</span><span class='line'> *  
</span><span class='line'> * 不过当前CPU有等待下一次宽限期的回调函数的时候，我们会 
</span><span class='line'> * 先去处理下一个宽限期。 
</span><span class='line'> * 这儿使用RCU_WAIT_TAIL代替了RCU_DONE_TAIL，这是因为当前 
</span><span class='line'> * CPU还没有进一步处理完成状态，当前RCU_WAIT_TAIL状态的元 
</span><span class='line'> * 素其实在这次宽限期结束后，已经可以执行了。 
</span><span class='line'> *  
</span><span class='line'> */  
</span><span class='line'>if (*rdp-&gt;nxttail[RCU_WAIT_TAIL] == NULL) {  
</span><span class='line'>    raw_spin_unlock(&amp;rnp-&gt;lock);  /* irqs remain disabled. */  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 设置 rnp-&gt;completed的值，避免这个过程要等到下一次宽限期开始。          
</span><span class='line'>     */  
</span><span class='line'>    rcu_for_each_node_breadth_first(rsp, rnp) {  
</span><span class='line'>        raw_spin_lock(&amp;rnp-&gt;lock); /* irqs already disabled. */  
</span><span class='line'>        rnp-&gt;completed = rsp-&gt;gpnum;  
</span><span class='line'>        raw_spin_unlock(&amp;rnp-&gt;lock); /* irqs remain disabled. */  
</span><span class='line'>    }  
</span><span class='line'>    rnp = rcu_get_root(rsp);  
</span><span class='line'>    raw_spin_lock(&amp;rnp-&gt;lock); /* irqs already disabled. */  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>rsp-&gt;completed = rsp-&gt;gpnum;  /* Declare the grace period complete. */  
</span><span class='line'>trace_rcu_grace_period(rsp-&gt;name, rsp-&gt;completed, "end");  
</span><span class='line'>rsp-&gt;fqs_state = RCU_GP_IDLE;  
</span><span class='line'>rcu_start_gp(rsp, flags);  /* releases root node's rnp-&gt;lock. */  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程最主要的内容就是设置rsp-&gt;completed的值，中间多了对node的处理。因为在rcu_start_gp中也会对node进行处理，当前CPU无法判断其它CPU是否需要一个宽限期，但它自身还有等待宽限期的回调函数的时候，它确定会有一个新的宽限期马上开始，所以忽略这个过程。     
</span><span class='line'>
</span><span class='line'>##### CPU的宽限期结束处理
</span><span class='line'>
</span><span class='line'>这个过程也可以分为两个步骤，第一步是检查宽限期是否结束，第二步是调用已完成的回调函数。
</span><span class='line'>
</span><span class='line'>###### A, CPU检测宽限期的结束
</span><span class='line'>
</span><span class='line'>每个CPU都会定期检查当前的宽限期是否结束，如果结束将处理自身状态已经nxtlist表。rcu_process_gp_end就是用来做这个事情:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>rcu_process_gp_end(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_node *rnp;  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>rnp = rdp-&gt;mynode;  
</span><span class='line'>if (rdp-&gt;completed == ACCESS_ONCE(rnp-&gt;completed) || /* outside lock. */  
</span><span class='line'>        !raw_spin_trylock(&amp;rnp-&gt;lock)) { /* irqs already off, so later. */  
</span><span class='line'>    local_irq_restore(flags);  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>__rcu_process_gp_end(rsp, rnp, rdp);  
</span><span class='line'>raw_spin_unlock_irqrestore(&amp;rnp-&gt;lock, flags);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>当 rdp-&gt;completed与rnp-&gt;completed的值不同的时候，会调用`__rcu_process_gp_end`来完成具体的工作。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__rcu_process_gp_end(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>/* 之前的宽限期是否完成？ */  
</span><span class='line'>if (rdp-&gt;completed != rnp-&gt;completed) {  
</span><span class='line'>
</span><span class='line'>    /* 推进回调函数，即使是NULL指针也没关系。 */  
</span><span class='line'>    rdp-&gt;nxttail[RCU_DONE_TAIL] = rdp-&gt;nxttail[RCU_WAIT_TAIL];  
</span><span class='line'>    rdp-&gt;nxttail[RCU_WAIT_TAIL] = rdp-&gt;nxttail[RCU_NEXT_READY_TAIL];  
</span><span class='line'>    rdp-&gt;nxttail[RCU_NEXT_READY_TAIL] = rdp-&gt;nxttail[RCU_NEXT_TAIL];  
</span><span class='line'>
</span><span class='line'>    /* 更新completed。 */  
</span><span class='line'>    rdp-&gt;completed = rnp-&gt;completed;  
</span><span class='line'>    trace_rcu_grace_period(rsp-&gt;name, rdp-&gt;gpnum, "cpuend");  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果当前的CPU在外部的静止的状态（如离线状态）， 
</span><span class='line'>     * 可能已经错过了其它CPU发起的宽限期。所以需要更 
</span><span class='line'>     * 新gpnum的值，同时要注意不要错过当前正在运行的 
</span><span class='line'>     * 宽限期，所以它的值被设置成与rnp-&gt;completed相同， 
</span><span class='line'>     * 此时rnp-&gt;gpnum 可以已经加1，那么后续的调用 
</span><span class='line'>     * rcu_check_quiescent_state()会去检测新的宽限期。 
</span><span class='line'>     */       
</span><span class='line'>    if (ULONG_CMP_LT(rdp-&gt;gpnum, rdp-&gt;completed))  
</span><span class='line'>        rdp-&gt;gpnum = rdp-&gt;completed;  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果下次的宽限期不需要当前CPU报告静止状态, 
</span><span class='line'>     * 设置qs_pending为0。 
</span><span class='line'>     */  
</span><span class='line'>    if ((rnp-&gt;qsmask &amp; rdp-&gt;grpmask) == 0)  
</span><span class='line'>        rdp-&gt;qs_pending = 0;  
</span><span class='line'>}  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>这个过程的重点是设置nxttail的值，将根据它来进行下一步的处理。
</span><span class='line'>
</span><span class='line'>###### B,回调函数的调用
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_head *next, *list, **tail;  
</span><span class='line'>int bl, count, count_lazy, i;  
</span><span class='line'>
</span><span class='line'>/* 没有回调函数，那么返回。*/  
</span><span class='line'>if (!cpu_has_callbacks_ready_to_invoke(rdp)) {  
</span><span class='line'>    trace_rcu_batch_start(rsp-&gt;name, rdp-&gt;qlen_lazy, rdp-&gt;qlen, 0);  
</span><span class='line'>    trace_rcu_batch_end(rsp-&gt;name, 0, !!ACCESS_ONCE(rdp-&gt;nxtlist),  
</span><span class='line'>            need_resched(), is_idle_task(current),  
</span><span class='line'>            rcu_is_callbacks_kthread());  
</span><span class='line'>    return;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 提取回调函数的list，需要禁用中断，以防止调用call_rcu()。  
</span><span class='line'> */   
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>WARN_ON_ONCE(cpu_is_offline(smp_processor_id()));  
</span><span class='line'>bl = rdp-&gt;blimit;  
</span><span class='line'>trace_rcu_batch_start(rsp-&gt;name, rdp-&gt;qlen_lazy, rdp-&gt;qlen, bl);  
</span><span class='line'>list = rdp-&gt;nxtlist;  
</span><span class='line'>/*  
</span><span class='line'> * 已经将list指向了nxtlist，此时将nxtlist指向 *rdp-&gt;nxttail[RCU_DONE_TAIL]。 
</span><span class='line'> * 由于nxttail指向的是 rcu_head中的next指针的地址，所以此处得到的就是next所 
</span><span class='line'> * 指向的rcu_head对象。 
</span><span class='line'> */  
</span><span class='line'>rdp-&gt;nxtlist = *rdp-&gt;nxttail[RCU_DONE_TAIL];  
</span><span class='line'>/*将*rdp-&gt;nxttail[RCU_DONE_TAIL]指向NULL，也就是将list中的最后一个元素的next设置成NULL*/  
</span><span class='line'>*rdp-&gt;nxttail[RCU_DONE_TAIL] = NULL;  
</span><span class='line'>/*tail指向list最后一个元素的next指针的地址*/  
</span><span class='line'>tail = rdp-&gt;nxttail[RCU_DONE_TAIL];  
</span><span class='line'>/*此时rdp-&gt;nxttail[RCU_DONE_TAIL]指向的内容已经移出，所以让它重新指向nxtlist的地址*/  
</span><span class='line'>for (i = RCU_NEXT_SIZE - 1; i &gt;= 0; i--)  
</span><span class='line'>if (rdp-&gt;nxttail[i] == rdp-&gt;nxttail[RCU_DONE_TAIL])  
</span><span class='line'>    rdp-&gt;nxttail[i] = &amp;rdp-&gt;nxtlist;  
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>
</span><span class='line'>/* 调用回调函数 */  
</span><span class='line'>count = count_lazy = 0;  
</span><span class='line'>while (list) {  
</span><span class='line'>    next = list-&gt;next;  
</span><span class='line'>    prefetch(next);  
</span><span class='line'>    debug_rcu_head_unqueue(list);  
</span><span class='line'>    if (__rcu_reclaim(rsp-&gt;name, list))  
</span><span class='line'>        count_lazy++;  
</span><span class='line'>    list = next;  
</span><span class='line'>    /* 当已经全部运行完毕或者CPU有更重要的事情的时候，退出循环。 */  
</span><span class='line'>    if (++count &gt;= bl &amp;&amp;  
</span><span class='line'>            (need_resched() ||  
</span><span class='line'>            (!is_idle_task(current) &amp;&amp; !rcu_is_callbacks_kthread())))  
</span><span class='line'>        break;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>local_irq_save(flags);  
</span><span class='line'>trace_rcu_batch_end(rsp-&gt;name, count, !!list, need_resched(),  
</span><span class='line'>        is_idle_task(current),  
</span><span class='line'>        rcu_is_callbacks_kthread());  
</span><span class='line'>
</span><span class='line'>/* 更新数量。并将没有执行完的回调函数重新放进列表。 */  
</span><span class='line'>if (list != NULL) {  
</span><span class='line'>*tail = rdp-&gt;nxtlist;  
</span><span class='line'>rdp-&gt;nxtlist = list;  
</span><span class='line'>for (i = 0; i &lt; RCU_NEXT_SIZE; i++)  
</span><span class='line'>    if (&amp;rdp-&gt;nxtlist == rdp-&gt;nxttail[i])  
</span><span class='line'>        rdp-&gt;nxttail[i] = tail;  
</span><span class='line'>    else  
</span><span class='line'>        break;  
</span><span class='line'>}  
</span><span class='line'>smp_mb(); /* 为了 rcu_barrier()统计运行过的回调函数 */  
</span><span class='line'>rdp-&gt;qlen_lazy -= count_lazy;  
</span><span class='line'>ACCESS_ONCE(rdp-&gt;qlen) -= count;  
</span><span class='line'>rdp-&gt;n_cbs_invoked += count;  
</span><span class='line'>
</span><span class='line'>/* Reinstate batch limit if we have worked down the excess. */  
</span><span class='line'>if (rdp-&gt;blimit == LONG_MAX &amp;&amp; rdp-&gt;qlen &lt;= qlowmark)  
</span><span class='line'>    rdp-&gt;blimit = blimit;  
</span><span class='line'>
</span><span class='line'>/* Reset -&gt;qlen_last_fqs_check trigger if enough CBs have drained. */  
</span><span class='line'>if (rdp-&gt;qlen == 0 &amp;&amp; rdp-&gt;qlen_last_fqs_check != 0) {  
</span><span class='line'>    rdp-&gt;qlen_last_fqs_check = 0;  
</span><span class='line'>    rdp-&gt;n_force_qs_snap = rsp-&gt;n_force_qs;  
</span><span class='line'>} else if (rdp-&gt;qlen &lt; rdp-&gt;qlen_last_fqs_check - qhimark)  
</span><span class='line'>    rdp-&gt;qlen_last_fqs_check = rdp-&gt;qlen;  
</span><span class='line'>WARN_ON_ONCE((rdp-&gt;nxtlist == NULL) != (rdp-&gt;qlen == 0));  
</span><span class='line'>
</span><span class='line'>local_irq_restore(flags);  
</span><span class='line'>
</span><span class='line'>/* 如果还有回调函数没有执行，通知再次调用软中断 */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp))  
</span><span class='line'>    invoke_rcu_core();  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_do_batch主要作用是取出nxtlist中，nxttail[RCU_DONE_TAIL]之前的元素，遍历执行它们。这时候销毁过程真正的执行了。这段函数需要仔细想想nxttail的处理。
</span><span class='line'>
</span><span class='line'>到此RCU中涉及到的主干函数介绍完了，但是还需要与进程切换等过程交互。将在下节分析它们。
</span><span class='line'>
</span><span class='line'>-------------
</span><span class='line'>
</span><span class='line'>### TREE RCU实现之三 —— 定期调用 
</span><span class='line'>
</span><span class='line'>上一节，介绍过了RCU实现中用到的主要函数。不过还需要定期的运行这些函数，整个机制才完整。
</span><span class='line'>
</span><span class='line'>RCU的实现是通过在update_process_times() 中调用rcu_check_callbacks()来达到这个目的的。每个CPU都会定期的调用update_process_times()。rcu_check_callbacks()会去检查当前的RCU机制中是否有需要处理的内容，如当前CPU需要开启一个新的宽限期，当前CPU上的宽限期还没有处理完成。如果有需要处理的内容，将触发一个软件中断，真正的操作由软件中断触发的rcu_process_callbacks()来完成。
</span><span class='line'>
</span><span class='line'>#### rcu_check_callbacks
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;void rcu_check_callbacks(int cpu, int user)  
</span><span class='line'>{  
</span><span class='line'>trace_rcu_utilization("Start scheduler-tick");  
</span><span class='line'>increment_cpu_stall_ticks();  
</span><span class='line'>if (user || rcu_is_cpu_rrupt_from_idle()) {  
</span><span class='line'>     /* 
</span><span class='line'>      * 如果是从用户模式或者是idle模式调用该函数， 
</span><span class='line'>      * 那么这个CPU是静止状态。 
</span><span class='line'>      *  
</span><span class='line'>      * 此处不需要内存屏障。因为rcu_sched_qs()和 
</span><span class='line'>      * and rcu_bh_qs()支处理CPU自身的局部变量， 
</span><span class='line'>      * 其它CPU不会访问和修改,至少当CPU在线的时候。 
</span><span class='line'>      *  
</span><span class='line'>      */                  
</span><span class='line'>      rcu_sched_qs(cpu);  
</span><span class='line'>      rcu_bh_qs(cpu);          
</span><span class='line'>} else if (!in_softirq()) {                  
</span><span class='line'>     /* 
</span><span class='line'>      * 运行到这儿，如果不是软件中断。如果当前CPU上运行的 
</span><span class='line'>      * 软中断的读过程，肯定已经完成，所以标记它。 
</span><span class='line'>      * 
</span><span class='line'>      */                 
</span><span class='line'>     rcu_bh_qs(cpu);  
</span><span class='line'>}  
</span><span class='line'>rcu_preempt_check_callbacks(cpu); /*抢先式下的检测*/  
</span><span class='line'>if (rcu_pending(cpu))  
</span><span class='line'>    invoke_rcu_core();  
</span><span class='line'>trace_rcu_utilization("End scheduler-tick");  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>该函数的主要功能是通过 rcu_pending()判断是否当前有需要处理的rcu内容，如果有调用invoke_rcu_core()。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int rcu_pending(int cpu)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>
</span><span class='line'>for_each_rcu_flavor(rsp)  
</span><span class='line'>if (__rcu_pending(rsp, per_cpu_ptr(rsp-&gt;rda, cpu)))  
</span><span class='line'>    return 1;  
</span><span class='line'>return 0;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>rcu_pending会循环所有的rcu_state，在非抢占式模式下，有rcu_sched_state 和rcu_bh_state 两个实例。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static int __rcu_pending(struct rcu_state *rsp, struct rcu_data *rdp)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_node *rnp = rdp-&gt;mynode;  
</span><span class='line'>
</span><span class='line'>rdp-&gt;n_rcu_pending++;  
</span><span class='line'>
</span><span class='line'>/* Check for CPU stalls, if enabled. */  
</span><span class='line'>check_cpu_stall(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/*  是否宽限期在等待这个CPU去完成静止状态呢?  */  
</span><span class='line'>if (rcu_scheduler_fully_active &amp;&amp;  
</span><span class='line'>        rdp-&gt;qs_pending &amp;&amp; !rdp-&gt;passed_quiesce) {  
</span><span class='line'>
</span><span class='line'>    /* 
</span><span class='line'>     * 如果force_quiescent_state() 需要马上执行，而这个CPU 
</span><span class='line'>     * 需要一个静止状态，强制执行本地进程切换。       
</span><span class='line'>     */  
</span><span class='line'>    rdp-&gt;n_rp_qs_pending++;  
</span><span class='line'>    if (!rdp-&gt;preemptible &amp;&amp;  
</span><span class='line'>        ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs) - 1,  
</span><span class='line'>         jiffies))  
</span><span class='line'>    set_need_resched();  
</span><span class='line'>} else if (rdp-&gt;qs_pending &amp;&amp; rdp-&gt;passed_quiesce) {  
</span><span class='line'>    rdp-&gt;n_rp_report_qs++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 这个CPU是否有callbacks等着调用? */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp)) {  
</span><span class='line'>    rdp-&gt;n_rp_cb_ready++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 当前CPU有需要执行的宽限期，而没有其它的宽限期在执行?  */  
</span><span class='line'>if (cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    rdp-&gt;n_rp_cpu_needs_gp++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 另一个CPU上执行的宽限期结束?   */  
</span><span class='line'>if (ACCESS_ONCE(rnp-&gt;completed) != rdp-&gt;completed) { /* outside lock */  
</span><span class='line'>        rdp-&gt;n_rp_gp_completed++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 有新的RCU开始? */  
</span><span class='line'>if (ACCESS_ONCE(rnp-&gt;gpnum) != rdp-&gt;gpnum) { /* outside lock */  
</span><span class='line'>        rdp-&gt;n_rp_gp_started++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 一个宽限期运行了太长时间，需要强制执行? */  
</span><span class='line'>if (rcu_gp_in_progress(rsp) &amp;&amp;  
</span><span class='line'>        ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs), jiffies)) {  
</span><span class='line'>    rdp-&gt;n_rp_need_fqs++;  
</span><span class='line'>    return 1;  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 无事可做 */  
</span><span class='line'>rdp-&gt;n_rp_need_nothing++;  
</span><span class='line'>return 0;  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>`__rcu_pending` 判断了可能存在的各种情形，如果有需要处理的工作的话，就返回1，否则返回0。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void invoke_rcu_core(void)  
</span><span class='line'>{  
</span><span class='line'>raise_softirq(RCU_SOFTIRQ);  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> invoke_rcu_core()的作用是开启软中断。在初始化的时候，系统已经注册了软中断。
</span><span class='line'>
</span><span class='line'>open_softirq(RCU_SOFTIRQ, rcu_process_callbacks);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void rcu_process_callbacks(struct softirq_action *unused)  
</span><span class='line'>{  
</span><span class='line'>struct rcu_state *rsp;  
</span><span class='line'>
</span><span class='line'>trace_rcu_utilization("Start RCU core");  
</span><span class='line'>for_each_rcu_flavor(rsp)  
</span><span class='line'>__rcu_process_callbacks(rsp);  
</span><span class='line'>trace_rcu_utilization("End RCU core");  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;static void  
</span><span class='line'>__rcu_process_callbacks(struct rcu_state *rsp)  
</span><span class='line'>{  
</span><span class='line'>unsigned long flags;  
</span><span class='line'>struct rcu_data *rdp = __this_cpu_ptr(rsp-&gt;rda);  
</span><span class='line'>
</span><span class='line'>WARN_ON_ONCE(rdp-&gt;beenonline == 0);  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 如果一个宽限期运行了很长时间，那么强制静止状态。 
</span><span class='line'> *  
</span><span class='line'> */  
</span><span class='line'>if (ULONG_CMP_LT(ACCESS_ONCE(rsp-&gt;jiffies_force_qs), jiffies))  
</span><span class='line'>    force_quiescent_state(rsp, 1);  
</span><span class='line'>
</span><span class='line'>/* 
</span><span class='line'> * 处理宽限期结束相关内容。 
</span><span class='line'> */  
</span><span class='line'>rcu_process_gp_end(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/* 检测是否有新的宽限期开始或者静止状态需要向上报告。 */  
</span><span class='line'>rcu_check_quiescent_state(rsp, rdp);  
</span><span class='line'>
</span><span class='line'>/* 当前CPU需要新的宽限期吗? */  
</span><span class='line'>if (cpu_needs_another_gp(rsp, rdp)) {  
</span><span class='line'>    raw_spin_lock_irqsave(&amp;rcu_get_root(rsp)-&gt;lock, flags);  
</span><span class='line'>    rcu_start_gp(rsp, flags);  /* releases above lock */  
</span><span class='line'>}  
</span><span class='line'>
</span><span class='line'>/* 如果有等着调用的回调函数，那么调用它。 */  
</span><span class='line'>if (cpu_has_callbacks_ready_to_invoke(rdp))  
</span><span class='line'>    invoke_rcu_callbacks(rsp, rdp);  
</span><span class='line'>}  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;软件中断其实就是调用之前提到过的函数来完成具体的任务。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[Linux kernel 内存屏障在RCU上的应用]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu-apply/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-06-02T17:36:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/06/02/kernel-base-rcu-apply&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;&lt;a href="http://blog.csdn.net/jianchaolv/article/details/7527647"&gt;http://blog.csdn.net/jianchaolv/article/details/7527647&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;内存屏障主要解决的问题是编译器的优化和CPU的乱序执行。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;编译器在优化的时候，生成的汇编指令可能和c语言程序的执行顺序不一样，在需要程序严格按照c语言顺序执行时，需要显式的告诉编译不需要优化，这在linux下是通过barrier()宏完成的，它依靠volidate关键字和memory关键字，前者告诉编译barrier()周围的指令不要被优化，后者作用是告诉编译器汇编代码会使内存里面的值更改，编译器应使用内存里的新值而非寄存器里保存的老值。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;同样，CPU执行会通过乱序以提高性能。汇编里的指令不一定是按照我们看到的顺序执行的。linux中通过mb()系列宏来保证执行的顺序。简单的说，如果在程序某处插入了mb()/rmb()/wmb()宏，则宏之前的程序保证比宏之后的程序先执行，从而实现串行化。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;即使是编译器生成的汇编码有序，处理器也不一定能保证有序。就算编译器生成了有序的汇编码，到了处理器那里也拿不准是不 是会按照代码顺序执行。所以就算编译器保证有序了，程序员也还是要往代码里面加内存屏障才能保证绝对访存有序，这倒不如编译器干脆不管算了，因为内存屏障 本身就是一个sequence point，加入后已经能够保证编译器也有序。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;处理器虽然乱序执行，但最终会得出正确的结果，所以逻辑上讲程序员本不需要关心处理器乱序的问题。但是在SMP并发执行的情况下，处理器无法知道并发程序之间的逻辑，比如，在不同core上的读者和写者之间的逻辑。简单讲，处理器只保证在单个core上按照code中的顺序给出最终结果。这就要求程序员通过mb()/rmb()/wmb()/read_barrier_depends来告知处理器，从而得到正确的并发结果。内存屏障、数据依赖屏障都是为了处理SMP环境下的数据同步问题，UP根本不存在这个问题。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;下面分析下内存屏障在RCU上的应用：</span></code></pre></td></tr></table></div></figure>
    #define rcu_assign_pointer(p, v) ({ \
        smp_wmb();                      \
        (p)= (v);                       \
    })</p>

<pre><code>#define rcu_dereference(p) ({     \
    typeof(p)_________p1 = p;     \
    smp_read_barrier_depends();   \
    (_________p1);                \
}) 
</code></pre>

<pre><code>
rcu_assign_pointer()通常用于写者的发布，rcu_dereference()通常用于读者的订阅。

写者：
</code></pre>

<pre><code>p-&gt;a = 1;
p-&gt;b = 2;
p-&gt;c = 3;
rcu_assign_pointer(gp, p);

// 如果gp的原值马上会被改变/释放,则需要synchronize_rcu()/synchronize_net(),
// 如: 模块的卸载, 原gp指向函数被释放
</code></pre>

<pre><code>
读者：
</code></pre>

<pre><code>rcu_read_lock();
p = rcu_dereference(gp);
if (p != NULL) {
    do_something_with(p-&gt;a, p-&gt;b, p-&gt;c);
}
rcu_read_unlock();
</code></pre>

<pre><code>
rcu_assign_pointer()是说，先把那块内存写好，再把指针指过去。这里使用的内存写屏障是为了保证并发的读者读到数据一致性。在这条语句之前的读者读到旧的指针和旧的内存，这条语句之后的读者读到新的指针和新的内存。如果没有这条语句，很有可能出现读者读到新的指针和旧的内存。也就是说，这里通过内存屏障刷新了p所指向的内存的值，至于gp本身的值有没有更新还不确定。实际上，gp本身值的真正更新要等到并发的读者来促发。

rcu_dereference() 原语用的是数据依赖屏障，smp_read_barrier_dependence,它要求后面的读操作如果依赖前面的读操作，则前面的读操作需要首先完成。根据数据之间的依赖，要读p-&gt;a, p-&gt;b, p-&gt;c, 就必须先读p，要先读p，就必须先读p1，要先读p1，就必须先读gp。也就是说读者所在的core在进行后续的操作之前，gp必须是同步过的当前时刻的最新值。如果没有这个数据依赖屏障，有可能读者所在的core很长一段时间内一直用的是旧的gp值。所以，这里使用数据依赖屏障是为了督促写者将gp值准备好，是为了呼应写者，这个呼应的诉求是通过数据之间的依赖关系来促发的，也就是说到了非呼应不可的地步了。

下面看看kernel中常用的链表操作是如何使用这样的发布、订阅机制的：

写者：
</code></pre>

<pre><code>static inline void list_add_rcu(struct list_head *new, struct list_head *head)
{
    __list_add_rcu(new, head, head-&gt;next);
}

static inline void __list_add_rcu(struct list_head * new,
struct list_head * prev, struct list_head * next)
{
    new-&gt;next = next;
    new-&gt;prev = prev;
    smp_wmb();
    next-&gt;prev = new;
    prev-&gt;next = new;
}
</code></pre>

<pre><code>
读者：
</code></pre>

<pre><code>#define list_for_each_entry_rcu(pos, head, member)                \
    for(pos = list_entry((head)-&gt;next, typeof(*pos), member);     \
            prefetch(rcu_dereference(pos)-&gt;member.next),          \
            &amp;pos-&gt;member!= (head);                                \
        pos= list_entry(pos-&gt;member.next, typeof(*pos), member))
</code></pre>

<pre><code>
写者通过调用list_add_rcu来发布新的节点，其实是发布next-&gt;prev, prev-&gt;next这两个指针。读者通过list_for_each_entry_rcu来订阅这连个指针，我们将list_for_each_entry_rcu订阅部分简化如下：
</code></pre>

<pre><code>pos = prev-&gt;next;
prefetch(rcu_dereference(pos)-&gt;next);
</code></pre>

<pre><code>
读者通过rcu_dereference订阅的是pos，而由于数据依赖关系，又间接订阅了prev-&gt;next指针，或者说是促发prev-&gt;next的更新。

下面介绍下其他相关链表操作的函数：

safe版本的iterate的函数？为什么就safe了？
</code></pre>

<pre><code>#define list_for_each_safe(pos,n, head)                    \
    for(pos = (head)-&gt;next, n = pos-&gt;next; pos != (head);  \
            pos= n, n = pos-&gt;next)

#define list_for_each(pos, head)                                \
    for(pos = (head)-&gt;next; prefetch(pos-&gt;next), pos != (head); \
            pos= pos-&gt;next)
</code></pre>

<pre><code>
当在iterate的过程中执行删除操作的时候，比如：
</code></pre>

<pre><code>list_for_each(pos,head)
    list_del(pos)
</code></pre>

<pre><code>这样会断链，为了避免这种断链，增加了safe版本的iterate函数。另外，由于preftech的缘故，有可能引用一个无效的指针LIST_POISON1。这里的safe是指，为避免有些cpu的preftech的影响，干脆在iterate的过程中去掉preftech。

还有一个既有rcu+safe版本的iterative函数：
</code></pre>

<pre><code>#define list_for_each_safe_rcu(pos, n, head)              \
    for(pos = (head)-&gt;next;                               \
            n= rcu_dereference(pos)-&gt;next, pos != (head); \
            pos= n)
</code></pre>

<p>```</p>

<p>只要用这个版本的iterate函数，就可以和多个_rcu版本的写操作(如：list_add_rcu())并发执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符设备驱动程序]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev/"/>
    <updated>2015-05-21T15:58:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/05/21/kernel-base-chardev</id>
    <content type="html"><![CDATA[<p><a href="http://techlife.blog.51cto.com/212583/39225">http://techlife.blog.51cto.com/212583/39225</a></p>

<p><a href="/blog/2015/05/21/kernel-sched-waitqueue-sample/">简单样例</a></p>

<p>实现如下的功能:<br/>
  -字符设备驱动程序的结构及驱动程序需要实现的系统调用<br/>
  -可以使用cat命令或者自编的readtest命令读出"设备"里的内容<br/>
  -以8139网卡为例，演示了I/O端口和I/O内存的使用</p>

<p>本文中的大部分内容在Linux Device Driver这本书中都可以找到，这本书是Linux驱动开发者的唯一圣经。</p>

<hr />

<p>先来看看整个驱动程序的入口，是char8139_init()这个函数，如果不指定MODULE_LICENSE(&ldquo;GPL&rdquo;), 在模块插入内核的时候会出错，因为将非"GPL"的模块插入内核就沾污了内核的"GPL"属性。
```
    module_init(char8139_init);
    module_exit(char8139_exit);</p>

<pre><code>MODULE_LICENSE("GPL");
MODULE_AUTHOR("ypixunil");
MODULE_DESCRIPTION("Wierd char device driver for Realtek 8139 NIC");
</code></pre>

<pre><code>
接着往下看char8139_init()
</code></pre>

<pre><code>static int __init char8139_init(void)
{
    int result;

    PDBG("hello. init.\n");

    /* register our char device */
    result = register_chrdev(char8139_major, "char8139", &amp;char8139_fops);
    if (result &lt; 0) {
        PDBG("Cannot allocate major device number!\n");
        return result;
    }
    /* register_chrdev() will assign a major device number and return if it called
     * with "major" parameter set to 0 */
    if(char8139_major == 0)
        char8139_major=result;

    /* allocate some kernel memory we need */
    buffer = (unsigned char*)(kmalloc(CHAR8139_BUFFER_SIZE, GFP_KERNEL));
    if (!buffer) {
        PDBG("Cannot allocate memory!\n");
        result = -ENOMEM;
        goto init_fail;
    }
    memset(buffer, 0, CHAR8139_BUFFER_SIZE);
    p_buf = buffer;

    return 0; /* everything's ok */

init_fail:
    char8139_exit();
    return result;
}
</code></pre>

<pre><code>
这个函数首先的工作就是使用register_chrdev()注册我们的设备的主设备号和系统调用。系统调用对于字符设备驱动程序来说就是file_operations接口。

我们先来看看char8139_major的定义，
</code></pre>

<pre><code>#define DEFAULT_MAJOR 145         /* data structure used by our driver */
int char8139_major=DEFAULT_MAJOR; /* major device number. if initial value is 0,
                   * the kernel will dynamically assign a major device
                   * number in register_chrdev() */
</code></pre>

<pre><code>
这里我们指定我们的设备的主设备号是145,你必须找到一个系统中没有用的主设备号，可以通过"cat /proc/devices"命令来查看系统中已经使用的主设备号。
</code></pre>

<pre><code>[michael@char8139]$ cat /proc/devices
Character devices:
1 mem
2 pty
3 ttyp
4 ttyS
5 cua
7 vcs
10 misc
14 sound
116 alsa
128 ptm
136 pts
162 raw
180 usb
195 nvidia
226 drm

Block devices:
2 fd
3 ide0
22 ide1
[michael@char8139]$
</code></pre>

<pre><code>
可见在我的系统中，145还没有被使用。

指定主设备号值得考虑。像上面这样指定一个主设备号显然缺乏灵活性，而且不能保证一个驱动程序在所有的机器上都能用。可以在调用register_chrdev()时将第一个参数，即主设备号指定为0,这样register_chrdev()会分配一个空闲的主设备号作为返回值。 但是这样也有问题，我们只有在将模块插入内核之后才能得到我们设备的主设备号(使用 "cat /proc/devices")，但是要操作设备需要在系统/dev目录下建立设备结点，而建立结点时要指定主设备号。当然，你可以写一个脚本来自动完成这些事情。

总之，作为一个演示，我们还是指定主设备号为145，这样我们可以在/dev/目录下建立几个设备节点。
</code></pre>

<pre><code>[root@char8139]$ mknod /dev/char8139_0 c 145 0
[root@char8139]$ mknod /dev/char8139_0 c 145 17
[root@char8139]$ mknod /dev/char8139_0 c 145 36
[root@char8139]$ mknod /dev/char8139_0 c 145 145
</code></pre>

<pre><code>
看一下我们建立的节点
</code></pre>

<pre><code>[michael@char8139]$ ll /dev/char8139*
crw-r--r-- 1 root root 145, 0 2004-12-26 20:33 /dev/char8139_0
crw-r--r-- 1 root root 145, 17 2004-12-26 20:34 /dev/char8139_1
crw-r--r-- 1 root root 145, 36 2004-12-26 20:34 /dev/char8139_2
crw-r--r-- 1 root root 145, 145 2004-12-26 20:34 /dev/char8139_3
[michael@char8139]$
</code></pre>

<pre><code>
我们建立了四个节点，使用了四个次设备号，后面我们会说明次设备号的作用。


再来看看我们的file_operations的定义。这里其实只实现了read()，open()，release()三个系统调用，ioctl()只是简单返回。更有write()等函数甚至根本没有声明，没有声明的函数系统可能会调用默认的操作。
</code></pre>

<pre><code>struct file_operations char8139_fops =
{
    owner: THIS_MODULE,
    read: char8139_read,
    ioctl: char8139_ioctl,
    open: char8139_open,
    release: char8139_release,
};
</code></pre>

<pre><code>
file_operations是每个字符设备驱动程序必须实现的系统调用，当用户对/dev中我们的设备对应结点进行操作时，linux就会调用我们驱动程序中提供的系统调用。比如用户敲入"cat /dev/char8139_0"命令，想想cat这个应用程序的实现，首先它肯定调用C语言库里的open()函数去打开/dev/char8139_0这个文件，到了系统这一层，系统会看到/dev/char8139_0不是普通磁盘文件，而是一个代表字符设备的节点，所以系统会根据/dev/char8139_0的主设备号来查找是不是已经有驱动程序使用这个相同的主设备号进行了注册，如果有，就调用驱动程序的open()实现。

为什么要这样干？因为要提供抽象，提供统一的接口，别忘了操作系统的作用之一就是这个。因为我们的设备提供的统一的接口，所以cat这个应用程序使用一般的文件操作就能从我们的设备中读出数据，
而且more, less这些应用程序都能从我们的设备中读出数据。

现在来看看我们的设备
</code></pre>

<pre><code>#define CHAR8139_BUFFER_SIZE 2000
unsigned char *buffer=NULL; /* driver data buffer */
unsigned char *p_buf;
unsigned int data_size=0;
</code></pre>

<pre><code>我们的设备很简单，一个2000字节的缓冲区， data_size指定缓冲区中有效数据的字节数。我们的设备只支持读不支持写。我们在char8139_init()中为缓冲区分配空间。

char8139_exit()里面的操作就是char8139_init()里面操作的反向操作。

现在我们来看看，假如用户调用了"cat /dev/char8139_3"这个命令会发生什么事情。

根据前面的介绍，我们驱动程序中的open()函数会被调用。
</code></pre>

<pre><code>int char8139_open(struct inode *node, struct file *flip)
{
    int type = MINOR(node-&gt;i_rdev)&gt;&gt;4;
    int num = MINOR(node-&gt;i_rdev) &amp; 0x0F;

    /* put some char in buffer to reflect the minor device number */
    *buffer=(unsigned char)('0');
    *(buffer+1)=(unsigned char)('x');
    *(buffer+2)=(unsigned char)('0'+type);
    *(buffer+3)=(unsigned char)('0'+num);
    *(buffer+4)=(unsigned char)('\n');
    data_size+=5;

    PDBG("Ok. Find treasure! 8139 I/O port base: %x\n", detect_8139_io_port());
    PDBG("OK. Find treasure! 8139 I/O memory base address: %lx\n",
    detect_8139_io_mem());

    MOD_INC_USE_COUNT;

    return 0;
}
</code></pre>

<pre><code>
这里演示了次设备号的作用，它让我们知道用户操作的是哪一个"次设备"，是/dev/char8139_0还是/dev/char8139_3，因为对不同的"次设备"，具体的操作方法可能是不一样的，这样就为一个驱动程序控制多个类似的设备提供了可能。

我们根据次设备号的不同，在buffer中填入不同的字符(次设备号的16进制表示)。

接着驱动程序中的read()函数会被调用，因为cat程序的实现就是读取文件中的内容。
</code></pre>

<pre><code>ssize_t char8139_read (struct file *filp, char *buf, size_t count, loff_t *f_pos)
{
    ssize_t ret=0;

    PDBG("copy to user. count=%d, f_pos=%ld\n", (int)count, (long)*f_pos);
    if (*f_pos&gt;= data_size)
        return ret;
    if (*f_pos + count &gt; data_size)
        count = data_size-*f_pos;
    if (copy_to_user(buf, p_buf, count))
    {
        PDBG("OOps, copy to user error.\n");
        return -EFAULT;
    }

    p_buf += count;
    *f_pos += count;
    ret = count;

    return ret;
}
</code></pre>

<p>```</p>

<p>要正确的实现一个read()调用，你得想一想一个应用程序是如何调用read()从文件中读取数据的。如果你想明白了就很简单，驱动程序所要做的就是把恰当的数据传递给应用程序，这是使用copy_to_user()函数完成的。</p>

<p>另外，我们必须得意识到，这里只是一个很简单的演示。还有很多复杂的问题有待考虑，比如两个应用程序可能同时打开我们设备，我们的设备应该怎样反应(这取决于具体的设备应有的行为)，还有互斥的问题。</p>

<p>然后我们看看I/O端口和I/O内存的操作。这里使用8139网卡作为一个硬件实例来演示I/O端口和I/O内存的操作。没有什么特别的，都是标准的步骤。在使用时需要注意，如果你的系统中已经有8139网卡的驱动程序，必须先关掉网络设备，卸载驱动，然后再使用本驱动程序。</p>

<p>使用程序包的步骤：(在我的Debian系统上如此，你的可能不同)<br/>
1. 解压<br/>
2. 编译(/usr/src/linux处必须要有内核源代码)<br/>
3. ifconfig eth0 down 关掉网络设备<br/>
rmmod 8139too 卸载原来的8139网卡驱动<br/>
insmod char8139.o 插入我们的模块<br/>
(insmod会出错， 如果你现在运行的linux版本不是你编译本驱动程序时使用的内核源代码的版本，insmod时会报告模块版本与内核版本不一致。这时，你得看看内核源代码中/include/linux/version.h文件，这个文件中的UTS_RELEASE定义了内核的版本号，你可以在驱动程序中预先定义这个宏为当前运行的内核的版本号，这样就能避免上述错误。)<br/>
4. mknode(见本文前述)<br/>
5. 试试我们的设备<br/>
./readtest<br/>
或者<br/>
cat /dev/char8139_0或<br/>
cat /dev/char8139_1或<br/>
cat /dev/char8139_2或<br/>
cat /dev/char8139_3<br/>
6. 恢复系统<br/>
rmmod char8139<br/>
modprobe 8139too<br/>
ifconfig eth0 up<br/>
如果你使用dhcp可能还需要运行dhclient</p>
]]></content>
  </entry>
  
</feed>
