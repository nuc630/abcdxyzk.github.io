<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 2014~06 | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/2014~06/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-09-30T16:01:54+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TopCoder Marathon 怎么做]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/06/27/alg-tc-2/"/>
    <updated>2014-06-27T17:06:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/06/27/alg-tc-2</id>
    <content type="html"><![CDATA[<h5>和srm一样写个类和函数即可。</h5>

<p>以这题为例： <a href="http://community.topcoder.com/longcontest/?module=ViewProblemStatement&amp;rd=15683&amp;pm=12593">http://community.topcoder.com/longcontest/?module=ViewProblemStatement&amp;rd=15683&amp;pm=12593</a></p>

<h4>要求：</h4>

<pre><code>Definition

Class:  CirclesSeparation
Method: minimumWork
Parameters: double[], double[], double[], double[]
Returns:    double[]
Method signature:   double[] minimumWork(double[] x, double[] y, double[] r, double[] m)
(be sure your method is public)
</code></pre>

<h5>可以写个很简单的：</h5>

<pre><code>import java.util.*;
import java.io.*;
import java.math.*;
public class CirclesSeparation {
    int N, now;
    double ox[] = new double[1000], oy[] = new double[1000];
    double x[] = new double[1000], y[] = new double[1000];
    double r[] = new double[1000], m[] = new double[1000];
    boolean touch(int i,int j)
    {
        double dis = (x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]);
        if (dis &gt; (r[i]+r[j]) * (r[i]+r[j])) {
            return false;
        }
        return true;
    }
    void dfsMove(int ok, int j)
    {
        double px = x[j] - x[ok];
        double py = y[j] - y[ok];
        double dis = Math.sqrt((x[j]-x[ok])*(x[j]-x[ok]) + (y[j]-y[ok])*(y[j]-y[ok]));
        double dd = r[ok] + r[j] - dis + 0.001;
        x[j] += dd * px / dis;
        y[j] += dd * py / dis;
        //System.out.println(x[j] + "\t" + y[j]);
        int i;
        for (i=0;i&lt;=now;i++) {
            if (i != j &amp;&amp; touch(i, j)) {
                dfsMove(j, i);
            }
        }
    }
    public double[] minimumWork(double[] ix, double[] iy, double[] ir, double[] im) {
        int i,j,k,l;
        N = ix.length;
        for (i=0;i&lt;N;i++) {
            ox[i] = ix[i];
            oy[i] = iy[i];
            x[i] = ix[i];
            y[i] = iy[i];
            r[i] = ir[i];
            m[i] = im[i];
        }
        for (i=1;i&lt;N;i++)
        {
            now = i;
            for (j=0;j&lt;i;j++) {
                if (!touch(i, j)) continue;
                dfsMove(i, j);
            }
        }
        double ret[] = new double[N+N];
        for (i=0;i&lt;N;i++) {
            ret[i+i] = x[i];
            ret[i+i+1] = y[i];
        }
        return ret;
    }
}
</code></pre>

<p>按照格式写，然后返回结果就可以。这是最基本的。</p>

<h4>其实我们可以用他提供的工具先做调试</h4>

<p>一般每题会有available.这样一个链接， <br/>
进去后</p>

<h5>1、先下载页面顶上 CirclesSeparationVis.jar 和 一些其他的东西(如果有)</h5>

<h5>2、在这行In other words, you should implement the following pseudocode in the main method of your solution:的后面会给出一些输入输出步骤，把他们翻译成对应语言的输入输出，并且把他们写在主函数中，像这题的：</h5>

<pre><code>    N = parseInt(readLine())
    for (i=0; i &lt; N; i++)
        x[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        y[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        r[i] = parseDouble(readLine())
    for (i=0; i &lt; N; i++)
        m[i] = parseDouble(readLine())
    ret = minimumWork(x, y, r, m)
    for (i=0; i &lt; 2*N; i++)
        printLine(ret[i])
    flush(stdout)
</code></pre>

<p>翻译成java的是：
<code>
    public static void main(String[] args) {
        Scanner cin = new Scanner(System.in);
        double x[], y[], r[], m[], ret[];
        int N, i;
        N = cin.nextInt();
        x = new double[N];
        y = new double[N];
        r = new double[N];
        m = new double[N];
        for (i=0;i&lt;N;i++) x[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) y[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) r[i] = cin.nextDouble();
        for (i=0;i&lt;N;i++) m[i] = cin.nextDouble();
        CirclesSeparation rrr = new CirclesSeparation();
        ret = rrr.minimumWork(x, y, r, m);
        for (i=0;i&lt;N+N;i++) {
            System.out.println(ret[i]);
        }
    }
</code>
把这个函数加到最基本的当中，这样一个就形成一个完整的可执行程序，编译它生成对应目标代码。
<code>
$ javac CirclesSeparation.java
</code></p>

<h5>3、再往下可以找到一句类似于：</h5>

<pre><code>java -jar CirclesSeparationVis.jar -exec "&lt;command&gt;"
</code></pre>

<p>的语句。
<code>
java 的&lt;command&gt;是 java CirclesSeparation
</code>
所以运行:
<code>
java -jar CirclesSeparationVis.jar -exec "java CirclesSeparation"
</code>
就可以看到结果了。</p>

<p>可以用 -seed=X 来选择第几组样例，可以用 -novis 来关闭图形显示</p>

<h5>4、当用这个工具的时候System.out.println()的输出会被工具截获，要输出调试信息可以用System.err.println()</h5>

<h5>5、有时候需要改CirclesSeparationVis.jar代码，以满足我们的调试需求。可以下载CirclesSeparationVis.java，然后javac编译之，在使用的时候改用：</h5>

<pre><code>java CirclesSeparationVis -exec "java CirclesSeparation"
</code></pre>

<h5>6、用long t=System.currentTimeMillis()统计时间，是千分之一秒</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[abrt 应用程序core dump]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/06/18/debug-abrt/"/>
    <updated>2014-06-18T16:26:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/06/18/debug-abrt</id>
    <content type="html"><![CDATA[<h4>一、安装</h4>

<pre><code>yum install abrt
</code></pre>

<h4>二、设置</h4>

<pre><code>ulimit -c
ulimit -c unlimited
</code></pre>

<h4>三、常见错误</h4>

<pre><code>1、ERROR
$ tail -f /var/log/message
abrtd: Package 'XXX' isn't signed with proper key

$ vim /etc/abrt/abrt.conf
OR
$ vim /etc/abrt/abrt-action-save-package-data.conf
OpenGPGCheck = no

2、ERROR
tail -f /var/log/message
abrtd: Duplicate: UUID

Whenever a problem is detected, ABRT compares it with all 
existing problem data and determines whether that same problem 
has been recorded. If it has been, the existing problem data 
is updated and the most recent (duplicate) problem is not recorded again.

3、
ProcessUnpackaged = &lt;yes/no&gt;
This directive tells ABRT whether to process crashes 
in executables that do not belong to any package.   
</code></pre>

<hr />

<h4>abrt</h4>

<p><a href="http://docs.fedoraproject.org/en-US/Fedora/14/html/Deployment_Guide/configuring.html  ">http://docs.fedoraproject.org/en-US/Fedora/14/html/Deployment_Guide/configuring.html  </a>
<a href="https://fedorahosted.org/releases/a/b/abrt/Deployment_Guide.html">https://fedorahosted.org/releases/a/b/abrt/Deployment_Guide.html</a></p>

<pre><code>21.6. Configuring ABRT

ABRT's main configuration file is /etc/abrt/abrt.conf. 
ABRT plugins can be configured through their config files, 
located in the /etc/abrt/plugins/ directory.

After changing and saving the abrt.conf configuration file, 
you must restart the abrtd daemon—as root—for the new settings to take effect:

~]# service abrtd restart

The following configuration directives are currently supported in /etc/abrt/abrt.conf.

[ Common ] Section DirectivesOpenGPGCheck = &lt;yes/no&gt;

Setting the OpenGPGCheck directive to yes (the default setting) tells 
ABRT to only analyze and handle crashes in applications provided by 
packages which are signed by the GPG keys whose locations are listed 
in the /etc/abrt/gpg_keys file. Setting OpenGPGCheck to no tells 
ABRT to catch crashes in all programs.

BlackList = nspluginwrapper, valgrind, strace, avant-window-navigator, [&lt;additional_packages&gt; ]

Crashes in packages and binaries listed after the BlackList directive 
will not be handled by ABRT. If you want ABRT to ignore other packages 
and binaries, list them here separated by commas.

ProcessUnpackaged = &lt;yes/no&gt;

This directive tells ABRT whether to process crashes in executables 
that do not belong to any package.  

BlackListedPaths = /usr/share/doc/*, */example*

Crashes in executables in these paths will be ignored by ABRT.

Database = SQLite3

This directive instructs ABRT to store its crash data in the SQLite3 database. 
Other databases are not currently supported. However, 
ABRT's plugin architecture allows for future support for alternative databases.

#WatchCrashdumpArchiveDir = /var/spool/abrt-upload/

This directive is commented out by default. 
Enable (uncomment) it if you want abrtd to auto-unpack crashdump tarballs 
which appear in the specified directory — in this case /var/spool/abrt-upload/ — 
(for example, uploaded via ftp, scp, etc.). You must ensure that whatever 
directory you specify in this directive exists and is writable for abrtd. 
abrtd will not create it automatically.

MaxCrashReportsSize = &lt;size_in_megabytes&gt;

This option sets the amount of storage space, in megabytes, 
used by ABRT to store all crash information from all users. 
The default setting is 1000 MB. Once the quota specified here has been met, 
ABRT will continue catching crashes, and in order to make room for the new crash dumps, 
it will delete the oldest and largest ones.

ActionsAndReporters = SOSreport, [&lt;additional_plugins&gt; ]

This option tells ABRT to run the specified plugin(s) immediately 
after a crash is detected and saved. For example, the SOSreport plugin runs 
the sosreport tool which adds the data collected by it to the created crash dump. 
You can turn this behavior off by commenting out this line. For further fine-tuning,
 you can add SOSreport (or any other specified plugin) to either the CCpp or 
Python options to make ABRT run sosreport (or any other specified plugin) after 
any C and C++ or Python applications crash, respectively. For more information 
on various Action and Reporter plugins, refer to Section 21.3, “ ABRT Plugins”

[ AnalyzerActionsAndReporters ] Section Directives

This section allows you to associate certain analyzer actions and reporter 
actions to run when ABRT catches kernel oopses or crashes in C, C++ or Python programs. 
The actions and reporters specified in any of the directives below will run only 
if you run abrt-gui or abrt-cli and report the crash that occurred. 
If you do not specify any actions and reporters in these directives, 
you will not be able to report a crash via abrt-gui or abrt-cli. 
The order of actions and reporters is important. Commenting out a directive, 
will cause ABRT not to catch the crashes associated with that directive. 
For example, commenting out the Kerneloops line will cause ABRT not to catch kernel oopses.

Kerneloops = RHTSupport, Logger

This directive specifies that, for kernel oopses, 
both the RHTSupport and Logger reporters will be run.

CCpp = RHTSupport, Logger

This directive specifies that, when C or C++ program crashes occur, 
both the RHTSupport and Logger reporters will be run.

Python = RHTSupport, Logger

This directive specifies that, when Python program crashes occur, 
both the RHTSupport and Logger reporters will be run.

Each of these destinations' details can be specified in the corresponding 
plugins/*.conf file. For example, plugins/RHTSupport.conf specifies 
which RHTSupport URL to use (set to https://api.access.redhat.com/rs by default), 
the user's login name, password for logging in to the RHTSupport site, 
etc. All these options can also be configured through the abrt-gui application
 (for more information on plugin configuration refer to Section 21.3, “ ABRT Plugins”).

[ Cron ] Section Directives &lt;time&gt; = &lt;action_to_run&gt;

The [ Cron ] section of abrt.conf allows you to specify the exact time, 
or elapsed amount of time between, when ABRT should run a certain action, 
such as scanning for kernel oopses or performing file transfers. 
You can list further actions to run by appending them to the end of this section.

Example 21.1. [ Cron ] section of /etc/abrt/abrt.conf

# Which Action plugins to run repeatedly
[ Cron ]
# h:m - at h:m
# s - every s seconds
120 = KerneloopsScanner
#02:00 = FileTransfer


The format for an entry is either 
&lt;time_in_seconds&gt; = &lt;action_to_run&gt; or &lt;hh:mm&gt; = &lt;action_to_run&gt; , 
where hh (hour) is in the range 00-23 
(all hours less than 10 should be zero-filled, i.e. preceded by a 0), 
and mm (minute) is 00-59, zero-filled likewise. 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the meaning of '?' in Linux kernel panic call trace]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/06/12/debug-dumpstack-mean/"/>
    <updated>2014-06-12T09:42:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/06/12/debug-dumpstack-mean</id>
    <content type="html"><![CDATA[<ul>
<li>&lsquo;?&rsquo; means that the information about this stack entry is probably not reliable.</li>
</ul>


<p>The stack output mechanism (see the implementation of dump_trace() function) was unable to prove that the address it has found is a valid return address in the call stack.</p>

<p>&lsquo;?&rsquo; itself is output by printk_stack_address().</p>

<p>The stack entry may be valid or not. Sometimes one may simply skip it. It may be helpful to investigate the disassembly of the involved module to see which function is called at ClearFunctionName+0x88 (or, on x86, immediately before that position).</p>

<p>Concerning reliability</p>

<p>On x86, when dump_stack() is called, the function that actually examines the stack is print_context_stack() defined in arch/x86/kernel/dumpstack.c. Take a look at its code, I&rsquo;ll try to explain it below.</p>

<p>I assume DWARF2 stack unwind facilities are not available in your Linux system (most likely, they are not, if it is not OpenSUSE or SLES). In this case, print_context_stack() seems to do the following.</p>

<p>It starts from an address (&lsquo;stack&rsquo; variable in the code) that is guaranteed to be an address of a stack location. It is actually the address of a local variable in dump_stack().</p>

<p>The function repeatedly increments that address (while (valid_stack_ptr &hellip;) { &hellip; stack++}) and checks if what it points to could also be an address in the kernel code (if (__kernel_text_address(addr)) &hellip;). This way it attempts to find the functions' return addresses pushed on stack when these functions were called.</p>

<p>Of course, not every unsigned long value that looks like a return address is actually a return address. So the function tries to check it. If frame pointers are used in the code of the kernel (%ebp/%rbp registers are employed for that if CONFIG_FRAME_POINTER is set), they can be used to traverse the stack frames of the functions. The return address for a function lies just above the frame pointer (i.e. at %ebp/%rbp + sizeof(unsigned long)). print_context_stack checks exactly that.</p>

<p>If there is a stack frame for which the value &lsquo;stack&rsquo; points to is the return address, the value is considered a reliable stack entry. ops->address will be called for it with reliable == 1, it will eventually call printk_stack_address() and the value will be output as a reliable call stack entry. Otherwise the address will be considered unreliable. It will be output anyway but with &lsquo;?&rsquo; prepended.</p>

<p>[NB] If frame pointer information is not available (e.g. like it was in Debian 6 by default), all call stack entries will be marked as unreliable for this reason.</p>

<p>The systems with DWARF2 unwinding support (and with CONFIG_STACK_UNWIND set) is a whole another story.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos系统各种包下载]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/06/09/system-centos-packages/"/>
    <updated>2014-06-09T15:15:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/06/09/system-centos-packages</id>
    <content type="html"><![CDATA[<h4>1、系统包</h4>

<pre><code>    http://mirror.centos.org/centos/6.5/os/x86_64/Packages/
    国内地址
    http://isoredirect.centos.org/centos/6.5/isos/x86_64/  
    ex：
        http://mirror.symnds.com/distributions/CentOS-vault/5.5/isos/x86_64/  
        http://mirrors.stuhome.net/centos/6.5/isos/x86_64/  
        http://mirrors.neusoft.edu.cn/centos/6.5/isos/x86_64/
        http://mirrors.163.com/centos/6.5/isos/x86_64/
        http://mirrors.hust.edu.cn/centos/6.5/isos/x86_64/
        http://centos.ustc.edu.cn/centos/6.5/isos/x86_64/
        http://mirror.bit.edu.cn/centos/6.5/isos/x86_64/
        http://mirrors.tuna.tsinghua.edu.cn/centos/6.5/isos/x86_64/
        http://mirrors.grandcloud.cn/centos/6.5/isos/x86_64/
        http://mirror.neu.edu.cn/centos/6.5/isos/x86_64/
        http://mirrors.btte.net/centos/6.5/isos/x86_64/
        http://mirrors.hustunique.com/centos/6.5/isos/x86_64/
        http://mirrors.aliyun.com/centos/6.5/isos/x86_64/
</code></pre>

<h4>2、debuginfo包：</h4>

<pre><code>    http://debuginfo.centos.org/6/x86_64/
</code></pre>

<h4>3、src.prm包</h4>

<pre><code>    ftp://ftp.redhat.com/pub/redhat/linux/enterprise
    ftp://ftp.redhat.com/pub/redhat/linux/enterprise/5Client/en/os/SRPMS/kexec-tools-1.102pre-154.el5.src.rpm
    ftp://ftp.redhat.com/pub/redhat/linux/enterprise/5Client/en/os/SRPMS/kexec-tools-1.102pre-164.el5.src.rpm
    http://vault.centos.org/5.11/os/SRPMS/kexec-tools-1.102pre-165.el5.src.rpm
</code></pre>

<h4>4、各种包</h4>

<pre><code>    pkgs/org
</code></pre>
]]></content>
  </entry>
  
</feed>
