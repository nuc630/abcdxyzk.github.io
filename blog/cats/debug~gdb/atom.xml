<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~gdb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~gdb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-11-17T15:30:21+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gdb break/watch/catch]]></title>
    <link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break/"/>
    <updated>2015-07-21T15:49:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-break</id>
    <content type="html"><![CDATA[<p><a href="http://sourceware.org/gdb/current/onlinedocs/gdb">http://sourceware.org/gdb/current/onlinedocs/gdb</a></p>

<p><a href="http://blog.csdn.net/yangzhongxuan/article/details/6897968">gdb break 断点设置（一）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6899186">gdb watch 断点设置（二）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901440">gdb catch 断点设置（三）</a><br/>
<a href="http://blog.csdn.net/yangzhongxuan/article/details/6901477">gdb 断点删除（四）</a></p>

<hr />

<h3>二、断点设置</h3>

<h4>gdb断点分类：</h4>

<p>以设置断点的命令分类：</p>

<p>breakpoint 可以根据行号、函数、条件生成断点。
watchpoint 监测变量或者表达式的值发生变化时产生断点。
catchpoint 监测信号的产生。例如c++的throw，或者加载库的时候。</p>

<p>gdb中的变量从1开始标号，不同的断点采用变量标号同一管理，可以 用enable、disable等命令管理，同时支持断点范围的操作，比如有些命令接受断点范围作为参数。</p>

<h4>1、break及break变种详解：</h4>

<p>相关命令有break，tbreak，rbreak,hbreak，thbreak，后两种是基于硬件的，先不介绍。</p>

<h5>break 与 tbeak</h5>

<p>break，tbreak可以根据行号、函数、条件生成断点。tbreak设置方法与break相同，只不过tbreak只在断点停一次，过后会自动将断点删除，break需要手动控制断点的删除和使能。</p>

<p>break 可带如下参数：<br/>
  linenum            本地行号，即list命令可见的行号<br/>
  filename:linenum   制定个文件的行号<br/>
  function           函数，可以是自定义函数也可是库函数，如open<br/>
  filename:function  制定文件中的函数<br/>
  condtion           条件<br/>
  *address           地址，可是函数，变量的地址，此地址可以通过info add命令得到。</p>

<p>例如：
<code>
    break 10    
    break test.c:10
    break main
    break test.c:main
    break system
    break open
</code></p>

<p>如果想在指定的地址设置断点，比如在main函数的地址出设断点。可用info add main 获得main的地址如0x80484624，然后用break *0x80484624.</p>

<h6>条件断点</h6>

<p>就是在如上述指定断点的同时指定进入断点的条件。</p>

<p>例如：（假如有int 类型变量 index）
<code>
    break 10 if index == 3
    tbreak 12 if index == 5
</code></p>

<h5>rbreak</h5>

<p>rbreak 可以跟一个规则表达式。rbreak + 表达式的用法与grep + 表达式相似。即在所有与表达式匹配的函数入口都设置断点。</p>

<p>rbreak list<em>* 即在所有以 list</em> 为开头字符的函数地方都设置断点。</p>

<p>rbreak ^list_ 功能与上同。</p>

<h5>查看断点信息</h5>

<pre><code>    info break [break num ]
    info break 可列出所有断点信息，info break 后也可设置要查看的break num如：
    info break 1 列出断点号是1的断点信息

    Num        Type                    Disp Enb  Address      What
     1       breakpoint                keep y    &lt;MULTIPLE&gt;
     stop only if i==1
     breakpoint already hit 1 time
     1.1                                    y    0x080486a2 in void foo&lt;int&gt;() at t.cc:8
     1.2                                    y    0x080486ca in void foo&lt;double&gt;() at t.cc:8
</code></pre>

<hr />

<h4>2、watch</h4>

<pre><code>    watch [-l|-location] expr [thread threadnum] [mask maskvalue]
</code></pre>

<p>-l 与 mask没有仔细研究，thread threadnum 是在多线程的程序中限定只有被线程号是threadnum的线程修改值后进入断点。</p>

<p>经常用到的如下命令：
watch <expr><br/>
为表达式（变量）expr设置一个观察点。变量量表达式值有变化时，马上停住程序。</p>

<p>表达式可以是一个变量, 例如：watch value_a</p>

<p>表达式可以是一个地址, 例如：watch <em>(int </em>)0x12345678 可以检测4个字节的内存是否变化。</p>

<p>表达式可以是一个复杂的语句表达式, 例如：watch a*b + c/d</p>

<p>watch 在有些操作系统支持硬件观测点，硬件观测点的运行速度比软件观测点的快。如果系统支持硬件观测的话，当设置观测点是会打印如下信息：<code>Hardware watchpoint num: expr</code></p>

<p>如果不想用硬件观测点的话可如下设置：<code>set can-use-hw-watchpoints</code></p>

<p>watch两个变种 rwatch，awatch，这两个命令只支持硬件观测点如果系统不支持硬件观测点会答应出不支持这两个命令的信息:，</p>

<p>rwatch <expr><br/>
当表达式（变量）expr被读时，停住程序。</p>

<p>awatch <expr><br/>
当表达式（变量）的值被读或被写时，停住程序。</p>

<p>info watchpoints<br/>
列出当前所设置了的所有观察点。</p>

<p>watch 所设置的断点也可以用控制断点的命令来控制。如 disable、enable、delete等。</p>

<p>可以为停止点设定运行命令
<code>
    commands [bnum]
    ... command-list ...
    end
</code></p>

<p>为断点号bnum指写一个命令列表。当程序被该断点停住时，gdb会依次运行命令列表中的命令。</p>

<p>例如：
<code>
    break foo if x&gt;0
    commands
    printf "x is %d/n",x
    continue
    end
</code></p>

<p>断点设置在函数foo中，断点条件是x>0，如果程序被断住后，也就是，一旦x的值在foo函数中大于0，GDB会自动打印出x的值，并继续运行程序。</p>

<p>注意：watch 设置也是断点，如果调试的时候设置的断点（任何种类的断点）过多的时候，watch断点会被忽略，有时候没有任何提示，这是我在测试的时候发现的，只有把多余的断点删除后才可用。</p>

<hr />

<p>在调试的时候通常用catchpoints来捕获事件，如c++的异常等。捕获点的设置通过catch与tcatch两个命令。</p>

<p>tcatch所设置的断点停止一次后自动删除，设置断点的方法与catch相同。</p>

<p>用法：catch event</p>

<p>这些event事件如下：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>throw
</span><span class='line'>    The throwing of a C++ exception.
</span><span class='line'>catch
</span><span class='line'>    The catching of a C++ exception.
</span><span class='line'>exception&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;exception unhandled
</span><span class='line'>An exception that was raised but is not handled by the program.
</span><span class='line'>assert
</span><span class='line'>Ada 语言 assert断言失败时，断点被踩到。
</span><span class='line'>exec
</span><span class='line'>调用exec时断点被踩到。
</span><span class='line'>syscall
</span><span class='line'>syscall [name | number] ...
</span><span class='line'>通过系统函数的名称和系统号，来设置捕获点，当所设定的系统调用时，断点被踩到。
</span><span class='line'>因为经常在linux用c语言，所以主要用到的event是最后四个，其他的没有仔细研究。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;catch syscall open
</span><span class='line'>catch syscall 5
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;这两个捕获断点一样。
</span><span class='line'>
</span><span class='line'>--------------
</span><span class='line'>
</span><span class='line'>断点的删除与断点的设置同样的重要。删除断点的命令有两个: delete, clear
</span><span class='line'>
</span><span class='line'>##### delete
</span><span class='line'>用法：  
</span><span class='line'>delete [breakpoints num] [range...]
</span><span class='line'>
</span><span class='line'>delete可删除单个断点，也可删除一个断点的集合，这个集合用连续的断点号来描述。
</span><span class='line'>
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;delete 5
</span><span class='line'>delete 1-10
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>##### clear
</span><span class='line'>用法:  
</span><span class='line'>clear  
</span><span class='line'>删除所在行的多有断点。
</span><span class='line'>
</span><span class='line'>clear location  
</span><span class='line'>clear 删除所选定的环境中所有的断点  
</span><span class='line'>clear location location描述具体的断点。  
</span><span class='line'>
</span><span class='line'>例如：
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;clear list_insert         //删除函数的所有断点
</span><span class='line'>clear list.c:list_delet   //删除文件：函数的所有断点
</span><span class='line'>clear 12                  //删除行号的所有断点
</span><span class='line'>clear list.c:12           //删除文件：行号的所有断点
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;clear 删除断点是基于行的，不是把所有的断点都删除。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb 修改寄存器/变量]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set/"/&gt;
</span><span class='line'>&lt;updated&gt;2015-07-21T15:34:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2015/07/21/debug-gdb-info-set&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;    # 查看所有寄存器
</span><span class='line'>(gdb) info register  # 可以简写成 i r
</span><span class='line'>
</span><span class='line'># 查看单个寄存器
</span><span class='line'>(gdb) i r rax
</span><span class='line'>
</span><span class='line'># 修改寄存器
</span><span class='line'>(gdb) set $rax=3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># 查看变量
</span><span class='line'>(gdb) i local
</span><span class='line'>
</span><span class='line'># 修改变量
</span><span class='line'>(gdb) set var b=4
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb 没有debug信息step单步调试]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-28T16:21:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;step &lt;count&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有 debug信息。很像 VC等工具中的 step in。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>next &lt;count&gt;
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>同样单步跟踪，如果有函数调用，他不会进入该函数。很像 VC等工具中的 step over。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。</span></code></pre></td></tr></table></div></figure>
    set step-mode [on/off]
    set step-mode on
    打开 step-mode模式，于是，在进行单步跟踪时，程序不会因为没有 debug信息而不停住。这个参数有很利于查看机器码。</p>

<pre><code>set step-mod off
关闭 step-mode模式。
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb x命令语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x/"/>
    <updated>2014-08-28T16:17:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x</id>
    <content type="html"><![CDATA[<h4>可以使用examine命令(简写是x)来查看内存地址中的值。x命 令的语 法如下所示：</h4>

<pre><code>    x/&lt;n/f/u&gt; &lt;addr&gt;  
</code></pre>

<p>n、f、u是可选的参数。<br/>
n是一个正整数，表示需要显示的内存单元的个数， 也就是说从当前地址向后显示几个 内存单元的内容，一个内存单元的大小由后面的u定义。<br/>
f 表示显示的格式，参见下面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。<br/>
u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。<br/>
<addr>表示一个内存地址。</p>

<h5>注意：严格区分n 和u的关系，n表示单元个数，u表示每个单元的大小。</h5>

<p>n/f/u三个参数可以一起使用。例如：<br/>
命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示输出三个单位，u表示按十六进制显示。</p>

<h4>输出格式</h4>

<p>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量 的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：
<code>
x 按十六进制格式显示变量。
d 按十进制格式显示变量。
u 按十六进制格式显示无符号整型。
o 按八进制格式显示变量。
t 按二进制格式显示变量。
a 按十六进制格式显示变量。
c 按字符格式显示变量。
f 按浮点数格式显示变量。
</code>
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
t(binary), f(float), a(address), i(instruction), c(char) and s(string).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.</p>

<p>Defaults for format and size letters are those previously used.
Default count is 1. Default address is following last thing printed
with this command or &ldquo;print&rdquo;.
<code>
(gdb) p f1
$4 = 8.25
(gdb) p f2
$5 = 125.5
(gdb) x/x &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f2
0xbffff384:   0x42fb0000
(gdb) x/2xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000
(gdb) x/4xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000   0xbffff408   0x00bcba66
(gdb) x/tw &amp;f1
0xbffff380:   01000001000001000000000000000000
(gdb) x/2tw &amp;f1
0xbffff380:   01000001000001000000000000000000   01000010111110110000000000000000
(gdb) p record
$10 = {12, 76, 48, 62, 94, 17, 32, 37, 52, 69}
(gdb) p &amp;record
$11 = (int (*)[10]) 0x8049740
(gdb) x/4uw 0x8049740
0x8049740 &lt;record&gt;:   12   76   48   62
(gdb) x/6ow 0x8049740
0x8049740 &lt;record&gt;:   014   0114   060   076
0x8049750 &lt;record+16&gt;:   0136   021
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb print 语法]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print/"/>
    <updated>2014-08-28T16:13:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print</id>
    <content type="html"><![CDATA[<pre><code>print &lt;expr&gt;
print /&lt;f&gt; &lt;expr&gt;
</code></pre>

<p>&lt;expr>是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），<f>是输出的格式，比如，假如要把表达式按16进制的格式输出，那么就是/x。</p>

<h4>一、表达式</h4>

<p>print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。</p>

<p>表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）</p>

<p>在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。<br/>
<code>@</code>是一个和数组有关的操作符，在后面会有更具体的说明。<br/>
<code>::</code>指定一个在文件或是一个函数中的变量。<br/>
<code>{&lt;type&gt;} &lt;addr&gt;</code><span style="color:red">表示一个指向内存地址<addr>的类型为type的一个对象。 p {char*} 0xffffffff12345678</span></p>

<h4>二、程序变量</h4>

<p>在GDB中，你可以随时查看以下三种变量的值：<br/>
1、全局变量（所有文件可见的）<br/>
2、静态全局变量（当前文件可见的）<br/>
3、局部变量（当前Scope可见的）<br/>
假如你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，假如一个全局变量和一个函数中的局部变量同名时，假 如当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。假如此时你想查看全局变量的值时，你可以使用“::”操作符：
<code>
file::variable
function::variable
</code>
可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：
<code>
gdb) p 'f2.c'::x
</code>
当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。</p>

<p>另外，需要注重的是，假如你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调 试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所 有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看 编译器的使用说明文档。</p>

<h4>三、数组</h4>

<p>有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：
<code>
int *array = (int *) malloc (len * sizeof (int));
</code>
于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：
<code>
p *array@len
</code>
@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：
<code>
(gdb) p *array@len
$1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}
</code>
假如是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。</p>
]]></content>
  </entry>
  
</feed>
