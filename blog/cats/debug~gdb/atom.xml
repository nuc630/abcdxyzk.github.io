<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug~gdb | kk Blog —— 通用基础]]></title>
  <link href="http://abcdxyzk.github.io/blog/cats/debug~gdb/atom.xml" rel="self"/>
  <link href="http://abcdxyzk.github.io/"/>
  <updated>2015-07-14T22:08:34+08:00</updated>
  <id>http://abcdxyzk.github.io/</id>
  <author>
    <name><![CDATA[kk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gdb 没有debug信息step单步调试]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step/"/>
    <updated>2014-08-28T16:21:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step</id>
    <content type="html"><![CDATA[<pre><code>step &lt;count&gt;
</code></pre>

<p>单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有 debug信息。很像 VC等工具中的 step in。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。
<code>
next &lt;count&gt;
</code>
同样单步跟踪，如果有函数调用，他不会进入该函数。很像 VC等工具中的 step over。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set step-mode [on/off]
</span><span class='line'>set step-mode on
</span><span class='line'>    打开 step-mode模式，于是，在进行单步跟踪时，程序不会因为没有 debug信息而不停住。这个参数有很利于查看机器码。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;set step-mod off
</span><span class='line'>关闭 step-mode模式。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb x命令语法]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-28T16:17:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;可以使用examine命令(简写是x)来查看内存地址中的值。x命 令的语 法如下所示：&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    x/&lt;n/f/u&gt; &lt;addr&gt;  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;n、f、u是可选的参数。&lt;br/&gt;
</span><span class='line'>n是一个正整数，表示需要显示的内存单元的个数， 也就是说从当前地址向后显示几个 内存单元的内容，一个内存单元的大小由后面的u定义。&lt;br/&gt;
</span><span class='line'>f 表示显示的格式，参见下面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。&lt;br/&gt;
</span><span class='line'>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。&lt;br/&gt;
</span><span class='line'>&lt;addr&gt;表示一个内存地址。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h5&gt;注意：严格区分n 和u的关系，n表示单元个数，u表示每个单元的大小。&lt;/h5&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;n/f/u三个参数可以一起使用。例如：&lt;br/&gt;
</span><span class='line'>命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示输出三个单位，u表示按十六进制显示。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;输出格式&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量 的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>x 按十六进制格式显示变量。
</span><span class='line'>d 按十进制格式显示变量。
</span><span class='line'>u 按十六进制格式显示无符号整型。
</span><span class='line'>o 按八进制格式显示变量。
</span><span class='line'>t 按二进制格式显示变量。
</span><span class='line'>a 按十六进制格式显示变量。
</span><span class='line'>c 按字符格式显示变量。
</span><span class='line'>f 按浮点数格式显示变量。
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>(gdb) help x
</span><span class='line'>Examine memory: x/FMT ADDRESS.
</span><span class='line'>ADDRESS is an expression for the memory address to examine.
</span><span class='line'>FMT is a repeat count followed by a format letter and a size letter.
</span><span class='line'>Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
</span><span class='line'>t(binary), f(float), a(address), i(instruction), c(char) and s(string).
</span><span class='line'>Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
</span><span class='line'>The specified number of objects of the specified size are printed
</span><span class='line'>according to the format.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Defaults for format and size letters are those previously used.
</span><span class='line'>Default count is 1. Default address is following last thing printed
</span><span class='line'>with this command or &ldquo;print&rdquo;.
</span><span class='line'>&lt;code&gt;
</span><span class='line'>(gdb) p f1
</span><span class='line'>$4 = 8.25
</span><span class='line'>(gdb) p f2
</span><span class='line'>$5 = 125.5
</span><span class='line'>(gdb) x/x &amp;f1
</span><span class='line'>0xbffff380:   0x41040000
</span><span class='line'>(gdb) x/xw &amp;f1
</span><span class='line'>0xbffff380:   0x41040000
</span><span class='line'>(gdb) x/xw &amp;f2
</span><span class='line'>0xbffff384:   0x42fb0000
</span><span class='line'>(gdb) x/2xw &amp;f1
</span><span class='line'>0xbffff380:   0x41040000   0x42fb0000
</span><span class='line'>(gdb) x/4xw &amp;f1
</span><span class='line'>0xbffff380:   0x41040000   0x42fb0000   0xbffff408   0x00bcba66
</span><span class='line'>(gdb) x/tw &amp;f1
</span><span class='line'>0xbffff380:   01000001000001000000000000000000
</span><span class='line'>(gdb) x/2tw &amp;f1
</span><span class='line'>0xbffff380:   01000001000001000000000000000000   01000010111110110000000000000000
</span><span class='line'>(gdb) p record
</span><span class='line'>$10 = {12, 76, 48, 62, 94, 17, 32, 37, 52, 69}
</span><span class='line'>(gdb) p &amp;record
</span><span class='line'>$11 = (int (*)[10]) 0x8049740
</span><span class='line'>(gdb) x/4uw 0x8049740
</span><span class='line'>0x8049740 &lt;record&gt;:   12   76   48   62
</span><span class='line'>(gdb) x/6ow 0x8049740
</span><span class='line'>0x8049740 &lt;record&gt;:   014   0114   060   076
</span><span class='line'>0x8049750 &lt;record+16&gt;:   0136   021
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb print 语法]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-28T16:13:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;pre&gt;&lt;code&gt;print &lt;expr&gt;
</span><span class='line'>print /&lt;f&gt; &lt;expr&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;expr&gt;是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），&lt;f&gt;是输出的格式，比如，假如要把表达式按16进制的格式输出，那么就是/x。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;一、表达式&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;@&lt;/code&gt;是一个和数组有关的操作符，在后面会有更具体的说明。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;::&lt;/code&gt;指定一个在文件或是一个函数中的变量。&lt;br/&gt;
</span><span class='line'>&lt;code&gt;{&lt;type&gt;} &lt;addr&gt;&lt;/code&gt;&lt;span style="color:red"&gt;表示一个指向内存地址&lt;addr&gt;的类型为type的一个对象。 p {char*} 0xffffffff12345678&lt;/span&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;二、程序变量&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;在GDB中，你可以随时查看以下三种变量的值：&lt;br/&gt;
</span><span class='line'>1、全局变量（所有文件可见的）&lt;br/&gt;
</span><span class='line'>2、静态全局变量（当前文件可见的）&lt;br/&gt;
</span><span class='line'>3、局部变量（当前Scope可见的）&lt;br/&gt;
</span><span class='line'>假如你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，假如一个全局变量和一个函数中的局部变量同名时，假 如当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。假如此时你想查看全局变量的值时，你可以使用“::”操作符：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>file::variable
</span><span class='line'>function::variable
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>gdb) p 'f2.c'::x
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;另外，需要注重的是，假如你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调 试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所 有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看 编译器的使用说明文档。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;三、数组&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>int *array = (int *) malloc (len * sizeof (int));
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>p *array@len
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>(gdb) p *array@len
</span><span class='line'>$1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>假如是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>&lt;title type="html"&gt;&lt;![CDATA[gdb 输出控制]]&gt;&lt;/title&gt;
</span><span class='line'>&lt;link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-out-format/"/&gt;
</span><span class='line'>&lt;updated&gt;2014-08-28T16:09:00+08:00&lt;/updated&gt;
</span><span class='line'>&lt;id&gt;http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-out-format&lt;/id&gt;
</span><span class='line'>&lt;content type="html"&gt;&lt;![CDATA[&lt;h4&gt;1&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;set print repeats [on/off]
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;设置打印数组的长度上限值。如果数组中连续相同的成员的数量超过这个上限，GDB会打印字符串”&lt;repeats n times&gt;”，这里n是同样的重复次数，而不是重复打印这些相同的成员。将这个上限设置为0的话，打印所有的成员。默认上限时10。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>show print repeats
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>显示打印重复相同成员的上限数量。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;2&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;set print elements &lt;number-of-elements&gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;这个选项主要是设置数组的，假如你的数组太大了，那么就可以指定一个&lt;number-of-elements&gt;来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。假如设置为0，则表示不限制。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>show print elements
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>查看print elements的选项信息。&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;3&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;运行GDB的时候 总是会出现type return to continue,or q &lt;return&gt; to quit，&lt;br/&gt;
</span><span class='line'>因为显示得太多，此时gdb的显示会有些像more命令&lt;br/&gt;
</span><span class='line'>把这个消息屏蔽掉可以设置
</span><span class='line'>&lt;code&gt;
</span><span class='line'>set pagination off
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h4&gt;4&lt;/h4&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;将GDB中需要的调试信息输出到文件</span></code></pre></td></tr></table></div></figure></p>

<h1>(gdb) set logging file &lt;文件名></h1>

<h1>(gdb) set logging on</h1>

<h1>(gdb) bt</h1>

<h1>(gdb) set logging off</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb的脚本使用]]></title>
    <link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-script/"/>
    <updated>2014-08-28T15:47:00+08:00</updated>
    <id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-script</id>
    <content type="html"><![CDATA[<h4>1）启动gdb时候</h4>

<p>1、gdb在启动的时候，会在当前目录下查找".gdbinit"这个文件，并把它的内容作为gdb命令进行解释，所以如果我把脚本命名为".gdbinit"，这样在启动的时候就会处理这些命令。<br/>
2、启动gdb的时候自动执行脚本 gdb -x your_script</p>

<h4>2）gdb运行期间</h4>

<p>可以使用 source script-file 来解释gdb命令脚本script-file</p>
]]></content>
  </entry>
  
</feed>
