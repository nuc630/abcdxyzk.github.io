<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: koj | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/koj/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2015-11-17T15:30:21+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[避免僵死进程]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/04/21/lang-c-fork/"/>
<updated>2012-04-21T19:45:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/04/21/lang-c-fork</id>
<content type="html"><![CDATA[<h4>一 两次fork避免僵死进程</h4>

<p>如果在一个进程A中启动了一个子进程B，但是B的执行时间可能很长，也可能很短。因此，既不希望A调用wait或者waitpid来等待B的完成（如果B执行时间太长，A的时间就耗费在等待B的完成了，虽然waitpid有WNOHANG选项，但免不了多次调用waitpid来看B是否完成）；也不希望如果B执行时间太短了，然后A又不用wait或waitpid去获取B的退出状态，那么B就一直处于僵死状态直到A终止（这样造成了资源的浪费）。</p>

<p>此时，可以使用一个小trick。就是调用两次fork，让B的父进程变成init进程（pid=1的那个进程，所有孤儿进程的父进程）。这样，A进程可以想干嘛干嘛去，B进程也可以想执行多久就执行多久了。
<code>
    #include &lt;unistd.h&gt;
    #include &lt;sys/wait.h&gt;
    int main()
    {
        pid_t pid;
        if((pid=fork())&lt;0)
        {
            printf("fork 1 error\n");
            exit(-1);
        }
        else if(pid==0）//第一个子进程
        {
            if((pid=fork())&lt;0)
            {
                printf("fork 2 error\n");
                exit(-1);
            }
            else if(pid&gt;0)//第二次fork产生的子进程（第二个子进程）的父进程，其实就是第一次fork产生的子进程（第一个子进程）
            {
                exit(0);//第一个子进程结束，那么它的子进程（第二个子进程）将由init进程领养，init进程成为第二个子进程的父进程
            }
            //第二个子进程（就是我们前面说的B进程）可以做他想做的事情了
            ................
        }
        if(waitpid(pid,NULL,0)!=pid)//获取第一个子进程的终止状态，不让它变成僵死进程
        printf("waitpid error\n");
        //父进程（就是我们前面说的A进程）也可以做他想做的事情了
        .........
        return 0;
    }
</code></p>

<h4>二</h4>

<p>父进程可以忽略 SIGCLD 软中断而不必要 wait()。可以这样做到(在支持它的系统上,比如Linux):　
<code>
    main()　　
    {　　
        signal(SIGCLD, SIG_IGN); /* now I don't have to wait()! */　　
        .......　　
        fork();　　
        fork();　　
        fork(); /* Rabbits, rabbits, rabbits! */　　
    ｝
</code></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[设置线程的栈空间]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/04/21/lang-c-set-thread-stack/"/>
<updated>2012-04-21T19:32:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/04/21/lang-c-set-thread-stack</id>
<content type="html"><![CDATA[<h1>include &lt;pthread.h></h1>

<pre><code>    pthread_attr_t thread_attr;
    size_t stack_size;
    int status;

    status = pthread_attr_init (&amp;thread_attr);
    if (status != 0)
        err_abort (status, "Create attr");

    status = pthread_attr_setdetachstate (&amp;thread_attr, PTHREAD_CREATE_DETACHED);

    if (status != 0)
        err_abort (status, "Set detach");
    //通常出现的问题之一，下面的宏没有定义
    #ifdef _POSIX_THREAD_ATTR_STACKSIZE
        //得到当前的线程栈大小
        status = pthread_attr_getstacksize (&amp;thread_attr, &amp;stack_size);
        if (status != 0)
            err_abort (status, "Get stack size");
        printf ("Default stack size is %u; minimum is %u\n", stack_size, PTHREAD_STACK_MIN);

        //设置当前的线程的大小
        status = pthread_attr_setstacksize (&amp;thread_attr, PTHREAD_STACK_MIN*1024);
        if (status != 0)
            err_abort (status, "Set stack size");

        //得到当前的线程栈的大小
        status = pthread_attr_getstacksize (&amp;thread_attr, &amp;stack_size);
        if (status != 0)
            err_abort (status, "Get stack size");
        printf ("Default stack size is %u; minimum is %u\n", stack_size, PTHREAD_STACK_MIN);
    #endif
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[在网页中嵌入CKeditor编辑器]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/04/09/web-ck-code-style/"/>
<updated>2012-04-09T17:57:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/04/09/web-ck-code-style</id>
<content type="html"><![CDATA[<h4>1.</h4>

<p>在 <a href="http://ckeditor.com/download">http://ckeditor.com/download</a> 上下载最新版本的CKeditor。将下载的文件解压，然后将4M多的文件减肥：可以删掉<em>samples、</em>source、<em>tests这三个无用的文件夹；打开lang文件夹，删掉除</em>languages.js、en.js、zh-cn.js以外的所有文件；如果你不用office2003和v2两种皮肤，可以把skin目录下的这两个目录也都删掉。这样就做的了准备工作。<br/>
将ckeditor压缩包解压放在网站根目录下的“ckeditor”文件夹里：
引入ckeditor.js文件：
<code>
    &lt;script type="text/javascript" src="ckeditor/ckeditor.js"&gt;&lt;/script&gt;
</code>
你也可以将这些文件放在你网站的其他任何一个地方，默认为“ckeditor”。</p>

<h4>2. 在要使用ckeditor编辑器的地方插入脚本：</h4>

<pre><code>    &lt;script type="text/javascript"&gt;CKEDITOR.replace( '多行文本的name',{skin : "kama",width:520} );&lt;/script&gt;
    如：
    &lt;textarea cols="80" rows="10" name="message"&gt;Please input the content in here&lt;/textarea&gt;
    &lt;script type="text/javascript"&gt;CKEDITOR.replace( 'message',{skin : "kama",width:520} );&lt;/script&gt;
</code></pre>

<p>这样就将name为message的多行文本替换成了ckeditor编辑器形式的输入框</p>

<h4>3.获取内容：</h4>

<pre><code>    &lt;?php
    $message=$_POST['message'];
    ?&gt;
</code></pre>

<h4>4.自定义ckeditor</h4>

<h5>4-1.设置编辑器皮肤、宽高</h5>

<p>如：
<code>
    &lt;textarea  cols="90" rows="10" id="content" name="content"&gt;cftea&lt;/textarea&gt;
    &lt;script type="text/javascript" src="ckeditor/ckeditor.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;
    &lt;!--
    CKEDITOR.replace("content",
        {
            skin: "kama", width:700, height:300
        });
    //--&gt;
    &lt;/script&gt;
</code></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[CodeIgniter用钩子实现基于URL的权限控制]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/04/03/tools-ci-access/"/>
<updated>2012-04-03T21:08:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/04/03/tools-ci-access</id>
<content type="html"><![CDATA[<h4>基于URL权限系统：</h4>

<p>  例如游客只能访问音乐模块的index,list,search方法。而注册用户除上述功能之外还能访问create,update,delete方法。那么我们可以在控制器之行之前判断当前用户是否具备访问该控制器的权限。</p>

<h4>实现：</h4>

<p>直接上代码：</p>

<h5>1.system/application/config/hooks.php中添加钩子声明：</h5>

<pre><code>    $hook['post_controller_constructor'] = array(
        'class' =&gt; 'Acl',
        'function' =&gt; 'filter',
        'filename' =&gt; 'acl.php',
        'filepath' =&gt; 'hooks',
    );
</code></pre>

<h5>2.system/application/config/config.php中让钩子系统生效</h5>

<pre><code>    $config['enable_hooks'] = TRUE;
</code></pre>

<h5>3.然后在config中新建acl.php权限系统配置文件，当然你也可以放在数据库中。</h5>

<p>//游客权限映射
<code>
    $config['acl']['visitor'] = array(
        '' =&gt; array('index'),//首页
        'music' =&gt; array('index', 'list'),
        'user' =&gt; array('index', 'login', 'register')
    );
</code>
//管理员
<code>
    $config['acl']['admin'] = array(
    );
</code>
//&mdash;&mdash;&mdash;&mdash;-配置权限不够的提示信息及跳转url&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;//
<code>
    $config['acl_info']['visitor'] = array(
        'info' =&gt; '需要登录以继续',
        'return_url' =&gt; 'user/login'
    );
    $config['acl_info']['more_role'] = array(
        'info' =&gt; '需要更高权限以继续',
        'return_url' =&gt; 'user/up'
    );
    /* End of file acl.php */
    /* Location: ./application/config/acl.php */
</code></p>

<h5>4.system/application/hooks目录下添加acl.php逻辑处理文件</h5>

<pre><code>    class Acl
    {
        private $url_model;//所访问的模块，如：music
        private $url_method;//所访问的方法，如：create
        private $url_param;//url所带参数 可能是 1 也可能是 id=1&amp;name=test
        private $CI;

        function Acl()
        {
            $this-&gt;CI = &amp; get_instance();

            if (!session_id()) session_start();

            $url = $_SERVER['PHP_SELF'];
            $arr = explode('/', $url);
            $arr = array_slice($arr, array_search('index.php', $arr) + 1, count($arr));
            $this-&gt;url_model = isset($arr[0]) ? $arr[0] : '';
            $this-&gt;url_method = isset($arr[1]) ? $arr[1] : 'index';
            $this-&gt;url_param = isset($arr[2]) ? $arr[2] : '';
        }
        function filter()
        {
            $user = $this-&gt;CI-&gt;session-&gt;userdata('user');
            if (empty($user)) {//游客visitor
                $role_name = 'visitor';
            } else {
                $role_name = $user-&gt;role;
            }

            $this-&gt;CI-&gt;load-&gt;config('acl');
            $acl = $this-&gt;CI-&gt;config-&gt;item('acl');
            $role = $acl[$role_name];
            $acl_info = $this-&gt;CI-&gt;config-&gt;item('acl_info');

            if (array_key_exists($this-&gt;url_model, $role) &amp;&amp; in_array($this-&gt;url_method, $role[$this-&gt;url_model])) {
                ;
            } else {//无权限，给出提示，跳转url
                $_SESSION['info'] = $acl_info[$role_name]['info'];
                redirect($acl_info[$role_name]['return_url']);
            }
        }
    }
</code></pre>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[CI 处理 URL 的“大小写敏感”问题]]></title>
<link href="http://abcdxyzk.github.io/blog/2012/03/30/tools-ci-upcase/"/>
<updated>2012-03-30T21:02:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2012/03/30/tools-ci-upcase</id>
<content type="html"><![CDATA[<h4>CI 处理 URL 的“大小写敏感”问题</h4>

<p>找到system/core里的Router.php文件，修文件：
<code>
    &lt;?php
    //找到 function _validate_request
    function_validate_request($segments)
    {
        // 增加下面这一句，其实就是强制将控制器名字转化为小写
        $segments[0] = strtolower($segments[0]);
        // Does the requested controller exist in the root folder?
        if(file_exists(APPPATH.'controllers/'.$segments[0].EXT))
        {
            return $segments;
        }
    }
    ?&gt;
</code></p>
]]></content>
</entry>

</feed>
