<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: reg_exp | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/reg-exp/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2015-07-14T22:08:34+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[正则表达式常用字符]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base/"/>
<updated>2014-11-27T19:05:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/11/27/tools-reg-exp-base</id>
<content type="html"><![CDATA[<table>
    <tr>
        <td style="text-align: center;">字符</td>
        <td style="text-align: center;">描述</td>
    </tr>
    <tr>
        <td style="text-align: center;">\</td>
        <td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。</td>
    </tr>
    <tr>
        <td style="text-align: center;">^</td>
        <td>匹配输入字符串的开始位置。如果设置了&nbsp;<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，^ 也匹配 '\n' 或 '\r' 之后的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">$</td>
        <td>匹配输入字符串的结束位置。如果设置了<strong>RegExp</strong>&nbsp;对象的&nbsp;<strong>Multiline</strong>&nbsp;属性，$ 也匹配 '\n' 或 '\r' 之前的位置。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\A</td>
        <td>指定匹配必须出现在字符串的开头（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\Z</td>
        <td>指定匹配必须出现在字符串的结尾或字符串结尾的 &nbsp; &nbsp; 之前（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\z</td>
        <td>指定匹配必须出现在字符串的结尾（忽略 &nbsp; <strong>Multiline</strong> &nbsp; 选项）。</td>
    </tr>
    <tr>
        <td style="text-align: center;">*</td>
        <td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">+</td>
        <td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>}</td>
        <td><em>n</em>&nbsp;是一个非负整数。匹配确定的&nbsp;<em>n</em>&nbsp;次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,}</td>
        <td><em>n</em>&nbsp;是一个非负整数。至少匹配<em>n</em>&nbsp;次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">{<em>n</em>,<em>m</em>}</td>
        <td><em>m</em>&nbsp;和&nbsp;<em>n</em>&nbsp;均为非负整数，其中<em>n</em>&nbsp;&lt;=&nbsp;<em>m</em>。最少匹配&nbsp;<em>n</em>&nbsp;次且最多匹配&nbsp;<em>m</em>&nbsp;次。刘， "o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
    </tr>
    <tr>
        <td style="text-align: center;">?</td>
        <td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {<em>n</em>}, {<em>n</em>,}, {<em>n</em>,<em>m</em>}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">.</td>
        <td>匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(<em>pattern</em>)</td>
        <td>匹配<em>pattern</em>&nbsp;并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用&nbsp;<strong>SubMatches</strong>&nbsp;集合，在Visual Basic Scripting Edition 中则使用&nbsp;<strong>$0</strong>…<strong>$9</strong>&nbsp;属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?:<em>pattern</em>)</td>
        <td>匹配&nbsp;<em>pattern</em>&nbsp;但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?=<em>pattern</em>)</td>
        <td>正向预查，在任何匹配&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， 'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
    </tr>
    <tr>
        <td style="text-align: center;">(?!<em>pattern</em>)</td>
        <td>负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching&nbsp;<em>pattern</em>&nbsp;的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>
    </tr>
    <tr>
        <td style="text-align: center;"><em>x</em>|<em>y</em></td>
        <td>匹配&nbsp;<em>x</em>&nbsp;或&nbsp;<em>y</em>。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>xyz</em>]</td>
        <td>字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>xyz</em>]</td>
        <td>负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[<em>a-z</em>]</td>
        <td>字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">[^<em>a-z</em>]</td>
        <td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\b</td>
        <td>匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\B</td>
        <td>匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\c<em>x</em></td>
        <td>匹配由<em>x</em>指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。&nbsp;<em>x</em>&nbsp;的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\d</td>
        <td>匹配一个数字字符。等价于 [0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\D</td>
        <td>匹配一个非数字字符。等价于 [^0-9]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\f</td>
        <td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\n</td>
        <td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\r</td>
        <td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\s</td>
        <td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\S</td>
        <td>匹配任何非空白字符。等价于 [^&nbsp;\f\n\r\t\v]。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\t</td>
        <td>匹配一个制表符。等价于 \x09 和 \cI。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\v</td>
        <td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\w</td>
        <td>匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\W</td>
        <td>匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\x<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， '\x41' 匹配 "A"。'\x041' 则等价于 '\x04' &amp; "1"。正则表达式中可以使用 ASCII 编码。.</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>num</em></td>
        <td>匹配&nbsp;<em>num</em>，其中&nbsp;<em>num</em>&nbsp;是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>n</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>n</em>&nbsp;之前至少&nbsp;<em>n</em>&nbsp;个获取的子表达式，则&nbsp;<em>n</em>&nbsp;为后向引用。否则，如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-7)，则&nbsp;<em>n</em>&nbsp;为一个八进制转义值。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nm</em></td>
        <td>标识一个八进制转义值或一个后向引用。如果 \<em>nm</em>&nbsp;之前至少有is preceded by at least&nbsp;<em>nm</em>&nbsp;个获取得子表达式，则&nbsp;<em>nm</em>&nbsp;为后向引用。如果 \<em>nm</em>&nbsp;之前至少有&nbsp;<em>n</em>&nbsp;个获取，则&nbsp;<em>n</em>&nbsp;为一个后跟文字&nbsp;<em>m&nbsp;</em>的后向引用。如果前面的条件都不满足，若&nbsp;&nbsp;<em>n</em>&nbsp;和&nbsp;<em>m</em>&nbsp;均为八进制数字 (0-7)，则 \<em>nm</em>&nbsp;将匹配八进制转义值&nbsp;<em>nm</em>。</td>
    </tr>
    <tr>
        <td style="text-align: center;">\<em>nml</em></td>
        <td>如果&nbsp;<em>n</em>&nbsp;为八进制数字 (0-3)，且&nbsp;<em>m</em>&nbsp;和&nbsp;<em>l</em>&nbsp;均为八进制数字 (0-7)，则匹配八进制转义值&nbsp;<em>nml。</em></td>
    </tr>
    <tr>
        <td style="text-align: center;">\u<em>n</em></td>
        <td>匹配&nbsp;<em>n</em>，其中&nbsp;<em>n</em>&nbsp;是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
    </tr>
</table>

]]></content>
</entry>

</feed>
