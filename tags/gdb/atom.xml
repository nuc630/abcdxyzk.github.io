<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title><![CDATA[Tag: gdb | kk Blog —— 通用基础]]></title>
<link href="http://abcdxyzk.github.io/tags/gdb/atom.xml" rel="self"/>
<link href="http://abcdxyzk.github.io/"/>
<updated>2016-08-31T00:28:04+08:00</updated>
<id>http://abcdxyzk.github.io/</id>
<author>
<name><![CDATA[kk]]></name>

</author>
<generator uri="http://octopress.org/">Octopress</generator>

<entry>
<title type="html"><![CDATA[gdb线程]]></title>
<link href="http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread/"/>
<updated>2016-05-11T20:10:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2016/05/11/debug-gdb-thread</id>
<content type="html"><![CDATA[<p>GDB多线程调试的基本命令。</p>

<p>info threads 显示当前可调试的所有线程，每个线程会有一个GDB为其分配的ID，后面操作线程的时候会用到这个ID。 前面有*的是当前调试的线程。</p>

<p>thread ID 切换当前调试的线程为指定ID的线程。</p>

<p>break thread_test.c:123 thread all 在所有线程中相应的行上设置断点</p>

<p>thread apply ID1 ID2 command 让一个或者多个线程执行GDB命令command。</p>

<p>thread apply all command 让所有被调试线程执行GDB命令command。</p>

<p>set scheduler-locking off|on|step 估计是实际使用过多线程调试的人都可以发现，在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。off 不锁定任何线程，也就是所有线程都执行，这是默认值。 on 只有当前被调试程序会执行。 step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[crash vs gdb work]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work/"/>
<updated>2014-11-06T10:51:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/11/06/debug-crash-work</id>
<content type="html"><![CDATA[<p><a href="https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html">贴自https://www.redhat.com/archives/crash-utility/2014-October/msg00002.html</a><br/>
Yes, sure. GDB works very differently from crash. There main conceptual<br/>
difference is that GDB only handles with VIRTUAL addresses, while the<br/>
crash utility first translates everything to PHYSICAL addresses.<br/>
Consequently, GDB ignores the PhysAddr field in ELF program headers,<br/>
and crash ignores the VirtAddr field.</p>

<p>I have looked at some of my ELF dump files, and it seems to me that<br/>
VirtAddr is not filled correctly, except for kernel text and static<br/>
data (address range 0xffffffff80000000-0xffffffff9fffffff). Your linked<br/>
list is most likely allocated in the direct mapping<br/>
(0xffff880000000000-0xffffc7ffffffffff). However, I found out that the<br/>
virtual addresses for the direct mapping segments are wrong, e.g. my<br/>
dump file specifies it at 0xffff810000000000 (hypervisor area). This is<br/>
most likely a bug in the kernel code that implements /proc/vmcore.</p>

<p>But that&rsquo;s beside the point. Why?  The Linux kernel maps many physical<br/>
pages more than once into the virtual address space. It would be waste<br/>
of space if you saved it multiple times (for each virtual address that<br/>
maps to it). The crash utility can translate each virtual address to<br/>
the physical address and map it onto ELF segments using PhysAddr.<br/>
Incidentally, the PhysAddr fields are correct in my dump files&hellip;</p>

<p>I&rsquo;m glad you&rsquo;re interested in using GDB to read kernel dump files,<br/>
especially if you&rsquo;re willing to make it work for real. I have proposed<br/>
more than once that the crash utility be re-implemented in pure gdb.<br/>
Last time I looked (approx. 1.5 years ago) the main missing pieces were:</p>

<ol>
<li> Use of physical addresses (described above)</li>
<li> Support for multiple virtual address spaces (for different process contexts)</li>
<li> Ability to read compressed kdump files</li>
<li> Ability to use 64-bit files on 32-bit platforms (to handle PAE)</li>
</ol>


<p>HTH,<br/>
Petr Tesarik</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb 没有debug信息step单步调试]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step/"/>
<updated>2014-08-28T16:21:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-step</id>
<content type="html"><![CDATA[<pre><code>step &lt;count&gt;
</code></pre>

<p>单步跟踪，如果有函数调用，他会进入该函数。进入函数的前提是，此函数被编译有 debug信息。很像 VC等工具中的 step in。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。
<code>
next &lt;count&gt;
</code>
同样单步跟踪，如果有函数调用，他不会进入该函数。很像 VC等工具中的 step over。后面可以加 count也可以不加，不加表示一条条地执行，加表示执行后面的 count条指令，然后再停住。
```
    set step-mode [on/off]
    set step-mode on
    打开 step-mode模式，于是，在进行单步跟踪时，程序不会因为没有 debug信息而不停住。这个参数有很利于查看机器码。</p>

<pre><code>set step-mod off
关闭 step-mode模式。
</code></pre>

<p>```</p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb x命令语法]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x/"/>
<updated>2014-08-28T16:17:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-x</id>
<content type="html"><![CDATA[<h4>可以使用examine命令(简写是x)来查看内存地址中的值。x命 令的语 法如下所示：</h4>

<pre><code>    x/&lt;n/f/u&gt; &lt;addr&gt;  
</code></pre>

<p>n、f、u是可选的参数。<br/>
n是一个正整数，表示需要显示的内存单元的个数， 也就是说从当前地址向后显示几个 内存单元的内容，一个内存单元的大小由后面的u定义。<br/>
f 表示显示的格式，参见下面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。<br/>
u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字 节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。<br/>
<addr>表示一个内存地址。</p>

<h5>注意：严格区分n 和u的关系，n表示单元个数，u表示每个单元的大小。</h5>

<p>n/f/u三个参数可以一起使用。例如：<br/>
命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示输出三个单位，u表示按十六进制显示。</p>

<h4>输出格式</h4>

<p>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量 的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：
<code>
x 按十六进制格式显示变量。
d 按十进制格式显示变量。
u 按十六进制格式显示无符号整型。
o 按八进制格式显示变量。
t 按二进制格式显示变量。
a 按十六进制格式显示变量。
c 按字符格式显示变量。
f 按浮点数格式显示变量。
</code>
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
t(binary), f(float), a(address), i(instruction), c(char) and s(string).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.</p>

<p>Defaults for format and size letters are those previously used.
Default count is 1. Default address is following last thing printed
with this command or &ldquo;print&rdquo;.
<code>
(gdb) p f1
$4 = 8.25
(gdb) p f2
$5 = 125.5
(gdb) x/x &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f1
0xbffff380:   0x41040000
(gdb) x/xw &amp;f2
0xbffff384:   0x42fb0000
(gdb) x/2xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000
(gdb) x/4xw &amp;f1
0xbffff380:   0x41040000   0x42fb0000   0xbffff408   0x00bcba66
(gdb) x/tw &amp;f1
0xbffff380:   01000001000001000000000000000000
(gdb) x/2tw &amp;f1
0xbffff380:   01000001000001000000000000000000   01000010111110110000000000000000
(gdb) p record
$10 = {12, 76, 48, 62, 94, 17, 32, 37, 52, 69}
(gdb) p &amp;record
$11 = (int (*)[10]) 0x8049740
(gdb) x/4uw 0x8049740
0x8049740 &lt;record&gt;:   12   76   48   62
(gdb) x/6ow 0x8049740
0x8049740 &lt;record&gt;:   014   0114   060   076
0x8049750 &lt;record+16&gt;:   0136   021
</code></p>
]]></content>
</entry>

<entry>
<title type="html"><![CDATA[gdb print 语法]]></title>
<link href="http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print/"/>
<updated>2014-08-28T16:13:00+08:00</updated>
<id>http://abcdxyzk.github.io/blog/2014/08/28/debug-gdb-print</id>
<content type="html"><![CDATA[<pre><code>print &lt;expr&gt;
print /&lt;f&gt; &lt;expr&gt;
</code></pre>

<p>&lt;expr>是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），<f>是输出的格式，比如，假如要把表达式按16进制的格式输出，那么就是/x。</p>

<h4>一、表达式</h4>

<p>print和许多GDB的命令一样，可以接受一个表达式，GDB会根据当前的程序运行的数据来计算这个表达式，既然是表达式，那么就可以是当前程序运行中的const常量、变量、函数等内容。可惜的是GDB不能使用你在程序中所定义的宏。</p>

<p>表达式的语法应该是当前所调试的语言的语法，由于C/C++是一种大众型的语言，所以，本文中的例子都是关于C/C++的。（而关于用GDB调试其它语言的章节，我将在后面介绍）</p>

<p>在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。<br/>
<code>@</code>是一个和数组有关的操作符，在后面会有更具体的说明。<br/>
<code>::</code>指定一个在文件或是一个函数中的变量。<br/>
<code>{&lt;type&gt;} &lt;addr&gt;</code><span style="color:red">表示一个指向内存地址<addr>的类型为type的一个对象。 p {char*} 0xffffffff12345678</span></p>

<h4>二、程序变量</h4>

<p>在GDB中，你可以随时查看以下三种变量的值：<br/>
1、全局变量（所有文件可见的）<br/>
2、静态全局变量（当前文件可见的）<br/>
3、局部变量（当前Scope可见的）<br/>
假如你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，假如一个全局变量和一个函数中的局部变量同名时，假 如当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。假如此时你想查看全局变量的值时，你可以使用“::”操作符：
<code>
file::variable
function::variable
</code>
可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：
<code>
gdb) p 'f2.c'::x
</code>
当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::” 是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。</p>

<p>另外，需要注重的是，假如你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调 试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。一般来说，几乎所 有的编译器都支持编译优化的开关，例如，GNU的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。关于编译器的参数，还请查看 编译器的使用说明文档。</p>

<h4>三、数组</h4>

<p>有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：
<code>
int *array = (int *) malloc (len * sizeof (int));
</code>
于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：
<code>
p *array@len
</code>
@的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：
<code>
(gdb) p *array@len
$1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}
</code>
假如是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。</p>
]]></content>
</entry>

</feed>
